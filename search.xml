<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>10个简单步骤，优化加速Ubuntu系统性能</title>
    <url>/2018/09/06/10%E4%B8%AA%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4%EF%BC%8C%E4%BC%98%E5%8C%96%E5%8A%A0%E9%80%9Fubuntu%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD/</url>
    <content><![CDATA[<p><img src="https://www.jarods.org/wp-content/uploads/2018/09/ubuntu-1.jpg"></p>
<p>如果您一直观注 Ubuntu 系统性能，可能已经注意到，系统会随着使用时间的推移而逐渐变慢。这本身也不算是什么严重问题，无论你使用 Windows、Linux 或是 macOS 系统，也都是如此。</p>
<p>本文中系统极客将向大家汇总 10 个简单步骤，完成这些任务您的 Ubuntu 机器就可以再次以最佳速度运行，并为您提供所需的高效系统性能。</p>
<h2 id="1-限制「启动应用程序」"><a href="#1-限制「启动应用程序」" class="headerlink" title="1.限制「启动应用程序」"></a>1.限制「启动应用程序」</h2><p>很多随 Ubuntu 系统自动启动的应用程序其实都没有太大的必要，反而会拖慢系统的启动和登录时间。您可以搜索「启动应用程序」来管理「启动应用程序首选项」。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/09/speed-up-ubuntu-linux-top-10-2.jpg"></p>
<h2 id="2-减少Grub加载时间"><a href="#2-减少Grub加载时间" class="headerlink" title="2.减少Grub加载时间"></a>2.减少Grub加载时间</h2><p>当您的 Ubuntu 系统启动时，会显示一个加载选项，让您可以进入双系统启动或进入恢复模式。这个 Grub 加载选单默认会等待 10 秒种才能通过或需要用户手动按「回车」键才能跳过。</p>
<p>其实，我们可以将 Grub 等待时间设置到 10 秒以下来让机器启动更快，例如可以通过以下命令来将GRUB_TIMEOUT&#x3D;10改成GRUB_TIMEOUT&#x3D;2，这样就只需等待 2 秒：</p>
<ol>
<li>sudo gedit &#x2F;etc&#x2F;default&#x2F;grub</li>
<li>sudo update-grub</li>
</ol>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/09/speed-up-ubuntu-linux-top-10-3.jpg"></p>
<blockquote>
<p>将 GRUB 等待超时设置得过短将无法选择要引导的（多个）操作系统。</p>
</blockquote>
<h2 id="3-用TLP降低发热"><a href="#3-用TLP降低发热" class="headerlink" title="3. 用TLP降低发热"></a>3. 用TLP降低发热</h2><p>TLP 是一个有助于「系统冷却」的应用程序，可以让 Ubuntu 运行得更快、更顺畅。安装完成后，运行命令启动它即可，而无需任何配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:linrunner/tlp</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install tlp tlp-rdw</span><br><span class="line">sudo tlp start</span><br></pre></td></tr></table></figure>

<p><img src="https://www.jarods.org/wp-content/uploads/2018/09/speed-up-ubuntu-linux-top-10-4.jpg"></p>
<blockquote>
<p>您还可以<a href="https://www.sysgeek.cn/improve-battery-life-ubuntu/">使用 TLP 延长 Ubuntu 笔记本电池续航时间</a>。</p>
</blockquote>
<h2 id="4-设置软件更新镜像"><a href="#4-设置软件更新镜像" class="headerlink" title="4. 设置软件更新镜像"></a>4. 设置软件更新镜像</h2><p>无论您的网速是否畅快，确保 Ubuntu 从最佳服务器获取更新始终是一个好习惯。</p>
<p>您可以搜索打开「软件和更新」——选择「Ubuntu 软件」选项卡——在「下载自…」中选择一个最适合您的软件源。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/09/speed-up-ubuntu-linux-top-10-5.jpg"></p>
<blockquote>
<p>国内用户建议选择「阿里云（Aliyun）」或「中国科学技术大学（USTC）」的更新源镜像。</p>
</blockquote>
<h2 id="5-使用apt-fast取代apt-get"><a href="#5-使用apt-fast取代apt-get" class="headerlink" title="5.使用apt-fast取代apt-get"></a>5.使用apt-fast取代apt-get</h2><p>如果您是 Ubuntu 系统的老鸟用户，应该经常使用apt-get命令。如果您希望下载速度更快，可以安装apt-fast并在使用apt-get命令的地方用apt-fast来替换。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:apt-fast/stable</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install apt-fast</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://www.sysgeek.cn/apt-vs-apt-get/">Linux 中 apt 与 apt-get 命令的区别与解释</a></p>
</blockquote>
<h2 id="6-清理Ubuntu"><a href="#6-清理Ubuntu" class="headerlink" title="6.清理Ubuntu"></a>6.清理Ubuntu</h2><p>在 Ubuntu 安装之后的带个生命周期中，您一定安装和卸载过很多应用程序。这些使用过的软件都会在系统中留下缓存、应用程序依赖和历史索引等等，积累过多就会限制 Ubuntu 计算机的性能。</p>
<p>考虑到这一点，保持您的 PC 清洁就是管理员的一项重要职责。如果您想以最快速、最简单的方式来清理 Ubuntu，可以执行如下两条命令：</p>
<ol>
<li>sudo apt clean</li>
<li>sudo apt autoremove</li>
</ol>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/09/speed-up-ubuntu-linux-top-10-6.jpg"></p>
<h2 id="7-启用专有驱动程序"><a href="#7-启用专有驱动程序" class="headerlink" title="7. 启用专有驱动程序"></a>7. 启用专有驱动程序</h2><p>在 Ubuntu 系统中为特殊硬件安装和启用专有驱动程序可以大大提高 Ubuntu 计算机的性能，您可以搜索打开「软件和更新」——在「附加驱动」选项卡中为显卡等硬件启用专有驱动程序。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/09/speed-up-ubuntu-linux-top-10-7.jpg"></p>
<blockquote>
<p><a href="https://www.sysgeek.cn/ubuntu-install-nvidia-drivers-ppa/">通过 PPA 为 Ubuntu 安装 Nvidia 驱动</a></p>
</blockquote>
<h2 id="8-安装Preload"><a href="#8-安装Preload" class="headerlink" title="8.安装Preload"></a>8.安装Preload</h2><p>Preload（预加载）会在后台工作，以「研究」您如何使用计算机并增强计算机的应用程序处理能力。安装好 Preload 后，您使用频率最高的应用程序的加载速度就会明显快于不经常使用的应用程序。</p>
<p>sudo apt install preload</p>
<h2 id="9-使用轻量级的桌面环境"><a href="#9-使用轻量级的桌面环境" class="headerlink" title="9.使用轻量级的桌面环境"></a>9.使用轻量级的桌面环境</h2><p>Ubuntu 系统可以与许多 DE（桌面环境）兼容，让桌面拥有不同的风格来吸引各种用户。目前可以让您 Ubuntu 性能显着提升的轻量级桌面环境就有 Xfce 和 LXDE。</p>
<blockquote>
<p><a href="https://www.sysgeek.cn/linux-desktop-environments-inventory/">7 款应用最广泛的 Linux 桌面环境盘点</a></p>
</blockquote>
<h2 id="10-移除Apt-Get的翻译包"><a href="#10-移除Apt-Get的翻译包" class="headerlink" title="10. 移除Apt-Get的翻译包"></a>10. 移除Apt-Get的翻译包</h2><p>如果你在sudo apt-get update之后仔细观注过「终端」输出，定然会在其中发现一些与语言翻译有关的行。如果您在服务器上只使用英文，就无需翻译包数据库了。</p>
<p>sudo gedit &#x2F;etc&#x2F;apt&#x2F;apt.conf.d&#x2F;00aptitude</p>
<p>将这行代码附加到文件末尾：</p>
<p>Acquire::Languages “none”;</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/09/speed-up-ubuntu-linux-top-10-8.jpg"></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>20步打造最安全的Nginx Web服务器</title>
    <url>/2018/11/05/20%E6%AD%A5%E6%89%93%E9%80%A0%E6%9C%80%E5%AE%89%E5%85%A8%E7%9A%84nginx-web%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p> Nginx是一个轻量级的，高性能的Web服务器以及反向代理和邮箱 (IMAP&#x2F;POP3)代理服务器。它运行在UNIX,GNU &#x2F;linux,BSD 各种版本，Mac OS X,Solaris和Windows。根据调查统计，6%的网站使用Nginx Web服务器。Nginx是少数能处理C10K问题的服务器之一。跟传统的服务器不同，Nginx不依赖线程来处理请求。相反，它使用了更多的可扩展的事 件驱动（异步）架构。Nginx为一些高流量的网站提供动力，比如WordPress,人人网，腾讯，网易等。这篇文章主要是介绍如何提高运行在 Linux或UNIX系统的Nginx Web服务器的安全性。</p>
<p><strong>默认配置文件和Nginx端口</strong></p>
<ul>
<li>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F; – Nginx配置文件目录，&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf是主配置文件</li>
<li>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F; – 默认网站文件位置</li>
<li>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F; – 默认日志文件位置</li>
<li>Nginx HTTP默认端口 : TCP 80</li>
<li>Nginx HTTPS默认端口: TCP 443</li>
</ul>
<p>你可以使用以下命令来测试Nginx配置文件准确性。</p>
<p>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -t</p>
<p>将会输出： the configuration file &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf syntax is ok configuration file &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf test is successful 执行以下命令来重新加载配置文件。</p>
<p>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</p>
<p>执行以下命令来停止服务器。</p>
<p>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s stop</p>
<h3 id="一、配置SELinux"><a href="#一、配置SELinux" class="headerlink" title="一、配置SELinux"></a>一、配置SELinux</h3><p><strong>注意：对于云服务器 ECS，参阅 <a href="https://help.aliyun.com/document_detail/25430.html"><em>ECS 使用须知</em></a> ，基于兼容性、稳定性考虑，请勿开启 SELinux。</strong></p>
<p>安全增强型 Linux（SELinux）是一个Linux内核的功能，它提供支持访问控制的安全政策保护机制。它可以防御大部分攻击。下面我们来看如何启动基于centos&#x2F;RHEL系统的SELinux。</p>
<p><strong>安装SELinux</strong></p>
<p>rpm -qa grep selinux</p>
<p>libselinux-1.23.10-2 selinux-policy-targeted-1.23.16-6 如果没有返回任何结果，代表没有安装 SELinux，如果返回了类似上面的结果，则说明系统安装了 SELinux。</p>
<p><strong>布什值锁定</strong> 运行命令getsebool -a来锁定系统。</p>
<p>getsebool -a less</p>
<p>getsebool -a grep off</p>
<p>getsebool -a grep o</p>
<h3 id="二、通过分区挂载允许最少特权"><a href="#二、通过分区挂载允许最少特权" class="headerlink" title="二、通过分区挂载允许最少特权"></a>二、通过分区挂载允许最少特权</h3><p>服务器上的网页&#x2F;html&#x2F;php文件单独分区。例如，新建一个分区&#x2F;dev&#x2F;sda5(第一逻辑分区)，并且挂载在&#x2F;nginx。确保 &#x2F;nginx是以noexec, nodev and nosetuid的权限挂载。以下是我的&#x2F;etc&#x2F;fstab的挂载&#x2F;nginx的信息： LABEL&#x3D;&#x2F;nginx &#x2F;nginx ext3 defaults,nosuid,noexec,nodev 1 2 注意：你需要使用fdisk和mkfs.ext3命令创建一个新分区。</p>
<h3 id="三、配置-x2F-etc-x2F-sysctl-conf强化Linux安全"><a href="#三、配置-x2F-etc-x2F-sysctl-conf强化Linux安全" class="headerlink" title="三、配置&#x2F;etc&#x2F;sysctl.conf强化Linux安全"></a>三、配置&#x2F;etc&#x2F;sysctl.conf强化Linux安全</h3><p>你可以通过编辑&#x2F;etc&#x2F;sysctl.conf来控制和配置Linux内核、网络设置。</p>
<p># Avoid a smurf attack</p>
<p>net.ipv4.icmp_echo_ignore_broadcasts &#x3D; 1</p>
<p># Turn on protection for bad icmp error messages</p>
<p>net.ipv4.icmp_ignore_bogus_error_responses &#x3D; 1</p>
<p># Turn on syncookies for SYN flood attack protection</p>
<p>net.ipv4.tcp_syncookies &#x3D; 1</p>
<p># Turn on and log spoofed, source routed, and redirect packets</p>
<p>net.ipv4.conf.all.log_martians &#x3D; 1</p>
<p>net.ipv4.conf.default.log_martians &#x3D; 1</p>
<p># No source routed packets here</p>
<p>net.ipv4.conf.all.accept_source_route &#x3D; 0</p>
<p>net.ipv4.conf.default.accept_source_route &#x3D; 0</p>
<p># Turn on reverse path filtering</p>
<p>net.ipv4.conf.all.rp_filter &#x3D; 1</p>
<p>net.ipv4.conf.default.rp_filter &#x3D; 1</p>
<p># Make sure no one can alter the routing tables</p>
<p>net.ipv4.conf.all.accept_redirects &#x3D; 0</p>
<p>net.ipv4.conf.default.accept_redirects &#x3D; 0</p>
<p>net.ipv4.conf.all.secure_redirects &#x3D; 0</p>
<p>net.ipv4.conf.default.secure_redirects &#x3D; 0</p>
<p># Don’t act as a router</p>
<p>net.ipv4.ip_forward &#x3D; 0</p>
<p>net.ipv4.conf.all.send_redirects &#x3D; 0</p>
<p>net.ipv4.conf.default.send_redirects &#x3D; 0</p>
<p># Turn on execshild</p>
<p>kernel.exec-shield &#x3D; 1</p>
<p>kernel.randomize_va_space &#x3D; 1</p>
<p># Tuen IPv6</p>
<p>net.ipv6.conf.default.router_solicitations &#x3D; 0</p>
<p>net.ipv6.conf.default.accept_ra_rtr_pref &#x3D; 0</p>
<p>net.ipv6.conf.default.accept_ra_pinfo &#x3D; 0</p>
<p>net.ipv6.conf.default.accept_ra_defrtr &#x3D; 0</p>
<p>net.ipv6.conf.default.autoconf &#x3D; 0</p>
<p>net.ipv6.conf.default.dad_transmits &#x3D; 0</p>
<p>net.ipv6.conf.default.max_addresses &#x3D; 1</p>
<p># Optimization for port usefor LBs</p>
<p># Increase system file descriptor limit</p>
<p>fs.file-max &#x3D; 65535</p>
<p># Allow for more PIDs (to reduce rollover problems); may break some programs 32768</p>
<p>kernel.pid_max &#x3D; 65536</p>
<p># Increase system IP port limits</p>
<p>net.ipv4.ip_local_port_range &#x3D; 2000 65000</p>
<p># Increase TCP max buffer size setable using setsockopt()</p>
<p>net.ipv4.tcp_rmem &#x3D; 4096 87380 8388608</p>
<p>net.ipv4.tcp_wmem &#x3D; 4096 87380 8388608</p>
<p># Increase Linux auto tuning TCP buffer limits</p>
<p># min, default, and max number of bytes to use</p>
<p># set max to at least 4MB, or higher if you use very high BDP paths</p>
<p># Tcp Windows etc</p>
<p>net.core.rmem_max &#x3D; 8388608</p>
<p>net.core.wmem_max &#x3D; 8388608</p>
<p>net.core.netdev_max_backlog &#x3D; 5000</p>
<p>net.ipv4.tcp_window_scaling &#x3D; 1</p>
<h3 id="四、删除所有不需要的Nginx模块"><a href="#四、删除所有不需要的Nginx模块" class="headerlink" title="四、删除所有不需要的Nginx模块"></a>四、删除所有不需要的Nginx模块</h3><p>你需要直接通过编译Nginx源代码使模块数量最少化。通过限制只允许web服务器访问模块把风险降到最低。你可以只配置安装nginx你所需要的模块。例如，禁用SSL和autoindex模块你可以执行以下命令：</p>
<p>.&#x2F;configure –without-http_autoindex_module –without-http_ssi_module</p>
<p>make</p>
<p>make install</p>
<p>通过以下命令来查看当编译nginx服务器时哪个模块能开户或关闭：</p>
<p>.&#x2F;configure –help less</p>
<p>禁用你用不到的nginx模块。 （可选项）更改nginx版本名称。 编辑文件&#x2F;http&#x2F;ngx_http_header_filter_module.c：</p>
<p>vi +48 src&#x2F;http&#x2F;ngx_http_header_filter_module.c</p>
<p>找到行：</p>
<p>static char ngx_http_server_string[] &#x3D; “Server: nginx” CRLF;</p>
<p>static char ngx_http_server_full_string[] &#x3D; “Server: ” NGINX_VER CRLF;</p>
<p>按照以下行修改：</p>
<p>static char ngx_http_server_string[] &#x3D; “Server: Ninja Web Server” CRLF;</p>
<p>static char ngx_http_server_full_string[] &#x3D; “Server: Ninja Web Server” CRLF;</p>
<p>保存并关闭文件。现在你可以编辑服务器了。增加以下代码到nginx.conf文件来关闭nginx版本号的显示。</p>
<p>server_tokens off</p>
<h3 id="五、使用mod-security-只适合后端Apache服务器"><a href="#五、使用mod-security-只适合后端Apache服务器" class="headerlink" title="五、使用mod_security(只适合后端Apache服务器)"></a>五、使用mod_security(只适合后端Apache服务器)</h3><p>mod_security为Apache提供一个应用程序级的防火墙。为后端Apache Web服务器安装mod_security，这会阻止很多注入式攻击。</p>
<h3 id="六、安装SELinux策略以强化Nginx-Web服务器"><a href="#六、安装SELinux策略以强化Nginx-Web服务器" class="headerlink" title="六、安装SELinux策略以强化Nginx Web服务器"></a>六、安装SELinux策略以强化Nginx Web服务器</h3><p>默认的SELinux不会保护Nginx Web服务器，但是你可以安装和编译保护软件。 1、安装编译SELinux所需环境支持</p>
<p>yum -y install selinux-policy-targeted selinux-policy-devel</p>
<p>2、下载SELinux策略以强化Nginx Web服务器。</p>
<p>cd &#x2F;opt</p>
<p>wget ‘<a href="http://downloads.sourceforge.net/project/selinuxnginx/se-ngix_1_0_10.tar.gz?use_mirror=nchc&rsquo">http://downloads.sourceforge.net/project/selinuxnginx/se-ngix_1_0_10.tar.gz?use_mirror&#x3D;nchc&amp;rsquo</a>;</p>
<p>3、解压文件</p>
<p>tar -zxvf se-ngix_1_0_10.tar.gz</p>
<p>4、编译文件</p>
<p>cd se-ngix_1_0_10&#x2F;nginx</p>
<p>make</p>
<p>将会输出如下： Compiling targeted nginx module &#x2F;usr&#x2F;bin&#x2F;checkmodule: loading policy configuration from tmp&#x2F;nginx.tmp &#x2F;usr&#x2F;bin&#x2F;checkmodule: policy configuration loaded &#x2F;usr&#x2F;bin&#x2F;checkmodule: writing binary representation (version 6) to tmp&#x2F;nginx.mod Creating targeted nginx.pp policy package</p>
<p>rm tmp&#x2F;nginx.mod.fc tmp&#x2F;nginx.mod</p>
<p>5、安装生成的nginx.pp SELinux模块：</p>
<p>&#x2F;usr&#x2F;sbin&#x2F;semodule -i nginx.pp</p>
<h3 id="七、基于Iptables防火墙的限制"><a href="#七、基于Iptables防火墙的限制" class="headerlink" title="七、基于Iptables防火墙的限制"></a>七、基于Iptables防火墙的限制</h3><p>下面的防火墙脚本阻止任何除了允许：</p>
<ul>
<li>来自HTTP(TCP端口80)的请求</li>
<li>来自ICMP ping的请求</li>
<li>ntp(端口123)的请求输出</li>
<li>smtp(TCP端口25)的请求输出</li>
</ul>
<p>#!&#x2F;bin&#x2F;bash</p>
<p>IPT&#x3D;”&#x2F;sbin&#x2F;iptables”</p>
<p>#### IPS ######</p>
<p># Get server public ip</p>
<p>SERVER_IP&#x3D;$(ifconfig eth0 grep ‘inet addr:’ awk -F’inet addr:’ ‘{ print $2}’ awk ‘{ print $1}’)</p>
<p>LB1_IP&#x3D;”204.54.1.1″</p>
<p>LB2_IP&#x3D;”204.54.1.2″</p>
<p># Do some smart logic so that we can use damm script on LB2 too</p>
<p>OTHER_LB&#x3D;””</p>
<p>SERVER_IP&#x3D;””</p>
<p>[[ “$SERVER_IP” &#x3D;&#x3D; “$LB1_IP” ]] &amp;&amp; OTHER_LB&#x3D;”$LB2_IP” OTHER_LB&#x3D;”$LB1_IP”</p>
<p>[[ “$OTHER_LB” &#x3D;&#x3D; “$LB2_IP” ]] &amp;&amp; OPP_LB&#x3D;”$LB1_IP” OPP_LB&#x3D;”$LB2_IP”</p>
<p>### IPs ###</p>
<p>PUB_SSH_ONLY&#x3D;”122.xx.yy.zz&#x2F;29″</p>
<p>#### FILES #####</p>
<p>BLOCKED_IP_TDB&#x3D;&#x2F;root&#x2F;.fw&#x2F;blocked.ip.txt</p>
<p>SPOOFIP&#x3D;”127.0.0.0&#x2F;8 192.168.0.0&#x2F;16 172.16.0.0&#x2F;12 10.0.0.0&#x2F;8 169.254.0.0&#x2F;16 0.0.0.0&#x2F;8 240.0.0.0&#x2F;4 255.255.255.255&#x2F;32 168.254.0.0&#x2F;16 224.0.0.0&#x2F;4 240.0.0.0&#x2F;5 248.0.0.0&#x2F;5 192.0.2.0&#x2F;24″</p>
<p>BADIPS&#x3D;$( [[ -f ${BLOCKED_IP_TDB} ]] &amp;&amp; egrep -v “^#^$” ${BLOCKED_IP_TDB})</p>
<p>### Interfaces ###</p>
<p>PUB_IF&#x3D;”eth0″   # public interface</p>
<p>LO_IF&#x3D;”lo”      # loopback</p>
<p>VPN_IF&#x3D;”eth1″   # vpn &#x2F; private net</p>
<p>### start firewall ###</p>
<p>echo “Setting LB1 $(hostname) Firewall…”</p>
<p># DROP and close everything</p>
<p>$IPT -P INPUT DROP</p>
<p>$IPT -P OUTPUT DROP</p>
<p>$IPT -P FORWARD DROP</p>
<p># Unlimited lo access</p>
<p>$IPT -A INPUT -i ${LO_IF} -j ACCEPT</p>
<p>$IPT -A OUTPUT -o ${LO_IF} -j ACCEPT</p>
<p># Unlimited vpn &#x2F; pnet access</p>
<p>$IPT -A INPUT -i ${VPN_IF} -j ACCEPT</p>
<p>$IPT -A OUTPUT -o ${VPN_IF} -j ACCEPT</p>
<p># Drop sync</p>
<p>$IPT -A INPUT -i ${PUB_IF} -p tcp ! –syn -m state –state NEW -j DROP</p>
<p># Drop Fragments</p>
<p>$IPT -A INPUT -i ${PUB_IF} -f -j DROP</p>
<p>$IPT  -A INPUT -i ${PUB_IF} -p tcp –tcp-flags ALL FIN,URG,PSH -j DROP</p>
<p>$IPT  -A INPUT -i ${PUB_IF} -p tcp –tcp-flags ALL ALL -j DROP</p>
<p># Drop NULL packets</p>
<p>$IPT  -A INPUT -i ${PUB_IF} -p tcp –tcp-flags ALL NONE -m limit –limit 5&#x2F;m –limit-burst 7 -j LOG –log-prefix ” NULL Packets “</p>
<p>$IPT  -A INPUT -i ${PUB_IF} -p tcp –tcp-flags ALL NONE -j DROP</p>
<p>$IPT  -A INPUT -i ${PUB_IF} -p tcp –tcp-flags SYN,RST SYN,RST -j DROP</p>
<p># Drop XMAS</p>
<p>$IPT  -A INPUT -i ${PUB_IF} -p tcp –tcp-flags SYN,FIN SYN,FIN -m limit –limit 5&#x2F;m –limit-burst 7 -j LOG –log-prefix ” XMAS Packets “</p>
<p>$IPT  -A INPUT -i ${PUB_IF} -p tcp –tcp-flags SYN,FIN SYN,FIN -j DROP</p>
<p># Drop FIN packet scans</p>
<p>$IPT  -A INPUT -i ${PUB_IF} -p tcp –tcp-flags FIN,ACK FIN -m limit –limit 5&#x2F;m –limit-burst 7 -j LOG –log-prefix ” Fin Packets Scan “</p>
<p>$IPT  -A INPUT -i ${PUB_IF} -p tcp –tcp-flags FIN,ACK FIN -j DROP</p>
<p>$IPT  -A INPUT -i ${PUB_IF} -p tcp –tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP</p>
<p># Log and get rid of broadcast &#x2F; multicast and invalid</p>
<p>$IPT  -A INPUT -i ${PUB_IF} -m pkttype –pkt-type broadcast -j LOG –log-prefix ” Broadcast “</p>
<p>$IPT  -A INPUT -i ${PUB_IF} -m pkttype –pkt-type broadcast -j DROP</p>
<p>$IPT  -A INPUT -i ${PUB_IF} -m pkttype –pkt-type multicast -j LOG –log-prefix ” Multicast “</p>
<p>$IPT  -A INPUT -i ${PUB_IF} -m pkttype –pkt-type multicast -j DROP</p>
<p>$IPT  -A INPUT -i ${PUB_IF} -m state –state INVALID -j LOG –log-prefix ” Invalid “</p>
<p>$IPT  -A INPUT -i ${PUB_IF} -m state –state INVALID -j DROP</p>
<p># Log and block spoofed ips</p>
<p>$IPT -N spooflist</p>
<p>for ipblock in $SPOOFIP</p>
<p>do</p>
<p>$IPT -A spooflist -i ${PUB_IF} -s $ipblock -j LOG –log-prefix ” SPOOF List Block “</p>
<p>$IPT -A spooflist -i ${PUB_IF} -s $ipblock -j DROP</p>
<p>done</p>
<p>$IPT -I INPUT -j spooflist</p>
<p>$IPT -I OUTPUT -j spooflist</p>
<p>$IPT -I FORWARD -j spooflist</p>
<p># Allow ssh only from selected public ips</p>
<p>for ip in ${PUB_SSH_ONLY}</p>
<p>do</p>
<p>$IPT -A INPUT -i ${PUB_IF} -s ${ip} -p tcp -d ${SERVER_IP} –destination-port 22 -j ACCEPT</p>
<p>$IPT -A OUTPUT -o ${PUB_IF} -d ${ip} -p tcp -s ${SERVER_IP} –sport 22 -j ACCEPT</p>
<p>done</p>
<p># allow incoming ICMP ping pong stuff</p>
<p>$IPT -A INPUT -i ${PUB_IF} -p icmp –icmp-type 8 -s 0&#x2F;0 -m state –state NEW,ESTABLISHED,RELATED -m limit –limit 30&#x2F;sec  -j ACCEPT</p>
<p>$IPT -A OUTPUT -o ${PUB_IF} -p icmp –icmp-type 0 -d 0&#x2F;0 -m state –state ESTABLISHED,RELATED -j ACCEPT</p>
<p># allow incoming HTTP port 80</p>
<p>$IPT -A INPUT -i ${PUB_IF} -p tcp -s 0&#x2F;0 –sport 1024:65535 –dport 80 -m state –state NEW,ESTABLISHED -j ACCEPT</p>
<p>$IPT -A OUTPUT -o ${PUB_IF} -p tcp –sport 80 -d 0&#x2F;0 –dport 1024:65535 -m state –state ESTABLISHED -j ACCEPT</p>
<p># allow outgoing ntp</p>
<p>$IPT -A OUTPUT -o ${PUB_IF} -p udp –dport 123 -m state –state NEW,ESTABLISHED -j ACCEPT</p>
<p>$IPT -A INPUT -i ${PUB_IF} -p udp –sport 123 -m state –state ESTABLISHED -j ACCEPT</p>
<p># allow outgoing smtp</p>
<p>$IPT -A OUTPUT -o ${PUB_IF} -p tcp –dport 25 -m state –state NEW,ESTABLISHED -j ACCEPT</p>
<p>$IPT -A INPUT -i ${PUB_IF} -p tcp –sport 25 -m state –state ESTABLISHED -j ACCEPT</p>
<p>### add your other rules here ####</p>
<p>#######################</p>
<p># drop and log everything else</p>
<p>$IPT -A INPUT -m limit –limit 5&#x2F;m –limit-burst 7 -j LOG –log-prefix ” DEFAULT DROP “</p>
<p>$IPT -A INPUT -j DROP</p>
<p>exit 0</p>
<h3 id="八、控制缓冲区溢出攻击"><a href="#八、控制缓冲区溢出攻击" class="headerlink" title="八、控制缓冲区溢出攻击"></a>八、控制缓冲区溢出攻击</h3><p>编辑nginx.conf，为所有客户端设置缓冲区的大小限制。</p>
<p>vi &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</p>
<p>编辑和设置所有客户端缓冲区的大小限制如下：</p>
<p>## Start: Size Limits &amp; Buffer Overflows ##</p>
<p>client_body_buffer_size  1K;</p>
<p>client_header_buffer_size 1k;</p>
<p>client_max_body_size 1k;</p>
<p>large_client_header_buffers 2 1k;</p>
<p>## END: Size Limits &amp; Buffer Overflows ##</p>
<p>解释： 1、client_body_buffer_size 1k-（默认8k或16k）这个指令可以指定连接请求实体的缓冲区大小。如果连接请求超过缓存区指定的值，那么这些请求实体的整体或部分将尝试写入一个临时文件。 2、client_header_buffer_size 1k-指令指定客户端请求头部的缓冲区大小。绝大多数情况下一个请求头不会大于1k，不过如果有来自于wap客户端的较大的cookie它可能会大于 1k，Nginx将分配给它一个更大的缓冲区，这个值可以在large_client_header_buffers里面设置。 3、client_max_body_size 1k-指令指定允许客户端连接的最大请求实体大小，它出现在请求头部的Content-Length字段。 如果请求大于指定的值，客户端将收到一个”Request Entity Too Large” (413)错误。记住，浏览器并不知道怎样显示这个错误。 4、large_client_header_buffers-指定客户端一些比较大的请求头使用的缓冲区数量和大小。请求字段不能大于一个缓冲区大小，如果客户端发送一个比较大的头，nginx将返回”Request URI too large” (414) 同样，请求的头部最长字段不能大于一个缓冲区，否则服务器将返回”Bad request” (400)。缓冲区只在需求时分开。默认一个缓冲区大小为操作系统中分页文件大小，通常是4k或8k，如果一个连接请求最终将状态转换为keep- alive，它所占用的缓冲区将被释放。 你还需要控制超时来提高服务器性能并与客户端断开连接。按照如下编辑：</p>
<p>## Start: Timeouts ##</p>
<p>client_body_timeout   10;</p>
<p>client_header_timeout 10;</p>
<p>keepalive_timeout     5 5;</p>
<p>send_timeout          10;</p>
<p>## End: Timeouts ##</p>
<p>1、client_body_timeout 10;-指令指定读取请求实体的超时时间。这里的超时是指一个请求实体没有进入读取步骤，如果连接超过这个时间而客户端没有任何响应，Nginx将返回一个”Request time out” (408)错误。 2、client_header_timeout 10;-指令指定读取客户端请求头标题的超时时间。这里的超时是指一个请求头没有进入读取步骤，如果连接超过这个时间而客户端没有任何响应，Nginx将返回一个”Request time out” (408)错误。 3、keepalive_timeout 5 5; – 参数的第一个值指定了客户端与服务器长连接的超时时间，超过这个时间，服务器将关闭连接。参数的第二个值（可选）指定了应答头中Keep-Alive: timeout&#x3D;time的time值，这个值可以使一些浏览器知道什么时候关闭连接，以便服务器不用重复关闭，如果不指定这个参数，nginx不会在应 答头中发送Keep-Alive信息。（但这并不是指怎样将一个连接“Keep-Alive”）参数的这两个值可以不相同。 4、send_timeout 10; 指令指定了发送给客户端应答后的超时时间，Timeout是指没有进入完整established状态，只完成了两次握手，如果超过这个时间客户端没有任何响应，nginx将关闭连接。</p>
<h3 id="九、控制并发连接"><a href="#九、控制并发连接" class="headerlink" title="九、控制并发连接"></a>九、控制并发连接</h3><p>你可以使用NginxHttpLimitZone模块来限制指定的会话或者一个IP地址的特殊情况下的并发连接。编辑nginx.conf:</p>
<ol>
<li>### Directive describes the zone, in which the session states are stored i.e. store in slimits. ###</li>
<li>### 1m can handle 32000 sessions with 32 bytes&#x2F;session, set to 5m x 32000 session ###</li>
<li>limit_zone slimits $binary_remote_addr 5m;</li>
<li>### Control maximum number of simultaneous connections for one session i.e. ###</li>
<li>### restricts the amount of connections from a single ip address ###</li>
<li>limit_conn slimits 5;</li>
</ol>
<p>上面表示限制每个远程IP地址的客户端同时打开连接不能超过5个。</p>
<h3 id="十、只允许我们的域名的访问"><a href="#十、只允许我们的域名的访问" class="headerlink" title="十、只允许我们的域名的访问"></a>十、只允许我们的域名的访问</h3><p>如果机器人只是随机扫描服务器的所有域名，那拒绝这个请求。你必须允许配置的虚拟域或反向代理请求。你不必使用IP地址来拒绝。</p>
<p>## Only requests to our Host are allowed i.e. nixcraft.in, images.nixcraft.in and <a href="http://www.nixcraft.in/">www.nixcraft.in</a></p>
<p>if ($host !~ ^(nixcraft.in<a href="http://www.nixcraft.inimages.nixcraft.in)$/">www.nixcraft.inimages.nixcraft.in)$</a> ) {</p>
<p>return 444;</p>
<p>}</p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="十一、限制可用的请求方法"><a href="#十一、限制可用的请求方法" class="headerlink" title="十一、限制可用的请求方法"></a>十一、限制可用的请求方法</h3><p>GET和POST是互联网上最常用的方法。 Web服务器的方法被定义在RFC 2616。如果Web服务器不要求启用所有可用的方法，它们应该被禁用。下面的指令将过滤只允许GET，HEAD和POST方法：</p>
<p>## Only allow these request methods ##</p>
<p>if ($request_method !~ ^(GETHEADPOST)$ ) {</p>
<p>return 444;</p>
<p>}</p>
<p>## Do not accept DELETE, SEARCH and other methods ##</p>
<p>更多关于HTTP方法的介绍</p>
<ul>
<li>GET方法是用来请求，如文件<a href="http://www.moqifei.com/index.php">http://www.moqifei.com/index.php</a>。</li>
<li>HEAD方法是一样的，除非该服务器的GET请求无法返回消息体。</li>
<li>POST方法可能涉及到很多东西，如储存或更新数据，或订购产品，或通过提交表单发送电子邮件。这通常是使用服务器端处理，如PHP，Perl和Python等脚本。如果你要上传的文件和在服务器处理数据，你必须使用这个方法。</li>
</ul>
<p> </p>
<h3 id="十二、如何拒绝一些User-Agents？"><a href="#十二、如何拒绝一些User-Agents？" class="headerlink" title="十二、如何拒绝一些User-Agents？"></a>十二、如何拒绝一些User-Agents？</h3><p>你可以很容易地阻止User-Agents,如扫描器，机器人以及滥用你服务器的垃圾邮件发送者。</p>
<p>## Block download agents ##</p>
<p>if ($http_user_agent ~* LWP::SimpleBBBikewget) {</p>
<p>return 403;</p>
<p>}</p>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><p>阻止Soso和有道的机器人：</p>
<p>## Block some robots ##</p>
<p>if ($http_user_agent ~* SosospiderYodaoBot) {</p>
<p>return 403;</p>
<p>}</p>
<h3 id="十三、如何防止图片盗链"><a href="#十三、如何防止图片盗链" class="headerlink" title="十三、如何防止图片盗链"></a>十三、如何防止图片盗链</h3><p>图片或HTML盗链的意思是有人直接用你网站的图片地址来显示在他的网站上。最终的结果，你需要支付额外的宽带费用。这通常是在论坛和博客。我强烈建议您封锁，并阻止盗链行为。</p>
<p># Stop deep linking or hot linking</p>
<p>location &#x2F;images&#x2F; {</p>
<p>valid_referers none blocked <a href="http://www.example.com/">www.example.com</a> example.com;</p>
<p>if ($invalid_referer) {</p>
<p>return   403;</p>
<p>}</p>
<p>}</p>
<p>例如：重定向并显示指定图片</p>
<p>valid_referers blocked <a href="http://www.example.com/">www.example.com</a> example.com;</p>
<p>if ($invalid_referer) {</p>
<p>rewrite ^&#x2F;images&#x2F;uploads.*.(gifjpgjpegpng)$ <a href="http://www.examples.com/banned.jpg">http://www.examples.com/banned.jpg</a> last</p>
<p>}</p>
<h3 id="十四、目录限制"><a href="#十四、目录限制" class="headerlink" title="十四、目录限制"></a>十四、目录限制</h3><p>你可以对指定的目录设置访问权限。所有的网站目录应该一一的配置，只允许必须的目录访问权限。 <strong>通过IP地址限制访问</strong> 你可以通过IP地址来限制访问目录&#x2F;admin&#x2F;:</p>
<p>location &#x2F;docs&#x2F; {</p>
<p>## block one workstation</p>
<p>deny    192.168.1.1;</p>
<p>## allow anyone in 192.168.1.0&#x2F;24</p>
<p>allow   192.168.1.0&#x2F;24;</p>
<p>## drop rest of the world</p>
<p>deny    all;</p>
<p>}</p>
<p><strong>通过密码保护目录</strong> 首先创建密码文件并增加“user”用户：</p>
<p>mkdir &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;.htpasswd&#x2F;</p>
<p>htpasswd -c &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;.htpasswd&#x2F;passwd user</p>
<p>编辑nginx.conf,加入需要保护的目录：</p>
<p>### Password Protect &#x2F;personal-images&#x2F; and &#x2F;delta&#x2F; directories ###</p>
<p>location ~ &#x2F;(personal-images&#x2F;.<em>delta&#x2F;.</em>) {</p>
<p>auth_basic  “Restricted”;</p>
<p>auth_basic_user_file   &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;.htpasswd&#x2F;passwd;</p>
<p>}</p>
<p>一旦密码文件已经生成，你也可以用以下的命令来增加允许访问的用户：</p>
<p>htpasswd -s &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;.htpasswd&#x2F;passwd userName</p>
<h3 id="十五、Nginx-SSL配置"><a href="#十五、Nginx-SSL配置" class="headerlink" title="十五、Nginx SSL配置"></a>十五、Nginx SSL配置</h3><p>HTTP是一个纯文本协议，它是开放的被动监测。你应该使用SSL来加密你的用户内容。 <strong>创建SSL证书</strong> 执行以下命令：</p>
<p>cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf</p>
<p>openssl genrsa -des3 -out server.key 1024</p>
<p>openssl req -new -key server.key -out server.csr</p>
<p>cp server.key server.key.org</p>
<p>openssl rsa -in server.key.org -out server.key</p>
<p>openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</p>
<p>编辑nginx.conf并按如下来更新：</p>
<p>server {</p>
<p>server_name example.com;</p>
<p>listen 443;</p>
<p>ssl on;</p>
<p>ssl_certificate &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;server.crt;</p>
<p>ssl_certificate_key &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;server.key;</p>
<p>access_log &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;ssl.access.log;</p>
<p>error_log &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;ssl.error.log;</p>
<p>}</p>
<p>重启nginx:</p>
<p>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</p>
<h3 id="十六、Nginx与PHP安全建议"><a href="#十六、Nginx与PHP安全建议" class="headerlink" title="十六、Nginx与PHP安全建议"></a>十六、Nginx与PHP安全建议</h3><p>PHP是流行的服务器端脚本语言之一。如下编辑&#x2F;etc&#x2F;php.ini文件：</p>
<p># Disallow dangerous functions</p>
<p>disable_functions &#x3D; phpinfo, system, mail, exec</p>
<p>## Try to limit resources  ##</p>
<p># Maximum execution time of each script, in seconds</p>
<p>max_execution_time &#x3D; 30</p>
<p># Maximum amount of time each script may spend parsing request data</p>
<p>max_input_time &#x3D; 60</p>
<p># Maximum amount of memory a script may consume (8MB)</p>
<p>memory_limit &#x3D; 8M</p>
<p># Maximum size of POST data that PHP will accept.</p>
<p>post_max_size &#x3D; 8M</p>
<p># Whether to allow HTTP file uploads.</p>
<p>file_uploads &#x3D; Off</p>
<p># Maximum allowed size for uploaded files.</p>
<p>upload_max_filesize &#x3D; 2M</p>
<p># Do not expose PHP error messages to external users</p>
<p>display_errors &#x3D; Off</p>
<p># Turn on safe mode</p>
<p>safe_mode &#x3D; On</p>
<p># Only allow access to executables in isolated directory</p>
<p>safe_mode_exec_dir &#x3D; php-required-executables-path</p>
<p># Limit external access to PHP environment</p>
<p>safe_mode_allowed_env_vars &#x3D; PHP_</p>
<p># Restrict PHP information leakage</p>
<p>expose_php &#x3D; Off</p>
<p># Log all errors</p>
<p>log_errors &#x3D; On</p>
<p># Do not register globals for input data</p>
<p>register_globals &#x3D; Off</p>
<p># Minimize allowable PHP post size</p>
<p>post_max_size &#x3D; 1K</p>
<p># Ensure PHP redirects appropriately</p>
<p>cgi.force_redirect &#x3D; 0</p>
<p># Disallow uploading unless necessary</p>
<p>file_uploads &#x3D; Off</p>
<p># Enable SQL safe mode</p>
<p>sql.safe_mode &#x3D; On</p>
<p># Avoid Opening remote files</p>
<p>allow_url_fopen &#x3D; Off</p>
<h3 id="十七、如果可能让Nginx运行在一个chroot监狱"><a href="#十七、如果可能让Nginx运行在一个chroot监狱" class="headerlink" title="十七、如果可能让Nginx运行在一个chroot监狱"></a>十七、如果可能让Nginx运行在一个chroot监狱</h3><p>把nginx放在一个chroot监狱以减小潜在的非法进入其它目录。你可以使用传统的与nginx一起安装的chroot。如果可能，那使用FreeBSD jails，Xen，OpenVZ虚拟化的容器概念。</p>
<h3 id="十八、在防火墙级限制每个IP的连接数"><a href="#十八、在防火墙级限制每个IP的连接数" class="headerlink" title="十八、在防火墙级限制每个IP的连接数"></a>十八、在防火墙级限制每个IP的连接数</h3><p>网络服务器必须监视连接和每秒连接限制。PF和Iptales都能够在进入你的nginx服务器之前阻止最终用户的访问。 Linux Iptables:限制每次Nginx连接数 下面的例子会阻止来自一个IP的60秒钟内超过15个连接端口80的连接数。</p>
<p>&#x2F;sbin&#x2F;iptables -A INPUT -p tcp –dport 80 -i eth0 -m state –state NEW -m recent –set</p>
<p>&#x2F;sbin&#x2F;iptables -A INPUT -p tcp –dport 80 -i eth0 -m state –state NEW -m recent –update –seconds 60  –hitcount 15 -j DROP</p>
<p>service iptables save</p>
<p>请根据你的具体情况来设置限制的连接数。</p>
<h3 id="十九：配置操作系统保护Web服务器"><a href="#十九：配置操作系统保护Web服务器" class="headerlink" title="十九：配置操作系统保护Web服务器"></a>十九：配置操作系统保护Web服务器</h3><p>像以上介绍的启动SELinux.正确设置&#x2F;nginx文档根目录的权限。Nginx以用户nginx运行。但是根目录（&#x2F;nginx或者&#x2F;usr &#x2F;local&#x2F;nginx&#x2F;html）不应该设置属于用户nginx或对用户nginx可写。找出错误权限的文件可以使用如下命令：</p>
<p>find &#x2F;nginx -user nginx</p>
<p>find &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html -user nginx</p>
<p>确保你更所有权为root或其它用户，一个典型的权限设置 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;</p>
<p>ls -l &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;</p>
<p>示例输出：</p>
<p>-rw-r–r– 1 root root 925 Jan  3 00:50 error4xx.html</p>
<p>-rw-r–r– 1 root root  52 Jan  3 10:00 error5xx.html</p>
<p>-rw-r–r– 1 root root 134 Jan  3 00:52 index.html</p>
<p>你必须删除由vi或其它文本编辑器创建的备份文件：</p>
<p>find &#x2F;nginx -name ‘.?<em>’ -not -name .ht</em> -or -name ‘_~’ -or -name ‘_.bak_’ -or -name ‘_.old*’</p>
<p>find &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F; -name ‘.?<em>’ -not -name .ht</em> -or -name ‘_~’ -or -name ‘_.bak_’ -or -name ‘_.old*’</p>
<p>通过find命令的-delete选项来删除这些文件。</p>
<h3 id="二十、限制Nginx连接传出"><a href="#二十、限制Nginx连接传出" class="headerlink" title="二十、限制Nginx连接传出"></a>二十、限制Nginx连接传出</h3><p>黑客会使用工具如wget下载你服务器本地的文件。使用Iptables从nginx用户来阻止传出连接。ipt_owner模块试图匹配本地产生的数据包的创建者。下面的例子中只允许user用户在外面使用80连接。</p>
<p>&#x2F;sbin&#x2F;iptables -A OUTPUT -o eth0 -m owner –uid-owner vivek -p tcp –dport 80 -m state –state NEW,ESTABLISHED  -j ACCEPT</p>
<p>通过以上的配置，你的nginx服务器已经非常安全了并可以发布网页。可是，你还应该根据你网站程序查找更多的安全设置资料。例如，wordpress或者第三方程序。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>AdGuard Home 自建 DNS 防污染、去广告教程</title>
    <url>/2022/09/02/adguard-home-%E8%87%AA%E5%BB%BA-dns-%E9%98%B2%E6%B1%A1%E6%9F%93%E3%80%81%E5%8E%BB%E5%B9%BF%E5%91%8A%E6%95%99%E7%A8%8B-2-%E4%BC%98%E5%8C%96%E5%A2%9E%E5%BC%BA%E8%AE%BE%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇教程来详细讲解如何正确的设置 Ad­Guard Home ，来更有效的防止 DNS 污染以及去广告。与其它 Ad­Guard Home 教程的只讲方法、不讲逻辑的胡乱设置不同，认真看完这篇教程你会收获大量的知识和启发。</p>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="常规设置"><a href="#常规设置" class="headerlink" title="常规设置"></a>常规设置</h3><p>文字介绍已经很好理解了，按需设置即可。重点是以下几个，如果你尚处于单身状态，那么就不要开启，否则会影响生理卫生知识的学习。</p>
<ul>
<li><strong>使用 AdGuard【家长控制】服务</strong>：如果家中有尚未成年的孩子，建议开启，屏蔽成人内容。</li>
<li><strong>强制安全搜索</strong>：在 Bing、Google、Yandex、YouTube 等网站上强制使用安全搜索，屏蔽 NSFW 内容。</li>
</ul>
<p> </p>
<p><img src="/2022/09/20201021160826.png"></p>
<p> </p>
<h3 id="DNS-设置"><a href="#DNS-设置" class="headerlink" title="DNS 设置"></a>DNS 设置</h3><p> </p>
<p><img src="/2022/09/20201020032250.png"></p>
<p> </p>
<h4 id="上游-DNS-服务器"><a href="#上游-DNS-服务器" class="headerlink" title="上游 DNS 服务器"></a>上游 DNS 服务器</h4><p><a href="https://p3terx.com/go/aHR0cHM6Ly9rYi5hZGd1YXJkLmNvbS96aC9nZW5lcmFsL2Rucy1wcm92aWRlcnM">AdGuard 文档</a>中给出了一些知名的 DNS 服务器供选择。</p>
<p>根据所在网络环境的不同推荐以下两组支持 ECS 功能的 DNS 服务器。如果有科学魔法爱国上网需求，你应该部署两个 Ad­Guard Home ，通过 DNS 分流才能达到较为理想的防污染和去广告效果。</p>
<ul>
<li><p>中国大陆网络环境推荐选择<a href="https://p3terx.com/go/aHR0cDovL3BkbnMuZG5zcG9kLmNuLw">腾讯 (DNSPod)</a> 和<a href="https://p3terx.com/go/aHR0cHM6Ly93d3cuYWxpZG5zLmNvbS8">阿里云</a>的公共 DNS 。使用它们你会惊奇的发现偶尔某些不存在的网站都是能正常解析的，只不过解析的结果并不是离你的代理服务器最近的 IP ，所以效果并不理想，而且非常不稳定。</p>
<blockquote>
<p><strong>TIPS:</strong> 中国大陆不推荐使用任何海外的 DNS ，因为延迟很高且都受到了不同程度的干扰，可用性不高，强行设置只会得到减速效果或者报错。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tls://dns.pub</span><br><span class="line">https://dns.pub/dns-query</span><br><span class="line">tls://dns.alidns.com</span><br><span class="line">https://dns.alidns.com/dns-query</span><br></pre></td></tr></table></figure>
</li>
<li><p>国际网络环境，比如海外的 VPS 或者给科学魔法爱国上网软件做 DNS ，则推荐使用 <a href="https://p3terx.com/go/aHR0cHM6Ly9kbnMuZ29vZ2xlLw">Google</a> 和 <a href="https://p3terx.com/go/aHR0cHM6Ly93d3cucXVhZDkubmV0Lw">Quad9</a> 的公共 DNS。给科学魔法爱国上网软件使用的前提是它们必须在魔法名单中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tls://dns.google</span><br><span class="line">https://dns.google/dns-query</span><br><span class="line">tls://dns11.quad9.net</span><br><span class="line">https://dns11.quad9.net/dns-query</span><br></pre></td></tr></table></figure></li>
</ul>
<p>如果你看过《<a href="https://p3terx.com/archives/use-adguard-home-to-build-dns-to-prevent-pollution-and-remove-ads-0.html">AdGuard Home 是什么？为什么无法去广告？</a>》那篇文章，那么你一定还记得 DoT&#x2F;​DoH 技术。所以这里的上游 DNS 自然是要选择 DoT&#x2F;​DoH 加密技术的服务器的，可以防止 DNS 解析记录被劫持、篡改以及跟踪。缺点是可能对解析速度会有些许影响，毕竟 TCP 协议不如 UDP 来得有效率，且加解密需要一点时间，不过在机器性能不错且网络通畅的情况下其实是可以忽略的，都是毫秒级别的差距。</p>
<p><strong>上游 DNS 服务器</strong>输入框下面有几个单选项，字面理解应该是解析策略、模式之类的选项，官方暂时没有给出详细介绍，所以博主根据字面含义和自身实际体验总结如下：</p>
<ul>
<li><strong>负载均衡</strong>：使用加权随机算法来选择最快的服务器。用到了算法，这就很玄学了。实际其实就是随机选择一个上游 DNS 服务器中的一个进行解析请求，哪个延迟低就更偏向于用哪一个。</li>
<li><strong>并行请求</strong>：同时请求所有上游 DNS 服务器，取最快给出的响应结果，所以解析速度很快。在上游 DNS 服务器设置合理的情况下属于万金油方案，解析速度和访问速度都很快。所以也非常适合上游 DNS 服务器连接延迟大和不稳定的情况，就比如科学魔法爱国上网使用场景。</li>
<li><strong>最快的 IP 地址</strong>：同时请求所有上游 DNS 服务器，在所有响应结果中选出延迟最低且可用的 IP。因为要等待所有上游 DNS 服务器响应结果，而且还要测试 IP 延迟及可用性，所以解析速度会很慢。只适合上游 DNS 服务器延迟特别低且网络非常稳定的场景，否则实际使用中可能会遇到首次打开网页非常慢，甚至可能打不开，要多刷新几次。再者低延迟 IP 不一定速度就快，还要看实际负载情况，所以这个方案的实际可用性是最差的。</li>
</ul>
<h4 id="Bootstrap-DNS-服务器"><a href="#Bootstrap-DNS-服务器" class="headerlink" title="Bootstrap DNS 服务器"></a>Bootstrap DNS 服务器</h4><p>Boot­strap DNS 服务器（引导 DNS 服务器）的作用只是解析上游 DoT&#x2F;​DoH 技术 DNS 服务器的域名，所以这里需要填写使用 UDP 协议的传统 DNS 服务器 IP 地址。</p>
<p><img src="/2022/09/20201020032251.png"></p>
<p> </p>
<p>同样的这里根据网络环境的不同推荐两组：</p>
<ul>
<li><p>中国大陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">119.29.29.29</span><br><span class="line">119.28.28.28</span><br><span class="line">223.5.5.5</span><br><span class="line">223.6.6.6</span><br></pre></td></tr></table></figure>
</li>
<li><p>国际</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8.8.8.8</span><br><span class="line">8.8.4.4</span><br><span class="line">9.9.9.11</span><br><span class="line">149.112.112.11</span><br></pre></td></tr></table></figure></li>
</ul>
<p>设置完点击<strong>测试上游服务器</strong>，没有问题点<strong>保存</strong>即可。</p>
<blockquote>
<p><strong>TIPS:</strong> 这里也可以留空，使用后面将要提到的 <strong>DNS 重写</strong>功能把 DoT&#x2F;​DoH DNS 服务器的域名直接指向它的 IP 是一种更优雅的使用方式。</p>
</blockquote>
<h4 id="DNS-服务设定"><a href="#DNS-服务设定" class="headerlink" title="DNS 服务设定"></a>DNS 服务设定</h4><ul>
<li><strong>速度限制</strong>：<code>0</code></li>
<li><strong>使用 EDNS</strong> ：前面提及的上游 DNS 服务器都是支持 EDNS (ECS) 的，它有助于获取到更合适的 CDN 节点，建议勾选。</li>
<li><strong>使用 DNSSEC</strong> : 用于效验 DNS 记录的签名，防止 DNS 缓存被投毒，建议勾选。勾选后会在日志页面请求列显示小绿锁图标。</li>
<li><strong>禁用 IPv6</strong> ：丢弃 IPv6 的 DNS 查询。在本地网络和网站都支持 IPv6 会优先使用 IPv6 去访问网站，但目前 IPv6 的建设还处于初级阶段，大多数地区的 IPv6 网络体验都一般。还有一些代理软件对 IPv6 支持不佳，开启后可能会影响国际互联网的访问。如果对此没有特殊需求，那么直勾选即可，这样既不影响 BT 软件连接 IPv6 网络，又可以优先使用 IPv4 来上网。如果只有 IPv4 ，那么是否勾选没有区别。</li>
</ul>
<p> </p>
<p><img src="/2022/09/20201020032252.png"></p>
<p> </p>
<h4 id="DNS-缓存配置"><a href="#DNS-缓存配置" class="headerlink" title="DNS 缓存配置"></a>DNS 缓存配置</h4><p>先简单科普一下 TTL ，它是英语 Time To Live 的简称，中文翻译为 “存活时间”。放在 DNS 解析中意为一条域名解析记录在 DNS 服务器中的存留时间，单位是秒。</p>
<p>正常情况下 TTL 默认 <code>0</code> 即可，即从上游 DNS 服务器获取 TTL 值。如果你所部署的网络环境到上游 DNS 服务器的延迟比较高，那么可以适当增加 TTL 值，让缓存更持久，短时间内请求同样域名的解析会直接从缓存中读取，实现秒解析。不过 TTL 值不宜过大，不然会导致记录不能及时更新，结果是网站无法正常打开。据博主观察目前多数域名的 TTL 值普遍在 300 以内，所以给出以下设置参考值：</p>
<ul>
<li>覆盖最小 TTL 值：<code>600</code></li>
<li>覆盖最大 TTL 值：<code>3600</code></li>
</ul>
<p> </p>
<p><img src="/2022/09/20201020032253.png"></p>
<p> </p>
<h3 id="加密设置"><a href="#加密设置" class="headerlink" title="加密设置"></a>加密设置</h3><p>设置管理页面使用 HTTPS 加密以及 Ad­Guard Home 自身的 DoH&#x2F;​DoT 功能，如果不对外开放服务，只是在本地局域网使用是用不到的。对外开放 DNS 服务在中国大陆可能会有 “法律” 风险，而部署在国外网络速度缓慢，所以对于普通用户而言加密设置就成了摆设。</p>
<p><img src="/2022/09/20201021160403.png"></p>
<p> </p>
<h3 id="客户端设置"><a href="#客户端设置" class="headerlink" title="客户端设置"></a>客户端设置</h3><p>在这里可以单独设置每个设备单独使用的上游 DNS 及过滤规则，需要将设备 DNS 设置为 Ad­Guard Home 服务器的在 IP ，或者使用下面将要提到的 DHCP 设置。每个人的需求不一样，所以这个部分就不详细说明了。</p>
<p><img src="/2022/09/20201021160404.png"></p>
<p> </p>
<h3 id="DHCP-设置"><a href="#DHCP-设置" class="headerlink" title="DHCP 设置"></a>DHCP 设置</h3><p>使用 Ad­Guard Home 作为 DHCP 服务器去代替路由器上的 DHCP 服务器，这个功能的主要作用是自动分配 Ad­Guard Home 的 DNS 给到设备，然后配合<strong>客户端设置</strong>去做精细化 DNS 和过滤规则设置。除非是你的路由设备的 DHCP 功能缺斤少两，否则一般是用不到的。目前这个功能处于实验阶段，稳定性还有待考证。有兴趣的小伙伴可以自己去深入研究，这里不做过多赘述。</p>
<p><img src="/2022/09/20201021160405.png"></p>
<p> </p>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h3 id="DNS-封锁清单"><a href="#DNS-封锁清单" class="headerlink" title="DNS 封锁清单"></a>DNS 封锁清单</h3><p>这里是人民群众喜闻乐见的去广告环节。</p>
<p><img src="/2022/09/20201020033102.png"></p>
<p> </p>
<blockquote>
<p><strong>吐槽：</strong><code>封锁清单</code>这个词严重怀疑是机翻，而下面的绿色按钮是<code>添加阻止列表</code>。博主在查看 Ad­Guard Home 的源码后发现简体中文的翻译有很多不统一的地方，然后花了几个小时帮助他们改进了大量的翻译，可能在后续的版本中就不再叫<code>封锁清单</code>了。</p>
</blockquote>
<p>使用官方默认的 <strong>AdGuard DNS filter</strong> 规则的效果对于中国大陆的网络而言属于聊胜于无，所以需要添加一些其它的规则。然而规则并不是越多越好，多了会影解析速度，真正需要的是高质量。博主个人比较推荐 <strong>anti-AD</strong> 和 <strong>halflife</strong> 这两个规则。</p>
<p>规则列表 点击查看</p>
<p>名称</p>
<p>简介</p>
<p>地址</p>
<p>AdGuard DNS Filter</p>
<p>AdGuard 官方维护的广告规则，涵盖多种过滤规则</p>
<p><a href="https://p3terx.com/go/aHR0cHM6Ly9hZGd1YXJkdGVhbS5naXRodWIuaW8vQWRHdWFyZFNETlNGaWx0ZXIvRmlsdGVycy9maWx0ZXIudHh0">https://adguardteam.github.io/AdGuardSDNSFilter/Filters/filter.txt</a></p>
<p><a href="https://p3terx.com/go/aHR0cHM6Ly9hZGF3YXkub3JnLw">AdAway</a></p>
<p>AdAway 官方的去广告 Host 规则</p>
<p><a href="https://p3terx.com/go/aHR0cHM6Ly9hZGF3YXkub3JnL2hvc3RzLnR4dA">https://adaway.org/hosts.txt</a></p>
<p><a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL2JhbmJlbmRhbGFvL0FEZ2s">ADgk</a></p>
<p>适用于 AdGuard for Android 的去广告规则，去视频 APP 广告、开屏广告</p>
<p><a href="https://p3terx.com/go/aHR0cHM6Ly9iYW5iZW5kYWxhby5jb2RpbmcubmV0L3AvYWRnay9kL0FEZ2svZ2l0L3Jhdy9tYXN0ZXIvQURnay50eHQ">https://banbendalao.coding.net/p/adgk/d/ADgk/git/raw/master/ADgk.txt</a></p>
<p><a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL3ByaXZhY3ktcHJvdGVjdGlvbi10b29scy9hbnRpLUFE">anti-AD</a></p>
<p>命中率高、兼容性强</p>
<p><a href="https://p3terx.com/go/aHR0cHM6Ly9hbnRpLWFkLm5ldC9lYXN5bGlzdC50eHQ">https://anti-ad.net/easylist.txt</a></p>
<p><a href="https://p3terx.com/go/aHR0cHM6Ly9hZGYubWluZ2dvLmV1Lm9yZy8">halflife</a></p>
<p>涵盖了 EasyList China、EasyList Lite、CJX ‘s Annoyance、乘风视频过滤规则，以及补充的其它规则</p>
<p><a href="https://p3terx.com/go/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL28wSGFsZkxpZmUwby9saXN0QG1hc3Rlci9hZC50eHQ">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;o0HalfLife0o&#x2F;list@master&#x2F;ad.txt</a></p>
<p><a href="https://p3terx.com/go/aHR0cHM6Ly9lYXN5bGlzdC50by8">EasyList</a></p>
<p>Adblock Plus 官方维护的广告规则</p>
<p><a href="https://p3terx.com/go/aHR0cHM6Ly9lYXN5bGlzdC1kb3dubG9hZHMuYWRibG9ja3BsdXMub3JnL2Vhc3lsaXN0LnR4dA">https://easylist-downloads.adblockplus.org/easylist.txt</a></p>
<p>EasyList China</p>
<p>面向中文用户的 EasyList 去广告规则</p>
<p><a href="https://p3terx.com/go/aHR0cHM6Ly9lYXN5bGlzdC1kb3dubG9hZHMuYWRibG9ja3BsdXMub3JnL2Vhc3lsaXN0Y2hpbmEudHh0">https://easylist-downloads.adblockplus.org/easylistchina.txt</a></p>
<p>EasyPrivacy</p>
<p>反隐私跟踪、挖矿规则</p>
<p><a href="https://p3terx.com/go/aHR0cHM6Ly9lYXN5bGlzdC1kb3dubG9hZHMuYWRibG9ja3BsdXMub3JnL2Vhc3lwcml2YWN5LnR4dA">https://easylist-downloads.adblockplus.org/easyprivacy.txt</a></p>
<p><a href="https://p3terx.com/go/aHR0cHM6Ly9naXRlZS5jb20veGluZ2dzZi9BZGJsb2NrLVJ1bGUv">Xinggsf 乘风通用</a></p>
<p>国内网站广告过滤规则</p>
<p><a href="https://p3terx.com/go/aHR0cHM6Ly9naXRlZS5jb20veGluZ2dzZi9BZGJsb2NrLVJ1bGUvcmF3L21hc3Rlci9ydWxlLnR4dA">https://gitee.com/xinggsf/Adblock-Rule/raw/master/rule.txt</a></p>
<p><a href="https://p3terx.com/go/aHR0cHM6Ly9naXRlZS5jb20veGluZ2dzZi9BZGJsb2NrLVJ1bGUv">Xinggsf 乘风视频</a></p>
<p>视频网站广告过滤规则</p>
<p><a href="https://p3terx.com/go/aHR0cHM6Ly9naXRlZS5jb20veGluZ2dzZi9BZGJsb2NrLVJ1bGUvcmF3L21hc3Rlci9tdi50eHQ">https://gitee.com/xinggsf/Adblock-Rule/raw/master/mv.txt</a></p>
<p>MalwareDomainList</p>
<p>恶意软件过滤规则</p>
<p><a href="https://p3terx.com/go/aHR0cHM6Ly93d3cubWFsd2FyZWRvbWFpbmxpc3QuY29tL2hvc3RzbGlzdC9ob3N0cy50eHQ">https://www.malwaredomainlist.com/hostslist/hosts.txt</a></p>
<p>Adblock Warning Removal List</p>
<p>去除禁止广告拦截提示规则</p>
<p><a href="https://p3terx.com/go/aHR0cHM6Ly9lYXN5bGlzdC1kb3dubG9hZHMuYWRibG9ja3BsdXMub3JnL2FudGlhZGJsb2NrZmlsdGVycy50eHQ">https://easylist-downloads.adblockplus.org/antiadblockfilters.txt</a></p>
<p>Fanboy’s Annoyances List</p>
<p>去除页面弹窗广告规则</p>
<p><a href="https://p3terx.com/go/aHR0cHM6Ly9lYXN5bGlzdC1kb3dubG9hZHMuYWRibG9ja3BsdXMub3JnL2ZhbmJveS1hbm5veWFuY2UudHh0">https://easylist-downloads.adblockplus.org/fanboy-annoyance.txt</a></p>
<p> </p>
<h3 id="DNS-允许清单"><a href="#DNS-允许清单" class="headerlink" title="DNS 允许清单"></a>DNS 允许清单</h3><p>在这里你可以设置排除封锁清单中的被屏蔽的域名。比如做淘宝客、广告联盟之类的人群可能会用得到，毕竟封锁清单基本涵盖了他们的业务范围。</p>
<p><img src="/2022/09/20201021161521.png"></p>
<p> </p>
<h3 id="DNS-重写"><a href="#DNS-重写" class="headerlink" title="DNS 重写"></a>DNS 重写</h3><p>在这里你可以方便的把一个域名指向一个 IP ，简单来说这个功能相当于 hosts 。</p>
<p>最典型的一个使用场景是把 DoH&#x2F;​DoT DNS 服务器的域名直接指向它们的 IP ，这样就不再需要进行我查我自己这样浪费时间的迷惑操作了，可进一步加快解析的速度。一般来说 DoT&#x2F;​DoH DNS 服务器的 IP 是固定的，而且 IP 地址和它们自家的传统 DNS 服务器的 IP 是一致的。这里需要注意的是处在公测阶段的 DNS­Pod 是个例外 (难怪腾讯云做不过阿里云，这种细节上的东西很能体现出是否专业)。</p>
<p><img src="/2022/09/20210423045545.png"></p>
<p> </p>
<h3 id="已阻止服务"><a href="#已阻止服务" class="headerlink" title="已阻止服务"></a>已阻止服务</h3><p>在这里你可以一键禁止访问一些热门网站和服务，比如 Face­book 、Twit­ter 。</p>
<p><img src="/2022/09/20201021161524.png"></p>
<p> </p>
<h3 id="自定义过滤规则"><a href="#自定义过滤规则" class="headerlink" title="自定义过滤规则"></a>自定义过滤规则</h3><p>在这里你可以自定义符合 ad­block 语法或 Hosts 语法的规则，以及检查过滤域名是否被过滤。具体如何使用可以参考页面上的示例和官方文档。</p>
<p><img src="/2022/09/20201021161523.png"></p>
<p> </p>
<h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><p>到这里 Ad­Guard Home 的设置就算是介绍完了，有简体中文，而且 UI 逻辑很清晰，很容易上手。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>AdGuard Home</tag>
      </tags>
  </entry>
  <entry>
    <title>Archlinux下终端进行代理的解决方案</title>
    <url>/2021/12/15/archlinux%E4%B8%8B%E7%BB%88%E7%AB%AF%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%90%86%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>Linux 下软件安装基本都是在终端下进行的…. 虽说安装软件基本上选对源就没有无法安装的,但是 Archlinux 下的 yaourt 安装就是社区打包的软件了. 软件来源各种各样,有的是 Google code 上的,有的是 GitHub 上的,有的就是 sourceforge 上的了. 但是在中国的大环境下不能保证上面网站的正常访问 QAQ Google 的话有 hosts 的情况下基本上是 把 http 修改成 https 就可以下载了,其余两个就只能代理进行下载软件并安装了.</p>
<h2 id="代理"><a href="#代理" class="headerlink" title="#代理"></a><a href="https://blog.icehoney.me/posts/2013-07-18-archlinux-terminal-proxy/#%E4%BB%A3%E7%90%86">#</a>代理</h2><p>首先科学上网的话就需要代理,SSH 这样进行端口监听的比较不错.VPN 是全局代理就不用讲述了. 不过 VPN 也可以走路由表进行部分代理(不在本文讨论范围之内)SSH 的话在 Linux 下就是简单的一句 <code>ssh -NfD 127.0.0.1:7070 user@server</code> 因为 SSH 不是 HTTP 代理,所以需要转发,如果是纯 HTTP 代理的话直接配置环境变量即可. 前面写的是本机代理的端口,后面是服务器的用户名和服务器 IP 地址.</p>
<h2 id="转发"><a href="#转发" class="headerlink" title="#转发"></a><a href="https://blog.icehoney.me/posts/2013-07-18-archlinux-terminal-proxy/#%E8%BD%AC%E5%8F%91">#</a>转发</h2><p>SSH 是 SOCKET5 代理,但是下载的话基本上就是 HTTP 代理怎么转发呢? 这里就需要一个软件叫做<a href="https://wiki.archlinux.org/index.php/Privoxy">Privoxy(opens new window)</a> Privoxy 可以把 SOCKET5 转 HTTP 代理, 首先安装它 <code>sudo pacman -S privoxy</code> 然后进行配置 <code>sudo vim /etc/privoxy/config</code>在配置文件里面添加 <code>forward-socks5 / 127.0.0.1:7070 .</code> 注意后面有个点,容易忽略. 这个是转入的 SOCKET5 代理,指的是 SSH 的代理监听的端口号. 配置文件里面有句话是 <code>listen-address 127.0.0.1:8118</code> 这个是转发出去的 HTTP 代理的端口号. 这样写好之后, 启动服务 <code>sudo systemctl start privoxy.service</code></p>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="#配置环境变量"></a><a href="https://blog.icehoney.me/posts/2013-07-18-archlinux-terminal-proxy/#%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">#</a>配置环境变量</h2><p>转发实现之后就可以应用在终端里面了, 在终端里面输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export https_proxy=127.0.0.1:1080 </span><br><span class="line">export http_proxy=127.0.0.1:1080</span><br><span class="line">export ALL_proxy=socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<p>这样就完成代理的设置了.</p>
<p>测试 IP 获取，如无意外，此时会返回国外服务器的IP地址。全局出国。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl ip.gs</span><br></pre></td></tr></table></figure>

<p>取消代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unset http_proxy</span><br><span class="line">unset https_proxy</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Archlinux</tag>
      </tags>
  </entry>
  <entry>
    <title>AdGuard Home 用上这个神器后，广告从此去无忧!</title>
    <url>/2019/12/22/adguard-home-%E7%94%A8%E4%B8%8A%E8%BF%99%E4%B8%AA%E7%A5%9E%E5%99%A8%E5%90%8E%EF%BC%8C%E5%B9%BF%E5%91%8A%E4%BB%8E%E6%AD%A4%E5%8E%BB%E6%97%A0%E5%BF%A7/</url>
    <content><![CDATA[<h2 id="什么是-AdGuard-Home"><a href="#什么是-AdGuard-Home" class="headerlink" title="什么是 AdGuard Home"></a>什么是 AdGuard Home</h2><p><code>AdGuard Home</code> 是一款全网广告拦截与反跟踪软件，<code>AdGuard Home</code> 项目是著名广告拦截器提供商 <code>AdGuard</code> 开源的一个 <code>DNS Server</code> 版本。<code>AdGuard Home</code> 可以将广告与追踪相关的域名屏蔽，同时你不再需要安装任何客户端软件。<code>AdGuard Home</code> 的工作原理是在 <code>DNS</code> 的域名解析过程里拦截网页上的广告。</p>
<p>简单来说 <code>AdGuard Home</code> 是一个支持广告过滤和家长控制的开源公共 <code>DNS</code> 服务，如同 Google 的公共 DNS 服务 8.8.8.8。<code>AdGuard Home</code> 同时也支持 <code>DNS over TLS</code> 和 <code>DNS over HTTPS</code>。</p>
<blockquote>
<p>项目地址：<a href="https://github.com/AdguardTeam/AdGuardHome">https://github.com/AdguardTeam/AdGuardHome</a></p>
</blockquote>
<p><strong>AdGuard Home 的主要功能介绍</strong></p>
<ul>
<li>拦截随处可见的广告</li>
<li>注重隐私保护</li>
<li>家庭保护模式</li>
<li>自定义过滤规则</li>
</ul>
<p>在继续讲解前，我们先来看一看 <code>AdGuard Home</code> 强大的功能演示和管理后台。</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/c36833c20bb9bc21ef0fe684d6fe9c17.gif"></p>
<h2 id="安装-AdGuard-Home"><a href="#安装-AdGuard-Home" class="headerlink" title="安装 AdGuard Home"></a>安装 AdGuard Home</h2><p><code>AdGuard Home</code> 使用 <code>Golang</code> 开发，具有良好的原生跨平台性。它可以部署在 <code>X86</code> 架构的各种操作系统上，也可以部署在树莓派上，甚至你还可以借助 <code>Docker</code> 部署在群晖 <code>NAS</code> 上。</p>
<h3 id="使用预编译的二进制版本安装"><a href="#使用预编译的二进制版本安装" class="headerlink" title="使用预编译的二进制版本安装"></a>使用预编译的二进制版本安装</h3><p>这里我们以 <code>Linux</code> 系统为例，其它系统可参考官方帮助文档：<a href="https://github.com/AdguardTeam/AdGuardHome/wiki/Getting-Started#installation">https://github.com/AdguardTeam/AdGuardHome/wiki/Getting-Started#installation</a> 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载并解压 AdGuard Home</span><br><span class="line">$ wget https://github.com/AdguardTeam/AdGuardHome/releases/download/v0.100.6/AdGuardHome_linux_amd64.tar.gz</span><br><span class="line">$ tar -zxvf AdGuardHome_linux_amd64.tar.gz</span><br><span class="line"></span><br><span class="line"># 为了方便使用，我们将二进制文件拷贝到 PATH 所包含的位置</span><br><span class="line">$ cd AdGuardHome_linux_amd64</span><br><span class="line">$ cp ./AdGuardHome /usr/local/bin/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的方法，很显然是在前台运行的。前台运行必然还是存在一些弊端的，比如：当前 <code>SHELL</code> 中断必然会引起程序中断等。如果你想长期稳定的运行 <code>AdGuard Home</code>，最后好方法必然是将 <code>AdGuard Home</code> 运行成一个服务。要想将 <code>AdGuard Home</code> 在各平台部署为服务也是很简单的，只需运行下面这一条命令就可实现。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Linux 下使用的服务管理器是 systemd 、Upstart 或 SysV，macOS 下使用的服务管理器是 Launchd。</span><br><span class="line">$ ./AdGuardHome -s install复制代码</span><br></pre></td></tr></table></figure>

<p><code>AdGuard Home</code> 服务安装后好，你可以使用以下命令来管理它。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动 AdGuardHome 服务</span><br><span class="line">$ ./AdGuardHome -s start</span><br><span class="line"></span><br><span class="line"># 停止 AdGuardHome 服务</span><br><span class="line">$ ./AdGuardHome -s stop</span><br><span class="line"></span><br><span class="line"># 重启 AdGuardHome 服务</span><br><span class="line">$ ./AdGuardHome -s restart</span><br><span class="line"></span><br><span class="line"># 查看 AdGuardHome 服务状态</span><br><span class="line">$ ./AdGuardHome -s status</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用-Docker-来安装"><a href="#使用-Docker-来安装" class="headerlink" title="使用 Docker 来安装"></a>使用 Docker 来安装</h3><p>如果你会一点点 <code>Docker</code> 知识的话，我们当然还是建议你直接使用 <code>Docker</code> 来安装。虽然通过预编译的二进制版本安装已经很简单了，但如果使用 <code>Docker</code> 来安装，你会发现仅仅只需一条指令就可以搞定了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker pull adguard/adguardhome</span><br><span class="line"># -v 参数后面指定的宿主机上的目录主要用作永久保存 AdGuard Home 的数据文件和配置文件，可自行根据实际情况修改。</span><br><span class="line">$ docker run --name adguardhome -v /home/mike/workdir:/opt/adguardhome/work -v /home/mike/confdir:/opt/adguardhome/conf -p 53:53/tcp -p 53:53/udp -p 67:67/udp -p 68:68/tcp -p 68:68/udp -p 80:80/tcp -p 443:443/tcp -p 853:853/tcp -p 3000:3000/tcp -d adguard/adguardhome复制代码</span><br></pre></td></tr></table></figure>

<p>你可能会发现上面一共是两条指令，前面不是说好了是一条指令的吗？是不是发现被骗了，我怎么可能骗你呢，这绝对是不可能的！其实这两条指令，你只需直接执行第 2 条指令就可以完成所有安装操作了。这里分开写出来仅仅是为了完整演示 <code>Docker</code> 整个运行过程，能让一些还不会 <code>Docker</code> 的同学能更容易理解一些。前面既然啰嗦了这么多，这里就再延伸说一点 <code>Docker</code> 容器的基本管理操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动 AdGuard Home 容器</span><br><span class="line">$ docker start adguardhome</span><br><span class="line"># 停止 AdGuard Home 容器</span><br><span class="line">$ docker stop adguardhome</span><br><span class="line"># 删除 AdGuard Home 容器</span><br><span class="line">$ docker rm adguardhome复制代码</span><br></pre></td></tr></table></figure>

<h2 id="使用-AdGuard-Home"><a href="#使用-AdGuard-Home" class="headerlink" title="使用 AdGuard Home"></a>使用 AdGuard Home</h2><h3 id="使用默认配置来设置-AdGuard-Home"><a href="#使用默认配置来设置-AdGuard-Home" class="headerlink" title="使用默认配置来设置 AdGuard Home"></a>使用默认配置来设置 AdGuard Home</h3><p>运行 <code>AdGuard Home</code> 后，我们需要通过浏览器打开 <code>http://IP:3000</code> 对 <code>AdGuard Home</code> 进行初始化设置。首次初始化会要求设置服务运行端口、账号、密码等信息，配置过程中设置的密码一定请牢记，下次登录管理后台时需要使用。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/9/30/16d7ff7fab86fc4d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<p>首先，我们点击 “开始配置” ，来设定网页管理界面和 <code>DNS</code> 服务的端口。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/9/30/16d7ff7febe246cc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<p>其次，点击 “下一步” 后，为 <code>AdGuard Home</code> 网页管理界面设置一个用户名和密码。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/9/30/16d7ff8013b6710b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<p>最后，点击 “下一步” 后，<code>AdGuard Home</code> 会展示以上配置的汇总信息。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/9/30/16d7ff80394a277e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<p>至此，使用 <code>AdGuard Home</code> 默认配置的设置就算大功告成了。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/9/30/16d7ff8064f70eda?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<p>使用 <code>AdGuard Home</code> 默认配置设置完成后，我们可以在「仪表盘」上看到 <code>DNS</code> 查询次数、被过滤器封锁的网站、查询 <code>DNS</code> 请求的客户端 <code>IP</code> 地址等等信息。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/9/30/16d7ff8089245b92?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<h3 id="AdGuard-Home-配置进阶"><a href="#AdGuard-Home-配置进阶" class="headerlink" title="AdGuard Home 配置进阶"></a>AdGuard Home 配置进阶</h3><p><code>AdGuard Home</code> 默认的配置比较简单，为了更强力地拦截广告，我们可以对 <code>AdGuard Home</code> 配置进行一些优化。</p>
<ol>
<li>常规设置</li>
</ol>
<p><code>AdGuard Home</code> 默认配置的情况下只勾选了「使用过滤器和 Hosts 文件以拦截指定域名」这一个选项，你可以根据自身情况决定是否启用「使用 AdGuard 浏览安全网页服务」、「使用 AdGuard 家长控制服务」和「强制安全搜索」等特性。</p>
<p>不仅如此，你还可以很方便的屏蔽一些比较流行的网站。当然这些网站本来对我们都是不可用的，也就不用多此一举进行设置了，哈哈！</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/9/30/16d7ff80b759a271?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<ol>
<li>设置上游 DNS</li>
</ol>
<p><code>AdGuard Home</code> 默认使用 <code>Cloudflare</code> 的 <code>DNS over HTTPS</code> 作为上游服务器。如果你在国内使用 <code>Cloudflare DNS</code> 做为上游 <code>DNS</code>，可能延迟会比较高。</p>
<p>我们可以设置为国内的公共 <code>DNS</code>，如：腾讯的 <code>119.29.29.29</code>、阿里的 <code>223.5.5.5</code> 和 <code>114.114.114.114</code> 等，但坏处是这些国内公共 <code>DNS</code> 暂时不支持 <code>DNS over TLS</code>。</p>
<p>这里有一个比较折中的解决方法就是通过启用 「通过同时查询所有上游服务器以使用并行查询加速解析」选项来在每次查询的时候对所有的上游 <code>DNS</code> 同时查询，以加速解析速度。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/9/30/16d7ff80e10f5470?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<ol>
<li>过滤器</li>
</ol>
<p>虽然 <code>AdGuard Home</code> 本身内置了比较知名的 <code>AdGuard</code>、<code>AdAway</code> 广告过滤规则，但这些规则在国内显然有点水土不服。如果你想要更完美的实现广告屏蔽还需要自己添加规则，比较幸运的是 <code>AdGuard Home</code> 是可以兼容 <code>Adblock</code> 过滤规则语法的。这样，你就可以很方便的使用一些比较知名的 <code>Adblock</code> 过滤规则，比如：由 <code>Adblock Plus</code> 团队维护的 <code>EasyList</code>。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/9/30/16d7ff8116088116?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<p><img src="https://user-gold-cdn.xitu.io/2019/9/30/16d7ff8144306c5e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<p>目前好用的广告过滤规则还是有很多的，它们都针对不同的用途。下面推荐一些比较常用的：</p>
<blockquote>
<p>1. EasyList China : 国内网站广告过滤的主规则。</p>
<p>链接：<a href="https://easylist-downloads.adblockplus.org/easylistchina.txt">https://easylist-downloads.adblockplus.org/easylistchina.txt</a></p>
<p>2. EasyPrivacy : EasyPrivacy 是隐私保护，不被跟踪。</p>
<p>链接：<a href="https://easylist-downloads.adblockplus.org/easyprivacy.txt">https://easylist-downloads.adblockplus.org/easyprivacy.txt</a></p>
<p>3. CJX’s Annoyance List : 过滤烦人的自我推广，并补充 EasyPrivacy 隐私规则。</p>
<p>链接：<a href="https://raw.githubusercontent.com/cjx82630/cjxlist/master/cjx-annoyance.txt">https://raw.githubusercontent.com/cjx82630/cjxlist/master/cjx-annoyance.txt</a></p>
<p>4. 广告净化器规则 : 支持国内大部分视频网站的广告过滤。</p>
<p>链接：<a href="http://tools.yiclear.com/ChinaList2.0.txt">http://tools.yiclear.com/ChinaList2.0.txt</a></p>
<p>5. I don’t care about cookies : 我不关心 Cookie 的问题，屏蔽网站的 cookies 相关的警告。</p>
<p>链接：<a href="https://www.i-dont-care-about-cookies.eu/abp/">https://www.i-dont-care-about-cookies.eu/abp/</a></p>
</blockquote>
<p>除了使用已有的过滤规则外，当然你也可以根据自己的需求自定义过滤规则，要自定义过滤规则其实也很简单。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/9/30/16d7ff816ae3c858?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<p>下面是自定义过滤规则的一些语法说明。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">example.org^ – 拦截 example.org 域名及其所有子域名</span><br><span class="line">@@example.org^ – 放行 example.org 及其所有子域名</span><br><span class="line">127.0.0.1 example.org – 将会把 example.org（但不包括它的子域名）解析到 127.0.0.1。</span><br><span class="line">! 注释符号，表示这是一行注释</span><br><span class="line"># 这也是注释符号，同样表示这是一行注释</span><br><span class="line">/REGEX/ – 正则表达式模式复制代码</span><br></pre></td></tr></table></figure>

<p>更多规则可以参考官方帮助文档：<a href="https://kb.adguard.com/en/general/dns-filtering-syntax">https://kb.adguard.com/en/general/dns-filtering-syntax</a></p>
<ol>
<li>查询日志</li>
</ol>
<p><code>AdGuard Home</code> 管理界面中也为我们提供了 <code>DNS</code> 请求日志查询功能，在这里，我们不但能看见所有设备最近 5000 条的 <code>DNS</code> 请求日志记录。你还可以根据 <code>DNS</code> 请求日志记录来针对某个域名进行快速的拦截和放行操作。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/9/30/16d7ff81929eedd6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<ol>
<li>调整配置参数，以提升 QPS 能力</li>
</ol>
<p><code>AdGuard Home</code> 所有的配置参数都保存在一个名为 <code>AdGuardHome.yaml</code> 的配置文件中。这个配置文件默认路径通常为 <code>AdGuard Home</code> 二进制文件 <code>AdGuardHome</code> 所在的目录，比如：<code>/usr/local/bin/AdGuardHome.yaml</code>。</p>
<p>这里我们只需调整以下两个参数，就是可以明显提升 <code>AdGuard Home</code> 的 <code>QPS</code> 能力。</p>
<ul>
<li>ratelimit : <code>DDoS</code> 保护，客户端每秒接收的数据包数。默认值是 20，建议禁用该参数（将值改为 0）。</li>
<li>blocked_response_ttl : <code>TTL</code> 缓存时间，默认值是 10，建议设置为 60 。</li>
</ul>
<p>这里在把 <code>AdGuard Home</code> 的配置文件完整版本也展示一下，有兴趣的同学可以自行研究下其它参数的用途哟！。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat AdGuardHome.yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="设置客户端-DNS"><a href="#设置客户端-DNS" class="headerlink" title="设置客户端 DNS"></a>设置客户端 DNS</h3><p>所有以上设置完成后，最后当然是修改所有客户端的 <code>DNS</code> 设置，来享用 <code>AdGuard Home</code> 带来的强大的去广告功能。</p>
<p>这个其实真的不用写，我想聪明的你应该都知道这个怎么设置。写这个标题仅仅是为了保持文档完整性，如果你真的不会设置，那就请自行使用「<a href="https://mp.weixin.qq.com/s?__biz=MzI3MTI2NzkxMA==&mid=2247488197&idx=1&sn=1f722503d5f18ab8c6f4d9ba768d983b&chksm=eac533ecddb2bafa6044ce24599ebd20b6fd1cd083a31b53d16730f35daaaffbbb902fc8d449&token=614394592&lang=zh_CN#rd" title="一些好用">一些好用</a>」的搜索引擎搜索相关方法吧！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>AdGuard Home</code> 不但支持了 <code>macOS</code>、<code>Windows</code>、<code>Linux</code>、树莓派等多个系统平台，也提供了二进制和 <code>Docker</code> 的部署方式，让安装变得非常简单。<code>AdGuard Home</code> 自身提供的强大和直观的管理和统计系统，让它使用起来也是非常方便的。如果你打算自建一个支持去广告功能的公共 <code>DNS</code>，<code>AdGuard Home</code> 是非常值得一试的不二选择。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol>
<li><a href="https://www.google.com/">https://www.google.com</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/56804257">https://zhuanlan.zhihu.com/p/56804257</a></li>
<li><a href="https://www.xiaoz.me/archives/12318">https://www.xiaoz.me/archives/12318</a></li>
<li><a href="https://www.yangcs.net/posts/adguard-home/">https://www.yangcs.net/posts/adguard-home/</a></li>
<li><a href="https://github.com/AdguardTeam/AdGuardHome#getting-started">https://github.com/AdguardTeam/AdGuardHome#getting-started</a></li>
</ol>
<p>作者：运维之美 链接：<a href="https://juejin.im/post/5d91666ef265da5b7326d71d">https://juejin.im/post/5d91666ef265da5b7326d71d</a> 来源：掘金 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>AdGuard Home</tag>
        <tag>CentOS</tag>
        <tag>Debian</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>AdGuard Home搭建DOH</title>
    <url>/2022/09/01/adguard-home%E6%90%AD%E5%BB%BAdoh/</url>
    <content><![CDATA[<p>一键安装docker</p>
<p>curl -fsSL <a href="https://get.docker.com/">https://get.docker.com</a> -o get-docker.sh &amp;&amp; sh get-docker.sh<br>#创建docker   #<a href="https://hub.docker.com/r/adguard/adguardhome">https://hub.docker.com/r/adguard/adguardhome</a></p>
<p>docker pull adguard&#x2F;adguardhome</p>
<p>docker run --name adguardhome\<br>    --restart unless-stopped\<br>    -v &#x2F;root&#x2F;adguardhome&#x2F;workdir:&#x2F;opt&#x2F;adguardhome&#x2F;work\<br>    -v &#x2F;root&#x2F;adguardhome&#x2F;confdir:&#x2F;opt&#x2F;adguardhome&#x2F;conf\<br>    -p 3000:3000&#x2F;tcp\<br>    -p 36886:36886&#x2F;tcp\<br>    -d adguard&#x2F;adguardhome</p>
<p>#3000为管理端口 第一setup 管理端口80改3000<br>#36886为https端口  默认443 需修改</p>
<p>设置参考# <a href="https://www.nange.cn/dns-over-https-for-adguard.html">https://www.nange.cn/dns-over-https-for-adguard.html</a></p>
<p>appnode为例<br>反代后端路径  &#x2F;dns-query<br>如果填&#x2F;会暴露 &#x2F;dns-query<br>请求路径 自己生成一个随机数 如  &#x2F;oOnZY74WyMWFuM34sgCDv2V2LB   这个就是藏起来的</p>
<p>appnode let’s生成证书  把证书复制到ahm</p>
<p>验证工具<br>wget <a href="https://github.com/ameshkov/dnslookup/releases/download/v1.4.8/dnslookup-linux-amd64-v1.6.0.tar.gz">https://github.com/ameshkov/dnslookup/releases/download/v1.4.8/dnslookup-linux-amd64-v1.6.0.tar.gz</a><br>tar zxf dnslookup-linux-amd64-v1.4.8.tar.gz &amp;&amp; cd linux-amd64<br>dnslookup <a href="http://www.google.com/">www.google.com</a> <a href="https://dns.123.com/oOnZY74WyMWFuM34sgCDv2V2LB">https://dns.123.com/oOnZY74WyMWFuM34sgCDv2V2LB</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>AdGuard</tag>
      </tags>
  </entry>
  <entry>
    <title> AliDDNS 2.0 部署教程</title>
    <url>/2019/12/23/aliddns-2-0-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><strong>脚本整体不需要做任何修改！如果你不理解AliDDNS 2.0的运行原理，请不要擅自改动！因乱改脚本核心导致运行崩溃，作者有权拒绝回答任何问题！</strong></p>
<p>首先，登录你的服务器，安装必需组件：</p>
<p><strong>For CentOS：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y wget curl cronie</span><br></pre></td></tr></table></figure>

<p><strong>For Debian 8+：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install -y wget curl cron</span><br></pre></td></tr></table></figure>

<p><strong>For Ubuntu&#x2F;Debian 7：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install -y wget curl cron</span><br></pre></td></tr></table></figure>

<p>然后下载AliDDNS脚本到你的服务器上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -O /usr/sbin/AliDDNS-v2.0.sh https://ilemonrain.com/download/shell/AliDDNSv2.sh</span><br></pre></td></tr></table></figure>

<p>下载地址请参考上面的 <strong>更新记录 &amp; 下载地址</strong> 一节！</p>
<p>为脚本文件加上可执行属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x /usr/sbin/AliDDNS-v2.0.sh</span><br></pre></td></tr></table></figure>

<p>执行脚本，开始配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/sbin/AliDDNS-v2.0.sh</span><br></pre></td></tr></table></figure>

<p>弹出启动菜单：</p>
<blockquote>
<p>AliDDNS 工具 (阿里云云解析修改工具)</p>
<p>使用方法 (Usage)： AliDDNS.sh run 配置并运行工具 (如果已有配置将会直接运行) AliDDNS.sh config 仅配置工具 AliDDNS.sh clean 清理配置文件及运行环境 AliDDNS.sh version 显示版本信息</p>
<p>[Info] 选择你要使用的功能:</p>
<ol>
<li>配置并运行 AliDDNS</li>
<li>仅配置 AliDDNS</li>
<li>清理环境</li>
<li>退出</li>
</ol>
<p>输入数字以选择: _</p>
</blockquote>
<p>在这里，我们输入 <strong>1 (数字1)</strong> ，后按下回车，开始进入AliDDNS配置向导：</p>
<blockquote>
<p>[Info] 请输入一级域名 (比如 example.com) (此项必须填写，查看帮助请输入“h”):</p>
</blockquote>
<p>假如你需要设置AliDDNS的域名为ddns.example.com，那么请在这里输入 <strong>example.com</strong></p>
<p>分解开就是 [ddns] . [example.com]</p>
<p>同时，登录<a href="https://dns.console.aliyun.com/">阿里云云解析</a> <a href="https://dns.console.aliyun.com/">https://dns.console.aliyun.com/</a>，在需要DDNS的域名上，添加一个记录：</p>
<blockquote>
<p><strong>记录类型：</strong>A <strong>主机记录：</strong>[请填写你的二级域名] <strong>解析线路：</strong>默认 <strong>记录值：</strong>127.0.0.1 (或者随便填写一个IP地址) <strong>TTL：</strong> [请根据实际需要选择合适的TTL] <strong>同步默认线路：</strong>是 (勾选)</p>
</blockquote>
<p><strong>简单粗暴的，看都不看的复制粘贴，作者也有权拒绝回答任何问题！</strong></p>
<p>完成后按下回车键，继续填写二级域名：</p>
<blockquote>
<p>[Info] 请输入二级域名 (比如 ddns) (此项必须填写，查看帮助请输入“h”):</p>
</blockquote>
<p>同上面的范例，我们输入 <strong>ddns</strong> ，之后按下回车键继续：</p>
<blockquote>
<p>[Info] 请输入记录的TTL(Time-To-Live)值： (默认为600，查看帮助请输入“h”):</p>
</blockquote>
<p>如果你使用的是<strong>免费版</strong>的阿里云云解析，此处可以填写的数值范围为：<strong>600~86400</strong>； 如果你使用的是<strong>收费版(企业版)<strong>的阿里云云解析，此处可以填写的数值范围为：</strong>1~86400</strong> **(根据你购买的产品类型决定)**。</p>
<p>填写完成后，按下回车键继续：</p>
<blockquote>
<p>[Info] 请输入阿里云AccessKey ID (此项必须填写，查看帮助请输入“h”):</p>
</blockquote>
<p>AccessKey ID 和 AccessKey Secret 推荐使用 <strong><a href="https://ram.console.aliyun.com/">子用户AccessKey(访问控制台RAM)</a></strong> 分配的权限！这样最安全！</p>
<p>使用子用户AccessKey，请分配 <strong>AliyunDNSReadOnlyAccess(只读访问云解析(DNS)的权限)</strong> 和 <strong>AliyunDNSFullAccess(管理云解析(DNS)的权限)</strong> 这两个权限！推荐有动手能力的用户使用子用户AccessKey！</p>
<p>如果不会操作或者图省事，请使用 <strong><a href="https://usercenter.console.aliyun.com/#/manage/ak">全局AccessKey</a></strong> ！但此时一定要注意！<strong>千万不要泄露你的全局AccessKey或者将你的全局AccessKey发布到公网上！</strong>这样等同于把你的号白送人，还可以名正言顺的白嫖你的阿里云账号！<strong>如果发生泄露，请立刻删除泄露的AccessKey！</strong></p>
<p>填写完成后，按下回车键继续：</p>
<blockquote>
<p>[Info] 请输入阿里云Access Key Secret (此项必须填写，查看帮助请输入“h”):</p>
</blockquote>
<p>同上，填写你的AccessKey ID对应的AccessKey Secret。获取你的AccessKey Secret属于账号高风险操作，请准备好用来接收阿里云验证码的手机！</p>
<p>填写完成后，新版的AliDDNS 2.0如果没有激活专家模式，会直接进入执行流程；如果启动了专家模式，以下参数<strong>请在你理解的基础上填写！否则请一律留空！</strong></p>
<blockquote>
<p>[Info] 请输入获取本机IP使用的命令 (查看帮助请输入“h”):</p>
</blockquote>
<p>输入获取本机IP地址使用的命令。<strong>如果你不懂或者不需要配置，请留空，直接回车！</strong></p>
<blockquote>
<p>[Info] 请输入解析使用的DNS服务器 (此项必须填写，查看帮助请输入“h”):</p>
</blockquote>
<p>输入nslookup命令解析使用的DNS服务器。<strong>如果你不懂或者不需要配置，请留空，直接回车！</strong></p>
<p>之后，会自动开始DDNS(测试)运行过程：</p>
<blockquote>
<p>[Info] 检测到存在的配置，自动读取现有配置 如果你不需要，请通过菜单中的清理环境选项进行清除[Info] 正在写入配置文件…… [Info] 正在获取本机IP…… [Info] 本机IP：_.<em>.</em>._ [Info] 正在获取 ddns.example.com 的IP…… [Info] 解析结果：ddns.example.com -&gt; 127.0.0.1 [Info] 正在生成时间戳…… [Info] 获取到RecordID：* [Info] 正在更新解析记录…… {“RecordId”:”<em>“,”RequestId”:”<em>-<em>-<em>-<em>-</em>“} [Info] 已经更新RecordID：* [Success] DDNS记录更新成功，新的IP为：</em>.</em>.</em>.</em></p>
</blockquote>
<p>出现最后的 <strong>DDNS记录更新成功</strong> 提示，即为DDNS记录同步成功，稍后等待DNS解析生效，即可完成DDNS域名更换！</p>
<h3 id="3-Crontab-定时任务-部署教程"><a href="#3-Crontab-定时任务-部署教程" class="headerlink" title="3. Crontab (定时任务) 部署教程"></a>3. Crontab (定时任务) 部署教程</h3><p>首先，在命令行执行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<p>会弹出一个提示，问选择哪个编辑器，请按照自己的喜好选择一个文本编辑器：</p>
<blockquote>
<p>Select an editor. To change later, run ‘select-editor’.</p>
<ol>
<li>&#x2F;bin&#x2F;nano &lt;—- easiest</li>
<li>&#x2F;usr&#x2F;bin&#x2F;vim.basic</li>
<li>&#x2F;usr&#x2F;bin&#x2F;vim.tiny</li>
</ol>
<p>Choose 1-3 [1]:</p>
</blockquote>
<p>选择完成后，会打开一个文本编辑器，请在文件的最后添加如下一行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*/5 * * * * /usr/sbin/AliDDNS-v2.0.sh run &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p>添加完成后，保存退出。</p>
<p>当提示 <code>crontab: installing new crontab</code> 时，表示crontab写入成功，执行命令重启cron进程：</p>
<p><strong>For CentOS：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service crond restart</span><br></pre></td></tr></table></figure>

<p><strong>For Ubuntu&#x2F;Debian：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service cron restart</span><br></pre></td></tr></table></figure>

<p>并将Cron加入开机启动项：</p>
<p><strong>For CentOS：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chkconfig crond on</span><br></pre></td></tr></table></figure>

<p><strong>For Ubuntu&#x2F;Debian：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable cron</span><br></pre></td></tr></table></figure>

<p>即可完成定时任务的部署。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>aliddns</tag>
        <tag>alidns</tag>
      </tags>
  </entry>
  <entry>
    <title>Brook 端口转发 一键管理脚本，支持DDNS</title>
    <url>/2020/01/05/brook-%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91-%E4%B8%80%E9%94%AE%E7%AE%A1%E7%90%86%E8%84%9A%E6%9C%AC%EF%BC%8C%E6%94%AF%E6%8C%81ddns/</url>
    <content><![CDATA[<p>基于原 Brook端口转发 一键管理脚本 的修改版，增加对动态域名的支持，开启监控后自动更新域名IP。</p>
<p>基于iptables防火墙，记得安装iptables。</p>
<p>安装Brook，然后配置端口转发，最后启动Brook。</p>
<p>wget <a href="https://zhujiwiki.com/wp-content/uploads/2020/01//brook-pf-mod.sh">https://zhujiwiki.com/wp-content/uploads/2020/01//brook-pf-mod.sh</a> &amp;&amp; chmod +x brook-pf-mod.sh<br>.&#x2F;brook-pf-mod.sh</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2020/01/Brook-zhuanfa.png"></p>
<p><img src="http://www.jarods.org/wp-content/uploads/2020/01/Brook-zhuanfa2.png"></p>
<p>转自：<a href="https://github.com/yulewang/brook/">https://github.com/yulewang/brook/</a></p>
<p>1、卸载 firewalld 和 ufw</p>
<p>apt remove firewalld ufw</p>
<p>或</p>
<p>yum remove firewalld ufw</p>
<p>然后重启。</p>
<p>2、安装iptables</p>
<p>yum install -y iptables<br>yum update iptables<br>yum install iptables-services</p>
<p>iptables配置文件：&#x2F;etc&#x2F;sysconfig&#x2F;iptables</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Brook</tag>
        <tag>端口转发</tag>
      </tags>
  </entry>
  <entry>
    <title>autoindex.html – 一行配置美化 nginx 目录成 github 风格 by phuslu</title>
    <url>/2017/07/09/autoindex-html-%E4%B8%80%E8%A1%8C%E9%85%8D%E7%BD%AE%E7%BE%8E%E5%8C%96-nginx-%E7%9B%AE%E5%BD%95%E6%88%90-github-%E9%A3%8E%E6%A0%BC-by-phuslu/</url>
    <content><![CDATA[<blockquote>
<p>本文由<a href="https://www.91yun.org/archives/author/Michael"><strong>@Michael</strong></a>发布</p>
</blockquote>
<p>感谢作者 @<a href="https://www.91yunbbs.com/profile/phuslu">phuslu</a>  ， 原贴地址： <a href="https://www.91yunbbs.com/discussion/441/">https://www.91yunbbs.com/discussion/441/</a></p>
<h1 id="现状："><a href="#现状：" class="headerlink" title="现状："></a>现状：</h1><ol>
<li>nginx 的 autoindex 虽然速度比较快，但是美化不足，可以说巨丑。</li>
<li>类似 h5ai 解决方案这种又十分笨重，性能堪忧。</li>
</ol>
<h1 id="改进："><a href="#改进：" class="headerlink" title="改进："></a>改进：</h1><ol>
<li>使用 nginx 的 autoindex 页脚 (footer) 功能添加 javascript 来重新渲染并美化页面。</li>
<li>使用 twitter bootstrap 和 github octicons 做素材 , 并适配移动端</li>
<li>检测当前页面 Readme.md 并渲染，和 github 保持一致。</li>
</ol>
<h1 id="演示："><a href="#演示：" class="headerlink" title="演示："></a>演示：</h1><ol>
<li><a href="https://phuslu.github.io/">https://phuslu.github.io/</a></li>
</ol>
<p>教程：</p>
<ol>
<li>把  <a href="https://phuslu.github.io/autoindex.html">https://phuslu.github.io/autoindex.html</a>  下载到网站 wwwroot 根目录。</li>
<li>在 nginx autoindex 指令下面添加  <code>add_after_body /autoindex.html;</code>  然后重启 nginx 即可</li>
<li>完整配置例子请见  <a href="https://phuslu.github.io/autoindex.html">https://phuslu.github.io/autoindex.html</a></li>
</ol>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>CDN公共库加速服务</title>
    <url>/2022/01/05/cdn%E5%85%AC%E5%85%B1%E5%BA%93%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="七牛静态资源库-七牛-CDN"><a href="#七牛静态资源库-七牛-CDN" class="headerlink" title="七牛静态资源库 (七牛 CDN)"></a>七牛静态资源库 (七牛 CDN)</h3><p><a href="https://www.staticfile.org/">https://www.staticfile.org/</a></p>
<h3 id="jsDelivr-（cloudflare-CDN）"><a href="#jsDelivr-（cloudflare-CDN）" class="headerlink" title="jsDelivr （cloudflare CDN）"></a>jsDelivr （cloudflare CDN）</h3><p><a href="https://www.jsdelivr.com/">https://www.jsdelivr.com/</a></p>
<h3 id="cdnjs-（cloudflare-CDN）"><a href="#cdnjs-（cloudflare-CDN）" class="headerlink" title="cdnjs （cloudflare CDN）"></a>cdnjs （cloudflare CDN）</h3><p><a href="https://cdnjs.com/">https://cdnjs.com/</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CDN</tag>
        <tag>公共库</tag>
        <tag>加速</tag>
      </tags>
  </entry>
  <entry>
    <title>CBBR：适用于Debian8+、Ubuntu14+、CentOS6+的BBR&amp;魔改BBR</title>
    <url>/2019/09/10/cbbr%EF%BC%9A%E9%80%82%E7%94%A8%E4%BA%8Edebian8%E3%80%81ubuntu14%E3%80%81centos6%E7%9A%84bbr%E9%AD%94%E6%94%B9bbr/</url>
    <content><![CDATA[<p>CBBR：这是一个方便开启魔改bbr&amp;&amp;bbr的脚本。执行两步后最后输出<code>Finish！</code>提示，则成功。</p>
<h3 id="Debian-x2F-Ubuntu（64位）开启魔改BBR"><a href="#Debian-x2F-Ubuntu（64位）开启魔改BBR" class="headerlink" title="Debian&#x2F;Ubuntu（64位）开启魔改BBR"></a>Debian&#x2F;Ubuntu（64位）开启魔改BBR</h3><p>Ubuntu14.04需要提前：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:ubuntu-toolchain-r/test</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install g++-4.9</span><br></pre></td></tr></table></figure>

<p>Debian9需要提前：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -O libssl.deb https://raw.githubusercontent.com/xratzh/CBBR/master/debkernel/libssl1.0.0_1.0.2-1_amd64.deb</span><br><span class="line">dpkg -i libssl.deb</span><br></pre></td></tr></table></figure>

<p><strong>第一步：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install -y wget &amp;&amp; wget --no-check-certificate -O D1.sh https://raw.githubusercontent.com/xratzh/CBBR/master/D1.sh &amp;&amp; bash D1.sh</span><br></pre></td></tr></table></figure>

<p>之后输入Y就会重启</p>
<p><strong>第二步：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -O D2.sh https://raw.githubusercontent.com/xratzh/CBBR/master/D2.sh &amp;&amp; bash D2.sh</span><br></pre></td></tr></table></figure>

<h3 id="CentOS7开启魔改BBR"><a href="#CentOS7开启魔改BBR" class="headerlink" title="CentOS7开启魔改BBR"></a>CentOS7开启魔改BBR</h3><p><strong>第一步：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget --no-check-certificate -O C71.sh https://raw.githubusercontent.com/xratzh/CBBR/master/C71.sh &amp;&amp; bash C71.sh</span><br></pre></td></tr></table></figure>

<p>之后输入Y就会重启</p>
<p><strong>第二步：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -O C72.sh https://raw.githubusercontent.com/xratzh/CBBR/master/C72.sh &amp;&amp; bash C72.sh</span><br></pre></td></tr></table></figure>

<h3 id="CentOS6开启魔改BBR"><a href="#CentOS6开启魔改BBR" class="headerlink" title="CentOS6开启魔改BBR"></a>CentOS6开启魔改BBR</h3><p><strong>第一步：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget --no-check-certificate -O C61.sh https://raw.githubusercontent.com/xratzh/CBBR/master/C61.sh &amp;&amp; bash C61.sh</span><br></pre></td></tr></table></figure>

<p>之后输入Y就会重启</p>
<p><strong>第二步：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -O C62.sh https://raw.githubusercontent.com/xratzh/CBBR/master/C62.sh &amp;&amp; bash C62.sh</span><br></pre></td></tr></table></figure>

<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a><a href="https://github.com/guonning/CBBR-1#tips"></a>Tips</h3><p><strong>存在对于其他内核的删除，只保留4.11.8内核的行为</strong> <strong>为什么不能一键</strong>，因为Linux内核在4.0后支持不重启更换，但是CentOS和Debian&#x2F;Ubuntu很多的内核都是4.0-的版本，Debian9和Ubuntu16.04则是4.0+的版本。 Xratzh压力测试，发现bbr和魔改bbr都开启时会达到最快（个人验证），本脚本默认两者都开启。 脚本里加入了对内核的锁定，之后update时不会变动内核。内核统一选择4.11.8版本。 由于这个我找到的CentOS&#x2F;Ubuntu历史内核的镜像站的网速时快时慢，所以自己下载了上传到GitHub，这样能保持一个较为稳定的速度。原来的内核地址仍然在脚本里面，只是被添加注释了，如果你不信任我上传的内核，可以自己取消注释使用镜像站的内核下载方式。 部分内容借鉴了<a href="https://moeclub.org/2017/06/24/278/">Vicer大佬</a>和<a href="https://github.com/teddysun">Teddysun大佬</a>的脚本，感谢hostloc的yankee大佬和<a href="https://github.com/nanqinlang">nanqinlang</a>大佬的魔改优化。</p>
<p>转自：<a href="https://github.com/veip007/CBBR">https://github.com/veip007/CBBR</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>CentOS</tag>
        <tag>Debian</tag>
        <tag>Linux</tag>
        <tag>BBR</tag>
        <tag>BBR魔改版</tag>
      </tags>
  </entry>
  <entry>
    <title>BBR原版/BBR魔改/BBR Plus + 锐速 等四合一安装脚本</title>
    <url>/2018/12/26/bbr%E5%8E%9F%E7%89%88-bbr%E9%AD%94%E6%94%B9-bbr-plus-%E9%94%90%E9%80%9F-%E7%AD%89%E5%9B%9B%E5%90%88%E4%B8%80%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>这个脚本，集合了BBR原版、BBR魔改、BBR Plus和锐速，愿用哪个用哪个，只能说：太方便了！</p>
<p>在vultr上Centos 7, Debian 8&#x2F;9, Ubuntu 16&#x2F;18测试通过。不支持OVZ和LXC。</p>
<p>建议SSH下，root用户。</p>
<p><strong>一、安装证书</strong> <code>apt-get -y install ca-certificates</code> 或 <code>yum -y install ca-certificates</code></p>
<p><strong>二、安装</strong> <code>wget &quot;https://github.com/chiakge/Linux-NetSpeed/raw/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</code> 1、先在[1 – 3]切换内核（第一次显示为bbr内核也要切换一遍），重启 <img src="https://www.jarods.org/wp-content/uploads/2018/12/bbr-4.png"> 出现这个选no <img src="https://www.jarods.org/wp-content/uploads/2018/12/bbr-4-1.png"></p>
<p>2、重启后不用再下载脚本，直接 .&#x2F;tcp.sh ，在[4 – 8]中选你要开的加速</p>
<p>“1. 安装 BBR&#x2F;BBR魔改版内核” 对应4,5,6（原版，魔改，暴力魔改） “2. 安装 BBRplus版内核 ” 对应7（plus） “3. 安装 Lotserver(锐速)内核” 对应8（锐速）</p>
<p>3、开启后再 .&#x2F;tcp.sh ， 显示开启成功则启动成功，你也可以自己手动确认</p>
<p>现在你可以自由的切换你想要的加速，直到你不想折腾为止~</p>
<p>转自：<a href="https://www.hostloc.com/thread-508015-1-1.html">https://www.hostloc.com/thread-508015-1-1.html</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>BBR</tag>
        <tag>BBR魔改版</tag>
        <tag>BBR Plus</tag>
        <tag>锐速</tag>
      </tags>
  </entry>
  <entry>
    <title>Caddy Web Server一键管理（开始/停止/安装/更新/卸载）脚本</title>
    <url>/2018/11/21/caddy-web-server%E4%B8%80%E9%94%AE%E7%AE%A1%E7%90%86%EF%BC%88%E5%BC%80%E5%A7%8B-%E5%81%9C%E6%AD%A2-%E5%AE%89%E8%A3%85-%E6%9B%B4%E6%96%B0-%E5%8D%B8%E8%BD%BD%EF%BC%89%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p><strong>说明：</strong><code>Caddy</code>是一个极简而强大的<code>HTTP</code>服务器，支持<code>HTTP/2</code>静态网页服务器，安装也快，之前也发过逗比的一个<code>Caddy</code>脚本，参考：<a href="https://www.moerats.com/archives/404/">一个极简的HTTP Server： Caddy一键安装脚本</a>，不过该脚本有点简洁，只提供安装+运行功能，现在再发个功能比较全的<code>Caddy</code>脚本，该脚本是爱学习的博主无意间在国外技术网站看到的，而国内很难找到这么齐全的，所以就分享给大家，且该脚本支持开始、停止、安装、更新、卸载等功能。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>Github地址：</strong><a href="https://github.com/sayem314/Caddy-Web-Server-Installer">https://github.com/sayem314/Caddy-Web-Server-Installer</a></p>
<p><strong>系统要求：</strong><code>Ubuntu 14.x</code>、<code>15.x</code>、<code>16.x</code>，<code>Debian 7.x</code>、<code>8.x</code>、<code>9.x</code>，<code>CentOS 6.8</code>、<code>7.2</code>。</p>
<p>运行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://git.io/vra5C -O - -o /dev/nullbash</span><br></pre></td></tr></table></figure>

<p>然后使用下列命令进行操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">caddy start  #开启Caddy Web Server</span><br><span class="line">caddy stop  #停止Caddy Web Server</span><br><span class="line">caddy reload  #重载Caddy Web Server</span><br><span class="line">caddy restart  #重启Caddy Web Server</span><br><span class="line">caddy status  #查看Caddy Web Server状态</span><br><span class="line">caddy install  #安装Caddy Web Server</span><br><span class="line">caddy edit  #编辑配置文件Caddyfile</span><br><span class="line">caddy service  #使Caddy Web Server成为一项服务(upstart/systemd)</span><br><span class="line">caddy update  #升级Caddy Web Server</span><br><span class="line">caddy delete  #卸载Caddy and data</span><br><span class="line">caddy about  #关于Caddy Web Server</span><br><span class="line">caddy version  #检测脚本/Caddy/PHP5-fpm版本信息</span><br></pre></td></tr></table></figure>

<p>安装插件命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">caddy install http.cache,http.filemanager,http.ipfilter,http.ratelimit</span><br></pre></td></tr></table></figure>

<p>安装<code>caddy</code>的时候会要求你输入域名，邮箱（帮你自动签发<code>ssl</code>），然后使用命令启动<code>caddy</code>即可！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">虚拟主机文件夹：/var/caddywww</span><br><span class="line">配置文件夹：/etc/Caddyfile</span><br></pre></td></tr></table></figure>

<p>更多插件参考：<a href="https://caddyserver.com/download">https://caddyserver.com/download</a>。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Caddy</tag>
      </tags>
  </entry>
  <entry>
    <title>centminmod,centos系统下LNMP一键安装脚本</title>
    <url>/2018/04/20/centminmodcentos%E7%B3%BB%E7%BB%9F%E4%B8%8Blnmp%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>今天给大家介绍一个国外的非常流行的建站生产环境一键安装脚本，是一个集成我们日常建站过程中绝大多组件的LEMP安装包，操作简单方便，有充足的资源以及大量的用户在维护，官方提供论坛交流。第一个版本发布于2011年至今一直没有间断，最近一个版本发布于2015年7月31日。官方的最低要求是cetnos系统，256M内存，其实在实际过程中在128M内存的XEN或者KVM上安装也是没有什么大问题的。</p>
<p>官方网站：http:&#x2F;&#x2F;<a href="https://www.zhujiceping.com/tag/centminmod/" title="View all posts in centminmod">centminmod</a>.com&#x2F;</p>
<p>默认的：</p>
<p><a href="https://centminmod.com/changelog.html"><strong>Latest Centmin Mod</strong></a> auto installs <a href="https://centminmod.com/nginx.html"><strong>Nginx server</strong></a> on CentOS Linux with the following:</p>
<ul>
<li><a href="https://centminmod.com/nginx.html">Nginx 1.13.12</a> (<a href="https://centminmod.com/nginx_configure_https_ssl_spdy.html"><strong>https &#x2F; SPDY SSL</strong></a> &#x2F; <a href="https://centminmod.com/http2-nginx.html"><strong>HTTP&#x2F;2 SSL + HTTP&#x2F;2 Server Push</strong></a> + <a href="https://centminmod.com/nginx_ngx_pagespeed.html"><strong>ngx_pagespeed</strong></a> + <a href="https://centminmod.com/nginx.html#lua"><strong>Lua&#x2F;LuaJIT support)</strong></a></li>
<li><a href="https://centminmod.com/phpfpm.html">PHP-FPM 5.5.38</a> + Zend OpCache (support PHP 5.3-5.6, &amp; <a href="https://community.centminmod.com/posts/21443/"><strong>PHP 7.0</strong></a> &amp; <a href="https://community.centminmod.com/threads/php-7-2-0-ga-stable-vs-php-7-1-12-vs-7-0-26-vs-5-6-32-benchmarks.13590/"><strong>PHP 7.1-7.2</strong> in latest Beta</a>)</li>
<li><a href="https://centminmod.com/mysql.html">MariaDB 10.0.x MySQL performance fork</a> (MariaDB 10.1.x <a href="https://centminmod.com/install.html">latest Beta</a>)</li>
<li>PHP opcode cache: Zend OpCache 7.0.5+, APC Cache 3.13, Xcache 3.2.0</li>
<li><a href="https://centminmod.com/memcached.html">Memcached Server 1.5.x + Memcache 3.0.8+ PHP Extension</a></li>
<li><a href="https://centminmod.com/memcached.html">Libmemcached 1.0.18 + Memcached 2.2.0 PHP Extension</a></li>
<li>Multi-threaded compression: <a href="https://community.centminmod.com/threads/multi-threaded-compression-tools-pigz-pbzip2-lbzip2-plzip-p7zip.92/">pigz, pbzip2, lbzip2, plzip, p7zip</a> (optional)</li>
<li><a href="https://centminmod.com/csf_firewall.html">CSF Firewall</a></li>
<li><a href="https://centminmod.com/ftp.html">Pure-FTPD Virtual FTP User</a> support</li>
<li><a href="https://centminmod.com/install.html"><strong>Centmin Mod LEMP Install Guide For CentOS 6&#x2F;7 Linux</strong></a></li>
</ul>
<p> </p>
<p>Centmin Mod稳定版本安装：<strong>123.08stable</strong></p>
<p>请注意，强烈建议您尝试下面新的和大大改进的<a href="https://centminmod.com/changelog.html">最新Centmin Mod测试版</a>，但它会有很大的改进，一旦更新的文档&#x2F;指南写完，它很快就会保持最新的稳定性。</p>
<p>yum -y update; curl -O <a href="https://centminmod.com/installer.sh">https://centminmod.com/installer.sh</a> &amp;&amp; chmod 0700 installer.sh &amp;&amp; bash installer.sh</p>
<p>Centmin Mod最新Beta版安装：<strong>123.09beta01</strong></p>
<p>如果你想尝试新的和大大改进的<a href="https://centminmod.com/changelog.html">最新Centmin Mod beta</a>，你可以切换到使用<code>betainstaller.sh</code>下面的一行。最新的测试版还增加了可选的<a href="https://community.centminmod.com/threads/centmin-mod-auditd-support-added-in-latest-123-09beta01.9071/">Auditd和MariaDB审计插件支持</a>，您可以尝试。还有一个<a href="https://community.centminmod.com/threads/autoprotect-sh-apache-htaccess-check-migration-to-nginx-deny-all.7308/">tools &#x2F; autoprotect.sh</a>脚本可能需要调整到您的Web主机的Web应用程序，这些应用程序依赖于Nginx不支持的Apache .htaccess保护。</p>
<p>yum -y update; curl -O <a href="https://centminmod.com/betainstaller.sh">https://centminmod.com/betainstaller.sh</a> &amp;&amp; chmod 0700 betainstaller.sh &amp;&amp; bash betainstaller.sh</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/04/centminmod1.jpg" alt="centminmod,centos系统下LNMP一键安装脚本"><img src="https://www.jarods.org/wp-content/uploads/2018/04/centminmod2.jpg" alt="centminmod,centos系统下LNMP一键安装脚本"></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>centminmod</tag>
        <tag>LNMP</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 6/7升级最新内核并开启Google BBR</title>
    <url>/2018/01/30/centos-6-7%E5%8D%87%E7%BA%A7%E6%9C%80%E6%96%B0%E5%86%85%E6%A0%B8%E5%B9%B6%E5%BC%80%E5%90%AFgoogle-bbr/</url>
    <content><![CDATA[<p>Google BBR是一款TCP加速工具，但要求Linux内核必须大于4.9，之前分享过文章《<a href="https://www.xiaoz.me/archives/7945">CentOS一键升级内核并开启Google BBR</a>》，这个方法虽然方便，但是发现在<a href="https://www.xiaoz.me/archives/9222">Raksmart</a>上升级失败了，于是尝试手动升级内核。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/01/linux_k.jpg"></p>
<h3 id="CentOS-7升级最新内核"><a href="#CentOS-7升级最新内核" class="headerlink" title="CentOS 7升级最新内核"></a>CentOS 7升级最新内核</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#导入ELRepo 公钥</span><br><span class="line">wget https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">rpm --import RPM-GPG-KEY-elrepo.org</span><br><span class="line">#安装ELRepo</span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br><span class="line">#升级最新内核</span><br><span class="line">yum --enablerepo=elrepo-kernel install kernel-ml -y</span><br></pre></td></tr></table></figure>

<p>内核升级完成后老的内核和新的会同时存在，CentOS 7 使用grub2引导程序，需要将最新内核优先级调整最高。先输入命令<code>cat /boot/grub2/grub.cfggrep menuentry</code>查找所有内核，并找出最新内核的全名，并记录下来，如下截图。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/01/snipaste_20180119_182122.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#设置最新内核（请输入上面查询到的最新内核）</span><br><span class="line">grub2-set-default &quot;CentOS Linux (4.14.14-1.el7.elrepo.x86_64) 7 (Core)&quot;</span><br><span class="line">#设置完毕后，输入下面的命令查看是否成功</span><br><span class="line">grub2-editenv list</span><br><span class="line">[root@test2018119 ~]# grub2-editenv list</span><br><span class="line">saved_entry=CentOS Linux (4.14.14-1.el7.elrepo.x86_64) 7 (Core)</span><br><span class="line">#ok，没问题重启服务器生效</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<h3 id="CentOS-6升级最新内核"><a href="#CentOS-6升级最新内核" class="headerlink" title="CentOS 6升级最新内核"></a>CentOS 6升级最新内核</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#导入ELRepo 公钥</span><br><span class="line">wget https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">rpm --import RPM-GPG-KEY-elrepo.org</span><br><span class="line">#安装ELRepo</span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-6-8.el6.elrepo.noarch.rpm</span><br><span class="line">#升级最新内核</span><br><span class="line">yum --enablerepo=elrepo-kernel install kernel-ml -y</span><br></pre></td></tr></table></figure>

<p>升级完毕后修改<code>/etc/grub.conf</code>将default&#x3D;0修改为default&#x3D;1，然后<code>reboot</code>重启服务器。</p>
<h3 id="查看内核是否升级成功"><a href="#查看内核是否升级成功" class="headerlink" title="查看内核是否升级成功"></a>查看内核是否升级成功</h3><p>输入<code>uname -r</code>可查看当前内核，如果大于4.9说明已经成功了，如果操作后发现你系统网络不通了，估计是升级失败挂掉了，这种情况只能从VNC控制台进入，参照上面的方式修改为原来老的内核启动。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#内核大于4.9</span><br><span class="line">[root@test2018119 ~]# uname -r</span><br><span class="line">4.14.14-1.el7.elrepo.x86_64</span><br></pre></td></tr></table></figure>

<h3 id="开启BBR"><a href="#开启BBR" class="headerlink" title="开启BBR"></a>开启BBR</h3><p>直接复制下面的命令即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#修改配置</span><br><span class="line">cat &gt;&gt;/etc/sysctl.conf &lt;&lt; EOF</span><br><span class="line">net.core.default_qdisc=fq</span><br><span class="line">net.ipv4.tcp_congestion_control=bbr</span><br><span class="line">EOF</span><br><span class="line">#使配置生效</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<p>输入下面的命令来检测，如果看到返回的结果包含bbr 说明成功了，如下截图。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@test2018119 ~]# sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line">net.ipv4.tcp_available_congestion_control = bbr cubic reno</span><br><span class="line">[root@test2018119 ~]# lsmod  grep bbr</span><br><span class="line">tcp_bbr                20480  0 </span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>优先推荐使用秋水逸冰的一键脚本升级内核《<a href="https://www.xiaoz.me/archives/7945">CentOS一键升级内核并开启Google BBR</a>》，如果失败了可以尝试上述方法手动升级。此方法适用于KVM&#x2F;XEN虚拟化，OpenVZ虚拟化VPS请不要操作，一般不会成功，建议不要在生产环境操作，以免出现异常。</p>
<blockquote>
<p>此文部分内容参考了： <a href="http://elrepo.org/tiki/tiki-index.php" title="ELRepo : HomePage">ELRepo : HomePage</a> <a href="http://blog.csdn.net/wh211212/article/details/78683753" title="CentOS6.X 升级内核Kernel">CentOS6.X 升级内核Kernel</a> <a href="http://blog.51cto.com/forsk/1841795" title="Centos 7 修改内核启动顺序">Centos 7 修改内核启动顺序</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>BBR</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 / Debian 9启用原生Google BBR的方法，实现TCP加速</title>
    <url>/2019/10/13/centos-7-debian-9%E5%90%AF%E7%94%A8%E5%8E%9F%E7%94%9Fgoogle-bbr%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%8C%E5%AE%9E%E7%8E%B0tcp%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<p>CentOS 7&#x2F;Debian 9等新内核均已自带BBR，直接启用，安全。</p>
<p><strong>一、CentOS 7启用原生Google BBR</strong></p>
<p><strong>（一）更新CentOS 7内核为支持BBR的内核</strong></p>
<p>1、查看Centos内核</p>
<p>uname -r</p>
<p>2、如果低于4.10，则更新内核</p>
<p>rpm –import <a href="https://www.elrepo.org/RPM-GPG-KEY-elrepo.org">https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</a><br>rpm -Uvh <a href="http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm">http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</a><br>yum –enablerepo&#x3D;elrepo-kernel install kernel-ml -y</p>
<p>3、安装完成后，查看已安装的内核：</p>
<p>rpm -qa  grep kernel</p>
<p>如果看到 kernel-ml-5.3.5-1.el7.elrepo.x86_64 字样的，即是成功。 4、更新开机启动</p>
<p>egrep ^menuentry &#x2F;etc&#x2F;grub2.cfg  cut -f 2 -d \‘</p>
<p>会看到类似这样的</p>
<p>CentOS Linux (5.3.5-1.el7.elrepo.x86_64) 7 (Core)<br>CentOS Linux (3.10.0-957.1.3.el7.x86_64) 7 (Core)<br>CentOS Linux (0-rescue-96820b9851c24560b5f942f2496b9aeb) 7 (Core)</p>
<p>设置CentOS Linux (5.3.5-1.el7.elrepo.x86_64) 7 (Core)为第一启动顺序（因为启动是从0开始计算）</p>
<p>grub2-set-default 0</p>
<p>5、重启系统</p>
<p>reboot</p>
<p><strong>（二）CentOS 7启用BBR</strong></p>
<p>1、执行</p>
<p>echo ‘net.core.default_qdisc&#x3D;fq’  sudo tee -a &#x2F;etc&#x2F;sysctl.conf<br>echo ‘net.ipv4.tcp_congestion_control&#x3D;bbr’  sudo tee -a &#x2F;etc&#x2F;sysctl.conf<br>sysctl -p</p>
<p>2、查看内核是否已开启BBR</p>
<p>sysctl net.ipv4.tcp_available_congestion_control</p>
<p>和</p>
<p>lsmod  grep bbr</p>
<p>如果均显示BBR字样的，表示开启BBR成功。</p>
<p><strong>二、Debian 9启用原生Google BBR</strong></p>
<p>1、修改系统变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure>

<p>2、保存生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<p>3、查看内核是否已开启BBR</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure>

<p>显示如下内容表示开启：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line">net.ipv4.tcp_available_congestion_control = bbr cubic reno</span><br></pre></td></tr></table></figure>

<p>4、通过上面的操作应该已经启动了BBR。再看下BBR是否启动。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsmod  grep bbr</span><br></pre></td></tr></table></figure>

<p>显示以下即启动成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsmod  grep bbr</span><br><span class="line">tcp_bbr                20480  14</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Debian</tag>
        <tag>BBR</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos 6安装BBR魔改版</title>
    <url>/2017/11/19/centos-6%E5%AE%89%E8%A3%85bbr%E9%AD%94%E6%94%B9%E7%89%88/</url>
    <content><![CDATA[<p><strong>仅限KVM VPS</strong>，需更换内核。其他BBR脚本： a、<a href="https://zhujiwiki.com/10156.html">TCP加速：BBR 一键安装</a> b、<a href="https://zhujiwiki.com/11016.html">TCP加速：BBR 增强版 for Debian&#x2F;Ubuntu</a> c、<a href="https://zhujiwiki.com/11579.html">OpenVZ VPS 安装 Google BBR 一键脚本</a></p>
<p>安装过程如下： 1、将系统内核更换成 4.12 内核</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh https://zhujiwiki.com/usr/uploads/2017/11/kernel-ml-4.12.10-1.el6.elrepo.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>然后重启。</p>
<p>2、修改引导文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /boot/grub/grub.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://www.jarods.org/wp-content/uploads/2017/11/1627905140.jpg" alt="bbr-centos6-1.jpg" title="bbr-centos6-1.jpg"> 将 default&#x3D;1 改成default&#x3D;0，然后重新启动。</p>
<p>3、查看当前是否使用的是4.12.10-1的内核</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uanme -a</span><br></pre></td></tr></table></figure>

<p><img src="https://www.jarods.org/wp-content/uploads/2017/11/3622794088.jpg" alt="bbr-centos6-2.jpg" title="bbr-centos6-2.jpg"></p>
<p>4、更新以下文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum remove kernel-headers -y </span><br><span class="line">rpm -ivh https://zhujiwiki.com/usr/uploads/2017/11/kernel-ml-headers-4.12.10-1.el6.elrepo.x86_64.rpm  </span><br><span class="line">rpm -ivh https://zhujiwiki.com/usr/uploads/2017/11/kernel-ml-devel-4.12.10-1.el6.elrepo.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>5、进行BBR魔改操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y make gcc </span><br><span class="line">wget -O ./tcp_tsunami.c https://zhujiwiki.com/usr/uploads/2017/11/tcp_tsunami.c </span><br><span class="line">echo &quot;obj-m:=tcp_tsunami.o&quot; &gt; Makefile </span><br><span class="line">make -C /lib/modules/$(uname -r)/build M=`pwd` modules CC=/usr/bin/gcc </span><br><span class="line">chmod +x ./tcp_tsunami.ko </span><br><span class="line">cp -rf ./tcp_tsunami.ko /lib/modules/$(uname -r)/kernel/net/ipv4 </span><br><span class="line">insmod tcp_tsunami.ko </span><br><span class="line">depmod -a </span><br><span class="line">echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf </span><br><span class="line">echo &quot;net.ipv4.tcp_congestion_control=tsunami&quot; &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure>

<p>6、运行 sysctl -p 将内核参数生效。</p>
<p>7、重启。</p>
<p>8、查看是否成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsmod  grep tsunami</span><br></pre></td></tr></table></figure>

<p><img src="https://www.jarods.org/wp-content/uploads/2017/11/3873701884.jpg" alt="bbr-centos6-3.jpg" title="bbr-centos6-3.jpg"></p>
<p>via：<a href="https://www.shaobing.hk/post/8.html">https://www.shaobing.hk/post/8.html</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>BBR魔改版</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 一键安装桌面环境（可远程RDP连接）</title>
    <url>/2018/08/25/centos-7-%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83%EF%BC%88%E5%8F%AF%E8%BF%9C%E7%A8%8Brdp%E8%BF%9E%E6%8E%A5%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>本文全文转载自：<a href="https://tech.cxthhhhh.com/linux/2018/08/08/original-one-click-installation-of-desktop-environment-rdp-windows-support-for-linux-cn.html">https://tech.cxthhhhh.com/linux/2018/08/08/original-one-click-installation-of-desktop-environment-rdp-windows-support-for-linux-cn.html</a></p>
<p>帖子：<a href="https://www.hostloc.com/thread-467096-1-1.html">https://www.hostloc.com/thread-467096-1-1.html</a></p>
<p>如有任何冒犯或侵权，请联系本人TG：@copyylws</p>
</blockquote>
<p>在一些时候下，我们需要安装简单快速的桌面环境并且通过RDP访问。</p>
<p>例如：<strong>运行浏览器，或者一些Linux应用程序，甚至一些Windows应用程序。</strong></p>
<p>现在，你有了一个更好的解决方案，只需一键，就可以快速的帮你安装好桌面环境和远程桌面连接以及Windows支持。如果你正在寻找这样的解决方案，就来试试吧。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/08/2018081820373650.png" alt="#脚本# CentOS 7 一键安装桌面环境（可远程RDP连接）-主机博客"></p>
<p>我将使用CentOS7来演示如何操作。</p>
<h2 id="使用要求"><a href="#使用要求" class="headerlink" title="使用要求"></a>使用要求</h2><ul>
<li>最低硬件要求：CPU核心≥1核心，<strong>内存≥1 GB，磁盘空间≥15 GB</strong></li>
<li>系统为<strong>全新</strong>CentOS 7 最小化安装版本</li>
<li>请尽量<strong>不要使用</strong> OpenVZ 虚拟化的机器运行此脚本</li>
</ul>
<h2 id="脚本功能"><a href="#脚本功能" class="headerlink" title="脚本功能"></a>脚本功能</h2><ol>
<li>只需一键，即可为CentOS安装桌面环境和RDP远程桌面连接。</li>
<li>为您的Linux系统运行Windows应用程序。脚本自动帮你安装Wine X64和X86，现在可以在Linux上运行Windows应用程序。例如：Telegram、WeChat、Thunder</li>
<li>默认创建3GB交换内存。 避免内存不足导致的错误。（交换位置：&#x2F;var&#x2F;swapd）</li>
<li>自动安装中文输入环境，中文支持。</li>
<li>安装人们推荐的软件，例如浏览器和输入法。（包含Chrome，Firefox）</li>
<li>安装远程桌面客户端。（支持RDP&#x2F;SSH&#x2F;NX&#x2F;SFTP&#x2F;VNC&#x2F;XDMCP协议）</li>
</ol>
<h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><p>请仔细阅读上述详情后，使用Root用户运行如下脚本：</p>
<p>1</p>
<p>yum install curl ca-certificates -y &amp;&amp; curl -sSL <a href="https://raw.githubusercontent.com/MeowLove/CentOS/-One/-click/-Installation/-of/-Desktop/-Environment/-and/-Remote/-Desktop/-Connection/-RDP/master/download/main/install.sh">https://raw.githubusercontent.com/MeowLove/CentOS\-One\-click\-Installation\-of\-Desktop\-Environment\-and\-Remote\-Desktop\-Connection\-RDP/master/download/main/install.sh</a> sudo bash</p>
<p>完成后。你就可以连接IP:3389（通过远程桌面连接）。默认RDP登陆账号：<strong>root</strong>，密码：<strong>你的root密码</strong>。</p>
<h2 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h2><ul>
<li>创建新用户时，请授权新用户RDP远程连接。 你需要这样做。（我将演示授权新用户CXT）<ul>
<li>① 首先你应该在[控制中心]-[用户和组群]创建新用户。</li>
<li>② 使用root用户切换进入到CXT的目录。 <code>cd /home/CXT</code></li>
<li>③ 输入下面的命令(你需要注意，下面命令中引号是”英文状态单引号”。) <code>touch ./.Xclients</code> <code>echo &#39;mate-session&#39; &gt; ./.Xclients</code> <code>chmod a+x ./.Xclients</code></li>
</ul>
</li>
<li>Chrome浏览器不能通过root用户运行。如果您需要运行，请新建账户。(或者附加运行命令 <code>--no-sandbox</code>)</li>
<li>一些Windows应用程序不工作，也许需要您关闭SELinux。（不推荐，一般情况下不需要）</li>
<li>一些Windows软件看起来模糊，你需要调整软件后面的背景颜色为暗色调。（例如更换壁纸为深色壁纸）</li>
<li>当前的默认系统语言是中文。如果您是英语用户，请执行 <code>sudo localectl set-locale LANG = en_US.UTF-8</code></li>
</ul>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>RDP</tag>
        <tag>桌面</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 安装Duplicati 云备份工具</title>
    <url>/2018/11/05/centos-7-%E5%AE%89%E8%A3%85duplicati-%E4%BA%91%E5%A4%87%E4%BB%BD%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>Duplicati是一个跨平台的云存储的同步备份软件, 他支持Amazon S3, OneDrive, Google Drive, Rackspace Cloud Files, HubiC, Backblaze (B2), Amazon Cloud Drive (AmzCD), Swift &#x2F; OpenStack, WebDAV, SSH (SFTP), FTP, 等等.</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/11/iyn8PS.md_.png" alt="iyn8PS.md.png" title="iyn8PS.md.png"></p>
<p><a href="https://github.com/duplicati/duplicati">https://github.com/duplicati/duplicati</a> <a href="https://www.duplicati.com/">https://www.duplicati.com/</a></p>
<p>CentOS 7:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install yum-utils</span><br><span class="line">rpm --import &quot;http://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF&quot;</span><br><span class="line">yum-config-manager --add-repo http://download.mono-project.com/repo/centos7/</span><br><span class="line">yum install mono-devel</span><br></pre></td></tr></table></figure>

<p>下载最新Duplicati</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/duplicati/duplicati/releases/download/v2.0.3.12-2.0.3.12_canary_2018-10-23/duplicati-2.0.3.12-2.0.3.12_canary_20181023.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install duplicati*</span><br></pre></td></tr></table></figure>

<p>把防火墙8200端口打开</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#firewall-cmd --add-port=8200/tcp --permanent</span><br><span class="line">#firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>再</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;[Unit]</span><br><span class="line">Description=Duplicati Backup software</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/mono /usr/lib/duplicati/Duplicati.Server.exe --webservice-interface=any</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=30</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target&quot; &gt; /etc/systemd/system/duplicati.service</span><br></pre></td></tr></table></figure>

<p>再启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable duplicati</span><br><span class="line">systemctl start duplicati</span><br></pre></td></tr></table></figure>

<p>启动后输入<a href="http://你的ip地址/">http:&#x2F;&#x2F;你的ip地址</a>:8200访问, 一定要是ip地址, 不能是域名.</p>
<p>教程参考 <a href="https://duplicati.readthedocs.io/en/latest/02-installation/">https://duplicati.readthedocs.io/en/latest/02-installation/</a> <a href="https://forum.level1techs.com/t/headless-duplicati-on-centos-guide/128799">https://forum.level1techs.com/t/headless-duplicati-on-centos-guide/128799</a> <a href="https://github.com/duplicati/duplicati/releases">https://github.com/duplicati/duplicati/releases</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Duplicati</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos 7 搭建DNS正反向解析</title>
    <url>/2020/04/05/centos-7-%E6%90%AD%E5%BB%BAdns%E6%AD%A3%E5%8F%8D%E5%90%91%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>请注意，本文编写于 216 天前，最后修改于 188 天前，其中某些信息可能已经过时。</p>
<h3 id="0x01-服务安装"><a href="#0x01-服务安装" class="headerlink" title="0x01 服务安装"></a>0x01 服务安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install bind -y</span><br></pre></td></tr></table></figure>

<h3 id="0x02-修改named-conf"><a href="#0x02-修改named-conf" class="headerlink" title="0x02 修改named.conf"></a>0x02 修改named.conf</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/named.conf</span><br><span class="line"> //监听端口，默认为127.0.0.1,修改为any,监听所有地址的53端口，或删除此行配置，默认监听所有地址的53端口</span><br><span class="line"> listen-on port 53 &#123; any; &#125;;，</span><br><span class="line"> //允许查询DNS服务器的来源，默认为localhost，修改为any代表允许所有来源，或删除此行配置，默认允许所有来源</span><br><span class="line"> allow-query     &#123; any; &#125;;</span><br></pre></td></tr></table></figure>

<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/390800629.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/named.rfc1912.zones</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编辑named.rfc1912.zone，在末尾添加如下内容</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">正向解析</span></span><br><span class="line">zone &quot;hello.com&quot; IN &#123;</span><br><span class="line">        type master;</span><br><span class="line">        file &quot;mydomain.com.zone&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">反向解析</span></span><br><span class="line">zone &quot;1.168.192.in-addr.arpa&quot; IN &#123;</span><br><span class="line">        type master;</span><br><span class="line">        file &quot;mydomain.com.local&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/1708073978.png"></p>
<h3 id="0x03-创建正解析文件"><a href="#0x03-创建正解析文件" class="headerlink" title="0x03 创建正解析文件"></a>0x03 创建正解析文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">复制模板</span></span><br><span class="line">cd /var/named</span><br><span class="line">cp -p named.localhost mydomain.com.zone</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">TTL 1D</span></span><br><span class="line">@       IN SOA  mydomain.com.  admin.mydomain.com (</span><br><span class="line">                                        1       ; serial</span><br><span class="line">                                        1D      ; refresh</span><br><span class="line">                                        1H      ; retry</span><br><span class="line">                                        1W      ; expire</span><br><span class="line">                                        3H )    ; minimum</span><br><span class="line">@        IN    NS   dns.mydomain.com.</span><br><span class="line">dns     IN     A    192.168.1.125</span><br><span class="line">@        IN    A     192.168.1.122</span><br></pre></td></tr></table></figure>

<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/1201424862.png"></p>
<h3 id="0x04-创建反解析文件"><a href="#0x04-创建反解析文件" class="headerlink" title="0x04 创建反解析文件"></a>0x04 创建反解析文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">复制模板</span></span><br><span class="line">cp -p named.localhost mydomain.com.local</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">TTL 1D</span></span><br><span class="line">@       IN SOA  mydomain.com.  admin.mydomain.com (</span><br><span class="line">                                        1       ; serial</span><br><span class="line">                                        1D      ; refresh</span><br><span class="line">                                        1H      ; retry</span><br><span class="line">                                        1W      ; expire</span><br><span class="line">                                        3H )    ; minimum</span><br><span class="line">@        IN    NS     dns.mydomain.com.</span><br><span class="line">125     IN    PTR   dns.mydomain.com.</span><br><span class="line">122     IN    PTR   mydomain.com.</span><br></pre></td></tr></table></figure>

<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/2071367073.png"></p>
<h3 id="0x05-主配置文件语法检查"><a href="#0x05-主配置文件语法检查" class="headerlink" title="0x05 主配置文件语法检查"></a>0x05 主配置文件语法检查</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">named-checkconf -z /etc/named.conf</span><br></pre></td></tr></table></figure>

<h3 id="0x06-权限修改"><a href="#0x06-权限修改" class="headerlink" title="0x06 权限修改"></a>0x06 权限修改</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">由于文件是在root用户下创建，named无法读取</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">需要修改文件权限，否则会出现server can<span class="string">&#x27;t find *: SERVFAIL错误</span></span></span><br><span class="line">chown named mikuac.cn.zone</span><br><span class="line">chown named mikuac.cn.loacl</span><br></pre></td></tr></table></figure>

<h3 id="0x07-端口开放"><a href="#0x07-端口开放" class="headerlink" title="0x07 端口开放"></a>0x07 端口开放</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开放TCP与UDP 53端口</span></span><br><span class="line">firewall-cmd --permanent --add-port=53/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=53/udp</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h3 id="0x08-服务启动"><a href="#0x08-服务启动" class="headerlink" title="0x08 服务启动"></a>0x08 服务启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start named</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 配置rsync+lsyncd实现海量文件实时同步</title>
    <url>/2018/11/05/centos-7-%E9%85%8D%E7%BD%AErsynclsyncd%E5%AE%9E%E7%8E%B0%E6%B5%B7%E9%87%8F%E6%96%87%E4%BB%B6%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<p>rsync是一个非常好用的文件同步工具, 但是无法进行实时同步, 但通过lsyncd+rsync可以完美的解决海量文件实时备份, lsyncd其实可以理解为inotify + rsync的重新打包整合, 现在参考部分教程简单记录一下.</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/11/i44lHs.md_.png" alt="i44lHs.md.png" title="i44lHs.md.png"></p>
<p>主要目的 从主服务器上实时增量备份文件到另外一台服务器上.</p>
<p>先在主服务器上创建无密码的ssh证书.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /root/</span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>一直按回车就会得到两个ssh证书文件, 一个id_rsa秘钥, 一个id_rsa.pub公钥.</p>
<p>查看公钥证书</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /root/.ssh/id_rsa.pub</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后去备份服务器上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /root/</span><br><span class="line">mkdir /root/.ssh</span><br><span class="line">vi id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>然后把之前在主服务器上创建的公钥id_rsa.pub内容复制到这里</p>
<p>把公钥增量添加到~&#x2F;.ssh&#x2F;authorized_keys里面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /root/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>再更改公钥文件权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 600 /root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>更改sshd配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>把#AuthorizedKeysFile .ssh&#x2F;authorized_keys前面的#去掉, 让其保持为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>然后重启备份服务器的ssh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service sshd restart</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>设置完成后再会主服务器 先测试一下是否可以免密码登录备份服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh root@备份服务器的ip</span><br></pre></td></tr></table></figure>

<p>如果能正常登录就可以.</p>
<p>然后在备份服务器上操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/rsyncd.conf</span><br></pre></td></tr></table></figure>

<p>配置如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[backup]</span><br><span class="line"># destination directory for copy</span><br><span class="line">path = /home/backup</span><br><span class="line"># hosts you allow to access</span><br><span class="line">hosts allow = 1.1.1.1</span><br><span class="line">hosts deny = *</span><br><span class="line">list = true</span><br><span class="line">uid = root</span><br><span class="line">gid = root</span><br><span class="line">read only = false</span><br></pre></td></tr></table></figure>

<p>再设置rsync自动启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable rsyncd.service</span><br><span class="line">systemctl start rsyncd.service</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从再退出, 返回主服务器.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>返回主服务器后 安装lua lua-devel</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install lua lua-devel -y</span><br><span class="line">yum install lsyncd -y</span><br></pre></td></tr></table></figure>

<p>编辑配置lsyncd的配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/lsyncd.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参考配置文件如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">settings &#123;</span><br><span class="line">    logfile = &quot;/var/log/lsyncd.log&quot;,          --日志路径</span><br><span class="line">    statusFile = &quot;/var/log/lsyncd.status&quot;,    --状态文件</span><br><span class="line">    pidfile = &quot;/var/run/lsyncd.pid&quot;,          --pid文件路径</span><br><span class="line">    statusInterval = 1,                       --状态文件写入最短时间</span><br><span class="line">    nodaemon = false,                         --daemon运行</span><br><span class="line">    maxProcesses = 1,                         --最大进程</span><br><span class="line">    maxDelays = 1,                            --最大延迟</span><br><span class="line">&#125;</span><br><span class="line">sync &#123;</span><br><span class="line">    default.rsyncssh,      --默认rsync+ssh,rsync版本需要升级3以上版本</span><br><span class="line">    source = &quot;/home/backup/&quot;,                 --源目录</span><br><span class="line">    delete = true,                            --保持完全同步        </span><br><span class="line">    host = &quot;root@11.22.33.44&quot;,                </span><br><span class="line">    targetdir = &quot;/home/backup/&quot;,              --目标目录</span><br><span class="line">    exclude=&#123;                 </span><br><span class="line">             &quot;.txt&quot;            --需排除的文件</span><br><span class="line">    &#125;,</span><br><span class="line">rsync = &#123;</span><br><span class="line">    binary = &quot;/usr/bin/rsync&quot;, --需先安装好rsync</span><br><span class="line">    archive = true,            --归档</span><br><span class="line">    compress = false,          --压缩</span><br><span class="line">    owner = true,              --属主</span><br><span class="line">    perms = true,              --权限</span><br><span class="line">    whole_file = false</span><br><span class="line">    &#125;,</span><br><span class="line">ssh = &#123;</span><br><span class="line">    port = 22</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>设置开机启动并运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable lsyncd.service</span><br><span class="line">systemctl start lsyncd.service</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后去原服务器的&#x2F;home&#x2F;backup目录下创建一个文件看看会不会自动同步到备份服务器的&#x2F;home&#x2F;backup目录下</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/11/i44FHA.md_.png" alt="i44FHA.md.png" title="i44FHA.md.png"></p>
<p>如果无法运行, 查看状态:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status lsyncd.service</span><br></pre></td></tr></table></figure>

<p>提示</p>
<blockquote>
<p>Error: Terminating since out of inotify watches Consider increasing &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;inotify&#x2F;max_user_watches</p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/11/i5iYPx.md_.jpg" alt="i5iYPx.md.jpg" title="i5iYPx.md.jpg"></p>
<p>这个是超过实例可监听的最大上限, 编辑sysctl.conf文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/sysctl.conf </span><br></pre></td></tr></table></figure>

<p>把监听值改大一点, 在下面添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fs.inotify.max_user_watches = 999999999</span><br></pre></td></tr></table></figure>

<p>再重启lsyncd服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br><span class="line">systemctl restart lsyncd.service</span><br></pre></td></tr></table></figure>

<p>本教程参考以下链接 <a href="https://www.jianshu.com/p/0ecac4f6baf2">https://www.jianshu.com/p/0ecac4f6baf2</a> <a href="https://renwole.com/archives/1001">https://renwole.com/archives/1001</a> <a href="https://linux.cn/article-5849-1.html">https://linux.cn/article-5849-1.html</a> <a href="https://github.com/axkibe/lsyncd">https://github.com/axkibe/lsyncd</a> <a href="https://axkibe.github.io/lsyncd/">https://axkibe.github.io/lsyncd/</a> <a href="http://seanlook.com/2015/05/06/lsyncd-synchronize-realtime/">http://seanlook.com/2015/05/06/lsyncd-synchronize-realtime/</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>lsyncd</tag>
        <tag>Rsync</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7一键安装Caddy + Aria2 + AriaNg实现离线下载</title>
    <url>/2018/10/02/centos-7%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85caddy-aria2-ariang%E5%AE%9E%E7%8E%B0%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<p>目前仅支持CentOS系统，主要解决之前BT&#x2F;磁力无法下载的问题，同时将YAAW替换为AriaNg，管理更加方便，以下简称CCAA</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/download_520.jpg"></p>
<h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ul>
<li>支持HTTP&#x2F;HTTPS&#x2F;FTP&#x2F;BT&#x2F;磁力链接等离线下载，断点续传等</li>
<li>文件管理、视频在线播放</li>
</ul>
<h3 id="安装CCAA"><a href="#安装CCAA" class="headerlink" title="安装CCAA"></a>安装CCAA</h3><p>复制下面的命令，一行一个：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install wget unzip curl</span><br><span class="line">wget https://github.com/helloxz/ccaa/archive/master.zip</span><br><span class="line">unzip master.zip &amp;&amp; <span class="built_in">cd</span> ccaa-master &amp;&amp; sh ccaa.sh</span><br></pre></td></tr></table></figure>

<p>输入1安装CCAA</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/deb6d4a3278a62f8.png"></p>
<p>根据提示设置下载路径、RPC密钥、用户名、密码，稍后需要用到。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/7d61cdfbb786e743.png"></p>
<p>安装完成后会看到如下提示，请务必牢记RPC密钥、用户名、密码等信息。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/4f6c5c97db835ee2.png"></p>
<p>根据提示输入<code>http://IP：6080/</code>打开AriaNg界面，并输入上一个步骤中设置的Caddy用户名和密码。</p>
<p>打开AriaNg设置 – RPC ，填写Aria2 RPC 密钥，然后刷新页面，至此已经完成，可以愉快的开始下片啦。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/0262be6ae3e9dcc2.png"></p>
<h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><p>点击右上角文件管理按钮会跳转到Caddy filemanager进行文件管理，或者手动输入地址<code>http://IP:6080/admin</code>也可以进入Caddy filemanager</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/287d16db7d279376.png"></p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看ccaa状态</span></span><br><span class="line">ccaa status</span><br><span class="line"><span class="comment">#启动ccaa</span></span><br><span class="line">ccaa start</span><br><span class="line"><span class="comment">#停止ccaa</span></span><br><span class="line">ccaa stop</span><br><span class="line"><span class="comment">#重启ccaa</span></span><br><span class="line">ccaa restart</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>如果服务器有启用安全组，请务必在安全组放行以下端口：<code>6080/6800/6998/51413</code></li>
<li>大部分服务商是禁止下载BT的，若因违规使用导致服务器被封本人不承担任何责任</li>
</ul>
<h3 id="其它说明"><a href="#其它说明" class="headerlink" title="其它说明"></a>其它说明</h3><ul>
<li>帮助文档：<a href="https://doc.xiaoz.me/#/ccaa/">https://doc.xiaoz.me/#/ccaa/</a> （务必查看）</li>
<li>项目地址：<a href="https://github.com/helloxz/ccaa">https://github.com/helloxz/ccaa</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Caddy</tag>
        <tag>Aria2</tag>
        <tag>AriaNg</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7使用ttyd搭建一个WEB共享终端（WebSSH）</title>
    <url>/2020/05/14/centos-7%E4%BD%BF%E7%94%A8ttyd%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAweb%E5%85%B1%E4%BA%AB%E7%BB%88%E7%AB%AF%EF%BC%88webssh%EF%BC%89/</url>
    <content><![CDATA[<p>ttyd 是一个简单的命令行工具，用于在 Web 上共享终端，简单点说就是可以实现在网页上使用SSH终端服务，并且该软件是免费开源的。</p>
<p><img src="/2020/05/ttyd.gif"></p>
<h3 id="安装ttyd"><a href="#安装ttyd" class="headerlink" title="安装ttyd"></a>安装ttyd</h3><p>ttyd作者已经提供编译好的二进制文件，直接下载即可使用，最新版下载地址为：<a href="https://github.com/tsl0922/ttyd/releases">https://github.com/tsl0922/ttyd/releases</a>，这里以CentOS 7为例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载ttyd</span></span><br><span class="line">wget -O ttyd https://github.com/tsl0922/ttyd/releases/download/1.6.0/ttyd_linux.x86_64</span><br><span class="line"><span class="comment">#添加执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x ttyd</span><br><span class="line"><span class="comment">#移动目录</span></span><br><span class="line"><span class="built_in">mv</span> ttyd /usr/sbin</span><br></pre></td></tr></table></figure>

<p>通过上面的几个步骤，我们已经完成<code>ttyd</code>安装，输入命令<code>ttyd -v</code>可查看当前版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hosta29d0ffef5 ~]<span class="comment"># ttyd -v</span></span><br><span class="line">ttyd version 1.6.0-c15cfb7</span><br></pre></td></tr></table></figure>

<h3 id="运行ttyd"><a href="#运行ttyd" class="headerlink" title="运行ttyd"></a>运行ttyd</h3><p>输入命令<code>ttyd bash</code>运行ttyd，注意防火墙需要放行<code>7681</code>端口，然后浏览器访问<code>http://IP:7681</code>即可打开WEB终端，如下图。</p>
<p><img src="/2020/05/snipaste_20200409_115543.png"></p>
<p>不过ttyd并没有保持后台运行，访问<code>7681</code>也不需要任何密码验证，非常不安全，接下来我们为ttyd创建一个<code>systemd</code>服务并设置用户名、密码验证。</p>
<p><strong>新建服务</strong></p>
<p>创建一个<code>ttyd.service</code>文件：<code>vi /etc/systemd/system/ttyd.service</code>内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=ttyd</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/sbin/ttyd -c xiaoz:xiaoz.me bash</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建完毕后输入命令：<code>systemctl daemon-reload</code>让daemon生效。</p>
<p>上面使用了<code>-c</code>参数，这个参数的含义是设置用户名、密码验证，格式为<code>-c 用户名:密码</code>,上方设置的用户名为<code>xiaoz</code>，密码为<code>xiaoz.me</code>，请自行修改为自己的用户名、密码。</p>
<p>服务创建后，我们可以使用<code>systemd</code>命令来进行管理了，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动ttyd</span></span><br><span class="line">systemctl start ttyd</span><br><span class="line"><span class="comment">#停止ttyd</span></span><br><span class="line">systemctl stop ttyd</span><br><span class="line"><span class="comment">#重启ttyd</span></span><br><span class="line">systemctl restart ttyd</span><br><span class="line"><span class="comment">#开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> ttyd</span><br></pre></td></tr></table></figure>

<h3 id="Nginx反向代理"><a href="#Nginx反向代理" class="headerlink" title="Nginx反向代理"></a>Nginx反向代理</h3><p>如果您不喜欢通过IP + 端口的访问形式，也可以设置Nginx反向代理通过域名访问，配置如下：</p>
<p><strong>如果是网站根目录</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:7681;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>如果是网站二级目录</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location ~ ^/ttyd(.*)$ &#123;</span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">    proxy_pass http://127.0.0.1:7681/$1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意上面的<code>ttyd</code>可以修改为自己想要的路径。</p>
<h3 id="ttyd参数说明"><a href="#ttyd参数说明" class="headerlink" title="ttyd参数说明"></a>ttyd参数说明</h3><p>输入<code>ttyd -h</code>可以查看ttyd帮助，说明如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">USAGE:</span><br><span class="line">    ttyd [options] &lt;<span class="built_in">command</span>&gt; [&lt;arguments...&gt;]</span><br><span class="line"></span><br><span class="line">VERSION:</span><br><span class="line">    1.6.0</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">    -p, --port              Port to listen (default: 7681, use `0` <span class="keyword">for</span> random port)</span><br><span class="line">    -i, --interface         Network interface to <span class="built_in">bind</span> (eg: eth0), or UNIX domain socket path (eg: /var/run/ttyd.sock)</span><br><span class="line">    -c, --credential        Credential <span class="keyword">for</span> Basic Authentication (format: username:password)</span><br><span class="line">    -u, --uid               User <span class="built_in">id</span> to run with</span><br><span class="line">    -g, --gid               Group <span class="built_in">id</span> to run with</span><br><span class="line">    -s, --signal            Signal to send to the <span class="built_in">command</span> when <span class="built_in">exit</span> it (default: 1, SIGHUP)</span><br><span class="line">    -a, --url-arg           Allow client to send <span class="built_in">command</span> line arguments <span class="keyword">in</span> URL (eg: http://localhost:7681?arg=foo&amp;arg=bar)</span><br><span class="line">    -R, --<span class="built_in">readonly</span>          Do not allow clients to write to the TTY</span><br><span class="line">    -t, --client-option     Send option to client (format: key=value), repeat to add more options</span><br><span class="line">    -T, --terminal-type     Terminal <span class="built_in">type</span> to report, default: xterm-256color</span><br><span class="line">    -O, --check-origin      Do not allow websocket connection from different origin</span><br><span class="line">    -m, --max-clients       Maximum clients to support (default: 0, no <span class="built_in">limit</span>)</span><br><span class="line">    -o, --once              Accept only one client and <span class="built_in">exit</span> on disconnection</span><br><span class="line">    -B, --browser           Open terminal with the default system browser</span><br><span class="line">    -I, --index             Custom index.html path</span><br><span class="line">    -b, --base-path         Expected base path <span class="keyword">for</span> requests coming from a reverse proxy (eg: /mounted/here)</span><br><span class="line">    -6, --ipv6              Enable IPv6 support</span><br><span class="line">    -S, --ssl               Enable SSL</span><br><span class="line">    -C, --ssl-cert          SSL certificate file path</span><br><span class="line">    -K, --ssl-key           SSL key file path</span><br><span class="line">    -A, --ssl-ca            SSL CA file path <span class="keyword">for</span> client certificate verification</span><br><span class="line">    -d, --debug             Set <span class="built_in">log</span> level (default: 7)</span><br><span class="line">    -v, --version           Print the version and <span class="built_in">exit</span></span><br><span class="line">    -h, --<span class="built_in">help</span>              Print this text and <span class="built_in">exit</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用ttyd可以很方便快速的搭建一个WebSSH服务，但便利就意味着要承担更多的安全风险，虽然ttyd提供了基本的密码验证，但这种验证方式仍然不安全，使用ttyd的同时意味着你的服务器也多了一个入口，所以不建议用在生产环境，自己折腾倒是无所谓。</p>
<ul>
<li>ttyd项目地址：<a href="https://github.com/tsl0922/ttyd">https://github.com/tsl0922/ttyd</a></li>
<li>ttyd官方主页：<a href="https://tsl0922.github.io/ttyd/">https://tsl0922.github.io/ttyd/</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>ttyd</tag>
        <tag>WebSSH</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7 关闭防火墙和selinux</title>
    <url>/2019/02/10/centos7-%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99%E5%92%8Cselinux/</url>
    <content><![CDATA[<p>CentOS 7.0默认使用的是firewall作为防火墙，使用iptables必须重新设置一下</p>
<p>1、直接关闭防火墙</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service #停止firewall</span><br><span class="line">systemctl disable firewalld.service #禁止firewall开机启动</span><br></pre></td></tr></table></figure>

<p>2、设置 iptables service</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install iptables-services</span><br></pre></td></tr></table></figure>

<p>如果要修改防火墙配置，如增加防火墙端口3306</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure>

<p>增加规则</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>保存退出后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart iptables.service #重启防火墙使配置生效</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最后重启系统使设置生效即可。</p>
<h2 id="CentOS-7-关闭selinux"><a href="#CentOS-7-关闭selinux" class="headerlink" title="CentOS 7   #关闭selinux"></a>CentOS 7   #关闭selinux</h2><p>用 root 用户运行下面的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gedit /etc/sysconfig/selinux</span><br></pre></td></tr></table></figure>

<p>#编辑 selinux 文件</p>
<p>打开 selinux 文件后,修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#SELINUX=enforcing</span><br></pre></td></tr></table></figure>

<p>为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure>

<p>保存后退出 gedit。接着再执行如下命令,注意 setenforce 后面有空格:</p>
<p>setenforce 0</p>
<p>#设置 SELinux 状态</p>
<p>getenforce</p>
<p>#获取 SELinux 状态</p>
<p>-——————-</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost etc]# setenforce 0</span><br><span class="line"></span><br><span class="line">[root@localhost etc]# getenforce</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Firewall</tag>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 6 中禁用 IPv6</title>
    <url>/2018/07/12/centos-6-%E4%B8%AD%E7%A6%81%E7%94%A8-ipv6/</url>
    <content><![CDATA[<p>网上相当一部分资料谈到的方法是禁用 IPv6 模块，我们线上服务器也是禁用 IPv6 模块，并没有遇到什么问题。 但 CentOS 官方网站并不推荐使用禁用 IPv6 模块的方法，因为这样会引起 SELinux 和其他组件的问题。 推荐的方法如下：</p>
<h2 id="配置-x2F-etc-x2F-sysctl-conf"><a href="#配置-x2F-etc-x2F-sysctl-conf" class="headerlink" title="配置 &#x2F;etc&#x2F;sysctl.conf"></a>配置 &#x2F;etc&#x2F;sysctl.conf</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">net.ipv6.conf.all.disable_ipv6 = 1</span><br><span class="line">net.ipv6.conf.default.disable_ipv6 = 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="在运行的系统中禁用"><a href="#在运行的系统中禁用" class="headerlink" title="在运行的系统中禁用"></a>在运行的系统中禁用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">echo 1 &gt; /proc/sys/net/ipv6/conf/all/disable_ipv6</span><br><span class="line">echo 1 &gt; /proc/sys/net/ipv6/conf/default/disable_ipv6</span><br><span class="line"></span><br><span class="line"># 或者</span><br><span class="line">sysctl -w net.ipv6.conf.all.disable_ipv6=1</span><br><span class="line">sysctl -w net.ipv6.conf.default.disable_ipv6=1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p><a href="https://wiki.centos.org/FAQ/CentOS6#head-d47139912868bcb9d754441ecb6a8a10d41781df">How do I disable IPv6?</a> <a href="http://www.ttlsa.com/linux/centos6-rhce6-disables-the-ipv6-protocol-module/">CentOS 6&#x2F;RHCE 6 禁用 IPv6 协议模块</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>IPV6</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7使用Ocserv搭建CiscoAnyconnect服务器</title>
    <url>/2018/07/23/centos7%E4%BD%BF%E7%94%A8ocserv%E6%90%AD%E5%BB%BAciscoanyconnect%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>最近这段时间我朝的墙是越来越猛，有点赶尽杀绝的意思，也不知道是有什么重要日子？</p>
<p>对于搭自用梯子的话，目前有一个比较好的方案可以非常有效的“防封”，就是今天要给大家介绍的Ocserv（OpenConnect）以下简称Ocserv。</p>
<p>因为Anyconnect是思科开发出来的，众所周知思科的网络设备天下第一，很多大型的企业都是用思科的设备，包括Anyconnect这种VPN解决方案，所以墙不敢随便封这种协议的梯子。</p>
<p>但是由于思科只允许Anyconnect运行在思科的设备上，所以就有了今天的Ocserv服务端。Ocserv诞生的主要目的就是可以让任何设备都能安装上Anyconnect而不在局限于思科。</p>
<p>因为最近墙实在是太鸡儿猛了，所以没办法才用Anyconnect的，一般情况下这玩意我都不想碰，毕竟搭建和配置都比较麻烦，而且也不是很好配合其他的加速软件，所以就一直没想写这方面的文章，今天就详细写一下吧。</p>
<p>为了教程更简便，这里我直接用EPEL源安装Ocserv，可以省去麻烦的编译过程。首先安装EPEL源：</p>
<p>yum -y install epel-release</p>
<p>然后就可以直接YUM安装Ocserv了：</p>
<p>yum -y install ocserv</p>
<p>新建一个目录，用来存放SSL证书相关文件，然后进入到这个目录内：</p>
<p>mkdir ssl<br>cd ssl</p>
<p>新建一个证书模板：</p>
<p>vi ca.tmpl</p>
<p>写入：</p>
<p>cn = “LALA” organization = “LALA.IM” serial = 1 expiration_days = 9999 ca<br>signing_key<br>cert_signing_key<br>crl_signing_key</p>
<p>注：LALA和LALA.IM可以根据自己的需要更改，反正都是自签证书，随便瞎鸡儿写也没关系。。。</p>
<p>然后生成私钥和CA证书：</p>
<p>certtool --generate-privkey --outfile ca-key.pem<br>certtool --generate-self-signed --load-privkey ca-key.pem --template ca.tmpl --outfile ca-cert.pem</p>
<p>接着来生成服务器证书，还是老样子新建一个证书模板：</p>
<p>vi server.tmpl</p>
<p>写入：</p>
<p>cn = “你的服务器IP” organization = “LALA.IM” expiration_days = 9999 signing_key<br>encryption_key<br>tls_www_server</p>
<p>注：cn后面的值改成你的服务器公网IP。</p>
<p>然后生成私钥和证书：</p>
<p>certtool --generate-privkey --outfile server-key.pem<br>certtool --generate-certificate --load-privkey server-key.pem --load-ca-certificate ca-cert.pem --load-ca-privkey ca-key.pem --template server.tmpl --outfile server-cert.pem</p>
<p>然后我们把证书文件用移动到Ocserv默认的目录下：</p>
<p>cp server-cert.pem &#x2F;etc&#x2F;pki&#x2F;ocserv&#x2F;public&#x2F; cp server-key.pem &#x2F;etc&#x2F;pki&#x2F;ocserv&#x2F;private&#x2F; cp ca-cert.pem &#x2F;etc&#x2F;pki&#x2F;ocserv&#x2F;cacerts&#x2F;</p>
<p>现在编辑ocserv的配置文件（需要改动的地方很多，如果vi不好用就自己用SFTP把这个文件下载到本地用专业的编辑器编辑）：</p>
<p>vi &#x2F;etc&#x2F;ocserv&#x2F;ocserv.conf</p>
<p>让我们一起来看看需要改哪些地方：</p>
<p>1、auth也就是验证方式要改为：</p>
<p>auth = “plain[passwd&#x3D;&#x2F;etc&#x2F;ocserv&#x2F;ocpasswd]“</p>
<p>如图所示：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-06-25_12-33-22.png"></p>
<p>2、默认的监听端口为443，如果你的服务器上跑着HTTPS的WEB站点，那么443端口肯定是被占用了的，所以如果有需求的话，可以更改下面的值：</p>
<p># TCP and UDP port number tcp-port = 443 udp-port = 443</p>
<p>如图所示：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-06-25_12-36-53.png"></p>
<p>3、Anyconnect有一个设置连接欢迎信息的功能，也就是你在连接的时候会弹出一个提示框，提示框的内容就可以自行设置，如有需要可以更改下面的值：</p>
<p># A banner to be displayed on clients banner = “Welcome LALA.IM”</p>
<p>如图所示：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-06-25_12-38-52.png"></p>
<p>4、Anyconnect可以限制最大允许连接的设备数量，如有需要可以更改下面这两个值：</p>
<p>max-clients = 16 max-same-clients = 2</p>
<p>如图所示：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-06-25_12-41-31.png"></p>
<p>5、更改服务器证书以及私钥的路径为我们刚才移动的路径：</p>
<p>server-cert = &#x2F;etc&#x2F;pki&#x2F;ocserv&#x2F;public&#x2F;server-cert.pem<br>server-key = &#x2F;etc&#x2F;pki&#x2F;ocserv&#x2F;private&#x2F;server-key.pem</p>
<p>如图所示：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-06-25_12-43-09.png"></p>
<p>6、更改CA证书的路径为我们刚才移动的路径：</p>
<p>ca-cert = &#x2F;etc&#x2F;pki&#x2F;ocserv&#x2F;cacerts&#x2F;ca-cert.pem</p>
<p>如图所示：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-06-25_12-44-23.png"></p>
<p>7、取消如下几个参数的注释（去掉#号就是去掉注释）：</p>
<p>ipv4-network<br>ipv4-netmask</p>
<p>如图所示：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-06-25_12-45-33.png"></p>
<p>8、去掉如下参数的注释以及设置DNS服务器地址：</p>
<p>tunnel-all-dns = true dns = 8.8.8.8 dns = 8.8.4.4</p>
<p>如图所示：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-06-25_12-47-04.png"></p>
<p>确定你已经修改好上面的内容，然后保存即可。</p>
<p>现在来创建一个VPN用户：</p>
<p>ocpasswd -c &#x2F;etc&#x2F;ocserv&#x2F;ocpasswd lala</p>
<p>盲输两遍密码即可。如果不想让这个用户继续使用了，可以执行下面的命令删除指定的用户：</p>
<p>ocpasswd -c &#x2F;etc&#x2F;ocserv&#x2F;ocpasswd -d lala</p>
<p>现在我们开启机器的IPV4转发功能：</p>
<p>echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward</p>
<p>然后启动CentOS7的Firewalld防火墙：</p>
<p>systemctl start firewalld.service</p>
<p>放行Anyconnect的端口（我这里之前设置的是默认的443端口，如果你修改了端口，那么这里也要对应）：</p>
<p>firewall-cmd --permanent --zone=public --add-port=443&#x2F;tcp<br>firewall-cmd --permanent --zone=public --add-port=443&#x2F;udp</p>
<p>设置转发：</p>
<p>firewall-cmd --permanent --add-masquerade<br>firewall-cmd --permanent --direct --passthrough ipv4 -t nat -A POSTROUTING -o eth0 -j MASQUERADE</p>
<p>注：eth0是你的公网网卡名字，每个机器的名字可能都不一样，自己用ifconfig命令查一下就行了。</p>
<p>重加载，让新的配置生效：</p>
<p>firewall-cmd --reload</p>
<p>现在就可以尝试运行一下Ocserv了：</p>
<p>ocserv -f -d 1</p>
<p>如果一切正常，回显的内容大致如下图所示：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-06-25_11-36-37.png"></p>
<p>确定正常后按键盘组合键Ctrl+C退出运行，现在我们就可以直接用systemctl来管理Ocserv的进程。</p>
<p>设置Ocserv开机启动：</p>
<p>systemctl enable ocserv</p>
<p>启动Ocserv：</p>
<p>systemctl start ocserv</p>
<p>Anyconnect支持多平台客户端，Win&#x2F;iOS&#x2F;Android都是支持的，软件下载地址：</p>
<p><a href="https://software.cisco.com/download/home/286281283/type/282364313/release/4.6.01103">https://software.cisco.com/download/home/286281283/type/282364313/release/4.6.01103</a></p>
<p>iOS的话直接在商店里面搜索Anyconnect安装就行了。下面我拿iOS设备示范一下。</p>
<p>首先打开APP点击“设置”，把“阻止不信任的服务器”这个选项关闭，如图所示：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-06-25_13-04-29.png"></p>
<p>接着点击“连接”-“添加VPN连接”，按如下图配置：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-06-25_13-02-40.png"></p>
<p>现在就可以连接了，会提示你不信任的服务器，点“继续”：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/IMG_4627.png"></p>
<p>然后就是输入用户名密码了，这里就不多说了，用户名和密码就是之前你自己在终端内创建的那个，如果用户名和密码验证正确的话，那么最后就会弹出你设置的欢迎信息：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/IMG_4630.png"></p>
<p>现在就开始爱国吧。。。</p>
<p>写在最后：</p>
<p>其他客户端的配置都大同小异。因为我们是自签的证书，所以不管在哪个客户端上只要把“阻止不信任的服务器”这种类似的功能关闭就行了。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Anyconnect</tag>
        <tag>Cisco</tag>
        <tag>Ocserv</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7更换内核安装BBR</title>
    <url>/2018/07/23/centos7%E6%9B%B4%E6%8D%A2%E5%86%85%E6%A0%B8%E5%AE%89%E8%A3%85bbr/</url>
    <content><![CDATA[<p>讲道理，CentOS7想开个BBR如果不用一键脚本的话，还真有点麻烦。。。如果是Debian&#x2F;Ubuntu的话基本就是几条命令就能解决的事，但是由于CentOS的内核一向过于古老，所以你们懂的&#x3D; &#x3D;</p>
<p>BBR这项新功能是在kernel4.9中加入的，而CentOS都还停留在2.x的内核，所以要给CentOS装BBR第一件事就是想办法装上高版本的内核。</p>
<p>那么我们首先安装elrepo源：</p>
<p>rpm --import <a href="https://www.elrepo.org/RPM-GPG-KEY-elrepo.org">https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</a> rpm -Uvh <a href="http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm">http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</a></p>
<p>安装yum-utils：</p>
<p>yum -y install yum-utils</p>
<p>启用elrepo-kernel：</p>
<p>yum-config-manager --enable elrepo-kernel</p>
<p>安装elrepo内的最新内核：</p>
<p>yum -y install kernel-ml kernel-ml-devel</p>
<p>完成之后，一般情况下，新安装的内核就应该已经在grub2的0号启动位了，不过为了以防万一，还是自己执行下面的命令手动查看一番：</p>
<p>awk -F\‘ ‘$1&#x3D;&#x3D;”menuentry “ {print i++ “ : “ $2}’ &#x2F;etc&#x2F;grub2.cfg</p>
<p>如图所示的回显，4.x的内核就是我们刚新安装上的内核了，确实是在0号：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-07-20_18-04-15.png"></p>
<p>接下来设置grub2默认的启动项为0，如果你的4.x内核启动编号不是0就把下面命令的0改成对应你自己的：</p>
<p>grub2-set-default 0</p>
<p>然后直接重启机器：</p>
<p>reboot</p>
<p>如果内核更换成功并且grub2启动没问题的话，稍等片刻机器就能重新开机，但如果哪个地方出了问题可能就挂掉了，此时你只能通过VNC或者IPMI检查。也有可能会出现重启之后内核没有更换成功的问题，这就要自己检查了。</p>
<p>这里我是用的GoogleCloud，在系统重启之后先看下内核是否更换成功：</p>
<p>uname -a</p>
<p>返回4.x的内核信息就说明更换成功：</p>
<p><img src="https://lala.im/wp-content/uploads/2018/07/lala.im_2018-07-20_18-19-32.png"></p>
<p>所以接下来就是开启BBR了，直接依次执行下面的三条命令即可完成开启BBR的操作：</p>
<p>echo “net.core.default_qdisc&#x3D;fq” &gt;&gt; &#x2F;etc&#x2F;sysctl.conf<br>echo “net.ipv4.tcp_congestion_control&#x3D;bbr” &gt;&gt; &#x2F;etc&#x2F;sysctl.conf<br>sysctl -p</p>
<p>最后验证BBR是否启用成功：</p>
<p>sysctl net.ipv4.tcp_congestion_control<br>lsmod  grep bbr</p>
<p>返回如下图信息就说明大功告成了：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-07-20_18-08-23.png"></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>BBR</tag>
        <tag>Kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7更新、更新、每天更新、每天自动更新</title>
    <url>/2018/05/04/centos7%E6%9B%B4%E6%96%B0%E3%80%81%E6%9B%B4%E6%96%B0%E3%80%81%E6%AF%8F%E5%A4%A9%E6%9B%B4%E6%96%B0%E3%80%81%E6%AF%8F%E5%A4%A9%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<p>每一天我们的系统时时刻刻都被凶狠之徒盯着，保持软件在最新的状态是其中一项我们必须做，也很容易做到的工作。</p>
<p>首先我们立即手动更新所有预先安装的软件：</p>
<blockquote>
<p>yum -y update</p>
</blockquote>
<p>跟着设定系统定时自动更新，第一步确定服务器是否安装了自动执行指令的工具，跟着使用 <code>yum</code> 一个名叫 <code>yum-cron</code>插件。</p>
<p>CentOS 7 使用数个软件来自动执行指令：<code>cron</code>、<code>anacron</code>、<code>at</code> 和 <code>batch</code>，其中 <code>cron</code> 和 <code>anacron</code> 用来定期重复执行指令，<code>At</code> 和 <code>batch</code> 则用来在特定时间执行一次性的指令。 我们将会使用 <code>cron</code> 和 <code>anacron</code>，两者的分别这里不细表了，将来有机会再讨论，现在使用一个指令同时安装 <code>cronie</code> 和 <code>yum-cron</code>：</p>
<blockquote>
<p>yum -y install cronie yum-cron</p>
</blockquote>
<p>完成后系统多了数个档案，比较重要的包括： <code>/etc/cron.daily/0yum.cron，``Anacron</code> 每天执行0yum.cron一次，它根据 &#x2F;etc&#x2F;yum&#x2F;yum-cron.conf 来更新软件  ,&#x2F;<code>etc/yum/yum-cron.conf</code></p>
<p>每天执行只会下载更新的软件，并不安装,需要修改apply_updates &#x3D; no 为 yes，才会自动安装，用意是让管理员检视 <code>yum-cron</code>的输出，选取需要更新的软件进行手动安装。</p>
<blockquote>
<p>vim &#x2F;etc&#x2F;yum&#x2F;yum-cron.conf</p>
</blockquote>
<p>确认一下 <code>update_messages = yes</code>, <code>download_updates = yes</code>, <code>apply_updates = yes</code></p>
<p>最后，启动 <code>crond</code> 和 <code>yum-cron</code>：</p>
<p>systemctl start crond</p>
<p>systemctl start yum-cron</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>自动更新</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7下Firewalld防火墙的简明教程</title>
    <url>/2017/11/06/centos-7%E4%B8%8Bfirewalld%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><img src="https://www.jarods.org/wp-content/uploads/2017/11/firewalld.jpg"></p>
<p>提到Linux下的防火墙，首先可能想到的是iptables（<a href="https://www.vmvps.com/linux-iptables-simple-tutorial-from-vmvps.html">iptables简明教程</a>）。随着CentOS 7的发布，防火墙也已经升级为Firewalld（注：iptables并未被取代，而是作为了Firewalld的底层存在（参见下图），二者的区别请自行谷歌&#x2F;百度），微魔发现网络上不少的教程都是要关掉Firewalld，主要是因为Firewalld会使很多未授权而使用端口的程序吃瘪（如VNC等）。但简单的关闭防火墙显然不符合“安全第一”的准则，适当的为我们的应用开启大门才是正确的选择，因此，来一个简易的教程十分必要。另外，微魔发现现在网上大量的中文教程都十分的繁琐，提取重要的讯息很不方便，而我们一般玩家也确实没必要深入而全面的去学习这些。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/11/firewall_stack.png"> 【图片取自<a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/sec-Using_Firewalls.html">redhat官网文档</a>】</p>
<h3 id="CentOS-7下Firewalld防火墙的简易教程"><a href="#CentOS-7下Firewalld防火墙的简易教程" class="headerlink" title="CentOS 7下Firewalld防火墙的简易教程"></a>CentOS 7下Firewalld防火墙的简易教程</h3><p>Firewalld开启&#x2F;停止可以通过systemctl命令完成（如同其他程序一样，此处不赘述），自身命令行界面操作主要是通过firewall-cmd这个命令来实现管理的（图形化界面是firewall-config），下面的命令以80端口，TCP为例，在实际应用中请按需修改</p>
<p>1.查询端口开放情况</p>
<p>firewall-cmd –zone&#x3D;public –query-port&#x3D;80&#x2F;tcp</p>
<p>若显示no则表示该端口关闭</p>
<p>2.开启端口，–permanent参数表明该规则永久生效，否则，重启后则失效</p>
<p>firewall-cmd –zone&#x3D;public –add-port&#x3D;80&#x2F;tcp –permanent</p>
<p>3.删除端口授权</p>
<p>firewall-cmd –zone&#x3D; public –remove-port&#x3D;80&#x2F;tcp –permanent</p>
<p>4.重新加载Firewalld使修改生效（重要！）</p>
<p>firewall-cmd –reload</p>
<p>5.查看开放的端口（准确来讲应该是Public zone的端口，更深入的就不说了）</p>
<p>firewall-cmd –zone&#x3D;public –list-ports</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Firewalld</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos/Ubuntu/Debian BBR加速一键安装包</title>
    <url>/2017/07/09/centosubuntudebian-bbr%E5%8A%A0%E9%80%9F%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E5%8C%85/</url>
    <content><![CDATA[<p><img src="https://www.jarods.org/wp-content/uploads/2017/07/bbr.jpg" title="一键安装最新内核并开启 BBR 脚本"></p>
<p>最近，Google 开源了其 TCP BBR 拥塞控制算法，并提交到了 Linux 内核，最新的 4.11 版内核已经用上了该算法。根据以往的传统，Google 总是先在自家的生产环境上线运用后，才会将代码开源，此次也不例外。 根据实地测试，在部署了最新版内核并开启了 TCP BBR 的机器上，网速甚至可以提升好几个数量级。 于是我根据目前三大发行版的最新内核，开发了一键安装最新内核并开启 TCP BBR 脚本。</p>
<h2 id="本脚本适用环境"><a href="#本脚本适用环境" class="headerlink" title="本脚本适用环境"></a>本脚本适用环境</h2><p>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+ 虚拟技术：OpenVZ 以外的，比如 KVM、Xen、VMware 等 内存要求：≥128M 日期　　：2017 年 05 月 15 日</p>
<h3 id="关于本脚本"><a href="#关于本脚本" class="headerlink" title="关于本脚本"></a>关于本脚本</h3><p>1、本脚本已在 <a href="https://teddysun.com/t/vultr"><strong>Vultr</strong></a> 上的 VPS 全部测试通过。 2、当脚本检测到 VPS 的虚拟方式为 OpenVZ 时，会提示错误，并自动退出安装。 3、脚本运行完重启发现开不了机的，打开 VPS 后台控制面板的 VNC, 开机卡在 grub 引导, 手动选择内核即可。 4、由于是使用最新版系统内核，最好请勿在生产环境安装，以免产生不可预测之后果。</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>使用root用户登录，运行以下命令：</p>
<p>wget –no-check-certificate <a href="https://github.com/teddysun/across/raw/master/bbr.sh">https://github.com/teddysun/across/raw/master/bbr.sh</a><br>chmod +x bbr.sh<br>.&#x2F;bbr.sh</p>
<p>安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。 重启完成后，进入 VPS，验证一下是否成功安装最新内核并开启 TCP BBR，输入以下命令：</p>
<p>uname -r</p>
<p>查看内核版本，含有 4.11 就表示 OK 了</p>
<p>sysctl net.ipv4.tcp_available_congestion_control</p>
<p>返回值一般为： net.ipv4.tcp_available_congestion_control &#x3D; bbr cubic reno</p>
<p>sysctl net.ipv4.tcp_congestion_control</p>
<p>返回值一般为： net.ipv4.tcp_congestion_control &#x3D; bbr</p>
<p>sysctl net.core.default_qdisc</p>
<p>返回值一般为： net.core.default_qdisc &#x3D; fq</p>
<p>lsmod  grep bbr</p>
<p>返回值有 tcp_bbr 模块即说明bbr已启动。</p>
<h3 id="内核升级方法"><a href="#内核升级方法" class="headerlink" title="内核升级方法"></a>内核升级方法</h3><p>如果是 CentOS 系统，执行如下命令即可升级内核：</p>
<p>yum –enablerepo&#x3D;elrepo-kernel -y install kernel-ml kernel-ml-devel</p>
<p>CentOS 6 的话，执行命令：</p>
<p>sed -i ‘s&#x2F;^default&#x3D;.*&#x2F;default&#x3D;0&#x2F;g’ &#x2F;boot&#x2F;grub&#x2F;grub.conf</p>
<p>CentOS 7 的话，执行命令：</p>
<p>grub2-set-default 0</p>
<p>如果是 Debian&#x2F;Ubuntu 系统，则需要手动下载最新版内核来安装升级。 去<a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/">这里</a>下载最新版的内核 deb 安装包。 如果系统是 64 位，则下载 amd64 的 linux-image 中含有 generic 这个 deb 包； 如果系统是 32 位，则下载 i386 的 linux-image 中含有 generic 这个 deb 包； 安装的命令如下（以最新版的 64 位 4.9.3 举例而已，请替换为下载好的 deb 包）：</p>
<p>dpkg -i linux-image-4.9.3-040903-generic_4.9.3-040903.201701120631_amd64.deb</p>
<p>安装完成后，再执行命令：</p>
<p>&#x2F;usr&#x2F;sbin&#x2F;update-grub</p>
<p>最后，重启 VPS 即可。</p>
<h3 id="更新日志："><a href="#更新日志：" class="headerlink" title="更新日志："></a>更新日志：</h3><p>2017 年 05 月 15 日： 1、脚本并没有更新，因为代码会自动获取最新版内核来安装。这里只是更新了下文章里的内核版本（Linux 内核版本号开挂了） 2017 年 02 月 22 日： 1、更新自动获取最新版 4.10 内核 。 2017 年 01 月 20 日： 1、新增自动获取并下载安装最新版内核的功能。 2017 年 01 月 13 日： 1、更新内核到 4.9.3。 2017 年 01 月 09 日： 1、更新内核到 4.9.1。</p>
<h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="https://github.com/google/bbr/blob/master/Documentation/bbr-quick-start.md">https://github.com/google/bbr/blob/master/Documentation/bbr-quick-start.md</a> <a href="http://elrepo.org/tiki/tiki-index.php">http://elrepo.org/tiki/tiki-index.php</a> <a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/">http://kernel.ubuntu.com/~kernel-ppa&#x2F;mainline&#x2F;</a></p>
<p>转载请注明：<a href="https://teddysun.com/">秋水逸冰</a> » <a href="https://teddysun.com/489.html">一键安装最新内核并开启 BBR 脚本</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>BBR</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos挂载磁盘完整图文教程</title>
    <url>/2019/10/08/centos%E6%8C%82%E8%BD%BD%E7%A3%81%E7%9B%98%E5%AE%8C%E6%95%B4%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><strong>1：查看服务器上未挂载的磁盘（磁盘有普通磁盘，高效磁盘，SSD磁盘）；命令如下：</strong></p>
<p>fdisk –l</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/10/v2-4106065c56bb25db39c6c9dcef85c690_hd.jpg"></p>
<p>从上图可以看出，服务器的 &#x2F;dev&#x2F;vdb 42.9GB 此磁盘未挂载；</p>
<h2 id="2：磁盘分区（分区有主分区，扩展-分区，逻辑分区）；命令如下："><a href="#2：磁盘分区（分区有主分区，扩展-分区，逻辑分区）；命令如下：" class="headerlink" title="2：磁盘分区（分区有主分区，扩展 分区，逻辑分区）；命令如下："></a>2：磁盘分区（分区有主分区，扩展 分区，逻辑分区）；命令如下：</h2><p>fdisk &#x2F;dev&#x2F;vdb</p>
<p>n-&gt;p-&gt;1-&gt;回车-&gt;回车-&gt;w</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/10/v2-e7513c23320fe2d00049c684084e9f35_hd.jpg"></p>
<p>上图的大概意思是这样的：</p>
<p>n：添加一个分区</p>
<p>P：主分区</p>
<p>两个回车指是开始和结束的磁盘大小；</p>
<p>w：写入磁盘</p>
<p>此时磁盘虽然已经分区，但是还没有文件系统，磁盘依然不能用；</p>
<p>博主服务器只购买了一块数据盘，所以我就全部用来做主分区了，如果你想把一个磁盘分成好几块，可以继续按此命令分区即可；你可以继续创建扩展分区……；</p>
<h2 id="3：格式化磁盘并写入文件系统：命令如下："><a href="#3：格式化磁盘并写入文件系统：命令如下：" class="headerlink" title="3：格式化磁盘并写入文件系统：命令如下："></a>3：格式化磁盘并写入文件系统：命令如下：</h2><p>mkfs.ext4 &#x2F;dev&#x2F;vdb1 &#x2F;&#x2F;这里可以用ext3，也可以用ext4；</p>
<p>出现如下图这们的界面，就是格式化磁盘写入文件成功：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/10/v2-24b491bb3789a42f60781b188c03c996_hd.jpg"></p>
<h2 id="4：挂载新磁盘到操作系统的某个节点上，命令如下："><a href="#4：挂载新磁盘到操作系统的某个节点上，命令如下：" class="headerlink" title="4：挂载新磁盘到操作系统的某个节点上，命令如下："></a>4：挂载新磁盘到操作系统的某个节点上，命令如下：</h2><p>mkdir &#x2F;mydata</p>
<p>mount &#x2F;dev&#x2F;vdb1 &#x2F;mydata</p>
<p>在系统的根创建一个mydata，把这个磁盘挂载到此目录；挂载位置可以自己随意创建；</p>
<h2 id="5：查看磁盘信息，确认挂载新磁盘是否成功，命令如下："><a href="#5：查看磁盘信息，确认挂载新磁盘是否成功，命令如下：" class="headerlink" title="5：查看磁盘信息，确认挂载新磁盘是否成功，命令如下："></a>5：查看磁盘信息，确认挂载新磁盘是否成功，命令如下：</h2><p>df</p>
<p>如果挂载成功，会出现如下图这样的界面；</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/10/v2-9ff0cf49e020f3b6e4ad12990a933060_hd.jpg"></p>
<h2 id="6：查看磁盘所有信息；"><a href="#6：查看磁盘所有信息；" class="headerlink" title="6：查看磁盘所有信息；"></a>6：查看磁盘所有信息；</h2><p>当我们再来查所有分区时，用fdisk -l 命令就会多了一个主分区，&#x2F;dev&#x2F;vdb1；如下图：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/10/v2-c72776117591a916568612b49a71cd05_hd.jpg"></p>
<h2 id="7：设置开机启动自动挂载；"><a href="#7：设置开机启动自动挂载；" class="headerlink" title="7：设置开机启动自动挂载；"></a>7：设置开机启动自动挂载；</h2><p>新创建的分区不能开机自动挂载，每次重启机器都要手动挂载。</p>
<p>设置开机自动挂载需要修改&#x2F;etc&#x2F;fstab文件 ；命令如下：</p>
<p>echo “&#x2F;dev&#x2F;vdb1 &#x2F;mydata ext4 defaults 0 0” &gt;&gt; &#x2F;etc&#x2F;fstab</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>挂载</tag>
        <tag>硬盘</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS不换内核安装锐速</title>
    <url>/2017/10/26/centos%E4%B8%8D%E6%8D%A2%E5%86%85%E6%A0%B8%E5%AE%89%E8%A3%85%E9%94%90%E9%80%9F/</url>
    <content><![CDATA[<p>如果你是CentOS用户,肯定为换内核头疼过. 这篇文章将解决这个问题.</p>
<hr>
<ol>
<li>CentOS用户如遇内核不能匹配,</li>
</ol>
<p> </p>
<p>请参照以下示例:1.  使用锐速安装脚本,得知不能匹配到内核.<br>2.  通过 <code>uname -r</code> 查看到的版本号为 <code>2.6.32-642.el6.x86_64</code> ,<br>3.  去查看 <a href="https://github.com/0oVicero0/serverSpeeder_kernel/blob/master/serverSpeeder.txt"><strong>锐速版本库</strong></a> 发现有个内核版本很接近 <code>2.6.32-573.1.1.el6.x86_64</code> .<br>4.  执行安装命令:</p>
<pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; chmod +x appex.sh &amp;&amp; bash appex.sh install &#x27;2.6.32-573.1.1.el6.x86_64&#x27;</span><br></pre></td></tr></table></figure>

锐速安装脚本就会强制安装内核版本为 `2.6.32-573.1.1.el6.x86_64` 的锐速. 安装命令中的 `2.6.32-573.1.1.el6.x86_64` 可自行更改.
</code></pre>
<ol start="5">
<li>启动锐速<ul>
<li>如果<strong>启动成功</strong>，恭喜你!</li>
<li>如果<strong>启动失败</strong>，请重复 2-5 步骤! 不要害怕失败,安装失败并不会影响系统运行.</li>
</ul>
</li>
</ol>
<hr>
<p><strong>安装锐速:</strong> <a href="https://moeclub.org/2017/03/08/14/"><strong>[锐速] [serverSpeeder] [lotServer]</strong></a></p>
<hr>
<p><strong>声明:</strong></p>
<p><strong>毕竟你都要换内核了,就不要谈稳不稳定.</strong></p>
<p><strong>如因此造成损失,本人不负任何责任.</strong></p>
<hr>
<p><strong>温馨提醒:</strong></p>
<p><strong>数据无价,请及时备份数据.</strong></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>锐速</tag>
        <tag>lotServer</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装OpenVZ并配置OpenVZ Web Panel</title>
    <url>/2017/11/13/centos%E5%AE%89%E8%A3%85openvz%E5%B9%B6%E9%85%8D%E7%BD%AEopenvz-web-panel/</url>
    <content><![CDATA[<p>大家好！</p>
<p>随心博客已经彻底沦陷了。</p>
<p>现在变成一年一更新了……</p>
<p>上一次更新了一堆文章，结果VPS挂了，都没了，于是心灰意冷，闲置了好久……</p>
<p>这次想写一篇关于CentOS安装OpenVZ并配置OpenVZ Web Panel的文章，话说天下文章一大抄，抄来抄去都变了样。如何你第一次使用CentOS安装OpenVZ的话，你一定会跟我一样，被各种奇葩粘贴复制的文章弄的抓狂。好吧，今天随心就发挥特长，把所有网上的奇葩文章整合成一篇完成的教程，看了我的教程你绝对不会走弯路的，哇咔咔。</p>
<p>注意：本教程的方法建立在基于KVM构架的VPS或独立服务器上，其他的环境就不要试了，免得你伤心……</p>
<p>前提准备：VPS或服务器安装CentOS 6及以上系统。update系统，并安装vim编辑器。</p>
<p>1、关闭selinux并配置iptables（重要）</p>
<p>vim &#x2F;etc&#x2F;sysconfig&#x2F;selinux<br>添加内容：<br>SELINUX&#x3D;disabled<br>保存</p>
<p>开放iptables的3000端口或vim &#x2F;etc&#x2F;sysconfig&#x2F;iptables</p>
<p>&#x2F;sbin&#x2F;iptables -I INPUT -p tcp –dport 3000 -j ACCEPT<br>&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;iptables save<br>&#x2F;etc&#x2F;init.d&#x2F;iptables restart</p>
<p>2、安装OpenVZ</p>
<p>配置YUM源（这个办法你在网上搜到的所有相关教程全部失效，还是我总结的方法可以用，骚年）</p>
<p>cd &#x2F;etc&#x2F;yum.repos.d<br>wget <a href="http://download.openvz.org/openvz.repo">http://download.openvz.org/openvz.repo</a><br>rpm –import  <a href="http://download.openvz.org/RPM-GPG-Key-OpenVZ">http://download.openvz.org/RPM-GPG-Key-OpenVZ</a></p>
<p>yum update -y</p>
<p>安装OpenVZ内核和vzctl、vzquota等工具</p>
<p>yum install  vzkernel<br>yum install vzctl vzquota</p>
<p>配置OS内核参数，进入&#x2F;etc&#x2F;sysctl.conf文件，修改下面两个参数</p>
<p>为了让VE访问外部网络，需要对IP进行转发<br>net.ipv4.ip_forward &#x3D; 1<br>主要是控制对kernel系统信息的debug功能<br>kernel.sysrq &#x3D; 1</p>
<p>使上面的配置文件生效</p>
<p>modprobe bridge<br>lsmodgrep bridge</p>
<p>现在reboot，重启后检查VZ服务是否运行</p>
<p>chkconfig –list vz<br>返回如下信息则代表正在运行<br>vz                0:off 1:off 2:on 3:on 4:on 5:on 6:off</p>
<p>启动之前可以先检查一下OpenVZ服务时候已经启动了<br>service vz status<br>service vz start </p>
<p>3、安装OpenVZ Web Panel</p>
<p>wget -O - <a href="https://raw.githubusercontent.com/sibprogrammer/owp/master/installer/ai.sh">https://raw.githubusercontent.com/sibprogrammer/owp/master/installer/ai.sh</a>  sh</p>
<p>安装结束后，使用如下信息登录控制面板</p>
<p>http:&#x2F;&#x2F;<your-host>:3000</p>
<p>最后这个问题是所有教程都没有写的，一个非常奇葩的问题，当你安装好OWP后，你无法下载系统模版，也就无法创建VZ。哈哈，这个问题困扰了我几天，终于在github里发现了解决办法。引起这个BUG的原因就是一个重要的进程文件hw-daemon.rb被覆盖为空文档了，解决的办法就是重新写入这个文件的内容。</p>
<p>vim &#x2F;opt&#x2F;ovz-web-panel&#x2F;utils&#x2F;hw-daemon&#x2F;hw-daemon.rb<br>复制一下内容<br>#!&#x2F;usr&#x2F;bin&#x2F;env ruby</p>
<p>require ‘webrick’<br>require ‘xmlrpc&#x2F;server.rb’</p>
<p># workaround for clients with incorrect DNS records<br>Socket.do_not_reverse_lookup &#x3D; true</p>
<p>ENV[‘PATH’] +&#x3D; ‘:&#x2F;usr&#x2F;sbin’</p>
<p>DAEMON_VERSION &#x3D; ‘1.3’<br>CURRENT_DIR &#x3D; File.expand_path(File.dirname(__FILE__)) + ‘&#x2F;‘<br>CONFIG_FILE &#x3D; CURRENT_DIR + ‘hw-daemon.ini’<br>PID_FILE &#x3D; CURRENT_DIR + ‘hw-daemon.pid’<br>LOG_FILE &#x3D; CURRENT_DIR + ‘hw-daemon.log’<br>SSL_CERT_FILE &#x3D; CURRENT_DIR + “&#x2F;certs&#x2F;server.crt”<br>SSL_PKEY_FILE &#x3D; CURRENT_DIR + “&#x2F;certs&#x2F;server.key”</p>
<p>$SERVER_ADDRESS &#x3D; “0.0.0.0”<br>$SERVER_PORT &#x3D; 7767<br>$AUTH_KEY &#x3D; “”<br>$DEBUG &#x3D; false<br>$LOG &#x3D; WEBrick::Log.new(LOG_FILE)</p>
<p>$SSL_ENABLE &#x3D; false<br>$SSL_CERT &#x3D; ‘’<br>$SSL_PKEY &#x3D; ‘’</p>
<p>$THREADS &#x3D; {}</p>
<p>class HwDaemonApiHandler &lt; XMLRPC::WEBrickServlet  </p>
<p>  def version<br>     DAEMON_VERSION<br>  end</p>
<p>  def exec(command, args &#x3D; ‘’)<br>    output &#x3D; `#{command} #{args} 2&gt;&amp;1`<br>    exit_code &#x3D; $?<br>    $LOG.debug(“Exec command: #{command} #{args}; code: #{exit_code}; output:\n#{output}”)<br>    { ‘exit_code’ &#x3D;&gt; exit_code &gt;&gt; 8, ‘output’ &#x3D;&gt; output }<br>  end</p>
<p>  def job(command, args &#x3D; ‘’)<br>    job_id &#x3D; generate_id</p>
<pre><code>t = Thread.new do
  result = self.exec(command, args)
  $THREADS\[job\_id\]\[&#39;result&#39;\] = result
end    

$THREADS\[job\_id\] = &#123; &#39;thread&#39; =&gt; t &#125;

&#123; &#39;job\_id&#39; =&gt; job\_id &#125;
</code></pre>
<p>  end</p>
<p>  def job_status(job_id)<br>    found &#x3D; $THREADS.has_key?(job_id)<br>    result &#x3D; ‘’</p>
<pre><code>if found
  alive = $THREADS\[job\_id\]\[&#39;thread&#39;\].alive?
  result = $THREADS\[job\_id\]\[&#39;result&#39;\] unless alive
end

&#123; &#39;found&#39; =&gt; found, &#39;alive&#39; =&gt; alive, &#39;result&#39; =&gt; result &#125;
</code></pre>
<p>  end</p>
<p>  def write_file(filename, content)<br>    File.open(filename, ‘w’) { file file.write(content) }<br>    $LOG.debug(“Writing file: #{filename}”)<br>  end</p>
<p>  def service(request, response)<br>    WEBrick::HTTPAuth.basic_auth(request, response, ‘’) do user, password<br>      user &#x3D;&#x3D; ‘admin’ &amp;&amp; password &#x3D;&#x3D; $AUTH_KEY<br>    end</p>
<pre><code>super
</code></pre>
<p>  end</p>
<p>  def handle(method, *params)<br>    $LOG.debug(“Execute method: #{method}”)<br>    super<br>  end</p>
<p>  private</p>
<p>  def generate_id<br>    symbols &#x3D; [(‘0’..’9’),(‘a’..’f’)].map{ i i.to_a }.flatten<br>    (1..32).map{ symbols[rand(symbols.length)] }.join<br>  end</p>
<p>end</p>
<p>class HwDaemonUtil</p>
<p>  def initialize<br>    check_environment</p>
<pre><code>if (0 == ARGV.size)
  do\_help
end

load\_config
$LOG.level = WEBrick::Log::DEBUG if $DEBUG

if $SSL\_ENABLE
  require &#39;webrick/https&#39;
  $SSL\_CERT = OpenSSL::X509::Certificate.new(File.open(SSL\_CERT\_FILE).read) if File.readable?(SSL\_CERT\_FILE)
  $SSL\_PKEY = OpenSSL::PKey::RSA.new(File.open(SSL\_PKEY\_FILE).read) if File.readable?(SSL\_PKEY\_FILE)
end

command = ARGV\[0\]

case command
  when &#39;start&#39;
    do\_start
  when &#39;stop&#39;
    do\_stop
  when &#39;restart&#39;
    do\_restart
  when &#39;status&#39;
    do\_status
  else
    do\_help
end
</code></pre>
<p>  end</p>
<p>  def check_environment<br>    if RUBY_VERSION !~ &#x2F;1\.8\..+&#x2F;<br>      puts “Ruby #{RUBY_VERSION} is not supported.”<br>      exit(1)<br>    end</p>
<pre><code>if !File.exists?(&#39;/proc/vz/version&#39;)
  puts &quot;Daemon should be run on the server with OpenVZ.&quot;
  exit(1)
end
</code></pre>
<p>  end</p>
<p>  def do_start<br>    puts “Starting the daemon…”</p>
<pre><code>servlet = HwDaemonApiHandler.new
servlet.add\_handler(&quot;hwDaemon&quot;, servlet)   
servlet.set\_default\_handler do name, \*args
  raise XMLRPC::FaultException.new(-99, &quot;Method #&#123;name&#125; missing or wrong number of parameters!&quot;)
end

server = WEBrick::HTTPServer.new(
  :Port =&gt; $SERVER\_PORT,
  :BindAddress =&gt; $SERVER\_ADDRESS,
  :Logger =&gt; $LOG,
  :SSLEnable =&gt; $SSL\_ENABLE,
  :SSLVerifyClient =&gt; ($SSL\_ENABLE ? OpenSSL::SSL::VERIFY\_NONE : nil),
  :SSLCertificate =&gt; $SSL\_CERT,
  :SSLPrivateKey =&gt; $SSL\_PKEY,
  :SSLCertName =&gt; \[ \[ &quot;CN&quot;, WEBrick::Utils::getservername \] \]
)

server.mount(&#39;/xmlrpc&#39;, servlet)

\[&#39;INT&#39;, &#39;TERM&#39;\].each &#123; signal trap(signal) &#123; server.shutdown &#125; &#125;

WEBrick::Daemon.start do
  write\_pid\_file
  server.start
  delete\_pid\_file
end
</code></pre>
<p>  end</p>
<p>  def do_stop<br>    if (File.exists?(PID_FILE))<br>      pid &#x3D; File.read(PID_FILE)<br>      $LOG.debug(“Killing process with PID #{pid.to_i}”)<br>      Process.kill(‘TERM’, pid.to_i)<br>    end</p>
<pre><code>puts &quot;Daemon was stopped.&quot;
</code></pre>
<p>  end</p>
<p>  def do_restart<br>    do_stop<br>    do_start<br>  end</p>
<p>  def do_status<br>    if (File.exists?(PID_FILE))<br>      puts “Daemon is running.”<br>    else<br>      puts “Daemon is stopped.”<br>      exit(1)<br>    end<br>  end</p>
<p>  def do_help<br>    puts “Usage: ruby hw-daemon.rb (startstoprestartstatushelp)”<br>    exit(1)<br>  end</p>
<p>  def load_config<br>    file &#x3D; File.new(CONFIG_FILE, ‘r’)</p>
<pre><code>while (line = file.gets)
  key, value = line.split(&#39;=&#39;, 2).each &#123; v v.strip! &#125;
  
  case key
    when &#39;address&#39;
      $SERVER\_ADDRESS = value
    when &#39;port&#39;
      $SERVER\_PORT = value
    when &#39;key&#39;
      $AUTH\_KEY = value
    when &#39;ssl&#39;
      $SSL\_ENABLE = true if value == &#39;on&#39;
    when &#39;debug&#39;
      $DEBUG = true if value == &#39;on&#39;          
  end
end

file.close
</code></pre>
<p>  end</p>
<p>  def write_pid_file<br>    open(PID_FILE, “w”) { file file.write(Process.pid) }<br>  end</p>
<p>  def delete_pid_file<br>    if File.exists?(PID_FILE)<br>      File.unlink PID_FILE<br>    end<br>  end</p>
<p>end</p>
<p>HwDaemonUtil.new</p>
<p>现在就可以开始创建OVZ小鸡了，可以愉快的玩耍了！</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>OpenVZ</tag>
        <tag>OpenVZ Web Panel</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7系统的初始配置指引</title>
    <url>/2017/10/13/centos-7%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%88%9D%E5%A7%8B%E9%85%8D%E7%BD%AE%E6%8C%87%E5%BC%95/</url>
    <content><![CDATA[<p>CentOS 7系统最小化安装后，由于没有图形化界面，给新手用户的使用带来了一些不便。本文将介绍如何在没有图形界面的情况下了解系统情况、硬件信息以及如何对系统进行基本的设置等。</p>
<p><strong>将CentOS 7更新至最新</strong></p>
<p>对于一个全新的CentOS 7系统，第一步工作应该是将系统更新至最新，以确保系统可以使用最新支持的内核以及最新的安全补丁等。</p>
<p>更新系统可以用root权限用户通过如下命令来完成：</p>
<p># yum check-update</p>
<h1 id="yum-upgrade"><a href="#yum-upgrade" class="headerlink" title="yum upgrade"></a>yum upgrade</h1><p>当更新全部完成后，可以使用以下命令将更新过程中下载的文件清除，以释放磁盘空间。</p>
<p># # yum clean all<br>Loaded plugins: fastestmirror<br>Cleaning repos: base elrepo epel extras nginx updates<br>Cleaning up everything<br>Maybe you want: rm -rf &#x2F;var&#x2F;cache&#x2F;yum, to also free up space taken by orphaned data from disabled or removed repos<br>Cleaning up list of fastest mirrors</p>
<p><strong>给CentOS 7系统安装实用工具</strong></p>
<p>为了系统管理方便，这里推荐几个系统管理的实用工具。安装这些工具后，可以大大提升CentOS 7系统使用的便利性。这些工具包括：<strong>nano</strong> (一个可以替代vi的文本编辑器)\ <strong>wget</strong>\ <strong>curl</strong> (通常用来从网络下载软件包的工具)、 <strong>net-tools</strong>, <strong>lsof</strong> (管理本地网络的工具)以及<strong>bash-completion</strong> (命令行自动补全工具)。这些工具都可以通过yum方式安装，命令示例如下：</p>
<p># yum install nano wget curl net-tools lsof bash-completion</p>
<p><strong>设置CentOS 7网络</strong></p>
<p>CentOS有大量的网络配置实用工具，这些可以编辑网络配置的工具包括： <strong>ip, ifconfig, nmtui, nmcli</strong> 以及<strong>route</strong>。对于初学者来说，最简单的工具是nmtui这个图形化的命令行工具。</p>
<p>例如想设置自己的主机名，可以通过输入nmtui-hostname命令来打开图形化命令行，设置完成后，按<OK>确认，示意图如下：<img src="https://www.jarods.org/wp-content/uploads/2017/10/nmtui-hostname.jpg"></p>
<p>如果想配置网卡，则运行：nmtui-edit命令，就可以打开一个图形化的设置窗口，如下图所示：<img src="https://www.jarods.org/wp-content/uploads/2017/10/nmtui-edit-1.jpg"></p>
<p>选择相应网卡后，再选中<Edit>按钮按回车，就可以进入网卡的配置详情窗口，可以根据实际需要对网卡进行相应配置。注意这些图形化界面非常像最初的C语言菜单，可以通过Tab键来切换选中项，按回车键表示确定选中项。<img src="https://www.jarods.org/wp-content/uploads/2017/10/nmtui-edit-2.jpg"></p>
<p>然后可以通过如下命令，来查看网络接口配置是否正确以及网络的连通性等。</p>
<p># ifconfig eth0</p>
<h1 id="ip-a"><a href="#ip-a" class="headerlink" title="ip a"></a>ip a</h1><h1 id="ping-c2-www-daehub-com"><a href="#ping-c2-www-daehub-com" class="headerlink" title="ping -c2 www.daehub.com"></a>ping -c2 <a href="http://www.daehub.com/">www.daehub.com</a></h1><p>注意这里的eth0就是系统默认的网卡设备，命令执行结果如下：<img src="https://www.jarods.org/wp-content/uploads/2017/10/ifconfig-result.jpg"></p>
<p>下面的两个工具ethtool和mii-tool是用来查看网络的接口速率以及连接状况的：<img src="https://www.jarods.org/wp-content/uploads/2017/10/ehttool-result.jpg"></p>
<p>以下还有几个对于网络使用端口进行检测的工具，通过这些工具，可以查看程序侦听的端口以及连接状态等。这些命令会列出程序所使用的所有TCP以及UDP端口。事实上UDP是非面向连接的，它只通过网络发送数据包，而不需要建立连接。这些命令包括：</p>
<p># netstat -tulpn</p>
<h1 id="ss-tulpn"><a href="#ss-tulpn" class="headerlink" title="ss -tulpn"></a>ss -tulpn</h1><h1 id="lsof-i4-或-lsof-6"><a href="#lsof-i4-或-lsof-6" class="headerlink" title="lsof -i4 或 lsof -6"></a>lsof -i4 或 lsof -6</h1><p><strong>管理CentOS 7的服务</strong></p>
<p>CentOS 7通过systemctl工具来管理系统守护进程（即为系统服务），可以通过如下命令来查看系统服务的状态和启动情况等：</p>
<p># systemctl list-units</p>
<h1 id="systemctl-list-unit-files-t-service"><a href="#systemctl-list-unit-files-t-service" class="headerlink" title="systemctl list-unit-files -t service"></a>systemctl list-unit-files -t service</h1><p>如果想停止或关闭某项服务，则可以通过如下命令来实现：</p>
<p># systemctl stop postfix</p>
<h1 id="systemctl-disable-postfix"><a href="#systemctl-disable-postfix" class="headerlink" title="systemctl disable postfix"></a>systemctl disable postfix</h1><p>以上示例是首先停止postfix服务，然后将这项服务器开机自启动关闭。</p>
<p>除了以上这些命令，你还可以通过ps\top以及pstree命令来查看系统运行状况。默认情况下，CentOS 7是未安装pstree工具的，可以使用如下命令安装并通过示例命令查看进程状态：</p>
<p># yum install psmisc</p>
<h1 id="pstree-p"><a href="#pstree-p" class="headerlink" title="pstree -p"></a>pstree -p</h1><p>运行示意图如下：<img src="https://www.jarods.org/wp-content/uploads/2017/10/pstree-result.jpg"></p>
<p><strong>使用CentOS 7防火墙</strong></p>
<p>Firewalld工具是CentOS 7进行访问控制管理的主要工具，使用以下命令，可以设置启用防火墙以及查看状态等：</p>
<p># systemctl enable firewalld</p>
<h1 id="systemctl-start-firewalld"><a href="#systemctl-start-firewalld" class="headerlink" title="systemctl start firewalld"></a>systemctl start firewalld</h1><h1 id="systemctl-status-firewalld"><a href="#systemctl-status-firewalld" class="headerlink" title="systemctl status firewalld"></a>systemctl status firewalld</h1><p>如果想要开启某项服务，则可以使用–add-service&#x3D;服务名方式开启这项服务器访问控制，如果使用–permanent参数，则会永久开启这项服务的相应端口。例如想要开启ssh服务，则使用如下方式：</p>
<p># firewall-cmd –list-services</p>
<h1 id="firewall-cmd-–add-service-x3D-ssh"><a href="#firewall-cmd-–add-service-x3D-ssh" class="headerlink" title="firewall-cmd –add-service&#x3D;ssh"></a>firewall-cmd –add-service&#x3D;ssh</h1><h1 id="firewall-cmd-–add-service-x3D-ssh-–permanent"><a href="#firewall-cmd-–add-service-x3D-ssh-–permanent" class="headerlink" title="firewall-cmd –add-service&#x3D;ssh –permanent"></a>firewall-cmd –add-service&#x3D;ssh –permanent</h1><p>命令首先查看已经支持的服务，然后将ssh服务加入允许列表，运行结果如图所示：<img src="https://www.jarods.org/wp-content/uploads/2017/10/firewall-cmd-result.jpg"></p>
<p>将服务添加完成后，就需要将服务对应的端口添加到允许列表中，使用如下命令方式，注意，–permanent参数同样有效：</p>
<p># firewall-cmd –add-port&#x3D;22&#x2F;tcp –permanent</p>
<h1 id="firewall-cmd-–reload-让防火墙规则生效"><a href="#firewall-cmd-–reload-让防火墙规则生效" class="headerlink" title="firewall-cmd –reload     #让防火墙规则生效"></a>firewall-cmd –reload     #让防火墙规则生效</h1><p><strong>赋予用户sudo权限</strong></p>
<p>为了让普通用户可以通过sudo命令执行root用户权限的命令，可以通过添加用户并修改这个用户至管理员的wheel组来实现，具体步骤如下：</p>
<p># adduser daehub</p>
<h1 id="passwd-daehub"><a href="#passwd-daehub" class="headerlink" title="passwd daehub"></a>passwd daehub</h1><h1 id="usermod-aG-wheel-daehub"><a href="#usermod-aG-wheel-daehub" class="headerlink" title="usermod -aG wheel daehub"></a>usermod -aG wheel daehub</h1><p>以上命令首先添加一个daehub用户，然后为他设置密码，最后通过usermod命令将daehub用户添加至wheel组，就完成了赋予用户管理员权限的操作。</p>
<p>以上就是一些系统管理员每天都可能用到的常用命令，对于一个全新的CentOS系统，熟练使用上述工具，可以达到事半功倍的效果哦。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS查看CPU、内存、网络流量和磁盘 I/O</title>
    <url>/2018/05/04/centos%E6%9F%A5%E7%9C%8Bcpu%E3%80%81%E5%86%85%E5%AD%98%E3%80%81%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E5%92%8C%E7%A3%81%E7%9B%98-i-o/</url>
    <content><![CDATA[<p>yum install -y sysstat</p>
<p>sar -d 1 1</p>
<p>rrqm&#x2F;s: 每秒进行 merge 的读操作数目。即 delta(rmerge)&#x2F;s wrqm&#x2F;s: 每秒进行 merge 的写操作数目。即 delta(wmerge)&#x2F;s r&#x2F;s: 每秒完成的读 I&#x2F;O 设备次数。即 delta(rio)&#x2F;s w&#x2F;s: 每秒完成的写 I&#x2F;O 设备次数。即 delta(wio)&#x2F;s rsec&#x2F;s: 每秒读扇区数。即 delta(rsect)&#x2F;s wsec&#x2F;s: 每秒写扇区数。即 delta(wsect)&#x2F;s rkB&#x2F;s: 每秒读K字节数。是 rsect&#x2F;s 的一半，因为每扇区大小为512字节。(需要计算) wkB&#x2F;s: 每秒写K字节数。是 wsect&#x2F;s 的一半。(需要计算) avgrq-sz: 平均每次设备I&#x2F;O操作的数据大小 (扇区)。delta(rsect+wsect)&#x2F;delta(rio+wio) avgqu-sz: 平均I&#x2F;O队列长度。即 delta(aveq)&#x2F;s&#x2F;1000 (因为aveq的单位为毫秒)。 await: 平均每次设备I&#x2F;O操作的等待时间 (毫秒)。即 delta(ruse+wuse)&#x2F;delta(rio+wio) svctm: 平均每次设备I&#x2F;O操作的服务时间 (毫秒)。即 delta(use)&#x2F;delta(rio+wio) %util: 一秒中有百分之多少的时间用于 I&#x2F;O 操作，或者说一秒中有多少时间 I&#x2F;O 队列是非空的。即 delta(use)&#x2F;s&#x2F;1000 (因为use的单位为毫秒)</p>
<p>如果 %util 接近 100%，说明产生的I&#x2F;O请求太多，I&#x2F;O系统已经满负荷，该磁盘 可能存在瓶颈。 idle小于70% IO压力就较大了,一般读取速度有较多的wait. 同时可以结合vmstat 查看查看b参数(等待资源的进程数)和wa参数(IO等待所占用的CPU时间的百分比,高过30%时IO压力高)</p>
<p>另外还可以参考 svctm 一般要小于 await (因为同时等待的请求的等待时间被重复计算了)，svctm 的大小一般和磁盘性能有关，CPU&#x2F;内存的负荷也会对其有影响，请求过多也会间接导致 svctm 的增加。await 的大小一般取决于服务时间(svctm) 以及 I&#x2F;O 队列的长度和 I&#x2F;O 请求的发出模式。如果 svctm 比较接近 await，说明 I&#x2F;O 几乎没有等待时间；如果 await 远大于 svctm，说明 I&#x2F;O 队列太长，应用得到的响应时间变慢，如果响应时间超过了用户可以容许的范围，这时可以考虑更换更快的磁盘，调整内核 elevator 算法，优化应用，或者升级 CPU。 队列长度(avgqu-sz)也可作为衡量系统 I&#x2F;O 负荷的指标，但由于 avgqu-sz 是按照单位时间的平均值，所以不能反映瞬间的 I&#x2F;O 洪水。</p>
<p>在命令行方式下，如何查看CPU、内存的使用情况，网络流量和磁盘I&#x2F;O？</p>
<p>Q: 在命令行方式下，如何查看CPU、内存的使用情况，网络流量和磁盘I&#x2F;O？</p>
<p>A: 在命令行方式下，</p>
<p>1. 查看CPU使用情况的命令</p>
<p>$ vmstat 5</p>
<p>每5秒刷新一次，最右侧有CPU的占用率的数据</p>
<p>$ top</p>
<p>top 然后按Shift+P，按照进程处理器占用率排序</p>
<p>2. 查看内存使用情况的命令</p>
<p>$ free</p>
<p>top 然后按Shift+M, 按照进程内存占用率排序</p>
<p>$ top</p>
<p>3. 查看网络流量</p>
<p>可以用工具iptraf工具</p>
<p>$ iptraf -g</p>
<p>“”针对某个Interface的网络流量可以通过比较两个时间网络接口的RX和TX数据来获得</p>
<p>$ date; ifconfig eth1</p>
<p>$ date; ifconfig eth1</p>
<p>4. 查看磁盘i&#x2F;o</p>
<p>$ iostat -d -x &#x2F;dev&#x2F;sdc3 2</p>
<p>用iostat查看磁盘&#x2F;dev&#x2F;sdc3的磁盘i&#x2F;o情况，每两秒刷新一次</p>
<p>$ vmstat 2</p>
<p>用vmstat查看io部分的信息</p>
<p>procs: r–&gt;;在运行队列中等待的进程数 b–&gt;;在等待io的进程数 w–&gt;;可以进入运行队列但被替换的进程</p>
<p>memoy swap–&gt;;现时可用的交换内存（k表示） free–&gt;;空闲的内存（k表示）</p>
<p>pages re－－》回收的页面 mf－－》非严重错误的页面 pi－－》进入页面数（k表示） po－－》出页面数（k表示） fr－－》空余的页面数（k表示） de－－》提前读入的页面中的未命中数 sr－－》通过时钟算法扫描的页面</p>
<p>disk 显示每秒的磁盘操作。 s表示scsi盘，0表示盘号</p>
<p>fault 显示每秒的中断数 in－－》设备中断 sy－－》系统中断 cy－－》cpu交换</p>
<p>cpu 表示cpu的使用状态 cs－－》用户进程使用的时间 sy－－》系统进程使用的时间 id－－》cpu空闲的时间</p>
<p>其中: 如果 r经常大于 4 ，且id经常少于40，表示cpu的负荷很重。 如果pi，po 长期不等于0，表示内存不足。 如果disk 经常不等于0， 且在 b中的队列 大于3， 表示 io性能不好。</p>
<p><a href="https://newbug.top/centos%e6%9f%a5%e7%9c%8bcpu%e3%80%81%e5%86%85%e5%ad%98%e3%80%81%e7%bd%91%e7%bb%9c%e6%b5%81%e9%87%8f%e5%92%8c%e7%a3%81%e7%9b%98-io%e3%80%90%e8%af%a6%e7%bb%86%e3%80%91/#reward">赏</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>CPU</tag>
        <tag>内存</tag>
        <tag>磁盘 I/O</tag>
        <tag>网络流量</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS精简与优化</title>
    <url>/2019/10/05/centos%E7%B2%BE%E7%AE%80%E4%B8%8E%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>CentOS安装完毕后，需要进行的优化步骤。</p>
<blockquote>
<p>注意：本文所述的优化，是针对于VPS环境的，桌面环境和独立服务器的CentOS请勿使用本文中的方法进行优化，否则可能导致桌面环境不正常。独立服务器也不要使用本文中的方法去优化，否则会引起异常~</p>
</blockquote>
<h2 id="1，删除不必要的软件包"><a href="#1，删除不必要的软件包" class="headerlink" title="1，删除不必要的软件包"></a>1，删除不必要的软件包</h2><p>yum remove Deployment_Guide-en-US finger cups-libs cups ypbind<br>yum remove bluez-libs desktop-file-utils ppp rp-pppoe wireless-tools irda-utils<br>yum remove sendmail* samba* talk-server finger-server bind* xinetd<br>yum remove nfs-utils nfs-utils-lib rdate fetchmail eject ksh mkbootdisk mtools<br>yum remove syslinux tcsh startup-notification talk apmd rmt dump setserial portmap yp-tools<br>yum groupremove “Mail Server” “Games and Entertainment” “X Window System” “X Software Development” yum groupremove “Development Libraries” “Dialup Networking Support” yum groupremove “Games and Entertainment” “Sound and Video” “Graphics” “Editors” yum groupremove “Text-based Internet” “GNOME Desktop Environment” “GNOME Software Development”</p>
<h2 id="2，升级整个系统"><a href="#2，升级整个系统" class="headerlink" title="2，升级整个系统"></a>2，升级整个系统</h2><p>yum update #更新全部更新 yum clean all #清理全部缓存的安装文件以节省空间</p>
<h2 id="3，禁用seLinux"><a href="#3，禁用seLinux" class="headerlink" title="3，禁用seLinux"></a>3，禁用seLinux</h2><p>sestatus 先执行这一句看看seLinux状态，如果不是disabled，那么执行如下步骤将其禁用 vi &#x2F;etc&#x2F;selinux&#x2F;config<br>SELINUX=disabled 禁用SeLinux SELINUX=enforcing 使用SeLinux</p>
<h2 id="4，停止网卡对ipv6的支持"><a href="#4，停止网卡对ipv6的支持" class="headerlink" title="4，停止网卡对ipv6的支持"></a>4，停止网卡对ipv6的支持</h2><p>vi &#x2F;etc&#x2F;modprobe.conf 添加如下行到文尾：<br>alias net-pf-10 off alias ipv6 off</p>
<p>重启后生效。</p>
<h2 id="5，修改环境变量语言编码，防止出现乱码"><a href="#5，修改环境变量语言编码，防止出现乱码" class="headerlink" title="5，修改环境变量语言编码，防止出现乱码"></a>5，修改环境变量语言编码，防止出现乱码</h2><p>vi &#x2F;etc&#x2F;profile 找到export PATH ……这一行，在其上面加上一行 LANG=en_US.UTF-8<br>然后在export PATH ……这一行后面补充一个LANG<br>source &#x2F;etc&#x2F;profile</p>
<h2 id="6，初始化防火墙"><a href="#6，初始化防火墙" class="headerlink" title="6，初始化防火墙"></a>6，初始化防火墙</h2><p>touch &#x2F;etc&#x2F;sysconfig&#x2F;iptables<br>iptables -F<br>iptables -X<br>iptables -Z<br>service iptables save<br>service iptables restart</p>
<h2 id="7，来个一键优化脚本，自动禁用无用服务，且禁止其开机自启动"><a href="#7，来个一键优化脚本，自动禁用无用服务，且禁止其开机自启动" class="headerlink" title="7，来个一键优化脚本，自动禁用无用服务，且禁止其开机自启动"></a>7，来个一键优化脚本，自动禁用无用服务，且禁止其开机自启动</h2><p>#! &#x2F;bin&#x2F;bash service acpid off<br>service atd stop<br>service auditd stop<br>service avahi-daemon stop<br>service avahi-dnsconfd stop<br>service bluetooth stop<br>service conman stop<br>service cpuspeed stop<br>service cups stop<br>service dnsmasq stop<br>service dund stop<br>service firstboot stop<br>service hidd stop<br>service httpd stop<br>service ibmasm stop<br>service ip6tables stop<br>service irda stop<br>service kdump stop<br>service lm_sensors stop<br>service mcstrans stop<br>service messagebus stop<br>service microcode_ctl stop<br>service netconsole stop<br>service netfs stop<br>service netplugd stop<br>service nfs stop<br>service nfslock stop<br>service nscd stop<br>service ntpd stop<br>service oddjobd stop</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Cloudflare 自定义IP节点收录</title>
    <url>/2019/10/05/cloudflare-%E8%87%AA%E5%AE%9A%E4%B9%89ip%E8%8A%82%E7%82%B9%E6%94%B6%E5%BD%95/</url>
    <content><![CDATA[<h2 id="CFIP白名单"><a href="#CFIP白名单" class="headerlink" title="CFIP白名单"></a>CFIP白名单</h2><p>173.245.48.0&#x2F;20<br>103.21.244.0&#x2F;22<br>103.22.200.0&#x2F;22<br>103.31.4.0&#x2F;22<br>141.101.64.0&#x2F;18<br>108.162.192.0&#x2F;18<br>190.93.240.0&#x2F;20<br>188.114.96.0&#x2F;20<br>197.234.240.0&#x2F;22<br>198.41.128.0&#x2F;17<br>162.158.0.0&#x2F;15<br>104.16.0.0&#x2F;12<br>172.64.0.0&#x2F;13<br>131.0.72.0&#x2F;22</p>
<h2 id="百度云加速与Cloudflare合作节点"><a href="#百度云加速与Cloudflare合作节点" class="headerlink" title="百度云加速与Cloudflare合作节点"></a>百度云加速与Cloudflare合作节点</h2><p>162.159.211.4-103</p>
<p>103.21.244.0&#x2F;22<br>103.22.200.0&#x2F;22<br>103.31.4.0&#x2F;22<br>104.16.0.0&#x2F;12<br>108.162.192.0&#x2F;18<br>131.0.72.0&#x2F;22<br>141.101.64.0&#x2F;18<br>162.158.0.0&#x2F;15<br>172.64.0.0&#x2F;13<br>173.245.48.0&#x2F;20<br>188.114.96.0&#x2F;20<br>190.93.240.0&#x2F;20<br>197.234.240.0&#x2F;22<br>198.41.128.0&#x2F;17</p>
<h2 id="Cloudflare节点推荐"><a href="#Cloudflare节点推荐" class="headerlink" title="Cloudflare节点推荐"></a>Cloudflare节点推荐</h2><p><a href="http://www.moeelf.com/archives/10.html">www.moeelf.com/archives/10.html</a></p>
<p>CloudFlare 百度云合作 ip：</p>
<p>162.159.208.4-162.159.208.103</p>
<p>162.159.209.4-162.159.209.103</p>
<p>162.159.210.4-162.159.210.103</p>
<p>162.159.211.4-162.159.211.103</p>
<p>官方列表：CloudFlare公开的节点 <a href="https://www.cloudflare.com/zh-cn/ips/">https://www.cloudflare.com/zh-cn/ips/</a></p>
<p>各线路推荐列表：<br>电信：推荐走圣何塞，例：104.16.160.* 或者上面的百度云合作 ip。<br>移动：推荐走移动香港，例：172.64.32.*、141.101.115.* 或者 104.23.240.0-104.23.243.254。<br>联通：没发布什么好线路，可走圣何塞。例：104.16.160.* 或者 104.23.240.0-104.23.243.254。也可以试一下走亚特兰大 108.162.236.*（日前不可用。） 。</p>
<h2 id="Qi推荐"><a href="#Qi推荐" class="headerlink" title="Qi推荐"></a>Qi推荐</h2><p>108.162.236.1&#x2F;24 联通 走美国<br>172.64.32.1&#x2F;24 移动 走香港<br>104.16.160.1&#x2F;24 电信 走美国洛杉矶<br>———<br>172.64.0.0&#x2F;24 电信 美国旧金山<br>104.20.157.0&#x2F;24 联通 走日本<br>104.28.14.0&#x2F;24 移动 走新加坡<br>（联通移动推荐节点）<br>104.23.240.0-104.23.243.254<br>（电信推荐百度云合作ip）<br>162.159.208.4-162.159.208.103<br>162.159.209.4-162.159.209.103<br>162.159.210.4-162.159.210.103<br>162.159.211.4-162.159.211.103</p>
<h2 id="适合电信的节点"><a href="#适合电信的节点" class="headerlink" title="适合电信的节点"></a>适合电信的节点</h2><p>104.23.240.* 走欧洲各国出口 英国德国荷兰等 延迟比美国高一些 适合源站在欧洲的网站 172.64.32.* 虽然去程走新加坡，但是回程线路的绕路的，实际效果不好，不推荐 104.16.160.* 圣何塞的线路，比洛杉矶要快一点，推荐 108.162.236.* 亚特兰大线路，延迟稳定，但是延迟较高</p>
<h2 id="适合移动的节点"><a href="#适合移动的节点" class="headerlink" title="适合移动的节点"></a>适合移动的节点</h2><p>162.158.133.* 走的丹麦，这一段ip只有部分能用，可以自己试一下。绕美国。 198.41.214.* 198.41.212.* 198.41.208.* 198.41.209.* 172.64.32.* 141.101.115.* 移动走香港的IP段有很多，以上并不是全部。CF移动走香港的分直连和走ntt的效果都挺不错的，不过部分地区晚上还是会丢包。 172.64.0. 这是走圣何塞的，一般用香港的就行 172.64.16.* 欧洲线路.绕</p>
<h2 id="1-0-0-1效果较好"><a href="#1-0-0-1效果较好" class="headerlink" title="1.0.0.1效果较好"></a>1.0.0.1效果较好</h2><h2 id="电信部分"><a href="#电信部分" class="headerlink" title="电信部分"></a>电信部分</h2><p>大多数省直接使用1.0.0.0即可，延迟低，丢包少， 少部分还是需要换ip</p>
<h3 id="新加坡"><a href="#新加坡" class="headerlink" title="新加坡"></a>新加坡</h3><p>172.64.32.0-172.64.47.254</p>
<h3 id="移动部分"><a href="#移动部分" class="headerlink" title="移动部分"></a>移动部分</h3><h3 id="新加坡-1"><a href="#新加坡-1" class="headerlink" title="新加坡"></a>新加坡</h3><p>104.18.48.0-104.18.63.255 104.24.112.0-104.24.127.255 104.27.128.0-104.27.143.255 104.28.0.0-104.28.15.255</p>
<h3 id="移动部分-1"><a href="#移动部分-1" class="headerlink" title="移动部分"></a>移动部分</h3><h3 id="圣何塞-cogentco-com"><a href="#圣何塞-cogentco-com" class="headerlink" title="圣何塞 cogentco.com"></a>圣何塞 cogentco.com</h3><p>104.28.16.0-31.255 104.27.144.0-243.254 104.23.240.0-243.254</p>
<h3 id="香港cloudflare1-100g-hkix-net"><a href="#香港cloudflare1-100g-hkix-net" class="headerlink" title="香港cloudflare1-100g.hkix.net"></a>香港cloudflare1-100g.hkix.net</h3><p>大部分都是这个通道 1.0.0.0-254 1.1.1.0-254 66.235.200.0-254 此段为IPOWER.COM endurance.com专用，有可能被跳转到IPOWER.COM endurance.com页面 104.16.80.0-95.255 104.16.175.255-104.16.191.255</p>
<h3 id="香港直连"><a href="#香港直连" class="headerlink" title="香港直连"></a>香港直连</h3><p>23.227.63.0-254 此段为shopify.com专用，有可能被跳转到shopify.com页面 104.16.0.0-79.255 104.16.96.0-175.254 104.16.192.0-207.255</p>
<h3 id="新加坡-ae-0-cloudflare-sngpsi07-sg-bb-gin-ntt-net"><a href="#新加坡-ae-0-cloudflare-sngpsi07-sg-bb-gin-ntt-net" class="headerlink" title="新加坡 ae-0.cloudflare.sngpsi07.sg.bb.gin.ntt.net"></a>新加坡 ae-0.cloudflare.sngpsi07.sg.bb.gin.ntt.net</h3><p>都从香港ntt转发 104.28.0.0-15.255</p>
<h3 id="联通部分"><a href="#联通部分" class="headerlink" title="联通部分"></a>联通部分</h3><h3 id="伦敦-cloudflare-gw-cr10-lon1-ip4-gtt-net"><a href="#伦敦-cloudflare-gw-cr10-lon1-ip4-gtt-net" class="headerlink" title="伦敦 cloudflare-gw.cr10-lon1.ip4.gtt.net"></a>伦敦 cloudflare-gw.cr10-lon1.ip4.gtt.net</h3><p>172.64.19.16</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Cloudflare</tag>
      </tags>
  </entry>
  <entry>
    <title>Cloudflare CNAME接入命令行版</title>
    <url>/2017/08/30/cloudflare-cname%E6%8E%A5%E5%85%A5%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%89%88/</url>
    <content><![CDATA[<p><a href="https://github.com/fffonion/cloudflare-partner-cli">https://github.com/fffonion/cloudflare-partner-cli</a> <strong>Cloudflare Partner CLI</strong></p>
<p>使用Cloudflare partner功能用CNAME方式接入cloudflare。</p>
<p>如需使用中文菜单，请将环境变量的LANG设置为使用UTF-8 (比如zh_CN.UTF-8)。</p>
<p><strong>使用方法</strong></p>
<ul>
<li>申请Cloudflare partner计划 <a href="https://www.cloudflare.com/partners/">https://www.cloudflare.com/partners/</a></li>
<li>clone本项目或者直接下载脚本 右键另存为：<a href="https://github.com/fffonion/cloudflare-partner-cli/raw/master/cloudflare-partner-cli.py">https://github.com/fffonion/cloudflare-partner-cli/raw/master/cloudflare-partner-cli.py</a></li>
<li>运行 python .&#x2F;cloudflare-partner-cli.py</li>
<li>输入 host_key。可以从这里<a href="https://partners.cloudflare.com/api-management%E8%8E%B7%E5%BE%97%E3%80%82">https://partners.cloudflare.com/api-management获得。</a></li>
<li>输入要用来管理域名的账号 (你的个人账号，不是partner账号).</li>
<li>按照屏幕提示操作</li>
</ul>
<p>源站地址(resolve_to)必须填写完整的dns，如google.com，不能填写ip <img src="https://www.jarods.org/wp-content/uploads/2017/08/Screen-Shot-2017-08-29-at-10.57.27-PM-300x179.png"></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CDN</tag>
        <tag>Cloudflare</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian 9代号为Stretch，可以直接从Debian 8升级过去：</title>
    <url>/2017/10/27/debian-9%E4%BB%A3%E5%8F%B7%E4%B8%BAstretch%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%BB%8Edebian-8%E5%8D%87%E7%BA%A7%E8%BF%87%E5%8E%BB%EF%BC%9A/</url>
    <content><![CDATA[<p>1. 更新Debian 8到最新，这一步可有可无，个人觉得加上会比较稳妥一点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get upgrade</span><br></pre></td></tr></table></figure>

<p>2. 将软件源改为Debian 9的stretch，如果使用我下面的命令的话，要看你原来的Debian 8是用stable表示还是jessie表示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> sed s/jessie/stretch/ /etc/apt/sources.list  tee /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>3. 升级系统版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get  update &amp;&amp; apt-get dist-upgrade</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Debian</tag>
        <tag>升级</tag>
      </tags>
  </entry>
  <entry>
    <title>crontab centos7上的使用</title>
    <url>/2019/01/30/crontab-centos7%E4%B8%8A%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Unix和类Unix的操作系统中的定时器。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install crontabs</span><br></pre></td></tr></table></figure>

<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><p>crontab的使用就是编辑配置文件。 配置文件位于&#x2F;var&#x2F;spool&#x2F;cron&#x2F;<username>，其中<username >是用户名。 日志位于&#x2F;var&#x2F;log&#x2F;cron，参考<a href="https://www.jianshu.com/p/85bf258217c8">这里</a>清理日志文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#列出crontab文件</span><br><span class="line">crontab -l</span><br><span class="line"></span><br><span class="line">#编辑crontab文件</span><br><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line">#删除crontab文件</span><br><span class="line">crontab -r</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>配置文件基本格式 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*     *     *     *     *     cmd</span><br><span class="line">分　  时　   日　   月　   周　  命令</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="定期清理Jenkins日志"><a href="#定期清理Jenkins日志" class="headerlink" title="定期清理Jenkins日志"></a>定期清理Jenkins日志</h1><p>新建.sh文件<code>vi /data/clean/clean_jenkins_log.sh</code>, 内容如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#! /bin/bash</span><br><span class="line"></span><br><span class="line">cat /dev/null &gt; /var/log/jenkins.log</span><br></pre></td></tr></table></figure>

<p>授权文件<code>chmod 777 /data/clean/clean_jenkins_log.sh</code>。 编辑crontab配置文件<code>crontab -e</code>, 加入一行配置, 每天凌晨1:30执行一次命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">30 1 * * * /data/clean/clean_jenkins_log.sh &gt;/dev/null &amp;</span><br></pre></td></tr></table></figure>

<p>重载配置文件<code>systemctl reload crond.service</code>。</p>
<h1 id="定期清理Docker镜像"><a href="#定期清理Docker镜像" class="headerlink" title="定期清理Docker镜像"></a>定期清理Docker镜像</h1><p>过程同上，.sh文件内容修改为，按镜像Tag模糊匹配进行删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">docker rmi -f $(docker images  awk &#x27;/^daocloud.io/ &#123; print $3 &#125;&#x27;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">docker rmi -f $(docker images  awk &#x27;/^ccr.ccs.tencentyun.com/ &#123; print $3 &#125;&#x27;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">docker rmi -f $(docker images  grep &quot;none&quot;  awk &#x27;&#123;print $3&#125;&#x27;)</span><br></pre></td></tr></table></figure>

<h1 id="定期重启服务"><a href="#定期重启服务" class="headerlink" title="定期重启服务"></a>定期重启服务</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">systemctl restart nexus.service</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure>

<h1 id="其他样例"><a href="#其他样例" class="headerlink" title="其他样例"></a>其他样例</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#每晚的21:30 重启apache</span><br><span class="line">30 21 * * * /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line"></span><br><span class="line">#每月1、10、22日的4 : 45重启apache</span><br><span class="line">45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line"></span><br><span class="line">#每周六、周日的1 : 10重启apache</span><br><span class="line">10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line"></span><br><span class="line">#每天18 : 00至23 : 00之间每隔30分钟重启apache</span><br><span class="line">0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line"></span><br><span class="line">#晚上11点到早上7点之间，每隔一小时重启apache</span><br><span class="line">* 23-7/1 * * * /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line"></span><br><span class="line">#每一小时重启apache</span><br><span class="line">* */1 * * * /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line"></span><br><span class="line">#每月的4号与每周一到周三的11点重启apache</span><br><span class="line">0 11 4 * mon-wed /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line"></span><br><span class="line">#一月一号的4点重启apache</span><br><span class="line">0 4 1 jan * /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">30 1 * * * /data/clean/clean_docker_images.sh &gt;/dev/null &amp;</span><br><span class="line">30 2 * * * /data/clean/clean_docker_images2.sh &gt;/dev/null &amp;</span><br><span class="line">30 3 * * * /data/clean/clean_docker_images3.sh &gt;/dev/null &amp;</span><br><span class="line">30 4 * * * /data/clean/clean_jenkins_log.sh &gt;/dev/null &amp;</span><br><span class="line">10 5 * * * /data/clean/restart_docker.sh &gt;/dev/null &amp;</span><br><span class="line">30 5 * * * /data/clean/restart_nexus.sh &gt;/dev/null &amp;</span><br></pre></td></tr></table></figure>

<p>作者：adeng2016 链接：<a href="https://www.jianshu.com/p/b3c8493753ca">https://www.jianshu.com/p/b3c8493753ca</a> 來源：简书 简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian/Ubuntu/CentOS 网络安装/网络重装/纯净安装 一键脚本</title>
    <url>/2019/07/25/debian-ubuntu-centos-%E7%BD%91%E7%BB%9C%E5%AE%89%E8%A3%85-%E7%BD%91%E7%BB%9C%E9%87%8D%E8%A3%85-%E7%BA%AF%E5%87%80%E5%AE%89%E8%A3%85-%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<ul>
<li><ul>
<li><ul>
<li><strong>背景</strong>:适用于由GRUB引导的CentOS,Ubuntu,Debian系统.</li>
</ul>
</li>
</ul>
</li>
<li><p>使用官方发行版去掉模板预装的软件.</p>
</li>
<li><p>同时也可以解决内核版本与软件不兼容的问题。</p>
</li>
<li><p>只要有root权限,还您一个纯净的系统。*   <strong>相关文章</strong>:</p>
</li>
</ul>
<p><strong><a href="https://moeclub.org/2017/11/19/483/">[ Linux Shell ] 通用无限制在 Linux VPS 上一键全自动 dd 安装 Windows</a></strong></p>
<hr>
<ul>
<li><ul>
<li><strong>注意</strong>:<ul>
<li>全自动安装默认root密码:<code>MoeClub.org</code> 安装完成后请立即更改密码.</li>
<li>能够全自动重装Debian&#x2F;Ubuntu&#x2F;CentOS等系统.</li>
<li>同时提供dd安装镜像功能,例如: <a href="https://moeclub.org/2017/11/19/483/">全自动无救援dd安装windows系统</a></li>
<li>全自动安装CentOS时默认提供VNC功能,可使用<strong>VNC Viewer</strong>查看进度, <strong>VNC端口</strong>为<strong>1</strong>或者<strong>5901</strong>,可自行尝试连接.(成功后VNC功能会消失.)</li>
<li>目前CentOS系统只支持任意版本重装为 <strong>CentOS 6.x</strong> 及以下版本.</li>
<li><strong>特别注意:<em><code>OpenVZ</code>构架不适用.</em></strong></li>
</ul>
</li>
<li><strong>更新</strong>:<ul>
<li><ul>
<li>[2019.05.12]优化部分代码.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>修复了一些已知问题.*   [2018.11.12]</li>
</ul>
<p>修复了一些错误逻辑.</p>
<ul>
<li><ul>
<li>[2018.10.31]</li>
</ul>
</li>
</ul>
<p>增加 –loader 参数.(用于定制镜像)</p>
<ul>
<li><ul>
<li>[2018.08.10]修复一些Bug.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>增加 -i 参数.(用于指定网卡)*   [2018.06.09]支持自定义远程桌面端口并打开相关防火墙端口(默认为3389).</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>自动扩展系统盘空间为整个硬盘.</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>增加 -rdp 参数.(用于更换RDP端口,并强制打开该端口防火墙)*   [2018.04.17]</li>
</ul>
<p>修复对grub.conf抓取识别的问题.</p>
<ul>
<li><ul>
<li>[2018.04.06]优化正则表达式.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>丢弃对grep -P的依赖.*   [2018.04.03]合并Debian&#x2F;Ubuntu&#x2F;CentOS&#x2F;dd安装镜像功能.</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>使用最少依赖原则.</li>
</ul>
</li>
<li><ul>
<li>优化部分流程.</li>
</ul>
</li>
<li><ul>
<li>修复一些已知BUG.</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><ul>
<li><strong>依赖包</strong>:</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#二进制文件    Debian/Ubuntu    RedHat/CentOS</span><br><span class="line">iconv         [libc-bin]       [glibc-common]</span><br><span class="line">xz            [xz-utils]       [xz]</span><br><span class="line">awk           [gawk]           [gawk]</span><br><span class="line">sed           [sed]            [sed]</span><br><span class="line">file          [file]           [file]</span><br><span class="line">grep          [grep]           [grep]</span><br><span class="line">openssl       [openssl]        [openssl]</span><br><span class="line">cpio          [cpio]           [cpio]</span><br><span class="line">gzip          [gzip]           [gzip]</span><br><span class="line">cat,cut..     [coreutils]      [coreutils]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li><strong>确保安装了所需软件</strong>:</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Debian/Ubuntu:</span><br><span class="line">apt-get install -y xz-utils openssl gawk file</span><br><span class="line"></span><br><span class="line">#RedHat/CentOS:</span><br><span class="line">yum install -y xz openssl gawk file</span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li><strong>如果出现了错误,请运行</strong>:</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Debian/Ubuntu:</span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line">#RedHat/CentOS:</span><br><span class="line">yum update</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><ul>
<li><strong>快速使用示例</strong>:</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash &lt;(wget --no-check-certificate -qO- &#x27;https://moeclub.org/attachment/LinuxShell/InstallNET.sh&#x27;) -d 9 -v 64 -a</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><ul>
<li><strong>下载及说明</strong>:</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -qO InstallNET.sh &#x27;https://moeclub.org/attachment/LinuxShell/InstallNET.sh&#x27; &amp;&amp; chmod a+x InstallNET.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">        bash InstallNET.sh      -d/--debian [dist-name]</span><br><span class="line">                                -u/--ubuntu [dist-name]</span><br><span class="line">                                -c/--centos [dist-version]</span><br><span class="line">                                -v/--ver [32/i38664/amd64]</span><br><span class="line">                                --ip-addr/--ip-gate/--ip-mask</span><br><span class="line">                                -apt/-yum/--mirror</span><br><span class="line">                                -dd/--image</span><br><span class="line">                                -a/-m</span><br><span class="line"></span><br><span class="line"># dist-name: 发行版本代号</span><br><span class="line"># dist-version: 发行版本号</span><br><span class="line"># -apt/-yum/--mirror : 使用定义镜像</span><br><span class="line"># -a/-m : 询问是否能进入VNC自行操作. -a 为不提示(一般用于全自动安装), -m 为提示.</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><ul>
<li><strong>使用示例</strong>:</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#使用默认镜像全自动安装</span><br><span class="line">bash InstallNET.sh -d 8 -v 64 -a</span><br><span class="line"></span><br><span class="line">#使用自定义镜像全自动安装</span><br><span class="line">bash InstallNET.sh -c 6.10 -v 64 -a --mirror &#x27;http://mirror.centos.org/centos&#x27;</span><br><span class="line"></span><br><span class="line"># 以下示例中,将X.X.X.X替换为自己的网络参数.</span><br><span class="line"># --ip-addr :IP Address/IP地址</span><br><span class="line"># --ip-gate :Gateway   /网关</span><br><span class="line"># --ip-mask :Netmask   /子网掩码</span><br><span class="line"></span><br><span class="line">#使用自定义镜像全自动安装</span><br><span class="line">#bash InstallNET.sh -u 9 -v 64 -a --mirror &#x27;http://mirrors.ustc.edu.cn/debian/&#x27;</span><br><span class="line"></span><br><span class="line">#使用自定义镜像自定义网络参数全自动安装</span><br><span class="line">#bash InstallNET.sh -u 16.04 -v 64 -a --ip-addr x.x.x.x --ip-gate x.x.x.x --ip-mask x.x.x.x --mirror &#x27;http://archive.ubuntu.com/ubuntu&#x27;</span><br><span class="line"></span><br><span class="line">#使用自定义网络参数全自动dd方式安装</span><br><span class="line">#bash InstallNET.sh --ip-addr x.x.x.x --ip-gate x.x.x.x --ip-mask x.x.x.x -dd &#x27;https://moeclub.org/onedrive/IMAGE/Windows/win7emb_x86.tar.gz&#x27;</span><br><span class="line"></span><br><span class="line">#使用自定义网络参数全自动dd方式安装存储在谷歌网盘中的镜像(调用文件ID的方式)</span><br><span class="line">#bash InstallNET.sh --ip-addr x.x.x.x --ip-gate x.x.x.x --ip-mask x.x.x.x -dd &quot;https://image.moeclub.org/GoogleDrive/1cqVl2wSGx92UTdhOxU9pW3wJgmvZMT_J&quot;</span><br><span class="line"></span><br><span class="line">#使用自定义网络参数全自动dd方式安装存储在谷歌网盘中的镜像</span><br><span class="line">#bash InstallNET.sh --ip-addr x.x.x.x --ip-gate x.x.x.x --ip-mask x.x.x.x -dd &quot;https://image.moeclub.org/GoogleDrive/1cqVl2wSGx92UTdhOxU9pW3wJgmvZMT_J&quot;</span><br><span class="line"></span><br><span class="line">#国内推荐使用USTC源</span><br><span class="line">#--mirror &#x27;http://mirrors.ustc.edu.cn/debian/&#x27;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><ul>
<li><strong>一些可用镜像地址</strong>:</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 推荐使用带有 /GoogleDrive/ 链接, 速度更快.</span><br><span class="line"># 当然也可以使用自己GoogleDrive中储存的镜像,使用方式:</span><br><span class="line">  https://image.moeclub.org/GoogleDrive/</span><br><span class="line"></span><br><span class="line"># win7emb_x86.tar.gz:</span><br><span class="line">  https://image.moeclub.org/GoogleDrive/1srhylymTjYS-Ky8uLw4R6LCWfAo1F3s7 </span><br><span class="line">  https://moeclub.org/onedrive/IMAGE/Windows/win7emb_x86.tar.gz</span><br><span class="line"></span><br><span class="line"># win8.1emb_x64.tar.gz:</span><br><span class="line">  https://image.moeclub.org/GoogleDrive/1cqVl2wSGx92UTdhOxU9pW3wJgmvZMT_J</span><br><span class="line">  https://moeclub.org/onedrive/IMAGE/Windows/win8.1emb_x64.tar.gz</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><ul>
<li><strong>一些提示</strong>:<ul>
<li><strong>特别注意</strong>:</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>提供的dd安装镜像</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>远程登陆账号为:</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong><em>Administrator</em></strong></p>
<ul>
<li><ul>
<li><ul>
<li>远程登陆密码为:</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong><em>Vicer</em></strong></p>
<ul>
<li><ul>
<li><ul>
<li><ul>
<li>仅修改了主机名,可放心使用.(建议自己制作.)*   <strong>在dd安装系统镜像时</strong>:</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>在你的机器上全新安装,如果你有VNC,可以看到全部过程. 在dd安装镜像的过程中,不会走进度条(进度条一直显示为</p>
<p><strong>0%</strong></p>
<ul>
<li><ul>
<li>).完成后将会自动重启.</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>分区界面标题一般显示为: “</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Starting up the partitioner</strong></p>
<ul>
<li><ul>
<li>“</li>
</ul>
</li>
</ul>
<p> <strong>使用谷歌网盘中储存的镜像: <a href="https://moeclub.org/directlink/">[无限制大小] 获取谷歌网盘文件临时直接下载链接</a></strong></p>
<ul>
<li><ul>
<li><ul>
<li><ul>
<li><ul>
<li><strong>在全自动安装CentOS时</strong>:</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>如果看到 “</p>
<p><strong>Starting graphical installation</strong></p>
<ul>
<li><ul>
<li>“ 或者类似表达,则表示正在安装.</li>
</ul>
</li>
<li><ul>
<li>正常情况下只需要耐心等待安装完成即可.</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>如果需要查看进度,使用</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>VNC Viewer</strong></p>
<ul>
<li><ul>
<li>(或者其他VNC连接工具)</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>连接提示中的</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>IP地址:端口</strong></p>
<ul>
<li><ul>
<li><ul>
<li>进行连接.(端口一般为</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>1</strong></p>
<ul>
<li><ul>
<li><ul>
<li>或者</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>5901</strong></p>
<ul>
<li><ul>
<li>)</li>
</ul>
</li>
</ul>
<p><strong>声明:</strong></p>
<ol>
<li><em>各种形式的翻译或转载需注明作者及<a href="https://moeclub.org/2018/04/03/603/">本文地址</a>.</em></li>
<li><em>使用该脚本造成的任何直接损失或间接损失,<a href="https://moeclub.org/">萌咖</a>不负任何责任.</em></li>
</ol>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>CentOS</tag>
        <tag>Debian</tag>
        <tag>网络安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian/Ubuntu下一键安装h5ai_dplayer版</title>
    <url>/2018/03/27/debian-ubuntu%E4%B8%8B%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85h5ai-dplayer%E7%89%88/</url>
    <content><![CDATA[<p>系统基于Debian 8+&#x2F;Ubuntu 16.04+。 该脚本会创建Nginx + PHP7.0.x环境，若要使用ssl，请提前解析IP到域名。（有极少量修改，在Ubuntu 16.04下成功。） h5ai_dplayer版为H5ai修改版，带HTML5视频播放器DPlayer。</p>
<p><strong>SSH下，root用户，安装</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://zhujiwiki.com/usr/uploads/2018/03/h5ai.sh</span><br><span class="line">bash h5ai.sh tee h5ai.log</span><br></pre></td></tr></table></figure>

<p>安装按照说明选择即可。</p>
<p><strong>默认安装路径</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Nginx：/etc/nginx</span><br><span class="line">网站Nginx配置：/etc/nginx/conf.d/h5ai.conf</span><br><span class="line">PHP: /etc/php/7.0</span><br><span class="line">h5ai目录：/home/wwwroot/your_domain</span><br></pre></td></tr></table></figure>

<p>your_domain为你绑定的域名。</p>
<p>via：<a href="https://github.com/wulabing/h5ai_onekey_install-lnp-">https://github.com/wulabing/h5ai_onekey_install-lnp-</a>、<a href="http://www.hostloc.com/thread-438265-1-2.html">http://www.hostloc.com/thread-438265-1-2.html</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>h5ai_dplayer</tag>
      </tags>
  </entry>
  <entry>
    <title>debian/ubuntu下关闭IPv6</title>
    <url>/2018/06/29/debian-ubuntu%E4%B8%8B%E5%85%B3%E9%97%ADipv6/</url>
    <content><![CDATA[<p>在更新debian的时候发现链接里面出现的是IPV6，这个让我觉得很不爽，所以想着如何禁止或者关闭，最后在百度的帮助下找到了一篇比较全面的文章解决了在debian下搞定IPV6的问题：</p>
<p>使用 &#x2F;proc 这是#关闭所有接口的 IPv6 功能 echo “1” &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv6&#x2F;conf&#x2F;all&#x2F;disable_ipv6 关闭指定网卡的 IPv6 功能 echo “1” &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv6&#x2F;conf&#x2F;ethx&#x2F;disable_ipv6 使用 modprobe ，禁用 IPv6 编辑 vim &#x2F;etc&#x2F;modprobe.d&#x2F;aliases 输入 alias net-pf-10 off alias ipv6 off 编辑 vim &#x2F;etc&#x2F;modprobe.d&#x2F;blacklist 输入 blacklist net-pf-10 blacklist ipv6 利用 GRUB 添加启动参数， 禁用 IPv6 编辑 vim &#x2F;etc&#x2F;default&#x2F;grub 找到 GRUB_CMDLINE_LINUX_DEFAULT&#x3D;”quiet” 替换为 GRUB_CMDLINE_LINUX_DEFAULT&#x3D;”ipv6.disable&#x3D;1 quiet” 使用sysctl 对于squeeze及其后的版本，ipv6已被内核支持，所以可以通过sysctl来关闭它。可以使用以下命令： echo ‘net.ipv6.conf.all.disable_ipv6&#x3D;1’ &gt; &#x2F;etc&#x2F;sysctl.d&#x2F;disableipv6.conf 让ipv4优先于ipv6</p>
<p>一些系统中是ipv4和ipv6并存，而且ipv6优先于ipv4。但机房可能并暂时没有实际分配ipv6，所以我们也可以不要关闭ipv6，记ipv4优先于ipv6即可。输入如下命令: echo “precedence ::ffff:0:0&#x2F;96 100″&gt;&gt;&#x2F;etc&#x2F;gai.conf</p>
<p>当然也可以直接修改 &#x2F;etc&#x2F;gai.conf 找到 #precedence ::ffff:0:0&#x2F;96 100 把前面的”#”去掉即可。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Debian</tag>
        <tag>IPV6</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome浏览器关闭 QUIC，避免部分地区运营商UDP QOS对速度的影响</title>
    <url>/2019/11/13/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%B3%E9%97%AD-quic%EF%BC%8C%E9%81%BF%E5%85%8D%E9%83%A8%E5%88%86%E5%9C%B0%E5%8C%BA%E8%BF%90%E8%90%A5%E5%95%86udp-qos%E5%AF%B9%E9%80%9F%E5%BA%A6%E7%9A%84%E5%BD%B1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前两天，TG群里的一个逗比提出让我写个关闭 QUIC 功能的教程，我去了解了一下，发现说是写教程，实际是也就是给大家提个醒，毕竟太短啦。</p>
<p><strong>注意：QUIC适用于一切基于 Chromium 的浏览器，如果不是这个内核的浏览器就没必要看了。</strong></p>
<h2 id="QUIC是什么"><a href="#QUIC是什么" class="headerlink" title="QUIC是什么"></a>QUIC是什么</h2><blockquote>
<p><strong>QUIC（Quick UDP Internet Connection）</strong>是谷歌制定的一种基于 UDP 的低时延互联网传输层协议。</p>
<p>我们知道，TCP&#x2F;IP 协议族是互联网的基础。其中传输层协议包括 TCP 和 UDP 协议。与 TCP 协议相比，UDP 更为轻量，但是错误校验也要少得多。这意味着 UDP 往往效率更高（不经常跟服务器端通信查看数据包是否送达或者按序），但是可靠性比不上 TCP。通常游戏、流媒体等应用均采用 UDP，而网页、邮件、远程登录等大部分的应用均采用 TCP。</p>
<p><strong>—— 截取自 <a href="http://geek.csdn.net/news/detail/31117">http://geek.csdn.net</a></strong></p>
</blockquote>
<p>而谷歌就是结合这两种协议的优势，做出了 QUIC，好吧，其实说这么多也没用，我们只需要知道 QUIC 是谷歌开发出来更好的协议就行了。</p>
<h2 id="为什么要关闭"><a href="#为什么要关闭" class="headerlink" title="为什么要关闭"></a>为什么要关闭</h2><p>那既然更好，为什么要关闭呢？这就是因为 QUIC 为了实现 UDP 的高效，会把一些 TCP 转为 UDP，但是在<strong>国内部分地区的运营商都会针对 UDP 协议QOS限速或者丢包</strong>，这就导<strong>致 UDP 效率低下</strong>，或许速度会比正常使用TCP协议还慢很多。</p>
<p>而谷歌的服务器，例如 Google搜索、优土鳖视频等，都部署了 QUIC 服务，这意味着当你使用<strong>已开启 QUIC 功能的基于Chromium内核浏览器</strong>访问谷歌网站的时候，会尝试使用 QUIC 方式传输数据。而碰巧你<strong>当地运营商对 UDP协议歧视</strong>，然后疯狂限速或丢包，这时候你的速度就会很感人。</p>
<blockquote>
<p><strong>注意：</strong>各地区的运营商对 UDP协议的态度不一样，<strong>有的地区QOS严重，有的地区则很轻</strong>，所以<strong>关闭 QUIC 只对部分地区用户会有加速效果！</strong></p>
</blockquote>
<p>又或者你使用酸（5）酸（5）乳（R）代理，而**服务端没有开启 UDP 转发功能(或者防火墙没开放 UDP)**，那么你可能会遇到打开 优土鳖视频后，视频会一直缓冲无法加载，或者是首次打开总是慢很多（因为浏览器在尝试）。</p>
<p>目前看来，QUIC 未普及开，并且运营商也依然我行我素的歧视 UDP 协议，所以还是先关闭的好。</p>
<h2 id="如何关闭QUIC"><a href="#如何关闭QUIC" class="headerlink" title="如何关闭QUIC"></a>如何关闭QUIC</h2><p>首先打开你基于Chromium内核的浏览器，<strong>地址栏输入：<code>chrome://flags/#enable-quic</code></strong></p>
<p>然后就会看到如下图（分别是英文和中文两种语言），在下拉框中可以选择 <strong>默认&#x2F;已启用&#x2F;已禁用 (Default&#x2F;Enabled&#x2F;Disabled)</strong> 三个选项，我们只需要把选项改为 <strong>已禁用(Disabled)</strong> 即可。</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/11/2017090116293588.png" alt="Chrome浏览器关闭 QUIC，避免部分地区运营商UDP QOS对速度的影响"><img src="http://www.jarods.org/wp-content/uploads/2019/11/2017090116293547.png" alt="Chrome浏览器关闭 QUIC，避免部分地区运营商UDP QOS对速度的影响"></p>
<p><strong>修改后，需要重启浏览器生效。</strong></p>
<p>重启后再试一下访问谷歌网站，例如优土鳖视频，看一看是否有速度提升（看当地运营商UDP协议QOS情况）。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>QOS</tag>
        <tag>QUIC</tag>
        <tag>UDP</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian/Ubuntu TCP BBR 改进版/增强版/魔改版</title>
    <url>/2018/08/03/debian-ubuntu-tcp-bbr-%E6%94%B9%E8%BF%9B%E7%89%88-%E5%A2%9E%E5%BC%BA%E7%89%88-%E9%AD%94%E6%94%B9%E7%89%88/</url>
    <content><![CDATA[<ul>
<li><ul>
<li><strong>背景</strong>:</li>
</ul>
</li>
</ul>
<p>原版的BBR对于我们来说,速度不太稳定. 通过修改BBR源码,调整参数,使其更强劲.</p>
<hr>
<ul>
<li><p>更新:</p>
</li>
<li><p>[2017.07.25]</p>
</li>
<li><p>修复一个由检测gcc版本引起的不可预料的错误.</p>
</li>
<li><p>[2017.07.15]</p>
</li>
<li><p>自动检测gcc版本,如果gcc版本大于4.9的将不会再安装gcc.</p>
</li>
<li><p>[2017.07.12]</p>
</li>
<li><p>支持用户自行指定内核版本(需要与 -f 命令同时使用).</p>
</li>
</ul>
<hr>
<ul>
<li><ul>
<li><strong>准备</strong>:</li>
</ul>
</li>
</ul>
<p>使用前,请确认能够开启BBR. 可参考: <a href="https://moeclub.org/2017/06/06/249/"><strong>Debian&#x2F;Ubuntu 开启 TCP BBR 拥塞算法</strong></a> 或者直接执行此命令进行开启.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -qO &#x27;BBR.sh&#x27; &#x27;https://moeclub.org/attachment/LinuxShell/BBR.sh&#x27; &amp;&amp; chmod a+x BBR.sh &amp;&amp; bash BBR.sh -f</span><br></pre></td></tr></table></figure>

<p><em>注意:执行此命令会自动重启.</em></p>
<hr>
<ul>
<li><ul>
<li><strong>一键地址</strong>:</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -qO &#x27;BBR_POWERED.sh&#x27; &#x27;https://moeclub.org/attachment/LinuxShell/BBR_POWERED.sh&#x27; &amp;&amp; chmod a+x BBR_POWERED.sh &amp;&amp; bash BBR_POWERED.sh</span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li><strong>指定内核版本(以v4.11.9内核版本为例)</strong>:</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -qO &#x27;BBR_POWERED.sh&#x27; &#x27;https://moeclub.org/attachment/LinuxShell/BBR_POWERED.sh&#x27; &amp;&amp; chmod a+x BBR_POWERED.sh &amp;&amp; bash BBR_POWERED.sh -f v4.11.9</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><ul>
<li><strong>说明</strong>:<ul>
<li>执行过程中会重新编译模块.</li>
<li>模块默认为开机自动加载.</li>
<li>模块名称:<em>tcp_bbr_powered</em></li>
<li>可用 <code>modprobe tcp_bbr_powered</code> 命令进行加载模块.</li>
<li>可执行 <code>lsmod grep &#39;bbr_powered&#39;</code> 结果不为空,则加载模块成功</li>
<li>可执行 <code>sysctl -w net.ipv4.tcp_congestion_control=bbr_powered</code> 使用此模块.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>以上只是说明,直接使用一键脚本即可.</strong></p>
<hr>
<ul>
<li><ul>
<li><strong>完整代码</strong>:</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><ul>
<li><strong>注意事项</strong>:</li>
</ul>
</li>
</ul>
<p>如遇报错:<code>Error! Header not be matched by Linux Kernel.</code> 请用使用本博客提供的脚本重新开启BBR,或使用<code>-f</code>参数.可参考本篇中的<strong>准备</strong>步骤. 如遇报错:<code>Error! Install make</code>或<code>Error! Install gcc.</code> 首先尝试<code>apt-get update</code>,再次执行此脚本. 如果未解决想办法自行安装gcc(&gt;&#x3D;4.9),或切换系统后再试. <strong>本脚本在Debian8,Debian9,Ubuntu16.04上通过测试.</strong></p>
<hr>
<ul>
<li><ul>
<li><strong>引用评论中提供的在Ubuntu安装gcc-4.9的方法</strong>:</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:ubuntu-toolchain-r/test</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install g++-4.9</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Debian</tag>
        <tag>BBR</tag>
        <tag>改进版/增强版/魔改版</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian 使用 gdnsd 自建 DNS 服务并分区解析</title>
    <url>/2018/09/10/debian-%E4%BD%BF%E7%94%A8-gdnsd-%E8%87%AA%E5%BB%BA-dns-%E6%9C%8D%E5%8A%A1%E5%B9%B6%E5%88%86%E5%8C%BA%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p><a href="http://gdnsd.org/">gdnsd</a> 是一款权威 DNS (<a href="https://en.wikipedia.org/wiki/Name_server#Authoritative_name_server">Authoritative-only DNS</a>)服务器软件，因为自带 GeoIP 插件，所以很适合自建 CDN 做分区解析，著名的<a href="https://en.wikipedia.org/wiki/Main_Page">喂鸡百科</a>就是<a href="https://meta.wikimedia.org/wiki/Wikimedia_servers#Software">使用</a> gdnsd 进行全球 CDN 分区解析</p>
<p>众所周知，天朝的网络环境，国内访问国外慢，同理国外访问国内也慢，所以我们很有必要搭建 CDN 并且使用 DNS 进行分区解析</p>
<p>而国内比较知名的权威 DNS 服务商如 <a href="https://www.cloudxns.net/">CloudXNS</a>, <a href="https://www.dnspod.cn/">DNSpod</a> 他们免费版的 DNS 服务器都在国内，这样会造成国外的用户解析你的域名很慢，同理，如果使用国外的权威 DNS 服务商如 <a href="https://www.cloudflare.com/">Cloudflare</a>, <a href="https://aws.amazon.com/cn/route53/">AWS Route53</a> 他们的 DNS 服务器都部属在国外，国内访问基本要走美国节点，这样会造成国内的用户解析你的域名很慢</p>
<p>所以我们需要选择一家对国内外速度都友好的 ISP 来托管你的权威 DNS 服务器，如果您没有找到合适的，我们这里推荐 <a href="https://u.nu/cat">cat.net</a> 以及<a href="https://u.nu/aliyun">阿里云国际版</a></p>
<p><strong>以下安装步骤都在 <code>root</code> 用户下完成，请自行使用 <code>su</code> 命令切换到 <code>root</code> 用户</strong></p>
<h2 id="1、注册-DNS-服务器"><a href="#1、注册-DNS-服务器" class="headerlink" title="1、注册 DNS 服务器"></a>1、注册 DNS 服务器</h2><p>假设您的 DNS 域名是 example.com ，购买并安装好了两台 NS 服务器，分别为</p>
<p>ns1.example.com 对应 IPv4 192.0.2.2 IPv6 2001:DB8::2<br>ns2.example.com 对应 IPv4 192.0.2.3 IPv6 2001:DB8::3</p>
<p>首先，您需要在您的域名注册商注册 Name Servers 由于每个注册商的控制面板不同，我们这里以 <a href="https://u.nu/cat">cat.net</a> 为例，登陆 <a href="https://portal.cat.net/">Custom Portal</a> 后，点击 <code>Domains</code> &gt; <code>My Domains</code> 如图</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/09/debian-9-gdnsd-1.png"></p>
<p>然后进入您的域名管理页面，点击小工具的箭头，如图</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/09/debian-9-gdnsd-2.png"></p>
<p>接着点击左侧的 <code>Private Nameservers</code> 如图</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/09/debian-9-gdnsd-3.png"></p>
<p>然后在右侧即可注册、管理或删除 NS 服务器，如图</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/09/debian-9-gdnsd-4.png"></p>
<p>我们分别注册 <code>ns1</code> 和 <code>ns2</code> 即可</p>
<p>PS： cat.net 后台只能一次提交注册一个 IP 地址，如果需要一个 NS 服务器对应多个 IP 地址，则只需要<a href="https://portal.cat.net/submitticket.php">发服务单</a>让客服帮忙修改即可</p>
<p>好了，到这里我们已经注册好 NS 服务器，接下来开始搭建 gdnsd</p>
<h2 id="2、安装-gdnsd"><a href="#2、安装-gdnsd" class="headerlink" title="2、安装 gdnsd"></a>2、安装 gdnsd</h2><p>Debian 9.x <a href="https://packages.debian.org/source/stretch/gdnsd">自带</a>的 gdnsd 已有编译好的版本，所以我们不需要编译安装，直接一条命令即可，同样适合 Debian 8.x</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install gdnsd</span><br></pre></td></tr></table></figure>

<p>如果加了 Backports 则可以使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get -t stretch-backports install gdnsd</span><br></pre></td></tr></table></figure>

<p>Debian 8.x 则是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get -t jessie-backports install gdnsd</span><br></pre></td></tr></table></figure>

<p>记得检查系统或服务商的防火墙，我们需要打开的端口是 TCP &#x2F; UDP 的 53 端口，请安装后检查服务商是否给您打开了这个端口，否则 DNS 是无法工作的</p>
<h2 id="3、配置-gdnsd"><a href="#3、配置-gdnsd" class="headerlink" title="3、配置 gdnsd"></a>3、配置 gdnsd</h2><p>gdnsd 的 <a href="https://github.com/gdnsd/gdnsd/wiki">Github Wiki</a> 上已经提供了很详细的 <a href="https://github.com/gdnsd/gdnsd/wiki/GdnsdConfig">config</a> 以及 <a href="https://github.com/gdnsd/gdnsd/wiki/GdnsdZonefile">zonefile</a> 配置，但是对新手来说坑比较多，由于我们的需求是根据国内外分区解析，所以这里我简单的提供一下本站的配置文件，感谢<a href="https://blog.felixc.at/">肥猫童鞋</a>的细心指导</p>
<p>这里假设阁下的网站域名是 <code>example.org</code> 国内服务器节点 IPv4 为 <code>192.0.2.4</code> IPv6 为 <code>2001:DB8::4</code> 国外服务器节点 IPv4 为 <code>192.0.2.5</code> IPv6 为 <code>2001:DB8::5</code></p>
<p>那我们的逻辑就是，当国内用户请求 <code>example.org</code> 解析的时候， gdnsd 判断用户本地的 DNS 是否在国内，是的话解析到国内对应的服务器节点，如果不是，则默认解析到国外服务器节点，能理解这个逻辑以后我们就开始配置吧</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/09/debian-9-gdnsd-5.png"></p>
<p>首先登陆 <code>ns1.example.com</code></p>
<p>ssh <a href="mailto:&#x72;&#111;&#111;&#x74;&#64;&#x6e;&#115;&#x31;&#46;&#101;&#120;&#x61;&#109;&#112;&#x6c;&#101;&#46;&#99;&#x6f;&#109;">&#x72;&#111;&#111;&#x74;&#64;&#x6e;&#115;&#x31;&#46;&#101;&#120;&#x61;&#109;&#112;&#x6c;&#101;&#46;&#99;&#x6f;&#109;</a></p>
<p>gdnsd 需要有一个对应的 <code>config</code> 文件，需要自己创建，这里默认新建一个 <code>/etc/gdnsd/config</code> 文件，输入以下内容</p>
<p>options &#x3D;&gt; {<br>  listen &#x3D;&gt; any<br>  dns_port &#x3D;&gt; 53<br>  chaos_response &#x3D;&gt; “SBDNS”<br>}</p>
<p>service_types &#x3D;&gt; {<br>  example_monitor &#x3D;&gt; {<br>    plugin &#x3D;&gt; http_status<br>    ok_codes &#x3D;&gt; [200, 301, 302, 403, 404]<br>    vhost &#x3D;&gt; example.org<br>    url_path &#x3D;&gt; &#x2F;<br>  }<br>}</p>
<p>plugins &#x3D;&gt; { geoip &#x3D;&gt; {<br>  maps &#x3D;&gt; {<br>    china_map &#x3D;&gt; {<br>      geoip_db &#x3D;&gt; GeoLiteCity.dat<br>      datacenters &#x3D;&gt; [default-dc, cn-dc]<br>      map &#x3D;&gt; {<br>        AS &#x3D;&gt; {CN &#x3D;&gt; [cn-dc, default-dc]}<br>      }<br>    }</p>
<p>  }<br>  resources &#x3D;&gt; {</p>
<pre><code>example\_org =&gt; &#123;
  map =&gt; china\_map
  service\_types =&gt; example\_monitor
  dcmap =&gt; &#123;

    cn-dc =&gt; &#123;
</code></pre>
<p>addrs_v4 &#x3D;&gt; 192.0.2.4<br>addrs_v6 &#x3D;&gt; 2001:DB8::4<br>},</p>
<pre><code>    default-dc =&gt; &#123;
</code></pre>
<p>addrs_v4 &#x3D;&gt; 192.0.2.5<br>addrs_v6 &#x3D;&gt; 2001:DB8::5<br>},</p>
<pre><code>  &#125;
&#125;

&#125;
</code></pre>
<p>  }</p>
<p>}</p>
<p>我们来一条一条解释</p>
<p>options &#x3D;&gt; {<br>  listen &#x3D;&gt; any<br>  dns_port &#x3D;&gt; 53<br>  chaos_response &#x3D;&gt; “SBDNS”<br>}</p>
<p><code>options</code> 是 gdnsd 的配置选项，一般无特殊需求的话可以监听本机的所有 IP ，所以这里 <code>listen</code> 选的是 <code>any</code>， DNS 服务器端口选默认的 <code>53</code>，<code>chaos_response</code> 则是 DNS 返回的软件版本，可以自己随便指定个名字</p>
<p>service_types &#x3D;&gt; {<br>  example_monitor &#x3D;&gt; {<br>    plugin &#x3D;&gt; http_status<br>    ok_codes &#x3D;&gt; [200, 301, 302, 403, 404]<br>    vhost &#x3D;&gt; example.org<br>    url_path &#x3D;&gt; &#x2F;<br>  }<br>}</p>
<p>这里因为我们开启了监控，并且使用的插件是 <code>http_status</code> ，如果不需要监控的话可以忽略</p>
<p>plugins &#x3D;&gt; { geoip &#x3D;&gt; {<br>  maps &#x3D;&gt; {<br>    china_map &#x3D;&gt; {<br>      geoip_db &#x3D;&gt; GeoLiteCity.dat<br>      datacenters &#x3D;&gt; [default-dc, cn-dc]<br>      map &#x3D;&gt; {<br>        AS &#x3D;&gt; {CN &#x3D;&gt; [cn-dc, default-dc]}<br>      }<br>    }</p>
<p>  }<br>  resources &#x3D;&gt; {</p>
<pre><code>example\_org =&gt; &#123;
  map =&gt; china\_map
  service\_types =&gt; example\_monitor
  dcmap =&gt; &#123;

    cn-dc =&gt; &#123;
</code></pre>
<p>addrs_v4 &#x3D;&gt; 192.0.2.4<br>addrs_v6 &#x3D;&gt; 2001:DB8::4<br>},</p>
<pre><code>    default-dc =&gt; &#123;
</code></pre>
<p>addrs_v4 &#x3D;&gt; 192.0.2.5<br>addrs_v6 &#x3D;&gt; 2001:DB8::5<br>},</p>
<pre><code>  &#125;
&#125;

&#125;
</code></pre>
<p>  }</p>
<p>}</p>
<p>这一段才是最重要的，也是本文的精髓所在，这里我们启用了 GeoIP 插件，设置的默认解析到国外的节点，国内用户对应一个 <code>datacenter</code> 叫做 <code>cn-dc</code> ，只要 gdnsd 判断该用户是国内请求的解析，那么就返回我们设置的国内 IP ，否则就返回默认的国外节点，如果不需要 IPv4 则可以直接写</p>
<p>cn-dc &#x3D;&gt; 192.0.2.4<br>default-dc  &#x3D;&gt; 192.0.2.5</p>
<p>更多的 GeoIP 配置信息可以在 <a href="https://github.com/gdnsd/gdnsd/wiki/GdnsdPluginGeoip">Github Wiki</a> 页面中找到</p>
<h2 id="4、安装-GeoIP-数据库"><a href="#4、安装-GeoIP-数据库" class="headerlink" title="4、安装 GeoIP 数据库"></a>4、安装 GeoIP 数据库</h2><p>我们的数据库使用的是 Maxmind 免费的 <a href="https://dev.maxmind.com/geoip/legacy/geolite/">GeoLite City</a>，大多数情况下也足够使用，下载和解压的命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/gdnsd/geoip &amp;&amp; wget http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz &amp;&amp; gzip -<span class="built_in">df</span> GeoLiteCity.dat.gz</span><br></pre></td></tr></table></figure>

<h2 id="5、配置-zonefile"><a href="#5、配置-zonefile" class="headerlink" title="5、配置 zonefile"></a>5、配置 zonefile</h2><p>首先，细心的读者肯定发现我们还没配置 DNS 域名 <code>example.com</code> 所以新建一个 <code>/etc/gdnsd/zones/example.com</code> 文件，举例如下</p>
<p>$TTL86400</p>
<p>@INSOA ns1.example.com.hostmaster.example.com.(<br>1      ; serial<br>7200   ; refresh<br>900    ; retry<br>1209600     ; expire<br>10800    ; ncache<br>)</p>
<p>@NSns1.example.com.<br>@NSns2.example.com.</p>
<p>ns1A192.0.2.2<br>ns2A 192.0.2.3</p>
<p>ns1     AAAA2001:DB8::2<br>ns2     AAAA2001:DB8::3</p>
<p>这里默认设置的 TTL 是 86400 也就是一天，可以根据需要修改</p>
<p>接着需要创建 <code>/etc/gdnsd/zones/example.org</code> 文件，举例如下</p>
<p>$TTL3600</p>
<p>@INSOA ns1.example.com.hostmaster.example.com.(<br>1      ; serial<br>7200   ; refresh<br>900    ; retry<br>1209600     ; expire<br>10800    ; ncache<br>)</p>
<p>@NSns1.example.com.<br>@NSns2.example.com.</p>
<p>@DYNAgeoip!example_org</p>
<p>wwwCNAMEexample.org.</p>
<h2 id="6、检查-gdnsd-配置"><a href="#6、检查-gdnsd-配置" class="headerlink" title="6、检查 gdnsd 配置"></a>6、检查 gdnsd 配置</h2><p>一条命令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdnsd checkconf</span><br></pre></td></tr></table></figure>

<p>如果最后三行输出如下，即成功配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># info: rfc1035: Loaded 71 zonefiles from &#x27;/etc/gdnsd/zones/&#x27;</span></span><br><span class="line"><span class="comment"># info: rfc1035: quiescence time is 3 seconds</span></span><br><span class="line"><span class="comment"># info: Configuration and zone data loads just fine</span></span><br></pre></td></tr></table></figure>

<h2 id="7、重启-gdnsd"><a href="#7、重启-gdnsd" class="headerlink" title="7、重启 gdnsd"></a>7、重启 gdnsd</h2><p>如果修改了 <code>config</code> 文件，那么我们则需要重启 gdnsd 服务，如果之后只是修改 zonefile 那么则无需这个步骤</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdnsd restart</span><br></pre></td></tr></table></figure>

<h2 id="8、安装配置-ns2-example-com-并同步"><a href="#8、安装配置-ns2-example-com-并同步" class="headerlink" title="8、安装配置 ns2.example.com 并同步"></a>8、安装配置 ns2.example.com 并同步</h2><p>由于 gdnsd 是个轻量级的 DNS 服务器，不带同步功能，所以您需要按照上面的步骤重新配置一次 <code>ns2.example.com</code> 并且让他重启生效，为了今后方便同步，我们可以使用 <code>rsync</code> 来进行</p>
<p>首先，在 ns1 和 ns2 都安装 rsync</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install rsync</span><br></pre></td></tr></table></figure>

<p>然后我们以 ns1 作为 master ，ns2 作为 slave ，每次修改 ns1 的文件并且自动同步到 ns2，以下命令均在 ns1 操作</p>
<p>生成 SSH Key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519</span><br></pre></td></tr></table></figure>

<p>查看并复制公钥 <code>id_ed25519.pub</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_ed25519.pub</span><br></pre></td></tr></table></figure>

<p>把公钥的内容复制到 ns2 服务器的 ~&#x2F;.ssh&#x2F;authorized_keys 即可</p>
<p>然后执行同步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync -avz --delete /etc/gdnsd/ ns2.example.com:/etc/gdnsd/</span><br></pre></td></tr></table></figure>

<p>也可以写入 bash 脚本，比如 <code>sync.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CONFDIR=/etc/gdnsd</span><br><span class="line">rsync -avz --delete <span class="variable">$CONFDIR</span>/ ns2.example.com:/etc/gdnsd/</span><br></pre></td></tr></table></figure>

<p>赋予权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x sync.sh</span><br></pre></td></tr></table></figure>

<p>之后就可以直接执行脚本，不需要每次输入代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./sync.sh</span><br></pre></td></tr></table></figure>

<p>另外这里还有肥猫写的更新 GeoIP 数据库的脚本 <code>geoip.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">URL=http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz</span><br><span class="line">FILENAME=GeoLiteCity.dat.gz</span><br><span class="line">DIR=/etc/gdnsd/geoip</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$DIR</span>; <span class="built_in">rm</span> -f <span class="variable">$FILENAME</span>; wget <span class="variable">$URL</span>; gzip -<span class="built_in">df</span> <span class="variable">$FILENAME</span></span><br></pre></td></tr></table></figure>

<h2 id="9、修改域名-DNS-服务器"><a href="#9、修改域名-DNS-服务器" class="headerlink" title="9、修改域名 DNS 服务器"></a>9、修改域名 DNS 服务器</h2><p>这个应该大多数读者会，直接去您的注册商把 <code>example.com</code> 和 <code>example.org</code> 的 DNS 服务器设置为 <code>ns1.example.com</code> 和 <code>ns2.example.com</code> 并耐心等待生效</p>
<h2 id="10、测试生效"><a href="#10、测试生效" class="headerlink" title="10、测试生效"></a>10、测试生效</h2><p>一般耐心等待一段时间（取决于您的旧 DNS 服务器 TTL 失效时间）后，我们自建的 gdnsd 已经生效，建议找一台国内的机器和国外的 Linux 机器来分别测试，Windows 下命令不好记，嘎嘎</p>
<p>首先安装必要的 DNS 工具</p>
<p>Debian &#x2F; Ubuntu 下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install dnsutils</span><br></pre></td></tr></table></figure>

<p>CentOS 下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install bind-utils</span><br></pre></td></tr></table></figure>

<p>然后我们使用 <code>dig</code> 命令来检测</p>
<p>首先检测 NS 记录是否生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@debian ~ <span class="comment"># dig NS example.com +short</span></span><br><span class="line">ns1.example.com.</span><br><span class="line">ns2.example.com.</span><br></pre></td></tr></table></figure>

<p>检测 <code>A</code> 记录或 <code>AAAA</code> 记录是否生效</p>
<p>国内对应解析到 <code>192.0.2.4</code> 和 <code>2001:DB8::4</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@china ~ <span class="comment"># dig A example.com +short @223.5.5.5</span></span><br><span class="line">192.0.2.4</span><br><span class="line">root@china ~ <span class="comment"># dig AAAA example.com +short @223.5.5.5</span></span><br><span class="line">2001:DB8::4</span><br></pre></td></tr></table></figure>

<p>国外对应解析到 <code>192.0.2.5</code> 和 <code>2001:DB8::5</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@australia ~ <span class="comment"># dig A example.com +short @8.8.8.8</span></span><br><span class="line">192.0.2.5</span><br><span class="line">root@australia ~ <span class="comment"># dig AAAA example.com +short @8.8.8.8</span></span><br><span class="line">2001:DB8::5</span><br></pre></td></tr></table></figure>

<p>更多节点检测的话可以去 <a href="http://ping.chinaz.com/">ping.chinaz.com</a> 或 <a href="https://asm.ca.com/en/ping.php">just-ping.com</a> 查看全国以及全世界各地的解析情况</p>
<p>检测 DNS 是否生效的话可以使用 <a href="https://intodns.com/">IntoDNS</a></p>
<p>如有疑问欢迎在下方留言，之后会详细介绍如何使阁下搭建的 gdnsd 服务完美符合 DNS RFC 标准</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Debian</tag>
        <tag>DNS</tag>
        <tag>gdnsd</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian9下，一键安装Aria2+AriaNG+KodExplorer、qBittorrent+libtorrent、Deluge+libtorrent等下载工具</title>
    <url>/2019/04/26/debian9%E4%B8%8B%EF%BC%8C%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85aria2ariangkodexplorer%E3%80%81qbittorrentlibtorrent%E3%80%81delugelibtorrent%E7%AD%89%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p><img src="https://www.jarods.org/wp-content/uploads/2019/04/downtoosl.png"></p>
<p><strong>一、脚本仅支持Debian9X64，请在完全纯净的系统上安装</strong>：</p>
<p>wget <a href="https://zhujiwiki.com/wp-content/uploads/2019/04/Debian9DownloadToolinstall.sh">https://zhujiwiki.com/wp-content/uploads/2019/04/Debian9DownloadToolinstall.sh</a> &amp;&amp; chmod +x Debian9DownloadToolinstall.sh<br>.&#x2F;Debian9DownloadToolinstall.sh</p>
<p>你可以选择安装以下软件（均是目前的最新版）：</p>
<p>Aria2+AriaNG+KodExplorer qBittorrent4.1.4+libtorrent1.1.11 Deluge1.3.15+libtorrent1.1.11</p>
<p>_另外支持一键开启BBR_。</p>
<p>如果你选择安装2-3则可以和宝塔面板共存，如果安装1则不能与宝塔面板共存。另外因为原版的Debian9防火墙规则默认是放行所有的（相当于关闭的状态），所以本脚本没有对防火墙有任何设置，如果你安装完成之后发现端口不通，请自行设置防火墙规则。</p>
<p><strong>二、管理命令</strong>：</p>
<p>Aria2：</p>
<p>systemctl start aria2<br>systemctl stop aria2<br>systemctl restart aria2</p>
<p>qBittorrent：</p>
<p>systemctl start qbittorrent<br>systemctl stop qbittorrent<br>systemctl restart qbittorrent</p>
<p>Deluge：</p>
<p>systemctl start deluged<br>systemctl start deluge-web<br>systemctl stop deluged<br>systemctl stop deluge-web<br>systemctl restart deluged<br>systemctl restart deluge-web</p>
<p>转自：<a href="https://lala.im/4590.html">https://lala.im/4590.html</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Debian</tag>
        <tag>Aria2</tag>
        <tag>AriaNg</tag>
        <tag>Deluge</tag>
        <tag>KodExplorer</tag>
        <tag>libtorrent</tag>
        <tag>qBittorrent</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian/Ubuntu使用apt-get时出现“no public key available…”的解决方法</title>
    <url>/2017/11/06/debianubuntu%E4%BD%BF%E7%94%A8apt-get%E6%97%B6%E5%87%BA%E7%8E%B0no-public-key-available%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>在Ubuntu和Debian下运行apt-get update刷新更新源的时候却经常遇到“There is no public key available for the following key IDs”的问题，具体表现为以下错误提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">W:There is no public key available for the following key IDs: 3B4FE6ACC0B21F32,</span><br><span class="line">W:There is no public key available for the following key IDs: 3B4FE6ACC0B21F32,</span><br></pre></td></tr></table></figure>

<p>解决方法如下，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 3B4FE6ACC0B21F32</span><br></pre></td></tr></table></figure>

<p>把3B4FE6ACC0B21F32替换为你出现问题的IDs</p>
<p>额外的，如果有如下问题，是因为加入了natty-backports源，删掉即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">W:Failed to fetch http://us.archive.ubuntu.com/ubuntu/dists/natty-backports/main/source/Sources  404  Not Found [IP: 91.189.91.13 80],</span><br><span class="line">W:Failed to fetch http://us.archive.ubuntu.com/ubuntu/dists/natty-backports/restricted/source/Sources  404  Not Found [IP: 91.189.91.13 80],</span><br><span class="line">W:Failed to fetch http://us.archive.ubuntu.com/ubuntu/dists/natty-backports/universe/source/Sources  404  Not Found [IP: 91.189.91.13 80],</span><br><span class="line">W:Failed to fetch http://us.archive.ubuntu.com/ubuntu/dists/natty-backports/multiverse/source/Sources  404  Not Found [IP: 91.189.91.13 80],</span><br></pre></td></tr></table></figure>

<p>运行如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo sed -i &#x27;/natty\-backports/d&#x27; /etc/apt/sources.list&#123;,.d/*&#125;</span><br></pre></td></tr></table></figure>

<p>via：<a href="https://www.vmvps.com/apt-get-error-no-public-key-available-solution.html">https://www.vmvps.com/apt-get-error-no-public-key-available-solution.html</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Debian</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian/Ubuntu 内核降级教程 —— 降低(BBR)为支持锐速的内核版本</title>
    <url>/2017/07/13/debianubuntu-%E5%86%85%E6%A0%B8%E9%99%8D%E7%BA%A7%E6%95%99%E7%A8%8B-%E9%99%8D%E4%BD%8Ebbr%E4%B8%BA%E6%94%AF%E6%8C%81%E9%94%90%E9%80%9F%E7%9A%84%E5%86%85%E6%A0%B8%E7%89%88/</url>
    <content><![CDATA[<p>前段时间BBR出世后，很多人都去尝鲜了，有的人觉得比锐速加速效果好，有的觉得不如锐速，总之加速效果不同因素影响都不同。</p>
<p>而因为BBR是集成于内核中的一个功能，所以 卸载BBR&#x3D;更换内核 ，但是很多人不知道怎么更换，一般都是直接重装系统，以回到支持安装锐速的内核版本，今天有人问我了，于是我就简单研究研究写个手动教程好，并不难。</p>
<hr>
<h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>Debian 7 x64 和 Ubuntu 14.04 系统，当前内核为 v4.10.1 (支持BBR的最新稳定版内核) 测试通过，Debian 8 暂时没测试（应该差不多的）。</p>
<p>至于其他系统，步骤就完全不一样了，所以不做测试。</p>
<p><strong>OpenVZ不支持更换内核，不支持 锐速和BBR，所以请不要尝试下面的步骤，否则后果自负！</strong></p>
<h2 id="Debian的准备工作-Ubuntu请跳过"><a href="#Debian的准备工作-Ubuntu请跳过" class="headerlink" title="Debian的准备工作(Ubuntu请跳过)"></a>Debian的准备工作(Ubuntu请跳过)</h2><p><strong>添加软件包源并更新包列表</strong></p>
<ol>
<li>echo -e “\ndeb <a href="http://ftp.debian.org/debian/">http://ftp.debian.org/debian/</a> wheezy-backports main” &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list</li>
<li>apt-get update</li>
</ol>
<h2 id="安装内核"><a href="#安装内核" class="headerlink" title="安装内核"></a>安装内核</h2><h3 id="查询可用内核列表"><a href="#查询可用内核列表" class="headerlink" title="查询可用内核列表"></a>查询可用内核列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aptitude search linux-image  awk &#x27;&#123;print $2&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>执行代码后可以看到很多内核版本，Debian 7 x64 系统选择 <code>linux-image-3.2.0-4-amd64</code> 内核，这个内核大部分 Debian 7 系统都是使用，完美支持锐速和LotServer。而Ubuntu 14.04 则选择 linux-image-3.13.0-32-generic 内核。</p>
<p><strong>锐速支持的内核看这里：<a href="https://www.91yun.org/serverspeeder91yun">传送门</a></strong></p>
<p>Debian和Ubuntu唯一的区别就是这里提示的内核名称不一样，和下面安装内核用的命令略有区别，其他都通用！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># VPS提示示例/64位 #</span><br><span class="line"># Debian 7 和 8 可能不一样，还有 64位和32位 内容也不一样。</span><br><span class="line"> </span><br><span class="line">root@debian:~# aptitude search linux-image  awk &#x27;&#123;print $2&#125;&#x27;</span><br><span class="line">linux-image</span><br><span class="line">linux-image-2.6-amd64</span><br><span class="line">linux-image-3.16.0-0.bpo.4-amd64</span><br><span class="line">linux-image-3.16.0-0.bpo.4-amd64-dbg</span><br><span class="line">linux-image-3.2.0-4-amd64</span><br><span class="line">linux-image-3.2.0-4-amd64-dbg</span><br><span class="line">linux-image-3.2.0-4-rt-amd64</span><br><span class="line">linux-image-3.2.0-4-rt-amd64-dbg</span><br><span class="line">linux-image-4.10.1-041001-generic</span><br><span class="line"> </span><br><span class="line"># Ubuntu 14.04 提示内容 #</span><br><span class="line">...</span><br><span class="line">linux-image-3.13.0-32-generic</span><br><span class="line">linux-image-3.13.0-32-generic:i386</span><br><span class="line">linux-image-3.13.0-32-lowlatency</span><br><span class="line">linux-image-3.13.0-32-lowlatency</span><br><span class="line">...</span><br><span class="line"># 多余的我都省略了，写出来意义不大 #</span><br></pre></td></tr></table></figure>

<h3 id="Debian-安装内核"><a href="#Debian-安装内核" class="headerlink" title="Debian 安装内核"></a><strong>Debian</strong> 安装内核</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 示例 #</span><br><span class="line">apt-get -t wheezy-backports install linux-image-3.2.0-4-amd64 -y</span><br><span class="line"># 示例 #</span><br></pre></td></tr></table></figure>

<h3 id="Ubuntu-安装内核"><a href="#Ubuntu-安装内核" class="headerlink" title="Ubuntu 安装内核"></a>Ubuntu 安装内核</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 示例 #</span><br><span class="line">apt-get install linux-image-3.13.0-32-generic -y</span><br><span class="line"># 示例 #</span><br></pre></td></tr></table></figure>

<h2 id="卸载内核"><a href="#卸载内核" class="headerlink" title="卸载内核"></a>卸载内核</h2><h3 id="查看当前系统所有内核"><a href="#查看当前系统所有内核" class="headerlink" title="查看当前系统所有内核"></a>查看当前系统所有内核</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg -lgrep linux-image  awk &#x27;&#123;print $2&#125;&#x27;</span><br><span class="line"># VPS提示示例/64位 #</span><br><span class="line"># Debian 7 和 8 可能不一样，还有 64位和32位 内容也不一样。</span><br><span class="line"> </span><br><span class="line">root@debian:~# dpkg -lgrep linux-image  awk &#x27;&#123;print $2&#125;&#x27;</span><br><span class="line">linux-image-3.2.0-4-amd64</span><br><span class="line">linux-image-4.10.1-041001-generic</span><br><span class="line"> </span><br><span class="line"># Ubuntu 14.04 提示内容 #</span><br><span class="line">linux-image-3.13.0-32-generic</span><br><span class="line">linux-image-4.10.1-041001-generic</span><br></pre></td></tr></table></figure>

<h3 id="卸载其余内核"><a href="#卸载其余内核" class="headerlink" title="卸载其余内核"></a>卸载其余内核</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get purge 其余内核名称 -y</span><br></pre></td></tr></table></figure>

<p>从上面示例中可以看到，除了刚才安装的 <code>linux-image-3.2.0-4-amd64</code> 内核外，还剩下一个内核 <code>linux-image-4.10.1-041001-generic</code> ，我们需要卸载这个内核：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 示例 #</span><br><span class="line">apt-get purge linux-image-4.10.1-041001-generic -y</span><br><span class="line"># 示例 #</span><br></pre></td></tr></table></figure>

<h2 id="结尾工作"><a href="#结尾工作" class="headerlink" title="结尾工作"></a>结尾工作</h2><h3 id="关闭-BBR（如有）"><a href="#关闭-BBR（如有）" class="headerlink" title="关闭 BBR（如有）"></a><strong>关闭</strong> BBR（如有）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;/net\.core\.default_qdisc=fq/d&#x27; /etc/sysctl.conf &amp;&amp; sed -i &#x27;/net\.ipv4\.tcp_congestion_control=bbr/d&#x27; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br><span class="line"># 清除BBR启动代码并保存，执行并不会提示任何信息。</span><br></pre></td></tr></table></figure>

<h3 id="更新-grub-系统引导文件并重启VPS"><a href="#更新-grub-系统引导文件并重启VPS" class="headerlink" title="更新 grub 系统引导文件并重启VPS"></a><strong>更新 grub</strong> 系统引导文件并重启VPS</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update-grub</span><br><span class="line"># reboot是重启服务器</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<p>如果有什么问题请在下面告诉我。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Debian</tag>
        <tag>BBR</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian下，一键启用暴力魔改BBR，加速本地网络访问</title>
    <url>/2019/06/10/debian%E4%B8%8B%EF%BC%8C%E4%B8%80%E9%94%AE%E5%90%AF%E7%94%A8%E6%9A%B4%E5%8A%9B%E9%AD%94%E6%94%B9bbr%EF%BC%8C%E5%8A%A0%E9%80%9F%E6%9C%AC%E5%9C%B0%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<p>这个是使用南琴浪大佬的参数。适用内核为4.9.X，Debian 7+ ( i386 &amp;&amp; amd64 )系统。</p>
<p><strong>其他系统可参考</strong>： 1、<a href="https://zhujiwiki.com/8563/">TCP加速：BBR原版&#x2F;BBR魔改&#x2F;BBR Plus + 锐速 等四合一安装脚本</a> 2、<a href="https://zhujiwiki.com/8436/">Debian 9启用Google BBR，实现TCP加速</a></p>
<p>SSH下： 1、下载脚本并安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -O Tsunami_BBR.sh https://zhujiwiki.com/wp-content/uploads/2019/06/Tsunami_BBR.sh &amp;&amp; bash Tsunami_BBR.sh</span><br></pre></td></tr></table></figure>

<p>弹出对话框，并按“1”回车执行： <img src="https://www.jarods.org/wp-content/uploads/2019/06/bbr1.png"> 2. 脚本自动探测出最新版本的 4.9.X 版本内核，如果无安装其他版本内核的特别需要，<strong>直接按回车</strong>，即可自动开始安装； <img src="https://www.jarods.org/wp-content/uploads/2019/06/bbr2.png"> 3. 安装后期，弹出“是否需要卸载自带旧内核”的提示，选择“No”卸载即可，随后不久系统重启</p>
<p>4. 再次登录系统，运行以下命令，按“2”开始下载魔改 BBR 模块并与新版本内核合并，并自动设置好魔改 BBR 设置，随后脚本退出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash Tsunami_BBR.sh</span><br></pre></td></tr></table></figure>

<p><img src="https://www.jarods.org/wp-content/uploads/2019/06/bbr3.png"> 5. 再次运行以下命令，按“3”可完成一些外围的网络参数优化，此项你可以选择执行或不执行；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash Tsunami_BBR.sh</span><br></pre></td></tr></table></figure>

<p><img src="https://www.jarods.org/wp-content/uploads/2019/06/bbr6.png"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/06/bbr4.png"> 6. 脚本中按“4”是查看魔改 BBR 的运行状态，按“5”是卸载魔改 BBR。</p>
<p>脚本开源：<a href="https://github.com/leitbogioro/Force/_Modified/_BBR">https://github.com/leitbogioro/Force\_Modified\_BBR</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Debian</tag>
        <tag>BBR魔改版</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian下，一键安装 Caddy+PHP7+Sqlite3 脚本</title>
    <url>/2018/09/29/debian%E4%B8%8B%EF%BC%8C%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85-caddyphp7sqlite3-%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>支持系统：Debian 8 （建议选择mini版） <strong>一、脚本特性</strong></p>
<p>小内存VPS 一键安装 Caddy+PHP7+Sqlite3 环境 （支持VPS最小内存64M） 一键绑定域名自动生成SSL证书开启https（ssl自动续期）、支持IPv6 一键安装 typecho、wordpress、zblog、kodexplorer、一键整站备份 一键安装 v2ray、rinetdbbr</p>
<p><strong>二、安装步骤</strong></p>
<p>1、解析好域名 2、SSH下，根据自己的需求安装不同应用。 a、仅安装Caddy+PHP7+Sqlite3 环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate git.io/c.sh &amp;&amp; chmod +x c.sh &amp;&amp; bash c.sh</span><br></pre></td></tr></table></figure>

<p>b、一键安装 typecho</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate git.io/c.sh &amp;&amp; chmod +x c.sh &amp;&amp; bash c.sh -t</span><br></pre></td></tr></table></figure>

<p>c、一键安装 wordpress</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate git.io/c.sh &amp;&amp; chmod +x c.sh &amp;&amp; bash c.sh -w</span><br></pre></td></tr></table></figure>

<p>d、一键安装 zblog</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate git.io/c.sh &amp;&amp; chmod +x c.sh &amp;&amp; bash c.sh -z</span><br></pre></td></tr></table></figure>

<p>e、一键安装 kodexplorer 可道云</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate git.io/c.sh &amp;&amp; chmod +x c.sh &amp;&amp; bash c.sh -k</span><br></pre></td></tr></table></figure>

<p>f、一键安装 laverna 印象笔记</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate git.io/c.sh &amp;&amp; chmod +x c.sh &amp;&amp; bash c.sh -l</span><br></pre></td></tr></table></figure>

<p><strong>三、辅助功能</strong></p>
<p>1、一键整站备份（一键打包&#x2F;www目录 含数据库）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash c.sh -a</span><br></pre></td></tr></table></figure>

<p>2、一键安装 v2ray</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash c.sh -v</span><br></pre></td></tr></table></figure>

<p>3、一键安装 rinetd bbr 端口加速</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash c.sh -b</span><br></pre></td></tr></table></figure>

<p><strong>四、应用卸载</strong> 卸载 caddy</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash c.sh -unc</span><br></pre></td></tr></table></figure>

<p>卸载 php+sqlite</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash c.sh -unp</span><br></pre></td></tr></table></figure>

<p>卸载 v2ray</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash c.sh -unv</span><br></pre></td></tr></table></figure>

<p>卸载 rinetdbbr</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash c.sh -unb</span><br></pre></td></tr></table></figure>

<p><strong>源码地址</strong>：<a href="https://github.com/dylanbai8/Onekey_Caddy_PHP7_Sqlite3">https://github.com/dylanbai8/Onekey_Caddy_PHP7_Sqlite3</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Debian</tag>
        <tag>Caddy</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian升级到debian8、9一键脚本</title>
    <url>/2018/06/28/debian%E5%8D%87%E7%BA%A7%E5%88%B0debian8%E3%80%819%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>VPS的系统相对较老，不支持系统，下面的脚本可以升级系统，但有可能会有问题。 升级前请重装成debian-7.0-x86-minimal、debian-7.0-x86_64、ubuntu-14.04-x86_64-minimal等其中1个系统。</p>
<p>Debian Wheezy 升级到 Jessie</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update;apt-get install -y wget ca-certificates;wget https://zhujiwiki.com/usr/uploads/2018/06/wheezy_to_jessie_installer.sh; bash wheezy_to_jessie_installer.sh</span><br></pre></td></tr></table></figure>

<p>Debian Wheezy 升级到 Stretch</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update;apt-get install -y wget ca-certificates;wget https://zhujiwiki.com/usr/uploads/2018/06/wheezy_to_stretch_installer.sh; bash wheezy_to_stretch_installer.sh</span><br></pre></td></tr></table></figure>

<p>Ubuntu 14.04 升级到 16.04</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update;apt-get install -y wget ca-certificates;wget https://zhujiwiki.com/usr/uploads/2018/06/1404_to_1604_installer.sh; bash 1404_to_1604_installer.sh</span><br></pre></td></tr></table></figure>

<p>via：<a href="https://www.lowendtalk.com/discussion/147323/upgrading-hostsolutions-ro-openvz-templates-to-16-04-jessie-or-stretch">https://www.lowendtalk.com/discussion/147323/upgrading-hostsolutions-ro-openvz-templates-to-16-04-jessie-or-stretch</a></p>
<p>欢迎到TeleGram群讨论：<a href="https://t.me/zhujiwiki">https://t.me/zhujiwiki</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Debian</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian系统中，降低 IPv6的优先级，优先使用IPv4，或 禁用 IPv6</title>
    <url>/2021/11/14/debian%E7%B3%BB%E7%BB%9F%E4%B8%AD%EF%BC%8C%E9%99%8D%E4%BD%8E-ipv6%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7%EF%BC%8C%E4%BC%98%E5%85%88%E4%BD%BF%E7%94%A8ipv4%EF%BC%8C%E6%88%96-%E7%A6%81%E7%94%A8-ipv6/</url>
    <content><![CDATA[<p><strong>一：降低 IPv6的优先级，优先使用IPv4</strong></p>
<p>默认的安装中，IPV4 和 IPV6 并存，并且 IPV6 却优先于 IPV4。如果不需要彻底关闭 IPV6，可以设置让 IPV4 优先于 IPV6。配置方式如下：</p>
<p>echo “precedence ::ffff:0:0&#x2F;96 100” &gt;&gt;&#x2F;etc&#x2F;gai.conf</p>
<p>当然也可以直接修改 <code>/etc/gai.conf</code> 文件，找到下面这一行</p>
<p>#precedence ::ffff:0:0&#x2F;96 100</p>
<p>把前面的<code>#</code>去掉即可。</p>
<p><strong>二：设置 GRUB 启动参数禁用 IPv6</strong></p>
<p>编辑 <code>/etc/default/grub</code>，找到 <code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot;</code></p>
<p>修改为：</p>
<p>GRUB_CMDLINE_LINUX_DEFAULT&#x3D;”ipv6.disable&#x3D;1 quiet”</p>
<p>随后执行命令 <code>update-grub</code> 更新 grub 启动参数，重启系统即可。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Debian</tag>
        <tag>IPV6</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS</title>
    <url>/2022/01/05/dns/</url>
    <content><![CDATA[<h1 id="linux-nslookup安装"><a href="#linux-nslookup安装" class="headerlink" title="linux nslookup安装"></a>linux nslookup安装</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install dnsutils</span><br></pre></td></tr></table></figure>

<h1 id="DNSmasq安装"><a href="#DNSmasq安装" class="headerlink" title="DNSmasq安装"></a>DNSmasq安装</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install dnsmasq</span><br></pre></td></tr></table></figure>

<p>使用本地hosts做解析</p>
<h1 id="小方转存SAMBA技巧"><a href="#小方转存SAMBA技巧" class="headerlink" title="小方转存SAMBA技巧"></a>小方转存SAMBA技巧</h1><p>1.使用一台开有samba匿名共享的服务器</p>
<p>2.建立匿名目录TDDOWNLOAD</p>
<p>3.把手机里的网关指向该服务器</p>
<p>4.进入小方转存即可</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>DNS</tag>
        <tag>DNSmasq</tag>
        <tag>nslookup</tag>
      </tags>
  </entry>
  <entry>
    <title>DropIt-文件分类利器</title>
    <url>/2020/04/19/dropit-%E6%96%87%E4%BB%B6%E5%88%86%E7%B1%BB%E5%88%A9%E5%99%A8/</url>
    <content><![CDATA[<p>DropIt 是一款由意大利 Lupo PenSuite 软件研发团队精心设计与开发的体积小巧、功能精悍的得力文件综合批量管理助手，其内置了多项常用的文件与文件夹组织协议，人们也可以通过自定义协议来完成更为复杂的文件组织管理工作，支持文件拖拽操作及正则表达式、文件夹监视以及所有微软大众平台支持的文件操作方式。</p>
<p>资源来自网络，小编只收集共享，不收取任何费用</p>
<p>如果有一个全自动的文件管理工具，它能够帮你把所有的文件分门别类地放好、给重要的文件加密、还能给文件转格式，会不会迫不及待地想尝试一下？</p>
<p>DropIt 就是这样一款全自动工具，来看一下它如何把各种文件给瞬间归类：</p>
<p><img src="https://ask.qcloudimg.com/http-save/developer-news/u7rvwendjl.gif"></p>
<p><strong>功能&amp;特点：</strong></p>
<p>**✴拖放 -**简单地将文件与文件夹拖拽到目标图像上进行处理；</p>
<p><strong>✴文件(夹)筛选器 –</strong>通过名称、目录、大小、日期、属性、内容或者正则表达式；</p>
<p><strong>✴文件夹监视 –</strong>全自动处理检测已定义目录的文件与文件夹；</p>
<p><strong>✴十八项操作 –</strong>自动执行已匹配的文件与文件夹操作；</p>
<p><strong>✴配置文件 –</strong>在配置文件中收集协议并指定一个图像便于识别；</p>
<p><strong>✴全面路径支持 –</strong>支持绝对路径、相对路径以及共享文件夹 UNC 路径；</p>
<p><strong>✴环境变量 –</strong>支持内部、自定义和系统环境变量；</p>
<p><strong>✴拓展用法 –</strong>支持使用“发送到”与“命令行”处理文件与文件夹；</p>
<p><strong>✴多国语言 –</strong>可用的多国语言（含简、繁体中文）用户界面；</p>
<p><strong>✴配置文件加密 –</strong>支持使用密码加密保护你的配置文件；</p>
<p><strong>✴活动日志 –</strong>支持日志文件创建用于校验处理操作；</p>
<p><strong>✴Unicode –</strong>支持 Unicode 编码；</p>
<p><img src="https://ask.qcloudimg.com/http-save/developer-news/69zpuwvwpl.jpeg?imageView2/2/w/1620"></p>
<p><strong>使用思路</strong></p>
<p>我们先要了解一下 DropIt 的基本组成部分：</p>
<p>文件（Files）：DropIt 处理的对象就是文件。可以是一个文件，也可以是一些文件、文件夹；</p>
<p>协议（Associations）：对文件进行的操作被称为协议。一条协议由名称、规则、操作、具体配置这 4 个部分组成。名称是指这条协议的名字；规则是适用的文件类型，以分号隔开，比如我只想对压缩包文件操作，那规则就是 *.rar;*.zip;*.7z；操作是你想对文件进行的动作，比如「重命名」「移动」等；最后是这个操作的具体配置，不同的操作有不同的配置选项；</p>
<p>配置文件（Profiles）：配置文件，可以看作单个协议的文件夹。我们可以通过它将协议归类，并且导出，用于分享。</p>
<p>最后，将文件拖到 DropIt 的图标上，就文件会根据这些协议进行相应的动作。</p>
<p><strong>快捷调用</strong></p>
<p><strong>快捷调用 DropIt 的两种方式</strong></p>
<p>作为一个效率工具，如何快捷调用它是一个重要的问题。在调用方面，DropIt 提供了 2 种方式：</p>
<p>将文件拖到图标上，执行：</p>
<p>选中文件，「右键 - 发送到 - 具体动作」。</p>
<p>DropIt 的默认使用方式是<strong>将文件拖动到图标上，开始进行处理。</strong>这样的处理方式很顺手，代价是 DropIt 的图标会遮挡一部分屏幕。</p>
<p><img src="https://ask.qcloudimg.com/http-save/developer-news/wsjfccaw9z.gif"></p>
<p>而在 Windows 的右键菜单中，内置了一项「发送到」功能。由于它的默认选择很少，除了「发送到桌面」以外都很鸡肋，经常被人忽视。</p>
<p>由于 DropIt 的操作全都是针对文件的，所以 DropIt 顺理成章地把所有配置文件都放到了右键的「发送到」菜单中。这使得 DropIt 本身不在运行时也可以正常使用它。</p>
<p>而另一个快捷调用 DropIt 的方法是：<strong>选中文件，「右键 - 发送到 - 具体动作」</strong>，同样可以对文件进行操作。</p>
<p><img src="https://ask.qcloudimg.com/http-save/developer-news/izec2m0bfi.gif"></p>
<p>这个快捷菜单的出现，让 DropIt 不必长期运行，不需要开机启动，也能像使用系统自带的功能一样进行快捷操作。</p>
<p>DropIt 在执行命令前，会扫描一遍文件，并把即将做的操作汇报一遍。确认后才会执行。</p>
<p><strong>如果你希望点击按钮后立即执行任务</strong>，可以在设置中勾选「加载好后立即开始处理」。这样就无需再次确认了。</p>
<p><img src="https://ask.qcloudimg.com/http-save/developer-news/z2f1n7cgue.jpeg?imageView2/2/w/1620"></p>
<p><strong>配置文件</strong></p>
<p>本文提供了一些的配置文件，放在了每一段的结尾。如何使用这些配置文件呢？</p>
<p>首先找到 DropIt 的安装目录，默认位置是 C:\Program Files\DropIt\。它的配置文件存放在这个目录下的 Profiles 文件夹中，也就是 C:\Program Files\DropIt\Profiles\ 目录中，再打开 DropIt 就可以看到配置文件了。</p>
<p><img src="https://ask.qcloudimg.com/http-save/developer-news/3efu81lzad.gif"></p>
<p><strong>本文提供的配置文件</strong></p>
<p>手动清除照片中的 EXIF 信息</p>
<p><img src="https://ask.qcloudimg.com/http-save/developer-news/zuabj49bf7.jpeg?imageView2/2/w/1620"></p>
<p>配合 DropIt 使用，批量处理图片</p>
<p><img src="https://ask.qcloudimg.com/http-save/developer-news/kafavw7hkm.gif"></p>
<p>将 PSD 源文件批量转换为 PNG 图片</p>
<p><img src="https://ask.qcloudimg.com/http-save/developer-news/8hv522dr8o.gif"></p>
<p>高的效率的分拣</p>
<p><img src="https://ask.qcloudimg.com/http-save/developer-news/gun67l7071.gif"></p>
<p>批量加密和解密</p>
<p><img src="https://ask.qcloudimg.com/http-save/developer-news/rk7aqyixzv.gif"></p>
<p><strong>写在最后</strong></p>
<p>新电脑操作系统用户由于不太重视文件、文件夹的分类管理操作，日积月累常年下来便使得计算机的各个驱动器内的文件杂乱无章，尤其对于办公人员来说根本不便于后期的文件查找及使用操作。DropIt可以帮助用户自动的对您所添加压缩文件、视频、音频、图片等文件进行自动分类，而且其能够根据自己的需要创建归档规则，从而能够帮助您更好的管理您的文件，有需要的用户不妨来看看吧！</p>
]]></content>
      <categories>
        <category>Win</category>
      </categories>
      <tags>
        <tag>DropIt</tag>
        <tag>分类</tag>
        <tag>利器</tag>
        <tag>文件</tag>
      </tags>
  </entry>
  <entry>
    <title>FileRun-自建私人网盘</title>
    <url>/2018/01/29/filerun-%E8%87%AA%E5%BB%BA%E7%A7%81%E4%BA%BA%E7%BD%91%E7%9B%98/</url>
    <content><![CDATA[<p>用户界面：纯粹的GoogleDrive风格，简洁大方，用过Google Drive的朋友会很容易习惯Filerun的操作 资源占用：Filerun资源占用非常小，实际使用丝般顺滑 文件功能：支持图片预览，视频播放，文档浏览编辑，epub电子书阅读，还可以关联第三方应用对文件进行操作，比如Google Doc</p>
<p>Filerun安装环境需求：</p>
<p>PHP：5.6+，官方推荐7.0 ionCube：Filerun不开源，需要安装和PHP版本对应的版本 数据库：MySQL&#x2F;MariaDB, PostgreSQL or Sqlite</p>
<p>下载Filerun到虚拟主机目录并授权目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/wwwroot/filerun</span><br><span class="line">wget -O FileRun.zip http://www.filerun.com/download-latest</span><br><span class="line">unzip FileRun.zip</span><br><span class="line">chown -R www:www /home/wwwroot/filerun</span><br></pre></td></tr></table></figure>

<p>下载ionCube Loader并复制到虚拟主机根目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /root</span><br><span class="line">wget http://www.ioncube.com/loader-wizard/loader-wizard.zip</span><br><span class="line">unzip loader-wizard.zip</span><br><span class="line">mv ioncube/loader-wizard.php /home/wwwroot/filerun/ion.php</span><br></pre></td></tr></table></figure>

<p>在浏览器打开http:&#x2F;&#x2F;域名&#x2F;ion.php 复制ionCube安装包链接 打开php.ini</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /usr/local/php/etc/php.ini</span><br></pre></td></tr></table></figure>

<p>添加下面一行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zend_extension = /usr/local/php/lib/php/extensions/no-debug-non-zts-20151012/ioncube_loader_lin_7.0.so</span><br></pre></td></tr></table></figure>

<p>service php-fpm restart 弄好后重新打开 http:&#x2F;&#x2F;域名&#x2F;ion.php，提示安装成功后，我们需要删掉ioncube安装向导</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm /home/wwwroot/filerun/ion.php</span><br></pre></td></tr></table></figure>

<p>另外网盘推荐开启强制https，打开nginx配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /usr/local/nginx/conf/vhost/域名.conf</span><br></pre></td></tr></table></figure>

<p>在80端口段里添加以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rewrite ^(.*)$ https://$host$1 permanent;</span><br></pre></td></tr></table></figure>

<p>重启nginx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>FileRun</tag>
      </tags>
  </entry>
  <entry>
    <title>Github</title>
    <url>/2022/01/05/github/</url>
    <content><![CDATA[<h2 id="github-com-SSH-加速访问"><a href="#github-com-SSH-加速访问" class="headerlink" title="github.com SSH 加速访问"></a>github.com SSH 加速访问</h2><p>修改 C:\Users\Dell\.ssh\config 文件，添加如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  User git</span><br><span class="line">  Port 22</span><br><span class="line">  Hostname github.com</span><br><span class="line">  IdentityFile &quot;C:/Users/Dell/.ssh/id_ecdsa&quot;</span><br><span class="line">  TCPKeepAlive yes</span><br><span class="line">  ProxyCommand connect -S 127.0.0.1:7891 -a none %h %p</span><br></pre></td></tr></table></figure>

<h2 id="全局设置-GPG-签名工具"><a href="#全局设置-GPG-签名工具" class="headerlink" title="全局设置 GPG 签名工具"></a>全局设置 GPG 签名工具</h2><p>GPG4Win 下载地址：<a href="https://www.gpg4win.org/">https://www.gpg4win.org/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global gpg.program &quot;C:/Program Files (x86)/GnuPG/bin/gpg.exe&quot;</span><br></pre></td></tr></table></figure>

<h2 id="列举-GPG-Key"><a href="#列举-GPG-Key" class="headerlink" title="列举 GPG Key"></a>列举 GPG Key</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg --list-secret-keys --keyid-format=long</span><br></pre></td></tr></table></figure>

<h2 id="针对-Git-Repo-启用-GPG-签名"><a href="#针对-Git-Repo-启用-GPG-签名" class="headerlink" title="针对 Git Repo 启用 GPG 签名"></a>针对 Git Repo 启用 GPG 签名</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --local user.signingkey [YOUR GPG KEY]</span><br><span class="line">git config --local commit.gpgsign true</span><br></pre></td></tr></table></figure>

<h1 id="github走proxy"><a href="#github走proxy" class="headerlink" title="github走proxy"></a>github走proxy</h1><p>1.首先开启代理，这种方式只支持https方式，ssh不行</p>
<p>2.给全局git-config配置代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.https://github.com.proxy socks5://127.0.0.1:50001</span><br></pre></td></tr></table></figure>

<p>3.clone的时候使用proxy</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/xxx.git -c http.proxy=socks5://127.0.0.1:50001</span><br></pre></td></tr></table></figure>

<p>4.取消全局代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.https://github.com.proxy</span><br></pre></td></tr></table></figure>

<h1 id="直接用git下载Gist-ID内容"><a href="#直接用git下载Gist-ID内容" class="headerlink" title="直接用git下载Gist ID内容"></a>直接用git下载Gist ID内容</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:cc13e0fcf2c348cc126f918e4a3917eb.git</span><br></pre></td></tr></table></figure>

<h1 id="github与七牛云持续集成"><a href="#github与七牛云持续集成" class="headerlink" title="github与七牛云持续集成"></a>github与七牛云持续集成</h1><p>七牛云的CDN提供API刷新缓存服务，我们可以使用github的webhooks来触发刷新。</p>
<p>1.首先配置github的hook：</p>
<p>在项目里找到settings-&gt;Webhooks</p>
<p>设置：Payload URL 项为我们服务器的地址，然后保存</p>
<p>2.生成token，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;/v2/tune/refresh&quot; openssl dgst -binary -hmac &quot;用户SK&quot; -sha1 base64  tr + -  tr / _</span><br></pre></td></tr></table></figure>

<p>3.编写服务端脚本，来触发七牛API:</p>
<p>比如我用PHP来触发<a href="http://git.malu.me：">http://git.malu.me：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">#七牛刷新缓存函数</span><br><span class="line">function refresh_qiniu($path)&#123;</span><br><span class="line">         $message = exec(&#x27;curl -X POST -H &quot;Authorization: QBox &lt;用户AK&gt;:&lt;生成的token&gt;&quot; http://fusion.qiniuapi.com/v2/tune/refresh -d \&#x27;&#x27;.json_encode($path).&#x27;\&#x27; -H \&#x27;Content-Type: application/json\&#x27; 2&gt;&amp;1&#x27;);</span><br><span class="line">         return $message;</span><br><span class="line">&#125;</span><br><span class="line">$getin = file_get_contents(&quot;php://input&quot;);</span><br><span class="line">#追加写入日志</span><br><span class="line">file_put_contents(&#x27;file.log&#x27;,$getin, FILE_APPENDLOCK_EX);</span><br><span class="line">$getinarr = json_decode($getin);</span><br><span class="line">$getinarr = $getinarr-&gt;commits[0];</span><br><span class="line">$path = array();</span><br><span class="line">#添加文章</span><br><span class="line">if(!empty($getinarr-&gt;added)  !empty($getinarr-&gt;removed))&#123;</span><br><span class="line">   echo &#x27;刷page:&#x27;;</span><br><span class="line">   $path[&#x27;urls&#x27;]=array(&#x27;http://git.malu.me&#x27;,&#x27;http://git.malu.me/index.html&#x27;);</span><br><span class="line">   $path[&#x27;dirs&#x27;]=array(&#x27;http://git.malu.me/page/*&#x27;);</span><br><span class="line">   echo refresh_qiniu($path);</span><br><span class="line">&#125;</span><br><span class="line">#修改文章</span><br><span class="line">if(!empty($getinarr-&gt;modified))&#123;</span><br><span class="line">   echo &#x27;刷url:&#x27;;</span><br><span class="line">   foreach($getinarr-&gt;modified as $key=&gt;$value)&#123;</span><br><span class="line">      //echo $value;</span><br><span class="line">      #匹配出文章名</span><br><span class="line">      if(preg_match(&#x27;/-\d\d-\d\d-(.*?)\.md/is&#x27;, $value, $out))&#123;</span><br><span class="line">         //var_dump($out);</span><br><span class="line">         echo $out[1];</span><br><span class="line">         #对中文编码</span><br><span class="line">         $renewurl = &#x27;http://git.malu.me/&#x27;.urlencode($out[1]).&#x27;/&#x27;;</span><br><span class="line">         $path[&#x27;urls&#x27;]=array($renewurl);</span><br><span class="line">         echo refresh_qiniu($path);</span><br><span class="line">      &#125;   </span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="七牛对象存储301跳转"><a href="#七牛对象存储301跳转" class="headerlink" title="七牛对象存储301跳转"></a>七牛对象存储301跳转</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qrsctl redirect &lt;Bucket&gt; &lt;Key&gt; &lt;RedirectUrl&gt; [&lt;RedirectCode&gt;]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>github + hexo</title>
    <url>/2019/11/03/github-hexo/</url>
    <content><![CDATA[<p>本篇主要记录一些自己github博客搭建的过程。</p>
<h4 id="1、配置-Node-js-和配置-Node-js-环境"><a href="#1、配置-Node-js-和配置-Node-js-环境" class="headerlink" title="1、配置 Node.js 和配置 Node.js 环境"></a>1、配置 Node.js 和配置 Node.js 环境</h4><h4 id="2、安装Git和配置Git环境"><a href="#2、安装Git和配置Git环境" class="headerlink" title="2、安装Git和配置Git环境"></a>2、安装Git和配置Git环境</h4><p>注：本篇主要写搭建博客，工具类的不再赘述</p>
<h4 id="3、github配置"><a href="#3、github配置" class="headerlink" title="3、github配置"></a>3、github配置</h4><ul>
<li><p>我们假设你已经有了一个 github 账号，你需要添加一个新的 new repository。点击创建一个新的 repository ，你需要将你的 Repository name 设置为 <code>** 账户名.github.io **</code> ，这一步至关重要。</p>
</li>
<li><p>在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到一个 http:&#x2F;&#x2F;账户名.github.io 的网址，这样，你已经有一个属于自己的博客啦。</p>
<h4 id="4、hexo-配置"><a href="#4、hexo-配置" class="headerlink" title="4、hexo 配置"></a>4、hexo 配置</h4></li>
<li><p>首先找一个合适的位置创建一个文件夹，通过 git 进入到该文件夹下</p>
</li>
<li><p>输入 <code>npm install hexo -g</code>，开始安装Hexo</p>
</li>
<li><p>输入 <code>hexo -v</code>，检查hexo是否安装成功</p>
</li>
<li><p>输入 <code>hexo init</code>，初始化该文件夹。看到 <code>** “Start blogging with Hexo！” **</code> 即成功</p>
</li>
<li><p>输入 <code>npm install</code>,安装所需组件</p>
</li>
<li><p>输入 <code>hexo g</code>,对文件进行编译</p>
</li>
<li><p>输入 <code>hexo s</code>,输入<code>hexo s</code>，开启服务器，访问该网址，正式体验Hexo。 我的默认端口是4000，如果你的页面一直无法跳转，可能是端口号被占用，可以通过 <code>hexo server -p 端口号</code> 进行修改。</p>
<h4 id="5、将Hexo与Github-page联系起来"><a href="#5、将Hexo与Github-page联系起来" class="headerlink" title="5、将Hexo与Github page联系起来"></a>5、将Hexo与Github page联系起来</h4></li>
<li><p>设置Git的user name和email（对于第一次设置的童鞋）</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;xxx&quot;</span><br><span class="line">git config --global user.email &quot;xxx@gmail.com&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>输入cd ~&#x2F;.ssh，检查是否有.ssh的文件夹，输入ls，列出该文件下的内容。如果有<code>id_rsa,id_rsa_pub,known_hosts</code>,则说明存在。</li>
<li>输入 <code>ssh-keygen -t rsa -C &quot;你的github邮箱地址&quot;</code>,连续三个回车，生成密钥，也会自动生成两个文件：<code>id_rsa和id_rsa.pub</code>（默认存储路径是：<code>C:\Users\Administrator\.ssh</code>）</li>
<li>输入<code>eval &quot;$(ssh-agent -s)&quot;</code>，添加密钥到 ssh-agent</li>
<li>输入<code>ssh-add ~/.ssh/id_rsa</code>，添加生成的 SSH key 到 ssh-agent</li>
<li>登录Github，点击头像下的settings，点击 SSH and GPG keys，点击 右侧的 new SSH key，用VS Code打开id_rsa，ctrl + A 全部复制粘贴到新建的 SSH key 中。</li>
<li>输入ssh -T <a href="mailto:&#103;&#x69;&#116;&#x40;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#x6d;">&#103;&#x69;&#116;&#x40;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#x6d;</a>，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了。</li>
<li>配置Deployment，在其文件夹中，找到_config.yml文件，修改repo值（在末尾）,配置成如下效果。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:limoon7/limoon7.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<ul>
<li>新建一篇博客，在git下执行命令：hexo new post “博客名”，这时候在文件夹_posts目录下将会看到已经创建的文件。</li>
<li>在生成以及部署文章之前，需要安装一个扩展：<code>npm install hexo-deployer-git --save</code></li>
<li>使用编辑器编好文章，那么就可以使用命令：<code>hexo d -g</code>，生成以及部署了</li>
<li>部署成功后访问你的地址：http:&#x2F;&#x2F;用户名.github.io,就可以看到你的文章啦</li>
<li>在实际的使用中，可以修改过文件后可以先在本地预览预览，通过<code>hexo -s</code> 命令</li>
<li>个人一般使用的顺序为： <code>hexo clean</code> ,<code>hexo -g</code> ,<code>hexo -s</code>, <code>hexo -d</code></li>
</ul>
<h4 id="6、配置-yilia-主题"><a href="#6、配置-yilia-主题" class="headerlink" title="6、配置 yilia 主题"></a>6、配置 yilia 主题</h4><p>是不是觉得配置好的不是很美观，那就来一个优雅大方的主题吧！</p>
<blockquote>
<p>参考资料:<a href="https://github.com/litten/hexo-theme-yilia">一个简洁优雅的hexo主题 A simple and elegant theme for hexo.</a></p>
</blockquote>
<h4 id="7、遇到的一些问题"><a href="#7、遇到的一些问题" class="headerlink" title="7、遇到的一些问题"></a>7、遇到的一些问题</h4><p>-hexo d 出现ssh连接问题，如下所示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh: connect to host github.com port 22: Connection timed out</span><br></pre></td></tr></table></figure>

<p>解决方法：<a href="https://www.jianshu.com/p/83fbb1828453">git 连接 github 超时问题</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2021/12/24/git/</url>
    <content><![CDATA[<h3 id="初次使用配置用户信息"><a href="#初次使用配置用户信息" class="headerlink" title="初次使用配置用户信息"></a>初次使用配置用户信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;malu&quot;</span><br><span class="line">git config --global user.email &quot;malu@malu.me&quot;</span><br><span class="line"></span><br><span class="line">git config --global alias.l &#x27;log --pretty=format:&quot;%h %ad [%an] %s%d&quot; --date=format:&quot;%Y-%m-%d %H:%M&quot; --no-merges -30&#x27;</span><br><span class="line">git config --global alias.ll &#x27;log --pretty=format:&quot;%h %ad [%an] %s%d&quot; --date=format:&quot;%Y-%m-%d %H:%M&quot; --stat -6&#x27;</span><br><span class="line">git config --global alias.lll &#x27;log --pretty=format:&quot;%h %ad [%an] %s%d&quot; --date=format:&quot;%Y-%m-%d %H:%M&quot; --stat --graph -10&#x27;</span><br><span class="line"></span><br><span class="line">git config --global alias.s &#x27;status --short&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用HTTP-basic-auth-clone"><a href="#使用HTTP-basic-auth-clone" class="headerlink" title="使用HTTP basic auth clone"></a>使用HTTP basic auth clone</h3><p>使用http方式去clone时，如果用户名密码包含特殊字符，则都需要URL encode</p>
<p>比如用户名含有邮箱的@符号时需要转换成%40</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://malu%40malu.me:password@github.com/pingmalu/test.git </span><br></pre></td></tr></table></figure>

<h3 id="git赋予文件权限"><a href="#git赋予文件权限" class="headerlink" title="git赋予文件权限"></a>git赋予文件权限</h3><p>查看当前权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[localhost]$ git ls-files --stage run.sh</span><br><span class="line">100644 c1bda43ae2d82769f5e66404fdbe7d752ddb383b 0       run.sh</span><br></pre></td></tr></table></figure>

<p>增加可执行权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[localhost]$ git update-index --chmod +x run.sh</span><br></pre></td></tr></table></figure>

<h3 id="git添加多个远程仓库"><a href="#git添加多个远程仓库" class="headerlink" title="git添加多个远程仓库"></a>git添加多个远程仓库</h3><p>添加新的远程仓库:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add malu https://malu.me/project/xxx.git</span><br></pre></td></tr></table></figure>

<p>将本地的所有分支推送到新的远程仓库:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push --all malu</span><br></pre></td></tr></table></figure>

<p>强制推送到新的远程仓库:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -f malu</span><br></pre></td></tr></table></figure>

<h1 id="git基本使用方法"><a href="#git基本使用方法" class="headerlink" title="git基本使用方法"></a>git基本使用方法</h1><h3 id="查看远程仓库地址"><a href="#查看远程仓库地址" class="headerlink" title="查看远程仓库地址"></a>查看远程仓库地址</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<h3 id="查看所有分支"><a href="#查看所有分支" class="headerlink" title="查看所有分支"></a>查看所有分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

<h3 id="查看每次提交的所有文件列表"><a href="#查看每次提交的所有文件列表" class="headerlink" title="查看每次提交的所有文件列表"></a>查看每次提交的所有文件列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --stat</span><br></pre></td></tr></table></figure>

<h3 id="查看特定的commit-id中的文件列表"><a href="#查看特定的commit-id中的文件列表" class="headerlink" title="查看特定的commit id中的文件列表"></a>查看特定的commit id中的文件列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git show --stat &lt;commit id&gt;</span><br></pre></td></tr></table></figure>

<h3 id="查看最近一次提交的文件列表"><a href="#查看最近一次提交的文件列表" class="headerlink" title="查看最近一次提交的文件列表"></a>查看最近一次提交的文件列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git show --stat</span><br><span class="line">或</span><br><span class="line">git log --stat -1</span><br></pre></td></tr></table></figure>

<h3 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure>

<h3 id="一次完整提交"><a href="#一次完整提交" class="headerlink" title="一次完整提交"></a>一次完整提交</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m&#x27;修改BUG&#x27;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<h1 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config http.proxy http://user:pwd@server.com:port</span><br></pre></td></tr></table></figure>

<p>http全局代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<p>http当前项目代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --local http.proxy http://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<p>socks5全局代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<p>socks5全局代理，只对github.com</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.https://github.com.proxy socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<p>clone时使用代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/xxx.git -c http.proxy=socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<p>clone时使用代理并取最新的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/xxx.git -c http.proxy=socks5://127.0.0.1:1080 --depth=1</span><br></pre></td></tr></table></figure>

<p>取消代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br></pre></td></tr></table></figure>

<p>取消只对github.com的代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.https://github.com.proxy</span><br></pre></td></tr></table></figure>

<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><p>显示文件的每一行是在哪个版本最后修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git blame filename.c </span><br></pre></td></tr></table></figure>

<p>查找commit内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log  --pretty=onelinegrep 关键字</span><br></pre></td></tr></table></figure>

<p>查看用户代码量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --stat --author=&#x27;username&#x27;perl -ne &#x27;END &#123; print $c &#125; $c += $1 if /(\d+) insertions/;&#x27;</span><br></pre></td></tr></table></figure>

<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><p>查看本地分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>

<p>查看所有分支 （加-v显示最后一次提交信息）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -a -v</span><br></pre></td></tr></table></figure>

<p>本地创建分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch dev</span><br></pre></td></tr></table></figure>

<p>将本地分支上传至远程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin dev</span><br></pre></td></tr></table></figure>

<p>下载在线的一个分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch dev origin/dev</span><br></pre></td></tr></table></figure>

<p>删除本地分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure>

<p>删除远程分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -r -d origin/branch-name</span><br><span class="line">git push origin :branch-name</span><br></pre></td></tr></table></figure>

<p>切换本地分支到dev</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout dev</span><br></pre></td></tr></table></figure>

<h1 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h1><p>1.开发分支（dev）上的代码达到上线的标准后，要合并到 master 分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout dev</span><br><span class="line">git pull</span><br><span class="line">git checkout master</span><br><span class="line">git merge dev</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p>2.当master代码改动了，需要更新开发分支（dev）上的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master </span><br><span class="line">git pull </span><br><span class="line">git checkout dev</span><br><span class="line">git merge master </span><br><span class="line">git push -u origin dev</span><br></pre></td></tr></table></figure>

<p>3.假设本地有2个分支dev master,要把dev合并到master 也可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge dev master</span><br></pre></td></tr></table></figure>

<p>4.把dev合并到master还可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase dev master</span><br></pre></td></tr></table></figure>

<h2 id="合并冲突解决"><a href="#合并冲突解决" class="headerlink" title="合并冲突解决"></a>合并冲突解决</h2><p>1.如果合并冲突取对方代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge -s recursive -X theirs dev --allow-unrelated-histories</span><br></pre></td></tr></table></figure>

<p>2.如果合并冲突取当前分支代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge -s recursive -X ours dev --allow-unrelated-histories</span><br></pre></td></tr></table></figure>

<p>–allow-unrelated-histories 把两段不相干的 分支进行强行合并</p>
<p>3.一个分支完全覆盖另一个分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master  // 切换到旧的分支</span><br><span class="line">git reset –hard dev   // 将本地的旧分支 master 重置成 dev</span><br><span class="line">git push origin master –force  // 再推送到远程仓库</span><br></pre></td></tr></table></figure>

<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><p>本地新建标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -a only_apache -m &quot;只有apache集成环境&quot;</span><br></pre></td></tr></table></figure>

<p>查看本地标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>

<p>切换至指定标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout only_apache</span><br></pre></td></tr></table></figure>

<p>把所有本地标签提交到服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>

<p>将标签only_apache提交到服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin only_apache</span><br></pre></td></tr></table></figure>

<h1 id="切换远程分支，Git每次提交需要密码处理"><a href="#切换远程分支，Git每次提交需要密码处理" class="headerlink" title="切换远程分支，Git每次提交需要密码处理"></a>切换远程分支，Git每次提交需要密码处理</h1><p>把远程分支从https切换到ssh模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 先查看远程分支</span><br><span class="line">git remote -v</span><br><span class="line"># 删除远程分支</span><br><span class="line">git remote rm origin</span><br><span class="line"># 添加远程分支</span><br><span class="line">git remote add origin git@github.com:pingmalu/test.git</span><br></pre></td></tr></table></figure>

<h2 id="Git-合并遇到冲突解决办法"><a href="#Git-合并遇到冲突解决办法" class="headerlink" title="Git 合并遇到冲突解决办法"></a>Git 合并遇到冲突解决办法</h2><h3 id="1-使用栈保存编辑数据后pull下来再合并"><a href="#1-使用栈保存编辑数据后pull下来再合并" class="headerlink" title="1.使用栈保存编辑数据后pull下来再合并"></a>1.使用栈保存编辑数据后pull下来再合并</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。</span><br><span class="line">git pull:  暂存了本地修改之后，就可以pull了。</span><br><span class="line">git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。</span><br><span class="line">git stash pop stash@&#123;$num&#125;: 如果要应用并删除其他stash，命令：git stash pop stash@&#123;$num&#125; ，比如应用并删除第二个：git stash pop stash@&#123;1&#125;</span><br><span class="line">git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。</span><br><span class="line">git stash clear: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。</span><br></pre></td></tr></table></figure>

<h3 id="2-从xxxx分支合并到dev"><a href="#2-从xxxx分支合并到dev" class="headerlink" title="2.从xxxx分支合并到dev"></a>2.从xxxx分支合并到dev</h3><p>先把xxxx分支上的提交hash找出来，再去dev上执行cherry-pick:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git cherry-pick a2a544fd01c2578046b335636e4</span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure>

<h2 id="Git后悔药-慎用"><a href="#Git后悔药-慎用" class="headerlink" title="Git后悔药(慎用)"></a>Git后悔药(慎用)</h2><h3 id="放弃本地修改"><a href="#放弃本地修改" class="headerlink" title="放弃本地修改"></a>放弃本地修改</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard</span><br><span class="line">git clean -df</span><br></pre></td></tr></table></figure>

<p>其他：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm --cached &lt;FILE&gt;：已 add（tracked） 未 commit 的文件，使其回到未 add 状态（untracked）。</span><br><span class="line">git rm -f &lt;FILE&gt;： 从本地删除已 add 的文件。</span><br><span class="line">git checkout -- &lt;FILE&gt; ：有修改的文件回到 tracked 状态，对已 tracked 的文件撤销修改。</span><br><span class="line">git reset HEAD &lt;FILE&gt;：撤销 commit，回到 modified 状态。</span><br><span class="line">git reset --soft HEAD^：撤销 commit，回到 tracked 状态。</span><br><span class="line">git clean：删除所有 untracked 文件。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="放弃本地修改，使用远程最新版本"><a href="#放弃本地修改，使用远程最新版本" class="headerlink" title="放弃本地修改，使用远程最新版本"></a>放弃本地修改，使用远程最新版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>

<h3 id="如果只需要移除一个文件"><a href="#如果只需要移除一个文件" class="headerlink" title="如果只需要移除一个文件"></a>如果只需要移除一个文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset &lt;文件名&gt;</span><br></pre></td></tr></table></figure>

<h3 id="或者如果你想从暂存区移除所有没有提交的修改"><a href="#或者如果你想从暂存区移除所有没有提交的修改" class="headerlink" title="或者如果你想从暂存区移除所有没有提交的修改"></a>或者如果你想从暂存区移除所有没有提交的修改</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset</span><br></pre></td></tr></table></figure>

<h3 id="放弃远程上一次提交的内容"><a href="#放弃远程上一次提交的内容" class="headerlink" title="放弃远程上一次提交的内容"></a>放弃远程上一次提交的内容</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br><span class="line">或用：</span><br><span class="line">git reset --hard HEAD~1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="修改错误的提交信息"><a href="#修改错误的提交信息" class="headerlink" title="修改错误的提交信息"></a>修改错误的提交信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit --amend -m ”YOUR-NEW-COMMIT-MESSAGE”</span><br><span class="line">git push &lt;remote&gt; &lt;branch&gt; --force</span><br></pre></td></tr></table></figure>

<h3 id="恢复某个文件到指定hash"><a href="#恢复某个文件到指定hash" class="headerlink" title="恢复某个文件到指定hash"></a>恢复某个文件到指定hash</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout fc0c4369b362a38 .\index.html</span><br></pre></td></tr></table></figure>

<h2 id="Stash未提交的更改"><a href="#Stash未提交的更改" class="headerlink" title="Stash未提交的更改"></a>Stash未提交的更改</h2><p>stash在本质上会取走所有的变更并存储它们为以备将来使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure>

<p>检查stash列表，你可以运行下面的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure>

<p>如果想要解除stash并且恢复未提交的变更</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash apply</span><br></pre></td></tr></table></figure>

<p>每个stash都有一个标识符，一个唯一的号码（尽管在这种情况下只有一个stash）。 如果只想留有余地进行apply stash，你应该给apply添加特定的标识符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash apply stash@&#123;2&#125;</span><br></pre></td></tr></table></figure>

<p>如果想取出stash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure>

<p>取出指定stash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash pop stash@&#123;2&#125;</span><br></pre></td></tr></table></figure>

<p>清除stash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash drop stash@&#123;0&#125;</span><br></pre></td></tr></table></figure>

<p>清除所有stash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash clear</span><br></pre></td></tr></table></figure>

<p>找回删除的stash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fsck --lost-found</span><br><span class="line">git show 8dd73fa8d14880182f11e24dc10bca570b6127d7</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Ubuntu-git升级到最新版"><a href="#Ubuntu-git升级到最新版" class="headerlink" title="Ubuntu git升级到最新版"></a>Ubuntu git升级到最新版</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install software-properties-common</span><br><span class="line">add-apt-repository ppa:git-core/ppa</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install git</span><br></pre></td></tr></table></figure>

<h2 id="cmd下git-log乱码"><a href="#cmd下git-log乱码" class="headerlink" title="cmd下git log乱码"></a>cmd下git log乱码</h2><p>windows配置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LESSCHARSET 为 utf-8</span><br></pre></td></tr></table></figure>

<p>统一配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global i18n.commitencoding utf-8</span><br><span class="line">git config --global i18n.logoutputencoding utf-8</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="gitk乱码问题"><a href="#gitk乱码问题" class="headerlink" title="gitk乱码问题"></a>gitk乱码问题</h3><p>编辑C:\Users\Administrator\.gitconfig 全局文件（也可编辑项目目录.git&#x2F;config用于设定单个项目）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[gui]</span><br><span class="line">  encoding = utf-8</span><br><span class="line">[i18n]</span><br><span class="line">  commitencoding = &#123;utf-8gbk&#125;</span><br></pre></td></tr></table></figure>

<p>[gui]用于设定gitk总的编码格式</p>
<p>[i18n]用于设定commit等编码，这个默认不需要去设置</p>
<h3 id="Git-Bash中查看log中文乱码"><a href="#Git-Bash中查看log中文乱码" class="headerlink" title="Git Bash中查看log中文乱码"></a>Git Bash中查看log中文乱码</h3><p>修改%Git%\etc\profile (Linux下为 ~&#x2F;.bash_profile 文件)，在末尾添加如下一行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export LESSCHARSET=utf-8</span><br></pre></td></tr></table></figure>

<p>要马上生效，直接设置该环境变量，或者重新登录</p>
<h3 id="git-diff乱码问题也可以用上面的设置"><a href="#git-diff乱码问题也可以用上面的设置" class="headerlink" title="git diff乱码问题也可以用上面的设置"></a>git diff乱码问题也可以用上面的设置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export LESSCHARSET=utf-8</span><br></pre></td></tr></table></figure>

<h2 id="git-bash-乱码临时转换"><a href="#git-bash-乱码临时转换" class="headerlink" title="git-bash 乱码临时转换"></a>git-bash 乱码临时转换</h2><p>utf-8转gbk</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status  iconv -f utf-8 -t gbk</span><br></pre></td></tr></table></figure>

<p>gbk 转 utf-8 输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winpty ipconfig</span><br></pre></td></tr></table></figure>

<h2 id="解决-idea-Terminal-配置-git-bash-中文乱码"><a href="#解决-idea-Terminal-配置-git-bash-中文乱码" class="headerlink" title="解决 idea Terminal 配置 git bash 中文乱码"></a>解决 idea Terminal 配置 git bash 中文乱码</h2><p>修改：C:\Program Files\Git\etc\bash.bashrc 文件，在这个文件末尾追加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export LANG=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">export LC_ALL=&quot;zh_CN.UTF-8&quot;</span><br></pre></td></tr></table></figure>

<h1 id="ERROR"><a href="#ERROR" class="headerlink" title="ERROR"></a>ERROR</h1><h3 id="git-pull-报错："><a href="#git-pull-报错：" class="headerlink" title="git pull 报错："></a>git pull 报错：</h3><blockquote>
<p>Auto packing the repository for optimum performance. You may also run “git gc” manually. See “git help gc” for more information.</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git gc</span><br></pre></td></tr></table></figure>

<p>由于git本身不保存文件之前的差异文件.只保存每个文件的快照.所以在频繁修改大文件的情况下会造成git目录变得肥大不堪.git早就有了解决方案.git gc后,会在.git目录下生成一个packfile与idx文件.只保存文件差异</p>
<h3 id="Git忽略规则及-gitignore规则不生效的解决办法"><a href="#Git忽略规则及-gitignore规则不生效的解决办法" class="headerlink" title="Git忽略规则及.gitignore规则不生效的解决办法"></a>Git忽略规则及.gitignore规则不生效的解决办法</h3><p>原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</p>
<p>那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm -r --cached .    #将会移除所有的缓存索引</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;update .gitignore&#x27;</span><br></pre></td></tr></table></figure>

<p>!!! 还有一种可能是.gitignore的文件编码问题导致</p>
<p>比如我遇到Unicode的编码，把它改成ANSI即可</p>
<h3 id="git-pull的时候遇到"><a href="#git-pull的时候遇到" class="headerlink" title="git pull的时候遇到"></a>git pull的时候遇到</h3><blockquote>
<p>Unlink of file ‘.git&#x2F;objects&#x2F;pack&#x2F;pack-***.pack’ failed. Should I try again? (y&#x2F;n) y</p>
</blockquote>
<p>上面的问题，按n或者y都没有用，先Ctrl+C</p>
<p>再执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git gc --auto  #自动清理本地的文件</span><br><span class="line">git repack -d -l   #将版本库未打包的松散对象打包</span><br></pre></td></tr></table></figure>

<h3 id="openshift-git-clone-Permission-denied"><a href="#openshift-git-clone-Permission-denied" class="headerlink" title="openshift git clone Permission denied"></a>openshift git clone Permission denied</h3><p>openshift执行git clone ssh:&#x2F;&#x2F;<a href="mailto:&#120;&#x78;&#x78;&#x40;&#120;&#120;&#120;&#x2e;&#x72;&#x68;&#x63;&#x6c;&#111;&#x75;&#x64;&#46;&#99;&#111;&#109;">&#120;&#x78;&#x78;&#x40;&#120;&#120;&#120;&#x2e;&#x72;&#x68;&#x63;&#x6c;&#111;&#x75;&#x64;&#46;&#99;&#111;&#109;</a>&#x2F;~&#x2F;git&#x2F;xxx.git&#x2F; 时报错 ：</p>
<blockquote>
<p>Permission denied (publickey,gssapi-keyex,gssapi-with-mic).</p>
<p>fatal: Could not read from remote repository.</p>
<p>Please make sure you have the correct access rights</p>
<p>and the repository exists.</p>
</blockquote>
<p>解决办法：</p>
<p>将密钥拷贝的.ssh目录下，改名id_rsa&#x2F;id_rsa.pub（密钥&#x2F;公钥）再执行克隆命令成功解决。</p>
<h1 id="自动脚本"><a href="#自动脚本" class="headerlink" title="自动脚本"></a>自动脚本</h1><p>每次提交md笔记需要敲命令，感觉太麻烦了，于是有了这个windows BAT脚本</p>
<p>拉取：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">@echo ========================================================</span><br><span class="line">@echo git pull</span><br><span class="line">@echo ========================================================</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>

<p>提交:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">@echo ========================================================</span><br><span class="line">@echo git push</span><br><span class="line">@echo ========================================================</span><br><span class="line">git add . &amp;&amp; git commit -am &#x27;update&#x27; &amp;&amp; git push</span><br></pre></td></tr></table></figure>

<h1 id="部署gitlab服务器"><a href="#部署gitlab服务器" class="headerlink" title="部署gitlab服务器"></a>部署gitlab服务器</h1><p>docker安装：</p>
<p><a href="https://docs.gitlab.com/omnibus/docker/">https://docs.gitlab.com/omnibus/docker/</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Google BBR魔改版安装教程，支持CentOS6/7和Ubuntu14</title>
    <url>/2018/08/05/google-bbr%E9%AD%94%E6%94%B9%E7%89%88%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%8C%E6%94%AF%E6%8C%81centos6-7%E5%92%8Cubuntu14/</url>
    <content><![CDATA[<h2 id="源码对比"><a href="#源码对比" class="headerlink" title="源码对比"></a>源码对比</h2><p>左侧为原BBR   右侧为魔改BBR  （能看懂的可以瞅瞅）</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/08/120345nujapazy5skrznjz-7.jpg"></p>
<p>源码地址： <code>https://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next.git/plain/net/ipv4/tcp_bbr.c</code> <code>https://gist.github.com/anonymous/ba338038e799eafbba173215153a7f3a/raw/55ff1e45c97b46f12261e07ca07633a9922ad55d/tcp_tsunami.c</code></p>
<p>大佬特别提醒：编译时系统必须安装4.10以上版本的kernel及对应的linux-header，gcc版本应在4.9以上</p>
<p>鉴于之前的那篇文章内核是 4.9的，所以再水一篇文章吧！！</p>
<p>特别提醒：OpenVZ虚拟不能直接升级。升级内核可能会造成服务器无法启动。请酌情使用。</p>
<p> </p>
<h2 id="CentOS-6-X64"><a href="#CentOS-6-X64" class="headerlink" title="CentOS 6 X64"></a><strong>CentOS 6 X64</strong></h2><p>CentOS系统本文演示使用 4.11.8 内核。如果下面代码中的内核地址失效，请自行搜索最新的内核地址即可。</p>
<p>内核地址：<a href="http://51.ruyo.net/go/index.html?u=http://elrepo.org/linux/kernel">http://elrepo.org/linux/kernel</a></p>
<h3 id="升级系统内核"><a href="#升级系统内核" class="headerlink" title="升级系统内核"></a>升级系统内核</h3><p><strong>1）依次执行以下代码。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm —import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">yum install –y http://elrepo.org/linux/kernel/el6/x86_64/RPMS/kernel-ml-4.11.8-1.el6.elrepo.x86_64.rpm</span><br><span class="line">yum remove –y kernel–headers</span><br><span class="line">yum install –y http://elrepo.org/linux/kernel/el6/x86_64/RPMS/kernel-ml-headers-4.11.8-1.el6.elrepo.x86_64.rpm</span><br><span class="line">yum install –y http://elrepo.org/linux/kernel/el6/x86_64/RPMS/kernel-ml-devel-4.11.8-1.el6.elrepo.x86_64.rpm</span><br></pre></td></tr></table></figure>

<h3 id="设置启动引导"><a href="#设置启动引导" class="headerlink" title="设置启动引导"></a>设置启动引导</h3><p><strong>2）修改启动引导，修改配置文件即可。</strong></p>
<p>执行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/grub.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://www.jarods.org/wp-content/uploads/2018/08/699c2d0fly1fh3cwmbwaej20hz0d8dgj.jpg"></p>
<p>红框可看见我们新安装的内核。修改 default&#x3D;0  即可。然后保存。重启服务器。</p>
<h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><p>依次执行以下脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install –y make gcc</span><br><span class="line">wget –O ./tcp_tsunami.chttps://gist.github.com/anonymous/ba338038e799eafbba173215153a7f3a/raw/55ff1e45c97b46f12261e07ca07633a9922ad55d/tcp_tsunami.c</span><br><span class="line">echo “obj-m:=tcp_tsunami.o” &gt; Makefile</span><br><span class="line">make –C /lib/modules/$(uname –r)/build M=`pwd` modules CC=/usr/bin/gcc</span><br><span class="line">chmod +x ./tcp_tsunami.ko</span><br><span class="line">cp –rf ./tcp_tsunami.ko /lib/modules/$(uname –r)/kernel/net/ipv4</span><br><span class="line">insmod tcp_tsunami.ko</span><br><span class="line">depmod –a</span><br><span class="line">echo “net.core.default_qdisc=fq” &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo “net.ipv4.tcp_congestion_control=tsunami” &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://www.jarods.org/wp-content/uploads/2018/08/120345nujapazy5skrznjz-6.jpg"></p>
<p>执行完之后 重启一下服务器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>

<p>重启成功后，执行以下命令。如果有显示内容说明启动成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsmod  grep tsunami</span><br></pre></td></tr></table></figure>

<p>&gt;&gt; tcp_tsunami 6053 5</p>
<h2 id="CentOS-7-X64"><a href="#CentOS-7-X64" class="headerlink" title="CentOS 7 X64"></a><strong>CentOS 7 X64</strong></h2><p>由于手头暂时没有CentOS7 系统的服务器。以下代码并没有测试。</p>
<p>升级系统内核，请执行以下代码。其他的请参考 CentOS 6 X64!!</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm —import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">yum install –y http://elrepo.org/linux/kernel/el7/x86_64/RPMS/kernel-ml-4.11.8-1.el7.elrepo.x86_64.rpm</span><br><span class="line">yum remove –y kernel–headers</span><br><span class="line">yum install –y http://elrepo.org/linux/kernel/el7/x86_64/RPMS/kernel-ml-headers-4.11.8-1.el7.elrepo.x86_64.rpm</span><br><span class="line">yum install –y http://elrepo.org/linux/kernel/el7/x86_64/RPMS/kernel-ml-devel-4.11.8-1.el7.elrepo.x86_64.rpm</span><br></pre></td></tr></table></figure>

<h2 id="Debian-8-x2F-Ubuntu-14"><a href="#Debian-8-x2F-Ubuntu-14" class="headerlink" title="Debian 8&#x2F;Ubuntu 14"></a><strong>Debian 8&#x2F;Ubuntu 14</strong></h2><h3 id="升级系统内核-1"><a href="#升级系统内核-1" class="headerlink" title="升级系统内核"></a>升级系统内核</h3><p> </p>
<p>分别安装 headers   和 images 即可。</p>
<p>内核地址：<a href="http://51.ruyo.net/go/index.html?u=http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.10.9/">http://kernel.ubuntu.com/~kernel-ppa&#x2F;mainline&#x2F;v4.10.9&#x2F;</a></p>
<p>你可以选择更高版本的内核试一试，注意自己替换命令中的 v4.10.9</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.10.9/linux-headers-4.10.9-041009_4.10.9-041009.201704080516_all.deb</span><br><span class="line">dpkg –i linux–headers–4.10.9*.deb</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="设置启动引导-1"><a href="#设置启动引导-1" class="headerlink" title="设置启动引导"></a>设置启动引导</h3><p><strong>1）查看系统内核列表，执行以下命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg –lgrep linux–image</span><br></pre></td></tr></table></figure>

<p>执行命令后，可见多个内核如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ii linux–image–3.16.0–4–amd64 3.16.7–ckt9–3~deb8u1 amd64 Linux 3.16 for 64–bit PCs</span><br><span class="line">ii linux–image–4.10.9–041009–generic 4.10.9–041009.201704080516 amd64 Linux kernel image forversion 4.10.9 on 64 bit x86 SMP</span><br><span class="line">ii linux–image–amd64 3.16+63 amd64 Linux for 64–bit PCs (meta–package)</span><br></pre></td></tr></table></figure>

<p>上面显示的我们需要将 linux-image-3.16.0  这个删除掉。</p>
<p>PS : 如果你显示的是其他的内核版本，那么就删掉它。只保留 4.10.9。</p>
<p><strong>2）删除内核。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt–get remove linux–image–3.16.0–4–amd64</span><br></pre></td></tr></table></figure>

<p><strong>注意：Debian8 系统会弹出一个提示，直接【Tab】选择 【NO】然后回车。</strong></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/08/120345nujapazy5skrznjz-5.jpg"></p>
<p><strong>3）重新生成启动引导。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update–grub</span><br></pre></td></tr></table></figure>

<p><strong>4）重启系统。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>

<h3 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装gcc</h3><p>根据大佬的要求 gcc版本必须 &gt;&#x3D; 4.9 ，否则无法编译。</p>
<p><strong>我在 Ubuntu 14上安装gcc的时候竟然是 4.8版本，可能是由于 Ubuntu 14版本的问题。</strong></p>
<p>1）查看 gcc 版本 。如果 版本 &gt;&#x3D; 4.9 可跳过这个步骤了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc –v</span><br></pre></td></tr></table></figure>

<p>2） 执行以下命令来安装 gcc-4.9</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt–get install build–essential</span><br><span class="line">add–apt–repository ppa:ubuntu–toolchain–r/test</span><br><span class="line">apt–get update</span><br><span class="line">apt–get install gcc–4.9</span><br></pre></td></tr></table></figure>

<h3 id="编译安装-1"><a href="#编译安装-1" class="headerlink" title="编译安装"></a>编译安装</h3><p>1）请依次执行以下脚本。执行完重启服务器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt–get install make gcc–4.9</span><br><span class="line">wget –O ./tcp_tsunami.chttps://gist.github.com/anonymous/ba338038e799eafbba173215153a7f3a/raw/55ff1e45c97b46f12261e07ca07633a9922ad55d/tcp_tsunami.c</span><br><span class="line">echo “obj-m:=tcp_tsunami.o” &gt; Makefile</span><br><span class="line">make –C /lib/modules/$(uname –r)/build M=`pwd` modules CC=/usr/bin/gcc–4.9</span><br><span class="line">install tcp_tsunami.ko /lib/modules/$(uname –r)/kernel</span><br><span class="line">cp –rf ./tcp_tsunami.ko /lib/modules/$(uname –r)/kernel/net/ipv4</span><br><span class="line">depmod –a</span><br><span class="line">echo “net.core.default_qdisc=fq” &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo “net.ipv4.tcp_congestion_control=tsunami” &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure>

<p>2）重启成功后，执行以下命令。如果有显示内容 说明启动成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsmod  grep tsunami</span><br></pre></td></tr></table></figure>

<p>&gt;&gt; tcp_tsunami 6053 5</p>
<h2 id="一键安装脚本"><a href="#一键安装脚本" class="headerlink" title="一键安装脚本"></a>一键安装脚本</h2><p>对于小白用户，以上手动安装可能有点复杂。那么就推荐你使用大佬的一键脚本吧。</p>
<p>提醒一下几位大佬的一键暂不支持 CentOS系统。大佬们的一键脚本可能在 Ubuntu14 下执行可能出问题。</p>
<p>如果一键出错，那么只能上面的内容手动安装了。</p>
<p>谢谢<a href="https://liyuans.com/archives/altered-bbr-onekey-script-collection.html">@Leonn 的博客</a> 收集以下内容。</p>
<h3 id="落雨无声版本"><a href="#落雨无声版本" class="headerlink" title="落雨无声版本"></a>落雨无声版本</h3><p>原文地址：<a href="https://ylws.me/tech/68.html">https://ylws.me/tech/68.html</a></p>
<p>注意只支持 <strong>Debian8 &#x2F; Ubuntu16 +</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget –N —no–check–certificate https://raw.githubusercontent.com/FunctionClub/YankeeBBR/master/bbr.sh &amp;&amp; bash bbr.sh install</span><br></pre></td></tr></table></figure>

<h3 id="Vicer版本"><a href="#Vicer版本" class="headerlink" title="Vicer版本"></a>Vicer版本</h3><p>原文地址：<a href="https://moeclub.org/2017/06/24/278/">https://moeclub.org/2017/06/24/278/</a></p>
<p>注意只支持 <strong>Debian8 &#x2F; Ubuntu16 +</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget —no–check–certificate –qO ‘BBR_POWERED.sh’‘https://moeclub.org/attachment/LinuxShell/BBR_POWERED.sh’ &amp;&amp; chmod a+x BBR_POWERED.sh &amp;&amp;bash BBR_POWERED.sh</span><br></pre></td></tr></table></figure>

<h3 id="91Yun版本"><a href="#91Yun版本" class="headerlink" title="91Yun版本"></a>91Yun版本</h3><p>原文地址：<a href="https://www.91yun.org/archives/16781">https://www.91yun.org/archives/16781</a></p>
<p>注意只支持 <strong>Debian8 &#x2F; Ubuntu16 +</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/singhigh/502newbbr/master/502newbbr.sh</span><br><span class="line">chmod +x 502newbbr.sh</span><br><span class="line">./502newbbr.sh</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>CentOS</tag>
        <tag>Debian</tag>
        <tag>BBR</tag>
        <tag>BBR魔改版</tag>
      </tags>
  </entry>
  <entry>
    <title>Github项目克隆提速</title>
    <url>/2021/11/05/github%E9%A1%B9%E7%9B%AE%E5%85%8B%E9%9A%86%E6%8F%90%E9%80%9F/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><hr>
<p>Github作为全球最大的同性交友网站，一直广受开发者们的喜爱，但是由于某些不可描述的原因，在访问、克隆、拉取、推送的时候，经常莫名其妙的不好使，速度慢的让人无法忍受。解决这个问题（克隆、拉取、推送）的一个途径就是通过代理，绕过 <strong>某长城</strong> 。</p>
<h1 id="配置本地代理"><a href="#配置本地代理" class="headerlink" title="配置本地代理"></a>配置本地代理</h1><hr>
<p>关于代理服务器的事儿就不多说了，要么买，要么租vps自己搭建。一下内容的先决条件是你拥有一个好使的代理服务。 用<code>shadowsocks</code>开启代理后，右键点击托盘中的纸飞机，选择选项配置：</p>
<p><img src="/2021/11/git1.png" alt="图片无法显示"></p>
<p>设置一个本地代理端口号，如果需要局域网其它用户也通过此代理，需要勾选 <em>允许来自局域网的连接</em> 选项：</p>
<p><img src="/2021/11/git2.png" alt="图片无法显示"></p>
<h1 id="设置git代理"><a href="#设置git代理" class="headerlink" title="设置git代理"></a>设置git代理</h1><hr>
<p>通过以下命令设置git的代理：</p>
<p>1<br>2</p>
<p>git config –global http.proxy ‘socks5:&#x2F;&#x2F;ip:1080’<br>git config –global https.proxy ‘socks5:&#x2F;&#x2F;ip:1080’</p>
<p> </p>
<p>这里需要注意的是，如果本机使用的话，ip用<code>127.0.0.1</code>即可,局域网ip能不能用我没有测试。如果需要取消代理，可以用下面的代码：</p>
<p>1<br>2</p>
<p>git config –global –unset http.proxy<br>git config –global –unset https.proxy</p>
]]></content>
      <categories>
        <category>Linux教程</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>git 设置代理及取消</title>
    <url>/2021/11/24/git-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E5%8F%8A%E5%8F%96%E6%B6%88/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git代理设置方法解决</span><br><span class="line">如果执行：git config --global https.proxy http://127.0.0.1:1080 时出现：fatal: not in a git directory</span><br><span class="line"></span><br><span class="line">请先执行：git init</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/09/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hetzner使用SolusVM开设KVM架构的独立IP小鸡</title>
    <url>/2018/07/23/hetzner%E4%BD%BF%E7%94%A8solusvm%E5%BC%80%E8%AE%BEkvm%E6%9E%B6%E6%9E%84%E7%9A%84%E7%8B%AC%E7%AB%8Bip%E5%B0%8F%E9%B8%A1/</url>
    <content><![CDATA[<p>SolusVM相信经常买OneManIDC小鸡的人来说，都不会很陌生吧，市面上很多小学生IDC都是用的这套系统，我们在开始之前，先简要介绍一下SolusVM。</p>
<p>SolusVM是一套国外的服务器虚拟化管理软件，主要分为主控（Master）、被控（Slaves）两个部分。主控提供图形化的WEBUI用来控制被控，主控一般情况下，我们可以随便找一台VPS安装，但被控则必须安装在独立服务器内。另外主控可以控制多个被控，实现虚拟化集群管理等一系列功能。</p>
<p>SolusVM不是一款免费的软件，它的授权价格是主控10刀一月，被控2.5刀一月。请注意被控数量可以无限制的购买，2.5刀一月是单价。也就是说，如果你打算在一台独立服务器上开小鸡，那么你一个月最少就要用12.5刀。如果你有多台独立服务器则需要再另外买被控授权。另外，SolusVM官方提供30天的免费试用授权，试用授权提供一个主控+5个被控，如果你是新手，可以先申请一个免费的授权使用。</p>
<p>如果你能把这篇文章接下来所写的内容全部都学会，那么你已经具备做一个OneManIDC的能力了，如果你真的打算做IDC了，千万别给OneMan这个词丢脸哦，要知道OneManIDC也有做的很不错的，但如果你做不好，难免就要被人称呼为“小学生IDC”了，这取决于你对这个行业的热情和诚信。</p>
<p>本文所使用的环境：</p>
<p>Hetzner独立服务器X1 LinodeVPSX1 CentOS7X64</p>
<p>首先我们来安装被控，我们登录到Hetzner后台，激活救援模式：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-39-388-1.png"></p>
<p>然后还是和往常一样，执行硬重启：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-08-715-1.png"></p>
<p>重启完成后，使用Xshell，登录到救援系统内，执行命令：</p>
<p>installimage</p>
<p>如图所示：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-15-638-1.png"></p>
<p>选择CentOS：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-00-582-1.png"></p>
<p>选择7.4版本：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-18-083-1.png"></p>
<p>做RAID0：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-54-801-1.png"></p>
<p>接下来到了一个非常关键的地方了，就是使用LVM进行硬盘分区，我们需要注意的是SolusVM只需要我们创建卷组（VG）即可，剩下的硬盘空间SolusVM会根据虚拟机所需的硬盘大小来自动划分。所以我们分区的时候，只把CentOS必要的文件系统分出来，其他的空间全部不划分，如图所示：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-44-205-1.png"></p>
<p>确认你的分区配置没问题后，按键盘F10，保存然后就是按几个回车，程序就会自动帮你装系统了。安装完成后，执行命令重启：</p>
<p>reboot</p>
<p>如图所示：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-27-887-1.png"></p>
<p>重启完成后，就可以登录到刚新装的CentOS7内了，可以看到硬盘只划分了100G，我这台独立服务器是6T的硬盘，剩下的容量这里都没有显示挂载，那么就是正常的：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-38-858-1.png"></p>
<p>现在我们就可以在这台独立服务器内安装SolusVM被控了，执行如下两条命令即可开始安装：</p>
<p>wget <a href="https://files.soluslabs.com/install.sh">https://files.soluslabs.com/install.sh</a> sh install.sh</p>
<p>看到如下界面后，因为我们是要开KVM的机器，然后我们要装的是被控，所以这里我们键入2回车：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-18-362-1.png"></p>
<p>接下来就是等了，大概5分钟左右，安装就可以完成，成功后会回显给你这台被控的KEY和密码信息，这两个信息务必要妥善保管：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-26-515-1.png"></p>
<p>如果你是开OpenVZ的小鸡，那么可以说SolusVM是开箱即用的，但我们要开的是全虚拟化的KVM，这里我们就还需要手动配置网卡的桥接。在Hetzner的独立服务器上，我这里给出一个可行的桥接方案。（不保证在别的独立服务器上也可用，因为每个服务器的网络环境都不同）</p>
<p>安装桥接依赖，这个其实SolusVM自动安装的时候应该是已经装好了的：</p>
<p>yum -y install bridge-utils</p>
<p>开ipv4转发：</p>
<p>echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward</p>
<p>新建一个桥接网卡命名为br0</p>
<p>vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-br0</p>
<p>写入：</p>
<p>DEVICE=br0<br>TYPE=Bridge BOOTPROTO=none<br>IPADDR=你的服务器公网IP<br>NETMASK=子网掩码 SCOPE=“peer 你的服务器网关地址” ONBOOT=yes<br>DELAY=0 IPV6INIT=yes<br>IPV6ADDR=你的服务器IPV6地址&#x2F;64 IPV6_DEFAULTGW=fe80::1 IPV6_DEFAULTDEV=br0</p>
<p>注：上面这些需要修改的信息，可以查看你默认的公网网卡得到，把相应的信息改好就行了。</p>
<p>因为Hetzner用的是路由模式，和很多大众机房联网的方式不一样，所以还要新建一个路由：</p>
<p>vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;route-br0</p>
<p>写入：</p>
<p>ADDRESS0=0.0.0.0 NETMASK0=0.0.0.0 GATEWAY0=你的服务器网关地址</p>
<p>接着重启网络服务，这一步非常关键！一定要先重启一遍，让机器能够识别出我们新加入的网卡信息：</p>
<p>&#x2F;etc&#x2F;init.d&#x2F;network restart</p>
<p>然后查看你现有公网IP的那个网卡名是什么：</p>
<p>ifconfig</p>
<p>可以看到我这台的名字是enp4s0，另外我们之前新配置的br0网卡也能在这里显示出来了：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-45-171-1.png"></p>
<p>接着我们修改原来默认的公网网卡配置：</p>
<p>vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-enp4s0</p>
<p>清空这个配置文件，把里面的内容替换成：</p>
<p>DEVICE=enp4s0<br>HWADDR=你的机器MAC地址 IPV6INIT=yes<br>ONBOOT=yes<br>BRIDGE=br0</p>
<p>注：MAC地址就是你主网卡的MAC地址，我这里的就是enp4s0的MAC地址，用ifconfig查看，ether后面的值就是MAC地址。</p>
<p>接着我们再重启一次网络服务：</p>
<p>&#x2F;etc&#x2F;init.d&#x2F;network restart</p>
<p>这样我们就把机器的桥接配置好了，最终的网卡信息现在应该是这样的：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-48-696-1.png"></p>
<p>至此，SolusVM的被控端我们就配置完成了，接下来是主控的安装。</p>
<p>首先我们要把主控装到另外一台VPS上，我个人建议主控和被控的网络连通性要比较好才行，以免后期在生产环境的时候出现一些不必要的麻烦。比如我现在的被控是一台德国机器，那么用来搭建主控的VPS最好也是德国的，所以我这里选择把主控装在Linode的德国机房。</p>
<p>安装主控和安装被控需要执行的命令是一模一样的：</p>
<p>wget <a href="https://files.soluslabs.com/install.sh">https://files.soluslabs.com/install.sh</a> sh install.sh</p>
<p>只不过在Linode上，因为系统比较精简，可能连wget都没有，所以先装一个wget：</p>
<p>yum -y install wget</p>
<p>OK，你现在应该可以顺利看到一个熟悉的界面，只不过这次我们要选择1：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-49-295-1.png"></p>
<p>稍等片刻，程序安装完成后，会回显给你主控面板的各类信息，如图所示：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-17-572-1.png"></p>
<p>默认的管理员账号密码都是vpsadmin，</p>
<p>我们登录进去首先要输入授权码，授权成功后如图所示：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-23-150-1.png"></p>
<p>接着更改系统默认的管理员密码：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-41-056-1.png"></p>
<p>现在我们就需要把主控和被控进行对接了。首先点击Nodes-Add Node，然后按如下图格式填写：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-18-091-1.png"></p>
<p>注：</p>
<p>1、LV Group这个值，一定要填写和我们之前分区指定的名字一样，我最开始配置LVM的时候，用的卷组名就是vg0，所以这里也要填vg0，如果你不是用的这个名字，就要自行更改。</p>
<p>2、IP地址填你的独立服务器IP地址，也就是被控的IP地址。</p>
<p>3、KEY和密码就是之前你装被控完成后回显给你的那些信息。</p>
<p>被控添加完成后，我们现在来加下IP。首先点击IP Blocks-Add IPv4 Block，然后按如图填写：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-43-160-1.png"></p>
<p>注：</p>
<p>1、在这个配置里面，只需要注意把Gateway（网关）IP填写正确即可，这个网关IP就是之前被控网卡配置文件route-br0里面的IP地址。</p>
<p>2、Node这里一定要勾选上我们刚才新添加的，这里我是HZE36T。</p>
<p>现在我们就可以在这个IP Blocks里面加IP了：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-28-911-1.png"></p>
<p>这里有一个问题，由于Hetzner的IP策略是IP必须绑定一个MAC地址的，所以我们在SolusVM后台配置这里不能用自动生成MAC的模式，一定要把MAC改成Hetzner绑定的那个。</p>
<p>首先我们在Hetzner后台找到你买的IP，后面有一个电脑的小图标，点击它：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-40-703-1.png"></p>
<p>这样Hetzner就会给这个IP绑定一个物理的MAC地址，如图所示：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-04-27-306-1.png"></p>
<p>然后我们就可以把这个MAC地址绑定到我们刚添加的IP上了，首先点击如图所示位置：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-58-513-1.png"></p>
<p>添加一下即可：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-26-913-1.png"></p>
<p>现在我们来准备一些KVM系统模版，SolusVM官方默认是提供一些系统模版的，我们可以到这里查看：</p>
<p><a href="https://tdn.solusvm.com/">https://tdn.solusvm.com/</a></p>
<p>假设这里我要配置一个CentOS7的模版，就在主控服务器内执行如下命令：</p>
<p>wget <a href="http://templates.repo.onapp.com/solusvm/kvm/linux-centos-7-x86/_64-minimal-latest.gz">http://templates.repo.onapp.com/solusvm/kvm/linux-centos-7-x86\_64-minimal-latest.gz</a> -O &#x2F;home&#x2F;solusvm&#x2F;kvm&#x2F;template&#x2F;linux-centos-7-x86_64-minimal-latest.gz</p>
<p>接着回到SolusVM的后台，点击Media-Add KVM Template，按如图所示填写相应的信息：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-22-501-1.png"></p>
<p>注：</p>
<p>1、Generation这个值默认是1，但我们一定要改成2，否则虚拟机无法正常开机。</p>
<p>2、Disk Driver一定要选择virtio。</p>
<p>3、Arch一定要选择x86_64，因为我们的系统模版是基于64位架构制作的。</p>
<p>4、建议开启CPU Model，并把模式改为host-passthrough。我个人是极其讨厌买到手的KVM机器查看CPU信息查不到型号的，所以用这个模式可以直接把母鸡的CPU型号暴露在虚拟机内，虚拟机内可以直接显示母鸡所使用的具体CPU型号。</p>
<p>OK，在添加好了系统模版后，我们还需要把现有的这些系统模版同步到被控中去，因为现在的这些模版文件都还在主控端上。</p>
<p>点击Media-Media Sync，选中我们要同步的模版，然后选中要同步的被控，提交即可：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-47-866-1.png"></p>
<p>稍等片刻，一旦这里显示Completed，即代表模版同步完成：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-28-041-1.png"></p>
<p>现在我们就可以来添加一个虚拟机套餐了，点击Plans-Add KVM Plan，按你自己的需求设置一个合适的套餐：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-53-876-1.png"></p>
<p>注意，下面这个模版一定要选择，否则客户在面板里面找不到可以重装的系统：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-24-947-1.png"></p>
<p>现在我们就可以来尝试开通一台KVM架构的VPS了，需要注意的是，在SolusVM的后台中，开设VPS必须要创建一个用户账户，点击左侧的Add Client，填写相应信息即可：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-54-823.png"></p>
<p>接着点击Virtual ServersAdd-Virtual Server，如图选择KVM架构：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-12-254.png"></p>
<p>选择我们刚创建的套餐：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-37-463.png"></p>
<p>设置主机名、操作系统：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-21-791.png"></p>
<p>VPS就创建好了：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-46-175.png"></p>
<p>稍等片刻儿，用户在前台也能管理VPS了：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-43-138.png"></p>
<p>最后使用Xshell登录我们创建的小鸡内，跑一个测评脚本：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/lala.im_2018-05-05-28-359.png"></p>
<p>Very nice，一切都是如此的美妙~</p>
<p>写在最后：</p>
<p>这套开VPS的方案，可以说就是目前最成熟，也最简单方便的了。然后你们可以自己脑补一下，花点钱买套WHMCS主机皮，或是找人定做一套，然后找人买几个便宜的C段，然后找机房托管几台机器，然后把IP路由一下，最后再按照我这篇文章的操作把SolusVM配置好并与WHMCS对接。你也可以做IDC。</p>
<p>本来不想花时间写这些东西的，但是既然IDC的门槛已经这么低了，那就不如让它再低一点，反正做这行，小打小闹谁都可以做，但是真想做规模的话，没几个能做的出来。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Hetzner</tag>
        <tag>KVM</tag>
        <tag>Solusvm</tag>
      </tags>
  </entry>
  <entry>
    <title>IDC零基础系列——CentOS6安装SolusVM(从系统分区到删库跑路)</title>
    <url>/2018/06/04/idc%E9%9B%B6%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97-centos6%E5%AE%89%E8%A3%85solusvm%E4%BB%8E%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E5%88%B0%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/</url>
    <content><![CDATA[<h2 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一.介绍"></a>一.介绍</h2><p>SolusVM我想应该不用介绍了，目前国内外卖VPS的最常见的面板之一，另外还有Virtualizor以及Xen System，以及比较少见的Promox和ESXi以及非常稀有土豪专用的OnApp。当然还有些号称云主机的用OpenStack或者OpenNebula，这些就不提了。不过我相信大部分人应该都接触过SolusVM，作为OnApp旗下的比较低端的虚拟化产品，以及和WHMCS等财务系统比较好的集成，所以非常多的VPS商家都喜欢用这个。</p>
<p>所以这个系列来稍微介绍下这些IDC比较常用的东西，之前的Proxmox也是这个系列的其实，之后会有啥就看心情了。</p>
<p>由于Solusvm的某些BUG(其实是一堆)，在CentOS7上安装Solusvm会导致出现无法限速，无法重启后自动启动VM的情况，所以一般情况下建议使用CentOS6安装。</p>
<p>但是Solusvm对于系统的分区是有要求的，所以我们从安装CentOS6开始介绍，当然是跳着介绍的，只说需要特别注意的地方，最好的情况是你的独服商家提供了Solusvm的镜像，这样你就不用折腾的，但是有些只提供了OpenVZ Slave(Master)的镜像，所以这种情况下如果你要安装KVM或者Xen的Solusvm Slave就需要自己动手了。</p>
<h2 id="二-安装"><a href="#二-安装" class="headerlink" title="二.安装"></a>二.安装</h2><p>本文分为Master篇和Slave篇，我将在本篇文章中分别介绍</p>
<p>首先看下安装前的注意事项</p>
<ul>
<li>You CANNOT Install a <a href="http://www.senra.me/tag/solusvm/" title="Posts tagged with solusvm">SolusVM</a> Master on a Xen&#x2F;<a href="http://www.senra.me/tag/kvm/" title="Posts tagged with kvm">KVM</a> Slave Directly, you can however install your Master on a Xen <a href="http://www.senra.me/tag/vps/" title="Posts tagged with vps">VPS</a> which is hosted on this slave, it just cant be installed directly onto the slave</li>
</ul>
<p>解释: 这个就是告诉你，你无法直接在一台已经安装了Xen或者KVM的Slave上安装Master，但是你可以在Slave上开的VM中安装Master，当然如果你有别的的空的机器还是建议分开(OVZ可以使用Master with OpenVZ来实现安装在一台机器上)</p>
<ul>
<li>This Script should NEVER be used to upgrade <a href="http://www.senra.me/tag/solusvm/" title="Posts tagged with solusvm">SolusVM</a> to the latest version, doing so will destroy your installation of <a href="http://www.senra.me/tag/solusvm/" title="Posts tagged with solusvm">SolusVM</a></li>
</ul>
<p>解释: 安装脚本无法被用于升级Solusvm，这么做会导致你的已经安装的Solusvm损坏</p>
<ul>
<li>DO NOT use this installer on servers that contain any other control panel (cPanel, Directadmin etc..) Always use a clean install of <a href="http://www.senra.me/tag/centos/" title="Posts tagged with centos">CentOS</a>&#x2F;RHEL&#x2F;Scientific!</li>
</ul>
<p>解释: 不要在存在其他控制面板(比如cPanel、Directadmin或者其他的)，总是使用一个纯净的系统(<a href="http://www.senra.me/tag/centos/" title="Posts tagged with centos">CentOS</a>&#x2F;RHEL&#x2F;Scientific之一)</p>
<p><strong>支持的系统和虚拟化</strong></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15225875040578-1024x283.jpg"></p>
<p>PS. 需知</p>
<p>1. <a href="http://www.senra.me/tag/centos/" title="Posts tagged with centos">CentOS</a>5那列是支持的，但是不进行维护了 2. Virtuzzo的话在我看来是OpenVZ的商业(企业)版，功能更加强大，但是依旧是属于和OpenVZ一样类似于容器，内核依赖于宿主机，无法在Linux宿主机上安装Windows啥的</p>
<p><strong>分区要求</strong></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15225908718731-1024x321.jpg"></p>
<p>翻译一下 虚拟化 分区布局</p>
<ul>
<li><a href="http://www.senra.me/tag/kvm/" title="Posts tagged with kvm">KVM</a></li>
</ul>
<p>1. “&#x2F;“(根目录)需要80GB以上，使用ext4&#x2F;ext3并且选择Primary(主分区)而不是逻辑分区 2. Swap(交换分区)需要4GB以上，以便应对内存不足的情况(VM会占用宿主Swap) 3. 剩下的空间全部分配给LVM(需要注意，只配置Logical Volume Group逻辑卷组，具体的卷会由Solusvm自己创建)，Solusvm推荐使用32MB及以上的PE(Physical Extent, 物理块)大小</p>
<ul>
<li>Xen Source</li>
</ul>
<p>1. 同上(<a href="http://www.senra.me/tag/kvm/" title="Posts tagged with kvm">KVM</a>) 2. Swap(交换分区)不超过4G(VM*不会*占用宿主Swap) 3. 同上(<a href="http://www.senra.me/tag/kvm/" title="Posts tagged with kvm">KVM</a>)</p>
<ul>
<li>OpenVZ</li>
</ul>
<p>1. “&#x2F;“(根目录)需要40GB以上，使用ext4&#x2F;ext3并且选择Primary(主分区)而不是逻辑分区。如果没有创建”&#x2F;vz”目录且独立挂载分区，OpenVZ的模板会存储在”&#x2F;vz&#x2F;template&#x2F;cache”目录，占用”&#x2F;“根目录空间 2. Swap(交换分区)两倍于物理内存(如果物理内存小于2GB，则Swap为物理内存+2GB) 3. “&#x2F;vz”占用剩余的空间，用于存储OpenVZ的模板以及VM的磁盘</p>
<ul>
<li>OpenVZ 7</li>
</ul>
<p>1. 使用 Virtuozzo Linux 2. 同上(OpenVZ) 3. 同上(OpenVZ) 4. 同上(OpenVZ)</p>
<p>安装脚本倒是挺简单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://files.soluslabs.com/install.sh</span><br><span class="line">sh install.sh</span><br></pre></td></tr></table></figure>

<p>这个安装脚本是多合一的，所以不管是Master还是Slave都是通过这个脚本进行安装的，本文章多图，请注意连WIFI(虽然可能来不及了)</p>
<p>首先，请按照上面说明准备好系统环境，大部分的商家提供ISO挂载来安装的功能，建议使用这个而不是系统模板来安装，因为模板安装不太方便调整分区。 Hetzner的话也有类似的功能，这就不需要Rescue模式了，请注意了。我们点击面板上的VNC，然后来进行安装</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15225987901513-1024x419.jpg"></p>
<p>然后会给你一个IP以及密码，使用VNC客户端连接即可，可以下载tightvnc或者realvnc啥的</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15225988351475-1024x314.jpg"></p>
<p>PS.需要注意，这儿给出的IP是带端口的(但其实也不是端口) 比如给你的是192.168.0.1:1，你会很奇怪为啥端口是1对吧，其实是VNC的端口，默认从5900开始，1代表的就是5901，即你实际的地址是192.168.0.1:5901</p>
<p>当然，在开始连接之前我们需要重启服务器进入VNC安装模式(重启前记好端口和密码，重启后会消失的)</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15225994911553-1024x389.jpg"></p>
<p>然后我们就能连上去了</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15225996171090-1024x779.jpg"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15225997021071-1024x754.jpg"></p>
<p>记得选上两块硬盘</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15225996938522-1024x754.jpg"></p>
<p>中间啥时区啊，网络啊，就跳过了，因为没啥特别的</p>
<p>大概是这样的</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15226008619746-1024x754.jpg"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15225999148154-1024x754.jpg"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15226009312616-1024x754.jpg"></p>
<p>然后还是比较常规的安装流程了，我也就不说了</p>
<p>然后进入系统后运行脚本开始安装，首先是脚本环境安装以及部分检测，稍等后进行简单的选择题</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15226021790773-1024x551.jpg"></p>
<p>由于是独服，所以我们这台机器上装KVM的Slave，也就是选4 然后就开始安装了</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15226025381075-1024x847.jpg"></p>
<p>稍等一会儿然后就OK了，最后会给出ID Key以及ID Password，凭借IP以及这两个就能在Master里面添加节点了</p>
<p>然后，按照说明我们还需要配置个Bridge，按照Solusvm的教程其实挺简单的——&gt;传送门 <a href="https://documentation.[solusvm]">https://documentation.[solusvm]</a>(<a href="http://www.senra.me/tag/solusvm/">http://www.senra.me/tag/solusvm/</a> “Posts tagged with solusvm”).com&#x2F;display&#x2F;DOCS&#x2F;<a href="http://www.senra.me/tag/kvm/" title="Posts tagged with kvm">KVM</a>+Bridge+Setup</p>
<p>我这边简单的介绍下</p>
<p>1. 首先安装bridge-utils软件包(虽然文档里让你检查是否已经安装，但是直接装下不就知道了吗…)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install bridge-utils -y</span><br></pre></td></tr></table></figure>

<p>2. 然后查看你现有的网卡配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#你的网卡名字可能有差别，总之选你外网IP的那个</span><br><span class="line">cat /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">#内容大概如下，虽然我Hetzner上安装完不是这样的，不过差不多啦</span><br><span class="line">DEVICE=eth0</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">ONBOOT=yes</span><br><span class="line">HWADDR=MAC地址</span><br><span class="line">IPADDR=公网IP</span><br><span class="line">NETMASK=子网掩码</span><br><span class="line">NETWORK=网络号</span><br><span class="line">GATEWAY=网关</span><br><span class="line">BROADCAST=广播地址</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br></pre></td></tr></table></figure>

<p>3. 备份你的配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /etc/sysconfig/network-scripts/ifcfg-eth0 /etc/sysconfig/network-scripts/backup-ifcfg-eth0</span><br></pre></td></tr></table></figure>

<p>4. 依照你网卡配置创建Bridge的配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-br0</span><br><span class="line">#内容参照如下</span><br><span class="line">DEVICE=br0</span><br><span class="line">TYPE=Bridge</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=公网IP</span><br><span class="line">NETMASK=子网掩码</span><br><span class="line">NETWORK=网络号</span><br><span class="line">GATEWAY=网关</span><br><span class="line">BROADCAST=广播地址</span><br></pre></td></tr></table></figure>

<p><strong>PS.这部分你按照自己的，有啥填啥，没的去服务器面板看看，有些比如广播地址和网络号其实都是不必要的，可选。另外有IPv6地址的自己参照着填，这个需要注意一下，如下</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Hetzner的IPv6在CentOS下大概配置文件需要加这些，最后一行少了不行，倒数第二行不能改</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6ADDR=IPv6地址/64</span><br><span class="line">IPV6_DEFAULTGW=fe80::1</span><br><span class="line">#在Bridge中这儿应该是br0</span><br><span class="line">IPV6_DEFAULTDEV=eth0</span><br></pre></td></tr></table></figure>

<p>5. 修改原网络配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">DEVICE=eth0</span><br><span class="line">HWADDR=MAC地址</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">ONBOOT=yes</span><br><span class="line">BRIDGE=br0</span><br></pre></td></tr></table></figure>

<p>这儿这个IPV6_AUTOCONF如果你上面是手动配IPv6的这个就不要了，有些机房IPv6自动DHCP分配的可以开这个</p>
<p>6. 重启网络</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/network restart</span><br></pre></td></tr></table></figure>

<p>我建议这部分最好慎重一点，特别是如果你的机器没有KVM或者IPMI，改错了可能就得重装了，但是，也可以做个故障修复脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置重启后的计划任务，删除Bridge配置，覆盖原配置文件然后重启网络</span><br><span class="line">echo &quot;@reboot rm -rf /etc/sysconfig/network-scripts/ifcfg-br0 &amp;&amp; \cp /etc/sysconfig/network-scripts/backup-ifcfg-eth0 /etc/sysconfig/network-scripts/ifcfg-eth0 &amp;&amp; /etc/init.d/network restart&quot; &gt;&gt; /var/spool/cron/root</span><br><span class="line">chmod 600 /var/spool/cron/root</span><br><span class="line">service crond reload</span><br><span class="line">service crond restart</span><br></pre></td></tr></table></figure>

<p>在配置这个之后，如果你发现自己搞炸了导致服务器失联，请使用控制面板上的重启来使机器重启恢复，之后你可以再次作死了。</p>
<p><strong>PS. 当然，在你成功配置后记得把计划任务删掉，别问我怎么删</strong></p>
<p>配置完大概是这样的，那个virbr0不用管，是自动添加的一个，如果看官方文档还可以配置一个内网用的Bridge，这个就看你自己需求了</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15226074851207-1024x927.jpg"></p>
<p>然后我们就可以找个地方来装Master了，重复上面的第一步操作，在选择那儿选1</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15226476427909-1024x843.jpg"></p>
<p>然后等着安装完成</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15226479330199-1024x846.jpg"></p>
<p>如果你解析了域名到IP上可以按照它给的命令来签发Let’s Encrypt的证书 我们只做测试，所以这些都不管，直接登录面板，然后添加节点(<strong>更改默认密码啥的就不用我提了吧</strong>)</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15226496572743-1024x531.jpg"></p>
<p>然后我们来添加一份中文翻译(这个是用户界面的翻译，管理员安安心心看英文啦)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/solusvm/language/client/</span><br><span class="line">wget &quot;https://documentation.solusvm.com/download/attachments/7667936/Simplified-Chinese.lang.txt?api=v2&quot; -O Chinese.lang.txt</span><br><span class="line">chown solusvm:solusvm Chinese.lang.txt</span><br></pre></td></tr></table></figure>

<p>然后我们需要添加模板和ISO，KVM的模板我们可以从SolusVM的TDN那儿获取)——&gt;<a href="https://tdn.solusvm.com/">传送门</a></p>
<p>模板的获取命令和参数都有，举个栗子，我们要添加CentOS6的模板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">wget w http://templates.repo.onapp.com/solusvm/kvm/linux-centos-6-x86_64-minimal-latest.gz -O /home/solusvm/kvm/template/linux-centos-6-x86_64-minimal-latest.gz</span><br></pre></td></tr></table></figure>

<p>然后我们需要添加模板和ISO，KVM的模板我们可以从SolusVM的TDN那儿获取)——&gt;<a href="https://tdn.solusvm.com/">传送门</a></p>
<p>模板的获取命令和参数都有，举个栗子，我们要添加CentOS6的模板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://templates.repo.onapp.com/solusvm/kvm/linux-centos-6-x86_64-minimal-latest.gz -O /home/solusvm/kvm/template/linux-centos-6-x86_64-minimal-latest.gz</span><br></pre></td></tr></table></figure>

<p>然后照着信息添加</p>
<p>接着添加完后模板其实是在Master上的，我们需要同步到节点上</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15226515168007-1024x517.jpg"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15226513162387-1024x531.jpg"></p>
<p>先Queue然后Active，之后稍等变成Complete就OK了</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15226514721611-1024x531.jpg"></p>
<p>然后去添加一个Plan</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15226516182476-1024x531.jpg"></p>
<p>然后加下IP</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15226520011686-1024x531.jpg"></p>
<p>这是先加Block然后加IP的，像Hetzner和OVH这种机房IP绑定MAC的也必须给IP指定一个MAC，不能用默认的auto随机生成</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15226522435570-1024x531.jpg"></p>
<p>然后就可以开机器了(开机器必须要创建一个用户，左侧Add Client了解一下)</p>
<p>然后就OK了</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15226524560732-1024x531.jpg"></p>
<p>然后在用户面板也能看到啦</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15226524560732-1-1024x531.jpg"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15226572153649-1024x531.jpg"></p>
<h2 id="三-优化"><a href="#三-优化" class="headerlink" title="三.优化"></a>三.优化</h2><p>默认情况下，我们的cpu是kvm64模式，这个时候在VM内显示的CPU型号是QEMU开头的，虽然这个是为了集群情况下能够方便迁移，不因为CPU型号不同导致某些故障，但是这种情况下你的宿主机CPU指令集不能完全提供给VM，会导致性能损耗。</p>
<p>那么怎么改呢，很简单，直接后台修改参数，然后保存重启VM就行</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15226573802901-1024x767.jpg"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15226574174092-1024x531.jpg"></p>
<p>如果需要后续创建的机器都是这样的，可以直接修改模板里面的CPU Model</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15226575530526-1024x531.jpg"></p>
<p>重启之后的效果</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/06/15226581630155-1024x767.jpg"></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>KVM</tag>
        <tag>Solusvm</tag>
      </tags>
  </entry>
  <entry>
    <title>hetzner使用proxmox或者solusvm开Nat kvm独立ipv6桥接网卡设置</title>
    <url>/2018/10/18/hetzner%E4%BD%BF%E7%94%A8proxmox%E6%88%96%E8%80%85solusvm%E5%BC%80nat-kvm%E7%8B%AC%E7%AB%8Bipv6%E6%A1%A5%E6%8E%A5%E7%BD%91%E5%8D%A1%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>结果谷歌一系列的查找资料，最后还是到了hetzner的wiki找到了解决办法。</p>
<h3 id="1-proxmox桥接网卡配置："><a href="#1-proxmox桥接网卡配置：" class="headerlink" title="1.proxmox桥接网卡配置："></a>1.proxmox桥接网卡配置：</h3><p># &#x2F;etc&#x2F;network&#x2F;interfaces<br>### Hetzner Online GmbH - installimage<br># Loopback device:<br>auto lo<br>iface lo inet loopback<br>#<br># device: eth0<br>auto  eth0<br>iface eth0 inet static<br>       address   <Main IP><br>       netmask   255.255.255.255<br>       pointopoint   <Gateway><br>       gateway   <Gateway><br>#<br>iface eth0 inet6 static<br>       address   <Address from the IPv6 Subnet> #eg: 2001:db8::2<br>       netmask   128<br>       gateway   fe80::1<br>       up sysctl -p<br># for single IPs<br>auto vmbr0<br>iface vmbr0 inet static<br>        address  10.0.1.1<br>        netmask  255.255.255.0<br>        bridge_ports none<br>        bridge_stp off<br>        bridge_fd 0<br>#<br>iface vmbr0 inet6 static<br>       address   <Address from the IPv6 Subnet> #eg: 2001:db8::2<br>       netmask   64</p>
<p>关于Nat链接网络请使用iptables实现。</p>
<h3 id="2-solusvm下网卡配置："><a href="#2-solusvm下网卡配置：" class="headerlink" title="2.solusvm下网卡配置："></a>2.solusvm下网卡配置：</h3><p>主网卡中默认配置请不要修改，仅需将IPV6ADDR的&#x2F;64换为&#x2F;128 例如：IPV6ADDR&#x3D; 2001:db8::2&#x2F;128 然后将桥接网卡更改为：</p>
<p>DEVICE=br0<br>ONBOOT=yes<br>TYPE=Bridge<br>BOOTPROTO=static<br>IPADDR=10.0.1.1<br>NETMASK=255.255.255.0<br>IPV6ADDR=2001:db8::2&#x2F;64</p>
<p>关于联网与端口映射请使用iptables</p>
<h3 id="3-关于虚拟机（kvm）的配置："><a href="#3-关于虚拟机（kvm）的配置：" class="headerlink" title="3.关于虚拟机（kvm）的配置："></a>3.关于虚拟机（kvm）的配置：</h3><p>这里拿2001:db8::此ipv6做示范 Debian or Ubuntu：</p>
<p>iface eth0 inet6 static<br>       address    2001:db8::f001<br>       netmask   64<br>       gateway   2001:db8::2</p>
<p>Centos:</p>
<p>IPV6INIT=yes<br>IPV6ADDR=2001:db8::f001&#x2F;64<br>IPV6_DEFAULTGW=2001:db8::2</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>IPV6</tag>
        <tag>Hetzner</tag>
        <tag>KVM</tag>
        <tag>Solusvm</tag>
        <tag>nat</tag>
        <tag>proxmox</tag>
      </tags>
  </entry>
  <entry>
    <title>IPV4及IPV6的CIDR地址具体IP数</title>
    <url>/2018/05/04/ipv4%E5%8F%8Aipv6%E7%9A%84cidr%E5%9C%B0%E5%9D%80%E5%85%B7%E4%BD%93ip%E6%95%B0/</url>
    <content><![CDATA[<p>IPV4： &#x2F;32(1) &#x2F;31(2) &#x2F;30(4) &#x2F;29(8) &#x2F;28(16) &#x2F;27(32) &#x2F;26(64) &#x2F;25(128) &#x2F;24(256) &#x2F;23(512) &#x2F;22(1024) &#x2F;21(2048) &#x2F;20(4096) &#x2F;19(8192) &#x2F;18(16384) &#x2F;17(32768) &#x2F;16(65536) &#x2F;15(131072) &#x2F;14(262144) &#x2F;13(524288) &#x2F;12(1048576) &#x2F;11(2097152) &#x2F;10(4194304) &#x2F;9(8388608) &#x2F;8(16777216)</p>
<p>IPV6： ::&#x2F;128(1) ::&#x2F;127(2) ::&#x2F;126(4) ::&#x2F;125(8) ::&#x2F;124(16) ::&#x2F;123(32) ::&#x2F;122(64) ::&#x2F;121(128) ::&#x2F;120(256) ::&#x2F;119(512) ::&#x2F;118(1024) ::&#x2F;117(2048) ::&#x2F;116(4096) ::&#x2F;115(8192) ::&#x2F;114(16384) ::&#x2F;113(32768) ::&#x2F;112(65536) ::&#x2F;111(131072) ::&#x2F;110(262144) ::&#x2F;109(524288) ::&#x2F;108(1048576) ::&#x2F;107(2097152) ::&#x2F;106(4194304) ::&#x2F;105(8388608) ::&#x2F;104(16777216) ::&#x2F;103(33554432) ::&#x2F;102(67108864) ::&#x2F;101(134217728) ::&#x2F;100(268435456) ::&#x2F;99(536870912) ::&#x2F;98(1073741824) ::&#x2F;97(2147483648) ::&#x2F;96(4294967296) ::&#x2F;95(8589934592) ::&#x2F;94(17179869184) ::&#x2F;93(34359738368) ::&#x2F;92(68719476736) ::&#x2F;91(137438953472) ::&#x2F;90(274877906944) ::&#x2F;89(549755813888) ::&#x2F;88(1099511627776) ::&#x2F;87(2199023255552) ::&#x2F;86(4398046511104) ::&#x2F;85(8796093022208) ::&#x2F;84(17592186044416) ::&#x2F;83(35184372088832) ::&#x2F;82(70368744177664) ::&#x2F;81(140737488355328) ::&#x2F;80(281474976710656) ::&#x2F;79(562949953421312) ::&#x2F;78(1125899906842624) ::&#x2F;77(2251799813685248) ::&#x2F;76(4503599627370496) ::&#x2F;75(9007199254740992) ::&#x2F;74(18014398509481984) ::&#x2F;73(36028797018963968) ::&#x2F;72(72057594037927936) ::&#x2F;71(144115188075855872) ::&#x2F;70(288230376151711744) ::&#x2F;69(576460752303423488) ::&#x2F;68(1152921504606846976) ::&#x2F;67(2305843009213693952) ::&#x2F;66(4611686018427387904) ::&#x2F;65(9.2233720368548E+18) ::&#x2F;64(1.844674407371E+19) ::&#x2F;63(3.6893488147419E+19) ::&#x2F;62(7.3786976294838E+19) ::&#x2F;61(1.4757395258968E+20) ::&#x2F;60(2.9514790517935E+20) ::&#x2F;59(5.9029581035871E+20) ::&#x2F;58(1.1805916207174E+21) ::&#x2F;57(2.3611832414348E+21) ::&#x2F;56(4.7223664828696E+21) ::&#x2F;55(9.4447329657393E+21) ::&#x2F;54(1.8889465931479E+22) ::&#x2F;53(3.7778931862957E+22) ::&#x2F;52(7.5557863725914E+22) ::&#x2F;51(1.5111572745183E+23) ::&#x2F;50(3.0223145490366E+23) ::&#x2F;49(6.0446290980731E+23) ::&#x2F;48(1.2089258196146E+24) ::&#x2F;47(2.4178516392293E+24) ::&#x2F;46(4.8357032784585E+24) ::&#x2F;45(9.671406556917E+24) ::&#x2F;44(1.9342813113834E+25) ::&#x2F;43(3.8685626227668E+25) ::&#x2F;42(7.7371252455336E+25) ::&#x2F;41(1.5474250491067E+26) ::&#x2F;40(3.0948500982135E+26) ::&#x2F;39(6.1897001964269E+26) ::&#x2F;38(1.2379400392854E+27) ::&#x2F;37(2.4758800785708E+27) ::&#x2F;36(4.9517601571415E+27) ::&#x2F;35(9.903520314283E+27) ::&#x2F;34(1.9807040628566E+28) ::&#x2F;33(3.9614081257132E+28) ::&#x2F;32(7.9228162514264E+28) ::&#x2F;31(1.5845632502853E+29) ::&#x2F;30(3.1691265005706E+29) ::&#x2F;29(6.3382530011411E+29) ::&#x2F;28(1.2676506002282E+30) ::&#x2F;27(2.5353012004565E+30) ::&#x2F;26(5.0706024009129E+30) ::&#x2F;25(1.0141204801826E+31) ::&#x2F;24(2.0282409603652E+31) ::&#x2F;23(4.0564819207303E+31) ::&#x2F;22(8.1129638414607E+31) ::&#x2F;21(1.6225927682921E+32) ::&#x2F;20(3.2451855365843E+32)</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>IPV6</tag>
        <tag>CIDR地址</tag>
        <tag>IPV4</tag>
        <tag>IP数</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo如何部署到个人云服务器上</title>
    <url>/2020/06/01/hexo%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2%E5%88%B0%E4%B8%AA%E4%BA%BA%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/</url>
    <content><![CDATA[<h2 id="1-安装nginx"><a href="#1-安装nginx" class="headerlink" title="1. 安装nginx"></a>1. 安装nginx</h2><p>安装ngin需要相关的依赖库，我们先进行库的安装。</p>
<h4 id="1-1-安装gcc-gcc-c"><a href="#1-1-安装gcc-gcc-c" class="headerlink" title="1.1 安装gcc gcc-c++"></a>1.1 安装gcc gcc-c++</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y gcc gcc-c++</span><br></pre></td></tr></table></figure>

<h4 id="1-2-安装PCRE库"><a href="#1-2-安装PCRE库" class="headerlink" title="1.2 安装PCRE库"></a>1.2 安装PCRE库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line"></span><br><span class="line">wget http://downloads.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz</span><br><span class="line"></span><br><span class="line">tar -xvf pcre-8.37.tar.gz</span><br><span class="line"></span><br><span class="line">cd pcre-8.37</span><br><span class="line"></span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> </p>
<h4 id="1-3-安装-openssl-、zlib-、-gcc-依赖"><a href="#1-3-安装-openssl-、zlib-、-gcc-依赖" class="headerlink" title="1.3 安装 openssl 、zlib 、 gcc 依赖"></a>1.3 安装 openssl 、zlib 、 gcc 依赖</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel</span><br></pre></td></tr></table></figure>

<h4 id="1-4-安装nginx"><a href="#1-4-安装nginx" class="headerlink" title="1.4 安装nginx"></a>1.4 安装nginx</h4><p><strong>安装nginx一定要在local文件夹下</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line"></span><br><span class="line">wget http://nginx.org/download/nginx-1.17.9.tar.gz</span><br><span class="line"></span><br><span class="line">tar -xvf nginx-1.17.9.tar.gz</span><br><span class="line"></span><br><span class="line">cd nginx-1.17.9</span><br><span class="line"></span><br><span class="line">./configure</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> </p>
<p><strong>修改配置文件server 80 端口下的root项 为&#x2F;home&#x2F;www&#x2F;website;</strong></p>
<p><img src="/2020/06/tMb6l8.png" alt="tMb6l8.png"></p>
<p>放在其他端口也可以的，比如我放的是8080端口，到后面新的域名备案了后我也会放在80端口。</p>
<h2 id="2-安装Git以及Node-js"><a href="#2-安装Git以及Node-js" class="headerlink" title="2. 安装Git以及Node.js"></a>2. 安装Git以及Node.js</h2><h4 id="2-1-安装Node-js"><a href="#2-1-安装Node-js" class="headerlink" title="2.1 安装Node.js"></a>2.1 安装Node.js</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sL https://rpm.nodesource.com/setup_10.x  bash -yum install -y nodejs</span><br></pre></td></tr></table></figure>

<p>查看是否成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以显示版本号即为成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM_0_6_centos ~]# node -v</span><br><span class="line">v10.20.1</span><br><span class="line">[root@VM_0_6_centos ~]# npm -v</span><br><span class="line">6.14.4</span><br></pre></td></tr></table></figure>

<h4 id="2-2-安装Git及配置仓库"><a href="#2-2-安装Git及配置仓库" class="headerlink" title="2.2 安装Git及配置仓库"></a>2.2 安装Git及配置仓库</h4><p>安装git及新建git用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install git</span><br><span class="line"></span><br><span class="line">adduser git</span><br><span class="line"></span><br><span class="line">chmod 740 /etc/sudoers</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> </p>
<p>在这个位置添加git ALL&#x3D;(ALL) ALL vim指令执行之后按 <strong>i</strong> 进入输入模式 编辑完成之后按一下Esc 然后输入:wq即可退出。</p>
<p><img src="/2020/06/tMbySf.png" alt="tMbySf.png"></p>
<p>执行以下指令更改文件夹权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 400 /etc/sudoers</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>切换git用户并且建立密钥</strong>（下面第一步su git就是在切换git用户，这一步很重要）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su git</span><br><span class="line"></span><br><span class="line">cd ~ ::到达git账户的根目录</span><br><span class="line"></span><br><span class="line">mkdir .ssh ::新建.ssh文件</span><br><span class="line"></span><br><span class="line">cd .ssh ::进入.ssh文件</span><br><span class="line"></span><br><span class="line">vim authorized_keys ::这里需要找到你的C:\Users\MEILINFENG\.ssh的id_rsa.pub文件复制粘贴过来</span><br><span class="line"></span><br><span class="line">chmod 600 ~/.ssh/authorized_keys ::这里修改相关权限</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> </p>
<p>创建git仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line"></span><br><span class="line">git init --bare blog.git</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> </p>
<p>输入</p>
<p><code>git --work-tree=/home/www/website --git-dir=/home/git/blog.git checkout -f</code></p>
<p>保存退出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x ~/blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<p><em>以上指令都需要在su git 之后执行 如果中途断开重新连接过，需要重新执行 su git指令 进入git账户。</em></p>
<p>新建&#x2F;home&#x2F;www&#x2F;website文件夹 在root用户下执行，所限先su root切换为root账户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su root</span><br><span class="line"></span><br><span class="line">输入密码</span><br><span class="line"></span><br><span class="line">cd /homem</span><br><span class="line"></span><br><span class="line">kdir www</span><br><span class="line"></span><br><span class="line">cd www</span><br><span class="line"></span><br><span class="line">mkdir website</span><br><span class="line"></span><br><span class="line">修改文件夹权限</span><br><span class="line">chmod 777 /home/www/website</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> </p>
<p>在本地电脑输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -v git@服务器的公网的ip</span><br></pre></td></tr></table></figure>

<p>返回如下则成功。 <img src="/2020/06/tMbgOg.png" alt="tMbgOg.png"></p>
<p>修改本地配置文件。&#x2F;config.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: git@你的公网IP地址:/home/git/blog.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure>

<p>repo: git@这里改为服务器公网IP:&#x2F;home&#x2F;git&#x2F;blog.git</p>
<p><strong>写入启动脚本</strong></p>
<p>在&#x2F;etc&#x2F;init.d&#x2F;路径下添加脚本文件，名称为nginx，内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#Startup script for the nginx Web Server</span><br><span class="line">#chkconfig: 2345 85 15</span><br><span class="line">nginx=/usr/local/nginx/sbin/nginx</span><br><span class="line">conf=/usr/local/nginx/conf/nginx.conf</span><br><span class="line">case $1 in</span><br><span class="line">start)</span><br><span class="line">echo -n &quot;Starting Nginx&quot;</span><br><span class="line">$nginx -c $conf</span><br><span class="line">echo &quot; done.&quot;</span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">echo -n &quot;Stopping Nginx&quot;</span><br><span class="line">killall -9 nginx</span><br><span class="line">echo &quot; done.&quot;</span><br><span class="line">;;</span><br><span class="line">test)</span><br><span class="line">$nginx -t -c $conf</span><br><span class="line">echo &quot;Success.&quot;</span><br><span class="line">;;</span><br><span class="line">reload)</span><br><span class="line">echo -n &quot;Reloading Nginx&quot;</span><br><span class="line">ps auxww  grep nginx  grep master  awk &#x27;&#123;print $2&#125;&#x27;  xargs kill -HUP</span><br><span class="line">echo &quot; done.&quot;</span><br><span class="line">;;</span><br><span class="line">restart)</span><br><span class="line">$nginx -s reload</span><br><span class="line">echo &quot;reload done.&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;Usage: $0 &#123;startrestartreloadstoptestshow&#125;&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<p> </p>
<p>然后执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x nginx</span><br></pre></td></tr></table></figure>

<p>控制指令(两步指令，旨在重启nginx，因为你修改了nginx文件，如果不修改，它会继续延用之前的nginx文件内容。)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> </p>
<p>大家可以对比一下，</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>IPv4环境下，如何使用仅有IPv6的VPS，并使其可访问IPv4资源</title>
    <url>/2021/02/10/ipv4%E7%8E%AF%E5%A2%83%E4%B8%8B%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E4%BB%85%E6%9C%89ipv6%E7%9A%84vps%EF%BC%8C%E5%B9%B6%E4%BD%BF%E5%85%B6%E5%8F%AF%E8%AE%BF%E9%97%AEipv4%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p><strong>一、IPv4下，连接SSH</strong></p>
<p>建议使用Cloudflare的Spectrum。Spectrum每个月只有5G流量，使用SSH足够了。</p>
<p><img src="/2021/02/Spectrum.jpg"></p>
<p>如果有ION cloud的免费wordpress的话，使用Cloudflare Pro Plesk，可免费获取。</p>
<p>DNS解析，建议cname，内容为 ssh域名.cdn.cloudflare.net</p>
<p>然后，使用 ssh域名 ，端口 22，即可连接。</p>
<p><strong>二、更改VPS的DNS，以便访问IPv4资源</strong></p>
<p>echo -e “nameserver 2001:67c:2b0::4\nnameserver 2001:67c:2b0::6” &gt; &#x2F;etc&#x2F;resolv.conf</p>
<p>升级软件</p>
<p>yum -y update</p>
<p><strong>三、使用宝塔建站，并使用Cloudflare加速</strong></p>
<p>1、安装宝塔5.9.1本地版</p>
<p>yum install -y wget &amp;&amp; wget –no-check-certificate -O install.sh <a href="https://raw.githubusercontent.com/wangzhe12588/bt59happy/master/install-5.9-c.sh">https://raw.githubusercontent.com/wangzhe12588/bt59happy/master/install-5.9-c.sh</a> &amp;&amp; sh install.sh</p>
<p>修改后台访问用域名，端口改为CloudFlare支持的端口。</p>
<p>CloudFlare支持的端口为：</p>
<p>HTTP ports supported by Cloudflare:<br>80<br>8080<br>8880<br>2052<br>2082<br>2086<br>2095<br>HTTPS ports supported by Cloudflare:<br>443<br>2053<br>2083<br>2087<br>2096<br>8443</p>
<p>2、使用Cloudflare加速</p>
<p>建议笨牛网等，回源用VPS的IPv6，DNS解析可设置为自选高速IP。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Cloudflare</tag>
      </tags>
  </entry>
  <entry>
    <title>ImgURL一款简单纯粹的图床程序</title>
    <url>/2018/01/30/imgurl%E4%B8%80%E6%AC%BE%E7%AE%80%E5%8D%95%E7%BA%AF%E7%B2%B9%E7%9A%84%E5%9B%BE%E5%BA%8A%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>ImgURL是继XZ Pic之后xiaoz的另一款图床程序，依然保持以往简洁风格，在XZ Pic基础上完善了UI，增加了部分实用的功能。ImgURL初衷并不是提供图片存储，而是让图床多一个选择，我坚信图片放在自己手中更安全。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/01/snipaste_20171224_103245.png"></p>
<h3 id="功能与特色"><a href="#功能与特色" class="headerlink" title="功能与特色"></a>功能与特色</h3><ul>
<li>拽拖上传，自动生成连接，一键复制。</li>
<li>图片预览与探索</li>
<li>基本的图片管理</li>
<li>支持TinyPNG图片压缩</li>
</ul>
<h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><blockquote>
<ul>
<li>PHP &gt;&#x3D; 5.6</li>
<li>需要exif函数支持</li>
</ul>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>访问：<a href="https://github.com/helloxz/imgurl/archive/master.zip">master.zip</a>下载最新版ImgURL程序，放到您的站点根目录并解压。修改一下<code>config.php</code>设置你自己的域名和密码，访问<code>http(s)://domain.com/</code>即可，就是这么简单。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/01/snipaste_20171224_104622.png"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ImgURL使用了BootStrap框架，响应式设计，即使不通设备访问也可以正常上传图片。ImgURL仅支持本地上传，如果您需要将图片上传到七牛之类的，可以看看我之前开发的<a href="https://github.com/helloxz/xz-pic" title="XZ Pic">XZ Pic</a></p>
<blockquote>
<ul>
<li>Demo：<a href="https://imgurl.org/" title="ImgURL官网">https://imgurl.org</a></li>
<li>帮助文档：<a href="https://wiki.xiaoz.me/docs/imgurl/" title="ImgURL">ImgURL使用说明</a></li>
<li>源码：<a href="https://github.com/helloxz/imgurl" title="ImgURL">https://github.com/helloxz/imgurl</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>imgurl</tag>
        <tag>XZ Pic</tag>
        <tag>免费图床</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>Let’s Encrypt免费泛域名证书申请教程步骤</title>
    <url>/2018/11/07/lets-encrypt%E5%85%8D%E8%B4%B9%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E6%95%99%E7%A8%8B%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<p>今天得到Let’s Encrypt开放泛域名证书后，就发布了<a href="https://www.xxorg.com/archives/4866">Let’s Encrypt开放申请免费通配符 SSL 证书&#x2F;野卡</a>，但是没有亲自体验一下，现在闲来无事，体验一下期待已久的免费泛域名SSL证书，也记录一下申请安装步骤，需要注意Let’s Encrypt的泛域名证书申请需要通过ACME V2来申请，首先先看一下安装Let’s Encrypt免费泛域名证书前后的效果对比：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/11/yuan.jpg"><img src="https://www.jarods.org/wp-content/uploads/2018/11/5.jpg"></p>
<h2 id="Let’s-Encrypt免费泛域名证书安装步骤如下："><a href="#Let’s-Encrypt免费泛域名证书安装步骤如下：" class="headerlink" title="Let’s Encrypt免费泛域名证书安装步骤如下："></a>Let’s Encrypt免费泛域名证书安装步骤如下：</h2><p>一、首先下载<a href="https://www.xxorg.com/archives/tag/acme-sh">ACME.SH</a>，以下四条命令任选一条即可，醒醒用的是第四条。</p>
<p>curl <a href="https://get.[acme.sh](https://www.xxorg.com/archives/tag/acme-sh)">https://get.[acme.sh](https://www.xxorg.com/archives/tag/acme-sh)</a>  sh<br>wget -O - <a href="https://get.acme.sh/">https://get.acme.sh</a>  sh<br>curl <a href="https://raw.githubusercontent.com/Neilpang/acme.sh/master/acme.sh">https://raw.githubusercontent.com/Neilpang/acme.sh/master/acme.sh</a>  INSTALLONLINE=1 sh<br>wget -O - <a href="https://raw.githubusercontent.com/Neilpang/acme.sh/master/acme.sh">https://raw.githubusercontent.com/Neilpang/acme.sh/master/acme.sh</a>  INSTALLONLINE=1 sh</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/11/1-1024x665.jpg" alt="Let’s Encrypt免费泛域名证书申请教程步骤"></p>
<p>二、申请Let’s Encrypt免费泛域名证书的第一步获取验证DNS所需要的TXT记录,下面命令中两个“-d”建议先输入泛域名，这样在证书里可以显示*.xxorg.com这样的泛域名，显得比较吊一些。</p>
<p>cd &#x2F;.acme.sh .&#x2F;acme.sh --issue -d *.xxorg.com -d xxorg.com --dns</p>
<p>运行后结果如下：</p>
<p>[root@ser-wh2 .acme.sh]# .&#x2F;acme.sh –issue –dns -d *.xxorg.com -d xxorg.com<br>[Wed Mar 14 19:52:04 CST 2018] Registering account [Wed Mar 14 19:56:17 CST 2018] Registered<br>[Wed Mar 14 19:56:17 CST 2018] ACCOUNT_THUMBPRINT=‘oK***Eo******************‘<br>[Wed Mar 14 19:56:17 CST 2018] Creating domain key [Wed Mar 14 19:56:17 CST 2018] The domain key is here: &#x2F;root&#x2F;.acme.sh&#x2F;*.xxorg.com&#x2F;*.xxorg.com.key [Wed Mar 14 19:56:17 CST 2018] Multi domain=‘DNS:*.xxorg.com,DNS:xxorg.com’<br>[Wed Mar 14 19:56:17 CST 2018] Getting domain auth token for each domain [Wed Mar 14 19:56:26 CST 2018] Getting webroot for domain=‘*.xxorg.com’<br>[Wed Mar 14 19:56:26 CST 2018] Getting webroot for domain=‘xxorg.com’<br>[Wed Mar 14 19:56:26 CST 2018] Add the following TXT record:<br>[Wed Mar 14 19:56:26 CST 2018] Domain: ‘_acme-challenge.xxorg.com’<br>[Wed Mar 14 19:56:26 CST 2018] TXT value: ‘9abm****-oUf8l****Kc****-hHw*******r8’<br>[Wed Mar 14 19:56:26 CST 2018] Please be aware that you prepend _acme-challenge. before your domain [Wed Mar 14 19:56:26 CST 2018] so the resulting subdomain will be: _acme-challenge.xxorg.com [Wed Mar 14 19:56:26 CST 2018] Add the following TXT record:<br>[Wed Mar 14 19:56:26 CST 2018] Domain: ‘_acme-challenge.xxorg.com’<br>[Wed Mar 14 19:56:26 CST 2018] TXT value: ‘3C*******2**************Dj8’<br>[Wed Mar 14 19:56:26 CST 2018] Please be aware that you prepend _acme-challenge. before your domain [Wed Mar 14 19:56:26 CST 2018] so the resulting subdomain will be: _acme-challenge.xxorg.com [Wed Mar 14 19:56:26 CST 2018] Please add the TXT records to the domains, and retry again.<br>[Wed Mar 14 19:56:26 CST 2018] Please add ‘–debug’ or ‘–log’ to check more details.<br>[Wed Mar 14 19:56:26 CST 2018] See: <a href="https://github.com/Neilpang/acme.sh/wiki/How/-to/-debug/-acme.sh">https://github.com/Neilpang/acme.sh/wiki/How\-to\-debug\-acme.sh</a> [root@ser-wh2 .acme.sh]#</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/11/2-1024x512.jpg" alt="Let’s Encrypt免费泛域名证书申请教程步骤"></p>
<p>三、到域名DNS解析服务商处添加域名的TXT解析。 上面的命令运行后可能要等上一会，然后会出现下图的结果，其中绿色部分就是需要做TXT记录的主机头和TXT的解析值，因为上面第二里面两个“-d”，所以这里有两个解析值，把两个TXT都做了解析。 <img src="https://www.jarods.org/wp-content/uploads/2018/11/3.jpg"></p>
<p>四、获取Let’s Encrypt免费泛域名证书。等DSN解析生效后，运行以下命令：</p>
<p>.&#x2F;acme.sh --renew -d *.xxorg.com -d xxorg.com</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/11/4.jpg"></p>
<p>五、Let’s Encrypt免费泛域名证书的申请已经结束了。</p>
<p>在&#x2F;.acme.sh目录下会产生“*.xxorg.com”的文件夹，里面就是Let’s Encrypt的免费泛域名证书，我们只需要两个文件就可以了：fullchain.cer是完整的证书，包括了CA根证书，key是密钥，安装证书时需要用到。把证书添加到HTTP里面的方法这里就不啰嗦了。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/11/6.jpg"></p>
<p>六、关于Let’s Encrypt免费泛域名证书续签</p>
<p>安装了ACME后，它会添加一个自动任务到你服务器的Cron里，每天都会检查你的Let’s Encrypt免费泛域名证书是否快要过期，ACME会自动帮你续签。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Let’s Encrypt</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux VPS一键屏蔽指定国家所有的IP访问</title>
    <url>/2018/06/16/linux-vps%E4%B8%80%E9%94%AE%E5%B1%8F%E8%94%BD%E6%8C%87%E5%AE%9A%E5%9B%BD%E5%AE%B6%E6%89%80%E6%9C%89%E7%9A%84ip%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<p>本文转载自<a href="https://www.moerats.com/archives/585/">Rat’s Blog:Linux VPS一键屏蔽指定国家所有的IP访问</a></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>对于屏蔽指定国家所有的IP的手动教程刚讲了，查看：<a href="https://www.moerats.com/archives/584/">Linux VPS使用ipset快速屏蔽指定国家的IP访问</a>，虽然步骤很简单，但为了更白的小白，友链博主YKilin大佬写出了一键脚本，本人就做了下小小的修改，简化了下步骤，这里分享下。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>本脚本适用于CentOS、Debian、Ubuntu等常用系统。</p>
<h3 id="1、下载脚本"><a href="#1、下载脚本" class="headerlink" title="1、下载脚本"></a>1、下载脚本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://www.moerats.com/usr/shell/block-ips.sh</span><br></pre></td></tr></table></figure>

<h3 id="2、使用方法"><a href="#2、使用方法" class="headerlink" title="2、使用方法"></a>2、使用方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#这里以中国为例，如果想屏蔽其它国家的，请自行修改最后的代码参数</span><br><span class="line">#添加规则</span><br><span class="line">bash block-ips.sh -a cn</span><br><span class="line"></span><br><span class="line">#开始屏蔽</span><br><span class="line">bash block-ips.sh -b cn</span><br><span class="line"></span><br><span class="line">#被屏蔽的国家列表</span><br><span class="line">bash block-ips.sh -l</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> </p>
<p>其它国家代码查看：<a href="http://www.ipdeny.com/ipblocks">点击进入</a>。记住后面的参数均为小写字母。比如JAPAN (JP)，我们就在后面用jp这个参数。</p>
<p>文章参考：<a href="https://lolico.moe/projects/block-countries-ips.html">Block IPs from countries</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>屏蔽</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux VPS一键更换软件源脚本</title>
    <url>/2018/11/05/linux-vps%E4%B8%80%E9%94%AE%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有时候会遇到<code>Linux</code>的源更新速度非常的缓慢，特别是在国内使用默认的源，因为国内的网络环境，经常会出现无法更新，更新缓慢的情况。在这种情况下，更换一个更适合或者说更近，更快的软件源，会为你的<code>Linux</code>安装更新操作更加的流畅和顺利。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>系统要求：</strong><code>CentOS 5+</code>、<code>Ubuntu 14.04+</code>、<code>Debian 7+</code></p>
<p>使用命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#下载脚本</span><br><span class="line">wget  git.io/superupdate.sh</span><br><span class="line">#运行脚本</span><br><span class="line">bash superupdate.sh</span><br></pre></td></tr></table></figure>

<p>如果第一步你出现错误或执行后无任何输出，请检查是否安装<code>wget</code>和<code>ca-certificates</code>，使用命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Debian、Ubuntu</span><br><span class="line">apt-get install -y wget &amp;&amp; apt-get install -y ca-certificates</span><br><span class="line">#CentOS</span><br><span class="line">yum install -y wget &amp;&amp; yum install -y ca-certificates</span><br></pre></td></tr></table></figure>

<p>对于<code>Debian</code>默认换源为<code>Fastly CDN</code>的<code>mirror</code>这个源有<code>Fastly</code>的加持对境外主机都有不错的速度。对于<code>Ubuntu</code>和 <code>CentOS</code>系统都默认换为阿里云的<code>mirror</code>，这个源有阿里云全球<code>CDN</code>的加持，全球都有不错的速度。</p>
<p>对于<code>Debian</code>系统还设置了四套其他的源，阿里云，<code>CloudFront CDN</code>，网易<code>163</code>，中科大的源，请根据需要使用参数一键设置如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash superupdate.sh cn</span><br><span class="line">bash superupdate.sh 163</span><br><span class="line">bash superupdate.sh aliyun</span><br><span class="line">bash superupdate.sh aws</span><br></pre></td></tr></table></figure>

<p>如果配置的文件不满意，一键还原</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash superupdate.sh restore</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux VPS一键添加/删除Swap虚拟内存</title>
    <url>/2018/10/24/linux-vps%E4%B8%80%E9%94%AE%E6%B7%BB%E5%8A%A0-%E5%88%A0%E9%99%A4swap%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</url>
    <content><![CDATA[<p><strong>说明</strong>：很多人的VPS服务器由于内存太小，会导致很多进程被杀掉，这时候就需要我们添加Swap虚拟内存了，这里就整了个一键脚本方便懒人或小白使用。</p>
<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>提示：脚本不支持<code>OpenVZ</code>架构，安装会自动退出。</p>
<p><strong>运行命令：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://yun.939.me/sh/swap.sh &amp;&amp; bash swap.sh</span><br></pre></td></tr></table></figure>

<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/16768230.png" alt="swap_add.png"></p>
<p>本文搬运自<a href="https://www.moerats.com/archives/722/">https://www.moerats.com/archives/722/</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>SWAP</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 常用命令简单介绍 —— 基础篇</title>
    <url>/2017/07/09/linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    <content><![CDATA[<p>很多新手在接触Linux的初期，都会因为习惯了 Windows的可视化操作而不适应 Linux纯命令行的操作，一些基础的 Linux命令都要去百度谷歌查询，这样很浪费时间，所以我就简单整理一些 Linux基础命令提供给新手理解，以后或许还会有进阶篇、高级篇（或许</p>
<p>这篇文章，不仅仅是写给新手学习的，也是写给我学习Linux的，我在写这篇文章的时候，也是在学习和了解这些基础命令，同时留着以后备忘。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/07/linux-01.png"></p>
<p>包管理器 apt-get Debian&#x2F;Ubuntu系统包管理器 apt-get 是Debian&#x2F;Ubuntu系统中 一个用于快速下载&#x2F;安装的简单命令行管理工具！ <strong>参数介绍：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 命令:</span><br><span class="line">update - 检索 新的包列表</span><br><span class="line">upgrade - 升级 可更新的所有软件包</span><br><span class="line">install - 安装 新软件包（pkg是libc6不是libc6.deb）</span><br><span class="line">remove - 删除 软件包</span><br><span class="line">autoremove - 自动删除 所有未使用的软件包</span><br><span class="line">purge - 删除 软件包和配置文件</span><br><span class="line">clean - 清除 已下载的归档文件</span><br><span class="line">autoclean - 清除 旧的下载的档案文件</span><br><span class="line">check - 验证 是否有损坏的依赖</span><br><span class="line">download - 下载 二进制包到当前目录</span><br><span class="line"> </span><br><span class="line"># 选项：</span><br><span class="line">-q ：不输出任何信息</span><br><span class="line">-qq ：除了错误之外，没有输出</span><br><span class="line">-d ：仅下载，不要安装或解压缩存档</span><br><span class="line">-y ：对所有确定询问都选择 Yes，并且不提示</span><br><span class="line">-f ：尝试纠正 被破坏依赖关系的系统</span><br><span class="line">-m ：如果存档是可定位的，则尝试继续</span><br><span class="line">-u ：显示升级包的列表</span><br><span class="line">-b ：在获取源代码包后构建源包</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 apt-get --help 查看。</span><br></pre></td></tr></table></figure>

<p><strong>使用示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 检索 新的包列表</span><br><span class="line">apt-get update</span><br><span class="line"> </span><br><span class="line"># 升级 可更新的所有软件包（注意这个命令会升级所有的软件包，所以会升级很长时间）</span><br><span class="line">apt-get upgrade</span><br><span class="line"> </span><br><span class="line"># 安装 Nginx 软件包</span><br><span class="line">apt-get install nginx</span><br><span class="line"> </span><br><span class="line"># 卸载 Nginx 软件包</span><br><span class="line">apt-get remove nginx</span><br><span class="line"> </span><br><span class="line"># 卸载 Nginx 软件包 并删除所有相关配置文件</span><br><span class="line">apt-get remove --purge nginx</span><br><span class="line"> </span><br><span class="line"># 在安装软件和卸载的时候，为了避免误操作，都会询问是否继续，每次都要输入 y 来确定会很麻烦，可以加上 -y 参数</span><br><span class="line"># 安装 Nginx 软件包 并不显示确定提示</span><br><span class="line">apt-get install nginx -y</span><br><span class="line"> </span><br><span class="line"># 卸载 Nginx 软件包，删除所有相关配置文件 并不显示提示</span><br><span class="line">apt-get remove --purge nginx -y</span><br><span class="line"> </span><br><span class="line"># 清除 旧的/无用 的软件包</span><br><span class="line">apt-get clean &amp;&amp; apt-get autoclean</span><br><span class="line"> </span><br><span class="line"># 下载 Nginx 二进制软件包到当前目录，但不解压和安装</span><br><span class="line">apt-get download nginx -d</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 apt-get --help 查看。</span><br></pre></td></tr></table></figure>

<h3 id="yum-CentOS系统包管理器"><a href="#yum-CentOS系统包管理器" class="headerlink" title="yum CentOS系统包管理器"></a>yum CentOS系统包管理器</h3><p>yum 是CentOS系统中 一个用于快速下载&#x2F;安装的简单命令行管理工具！</p>
<p><strong>参数介绍：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 命令：</span><br><span class="line"> </span><br><span class="line">update - 检索 新的包列表</span><br><span class="line">upgrade - 升级 软件包</span><br><span class="line">search - 搜索 软件包</span><br><span class="line">install - 安装 软件包</span><br><span class="line">list - 列出 软件包或者软件包组</span><br><span class="line">info - 显示软件包或者软件包组的详细信息</span><br><span class="line">erase - 删除 软件包（这两个命令一样）</span><br><span class="line">remove - 删除 软件包（这两个命令一样）</span><br><span class="line">groupinfo - 显示 有关包组的详细信息</span><br><span class="line">groupinstall - 安装 软件包组（就像一种软件合集）</span><br><span class="line">grouplist - 列出 可用的软件包组</span><br><span class="line">groupremove - 删除 软件包组</span><br><span class="line">check - 检查 软件包</span><br><span class="line">check-update - 检查 可更新的软件包</span><br><span class="line">clean - 清除 缓存目录内的软件包</span><br><span class="line">deplist - 列出 一个包的依赖关系</span><br><span class="line">distribution-synchronization - 同步 已安装的软件包到最新的版本</span><br><span class="line">downgrad - 降级 一个软件包</span><br><span class="line">reinstall - 重新安装 软件包（自动删除重装）</span><br><span class="line">repolist - 显示 配置的软件包仓库</span><br><span class="line">resolvedep - 确定 软件包需要的依赖关系</span><br><span class="line"> </span><br><span class="line"># 选项：</span><br><span class="line">-t ：容忍错误</span><br><span class="line">-C ：完全从系统缓存运行，不要更新缓存</span><br><span class="line">-R 分钟 ：最大命令等待时间</span><br><span class="line">-q ：安静的操作</span><br><span class="line">-y ：对于所有问题回答是</span><br><span class="line">--nogpgcheck ：禁用gpg签名检查</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 yum --help 查看。</span><br></pre></td></tr></table></figure>

<p><strong>使用示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 检索 新的包列表</span><br><span class="line">yum update</span><br><span class="line"> </span><br><span class="line"># 安装 Nginx 软件包</span><br><span class="line">yum install nginx</span><br><span class="line"> </span><br><span class="line"># 安装 Development Tools 软件包组（这个软件包组中包含了编译所需的软件）</span><br><span class="line"># 注意：当软件包或者软件包组的名字中包含空格的时候，请把 软件包或软件包组 加上双引号！</span><br><span class="line">yum groupinstall &quot;Development Tools&quot;</span><br><span class="line"> </span><br><span class="line"># 卸载 Nginx 软件包</span><br><span class="line">yum erase nginx / yum remove nginx</span><br><span class="line"> </span><br><span class="line"># 卸载 Development Tools 软件包组</span><br><span class="line">yum groupremove &quot;Development Tools&quot;</span><br><span class="line"> </span><br><span class="line"># 升级 所有可更新的软件包</span><br><span class="line">yum upgrade</span><br><span class="line"> </span><br><span class="line"># 升级 Nginx 可更新的软件包</span><br><span class="line">yum upgrade nginx</span><br><span class="line"> </span><br><span class="line"># 在安装软件和卸载的时候，为了避免误操作，都会询问是否继续，每次都要输入 y 来确定会很麻烦，可以加上 -y 参数</span><br><span class="line"># 安装 Nginx 软件包 并不显示确定提示</span><br><span class="line">yum install nginx -y</span><br><span class="line"> </span><br><span class="line"># 卸载 Nginx 软件包 并不显示确定提示</span><br><span class="line">yum erase nginx -y / yum remove nginx -y</span><br><span class="line"> </span><br><span class="line"># 搜索 Nginx 软件包是否存着</span><br><span class="line">yum search nginx</span><br><span class="line"> </span><br><span class="line"># 列出 可用的软件包</span><br><span class="line">yum list</span><br><span class="line"> </span><br><span class="line"># 列出 可用的软件包组</span><br><span class="line">yum grouplist</span><br><span class="line"> </span><br><span class="line"># 清除 缓存目录中的所有软件包</span><br><span class="line">yum clean</span><br><span class="line"> </span><br><span class="line"># 清除 缓存目录中的 Nginx 软件包</span><br><span class="line">yum clean nginx</span><br><span class="line"> </span><br><span class="line"># 重装 Nginx 软件包</span><br><span class="line">yum reinstall nginx</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 yum --help 查看。</span><br></pre></td></tr></table></figure>

<h2 id="文件-x2F-文件夹-操作"><a href="#文件-x2F-文件夹-操作" class="headerlink" title="文件&#x2F;文件夹 操作"></a>文件&#x2F;文件夹 操作</h2><p>以下除特殊说明，都以当前目录为 <code>/root</code> 示例。</p>
<h3 id="mkdir-新建-文件夹"><a href="#mkdir-新建-文件夹" class="headerlink" title="mkdir 新建 文件夹"></a>mkdir 新建 文件夹</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在当前文件夹新建一个 bash 文件夹，完整的绝对路径就是 /root/bash</span><br><span class="line">mkdir bash</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 mkdir --help 查看。</span><br></pre></td></tr></table></figure>

<h3 id="cd-进入-文件夹"><a href="#cd-进入-文件夹" class="headerlink" title="cd 进入 文件夹"></a>cd 进入 文件夹</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 你当前在 /root目录中，使用这个命令会进入 /root/bash目录，这是相对路径</span><br><span class="line">cd bash</span><br><span class="line"># 如果你不在 /root目录中的话，就不能用上面的相对路径了，就需要绝对路径</span><br><span class="line">cd /root/bash</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 假设你当前在 /root/bash目录中，使用相对路径，你可以用这个命令进入上一级 /root目录， .. 代表相对路径 上级目录</span><br><span class="line">cd ..</span><br><span class="line"># 当然你也可以用绝对路径来进入上一级 /root目录</span><br><span class="line">cd /root</span><br></pre></td></tr></table></figure>

<h3 id="cp-复制或重命名-文件-x2F-文件夹"><a href="#cp-复制或重命名-文件-x2F-文件夹" class="headerlink" title="cp 复制或重命名 文件&#x2F;文件夹"></a>cp 复制或重命名 文件&#x2F;文件夹</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 复制当前目录内的 log.txt文件到 /var目录</span><br><span class="line">cp log.txt /var/log.txt</span><br><span class="line"># 复制当前目录内的 bash文件夹到 /home目录</span><br><span class="line">cp -R bash /home/bash</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 复制当前目录内的所有.txt后缀的文件到 /var/log目录</span><br><span class="line">cp *.txt /var/log</span><br><span class="line"># 复制当前目录内的所有以 doubi开头的文件到 /var/log目录</span><br><span class="line">cp doubi* /var/log</span><br><span class="line"># 复制当前目录内的所有以 doubi开头 以.txt后缀结尾的文件到 /var/log目录</span><br><span class="line">cp doubi*.txt /var/log</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 假设当前目录是 /root/doubi/log，要把这个目录中的所有.txt后缀的文件复制到上一级目录 /root/doubi，那么这样做</span><br><span class="line">cp *.txt ..</span><br><span class="line"># .. 就是相对路径，代表上一级目录，当然你也可以用绝对路径，这样更不容易出错</span><br><span class="line">cp *.txt /root/doubi</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 重命名当前目录内的 log.txt文件为 log2.txt</span><br><span class="line">cp log.txt log2.txt</span><br><span class="line"># 复制当前目录内的 log.txt文件到 /var目录并重命名为 log1.txt</span><br><span class="line">cp log.txt /var/log1.txt</span><br><span class="line"># 复制当前目录内的 bash文件夹到 /home目录并重命名为 bash2</span><br><span class="line">cp -R bash /home/bash2</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 复制当前目录内的 log.txt文件到 /var目录，但是 /var 目录中已经存着 log.txt，那么会提示 cp: overwrite `/var/log.txt&#x27;? 可以用 -f 强制覆盖</span><br><span class="line">cp -f log /var/log.txt</span><br><span class="line"># 复制当前目录内的 log.txt log1.txt log2.txt文件和 log233目录到 /home/log目录中</span><br><span class="line">cp -R log.txt log1.txt log2.txt log233 /home/log</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 cp --help 查看。</span><br></pre></td></tr></table></figure>

<p> </p>
<h3 id="mv-移动或重命名-文件-x2F-文件夹"><a href="#mv-移动或重命名-文件-x2F-文件夹" class="headerlink" title="mv 移动或重命名 文件&#x2F;文件夹"></a>mv 移动或重命名 文件&#x2F;文件夹</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 关于 mv 命令，可以参考上面 cp 的使用方法，没什么区别，只是一个是复制，一个是移动，把上面 cp 命令改成 mv 就能套用了。</span><br><span class="line"> </span><br><span class="line"># 移动当前目录内的 log.txt文件到 /var目录</span><br><span class="line">mv log.txt /var/log.txt</span><br><span class="line"># 移动当前目录内的 bash文件夹到 /home目录</span><br><span class="line">mv bash /home/bash</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 重命名当前目录内的 log.txt文件为 log2.txt</span><br><span class="line">mv log.txt log2.txt</span><br><span class="line"># 复制当前目录内的 log.txt文件到 /var目录并重命名为 log1.txt</span><br><span class="line">mv log.txt /var/log1.txt</span><br><span class="line"># 复制当前目录内的 bash文件夹到 /home目录并重命名为 bash2</span><br><span class="line">mv bash /home/bash2</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 mv --help 查看</span><br></pre></td></tr></table></figure>

<h3 id="rm-删除-文件-x2F-文件夹"><a href="#rm-删除-文件-x2F-文件夹" class="headerlink" title="rm 删除 文件&#x2F;文件夹"></a>rm 删除 文件&#x2F;文件夹</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 删除当前目录下的 log.txt文件</span><br><span class="line">rm log.txt</span><br><span class="line"># 删除当前目录下所有.txt后缀的文件</span><br><span class="line">rm *.txt</span><br><span class="line"># 使用 rm 命令删除时，会提示你是否确定删除，输入 y 即删除，输入 n 则取消</span><br><span class="line"># rm: remove regular file `log.txt&#x27;? y</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 删除当前目录下所有.txt后缀的文件</span><br><span class="line">rm *.txt</span><br><span class="line"># 删除当前目录下所有以 doubi开头的文件</span><br><span class="line">rm doubi*</span><br><span class="line"># 删除当前目录下所有以 doubi开头 以.txt后缀结尾的文件</span><br><span class="line">rm doubi*.txt</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 当你用 rm 删除目录的时候会发现提示这不是一个文件</span><br><span class="line"># rm bash</span><br><span class="line"># rm: cannot remove `bash&#x27;: Is a directory</span><br><span class="line"># 可以加上 -r 来归递删除目录及其目录下的内容</span><br><span class="line">rm -r bash</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 因为为了避免手误删除错误，所以 rm默认是加上了 -i 的参数，也就是每一次删除文件/目录都会提示，如果觉得烦可以用 -rf 参数</span><br><span class="line">rm -rf bash</span><br><span class="line"># rm -rf 这个命令请慎重使用，而且千万不要使用 rm -rf / 或者 rm -rf /* 之类的命令(系统自杀)，可能会让你系统爆炸，所以使用请慎重！</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 rm --help 查看。</span><br></pre></td></tr></table></figure>

<p> </p>
<h2 id="查看-x2F-编辑文件-操作"><a href="#查看-x2F-编辑文件-操作" class="headerlink" title="查看&#x2F;编辑文件 操作"></a>查看&#x2F;编辑文件 操作</h2><h3 id="ls-显示目录中文件"><a href="#ls-显示目录中文件" class="headerlink" title="ls 显示目录中文件"></a>ls 显示目录中文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示当前目录下的所有文件</span><br><span class="line">ls -a</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 命令后面加上 绝对路径/相对路径 就会显示指定文件夹内的所有文件</span><br><span class="line">ls -a bash/log</span><br><span class="line"># 相对路径，当前目录是 /root ，欲查看的目录是 /root/bash/log</span><br><span class="line">ls -a /root/bash/log</span><br><span class="line"># 绝对路径， 当前目录是 /root ，欲查看的目录是 /root/bash/log</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 ls --help 来查看。</span><br></pre></td></tr></table></figure>

<p> </p>
<h3 id="du-查看-文件-x2F-文件夹-占用磁盘空间的大小"><a href="#du-查看-文件-x2F-文件夹-占用磁盘空间的大小" class="headerlink" title="du 查看 文件&#x2F;文件夹 占用磁盘空间的大小"></a>du 查看 文件&#x2F;文件夹 占用磁盘空间的大小</h3><p><strong>参数介绍：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-h ：以人类易读的方式显示</span><br><span class="line">-a ：显示 目录占用的磁盘空间大小，并显示其下目录和文件占用磁盘空间的大小</span><br><span class="line">-s ：显示 目录占用的磁盘空间大小，但不显示其下子目录和文件占用的磁盘空间大小</span><br><span class="line">-c ：显示几个目录或文件占用的磁盘空间大小，还要统计它们的总和</span><br><span class="line">--apparent-size：显示目录或文件自身的大小</span><br><span class="line">-l ：统计硬链接占用磁盘空间的大小</span><br><span class="line">-L ：统计符号链接所指向的文件占用的磁盘空间大小</span><br><span class="line"># 待写...</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 du --help 来查看。</span><br></pre></td></tr></table></figure>

<p> </p>
<p><strong>使用示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示 /root 文件夹的大小，但不显示其子目录和文件的大小</span><br><span class="line">du -sh</span><br><span class="line"> </span><br><span class="line"># 显示 /root 文件夹的大小，并显示其子目录和文件的大小</span><br><span class="line">du -ah</span><br><span class="line"> </span><br><span class="line"># 待写...</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 du --help 来查看。</span><br></pre></td></tr></table></figure>

<h3 id="cat-查看文件内容"><a href="#cat-查看文件内容" class="headerlink" title="cat 查看文件内容"></a>cat 查看文件内容</h3><p><strong>假设 log.txt文件的内容为：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">doubi233</span><br><span class="line">doubi</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">doubi666</span><br><span class="line"> </span><br><span class="line">doubi2366</span><br><span class="line">doubi8888</span><br></pre></td></tr></table></figure>

<p> </p>
<p><strong>查看文件：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看 log.txt文件的所有内容</span><br><span class="line">cat log.txt</span><br><span class="line"># 输出示例如下</span><br><span class="line">doubi233</span><br><span class="line">doubi</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">doubi666</span><br><span class="line"> </span><br><span class="line">doubi2366</span><br><span class="line">doubi8888</span><br><span class="line"> </span><br><span class="line"># 查看 log.txt文件的所有内容，并对所有行编号</span><br><span class="line">cat -n log.txt</span><br><span class="line"># 输出示例如下：</span><br><span class="line">1 doubi233</span><br><span class="line">2 doubi</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5 doubi666</span><br><span class="line">6</span><br><span class="line">7 doubi2366</span><br><span class="line">8 doubi8888</span><br><span class="line"> </span><br><span class="line"># 查看 log.txt文件的所有内容，并对非空行编号</span><br><span class="line">cat -b log.txt</span><br><span class="line"># 输出示例如下：</span><br><span class="line">1 doubi233</span><br><span class="line">2 doubi</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">3 doubi666</span><br><span class="line"> </span><br><span class="line">4 doubi2366</span><br><span class="line">5 doubi8888</span><br><span class="line"> </span><br><span class="line"># 查看 log.txt文件的所有内容，并对非空行编号，且不输出多行空行</span><br><span class="line">cat -bs log.txt</span><br><span class="line"># 输出示例如下：</span><br><span class="line">1 doubi233</span><br><span class="line">2 doubi</span><br><span class="line"> </span><br><span class="line">3 doubi666</span><br><span class="line"> </span><br><span class="line">4 doubi2366</span><br><span class="line">5 doubi8888</span><br></pre></td></tr></table></figure>

<p><strong>清空文件：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 清空当前目录中的 log.txt 文件</span><br><span class="line">cat /dev/null &gt; log.txt</span><br><span class="line"> </span><br><span class="line"># 清空 /var目录中的 log.txt 文件</span><br><span class="line">cat /dev/null &gt; /var/log.txt</span><br></pre></td></tr></table></figure>

<p><strong>写入文件：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 写入文本到当前目录中的 log.txt文件中(加入文本到文件内容最后)</span><br><span class="line">cat &gt;&gt; log.txt &lt;&lt;-EOF</span><br><span class="line">doubi</span><br><span class="line">doubi233</span><br><span class="line">doubi666</span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line"># 清空文件并写入文本到 /var目录中的 log.txt文件中(先清空后写入)</span><br><span class="line">cat &gt; /var/log.txt &lt;&lt;-EOF</span><br><span class="line">doubi</span><br><span class="line">doubi233</span><br><span class="line">doubi666</span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 cat --help 来查看。</span><br></pre></td></tr></table></figure>

<p> </p>
<h3 id="head-查看文件内容（主要用于正查）"><a href="#head-查看文件内容（主要用于正查）" class="headerlink" title="head 查看文件内容（主要用于正查）"></a>head 查看文件内容（主要用于正查）</h3><p>参数介绍：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-c 数字：显示指定文件的前 xx 字节的内容（bytes）</span><br><span class="line">-n 数字：显示指定文件的前 xx 行的内容</span><br><span class="line">-q ：不显示包含指定文件名的文件头（当使用 head打开多个文件的时候，会去在每个文件输出结果的顶部添加一个包含文件名的文件头用于区分）</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 head --help 来查看。</span><br></pre></td></tr></table></figure>

<p><strong>使用示例：</strong></p>
<p>假设 log.txt 文件内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">doubi1</span><br><span class="line">doubi2</span><br><span class="line">doubi3</span><br><span class="line">doubi4</span><br><span class="line">doubi5</span><br><span class="line"># 查看 log.txt文件的全部内容</span><br><span class="line">head log.txt</span><br><span class="line"> </span><br><span class="line"># 查看 log.txt文件的前 4字节的内容</span><br><span class="line">head -c 4 log.txt</span><br><span class="line"> </span><br><span class="line"># 输出示例</span><br><span class="line">doub</span><br><span class="line"> </span><br><span class="line"># 查看 log.txt文件的前 2行的内容</span><br><span class="line">head -n 2 log.txt</span><br><span class="line"> </span><br><span class="line"># 输出示例</span><br><span class="line">doubi1</span><br><span class="line">doubi2</span><br><span class="line"> </span><br><span class="line"># 查看 log.txt文件的从倒数第2行到行首的内容</span><br><span class="line">head -n -2 log.txt</span><br><span class="line"> </span><br><span class="line"># 输出示例</span><br><span class="line">doubi1</span><br><span class="line">doubi2</span><br><span class="line">doubi3</span><br><span class="line"> </span><br><span class="line"># 查看 log.txt log1.txt log2.txt文件的前 3行内容</span><br><span class="line">head -n 3 log.txt log1.txt log2.txt</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 head --help 来查看。</span><br></pre></td></tr></table></figure>

<h3 id="tail-查看文件内容（主要用于倒查）"><a href="#tail-查看文件内容（主要用于倒查）" class="headerlink" title="tail 查看文件内容（主要用于倒查）"></a>tail 查看文件内容（主要用于倒查）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-c 数字：如果数字为正数(例如 -c +5)，显示指定文件从行首第 xx 字节到最后的内容；如果数字为负数(例如 -c -5)，显示指定文件从行尾第 xx 字节到最后内容。</span><br><span class="line">-n 数字：如果数字为正数(例如 -c +3)，显示指定文件从行首第 xx 行到最后的内容；如果数字为负数(例如 -c -3)，显示指定文件从行尾第 xx 行到最后的内容。</span><br><span class="line">-f ：即时输出文件变化后增加的内容，也就是监视一个文件的内容变化（常用于监视日志输出），使用 Ctrl＋C 终止</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 tail --help 来查看</span><br></pre></td></tr></table></figure>

<p><strong>使用示例：</strong></p>
<p>假设 log.txt 文件内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">doubi1</span><br><span class="line">doubi2</span><br><span class="line">doubi3</span><br><span class="line">doubi4</span><br><span class="line">doubi5</span><br><span class="line"># 查看 log.txt文件的全部内容</span><br><span class="line">tail log.txt</span><br><span class="line"> </span><br><span class="line"># 查看 log.txt文件从行首 第25字节到最后的内容</span><br><span class="line">tail -c +25 log.txt</span><br><span class="line"> </span><br><span class="line"># 输出示例</span><br><span class="line">bi4</span><br><span class="line">doubi5</span><br><span class="line"> </span><br><span class="line"># 查看 log.txt文件从行尾 第4字节到最前面的内容</span><br><span class="line">tail -c -4 log.txt</span><br><span class="line"> </span><br><span class="line"># 输出示例</span><br><span class="line">bi5</span><br><span class="line"> </span><br><span class="line"># 查看 log.txt文件的从第2行到最后一行的内容</span><br><span class="line">tail -n +2 log.txt</span><br><span class="line"> </span><br><span class="line"># 输出示例</span><br><span class="line">doubi2</span><br><span class="line">doubi3</span><br><span class="line">doubi4</span><br><span class="line">doubi5</span><br><span class="line"> </span><br><span class="line"># 查看 log.txt文件的后 2行的内容</span><br><span class="line">tail -n -2 log.txt</span><br><span class="line"> </span><br><span class="line"># 输出示例</span><br><span class="line">doubi4</span><br><span class="line">doubi5</span><br><span class="line"> </span><br><span class="line"># 持续查看（监视） log.txt文件的变化内容（新增加的内容），使用 Ctrl＋C 终止</span><br><span class="line">tail -f log.txt</span><br><span class="line"> </span><br><span class="line"># 查看 log.txt log1.txt log2.txt文件的前 3行内容</span><br><span class="line">tail -n 3 log.txt log1.txt log2.txt</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 tail --help 来查看。</span><br></pre></td></tr></table></figure>

<p> </p>
<h3 id="sed-查看-x2F-编辑文件内容"><a href="#sed-查看-x2F-编辑文件内容" class="headerlink" title="sed 查看&#x2F;编辑文件内容"></a>sed 查看&#x2F;编辑文件内容</h3><p>参数介绍：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-i ：操作后应用保存到原文件（如果不加这个参数，那么任何修改都不会影响原文件里的内容，只会把结果输出）</span><br><span class="line"># 待写...</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 sed --help 来查看。</span><br></pre></td></tr></table></figure>

<p>使用示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看 log.txt 第3行的内容</span><br><span class="line">sed &#x27;3p&#x27; log.txt</span><br><span class="line"> </span><br><span class="line"># 查看 log.txt 第2-8行的内容</span><br><span class="line">sed &#x27;2,8p&#x27; log.txt</span><br><span class="line"> </span><br><span class="line"># 删除 log.txt 第4行</span><br><span class="line">sed -i &#x27;4d&#x27; log.txt</span><br><span class="line"> </span><br><span class="line"># 删除 log.txt 第3-7行</span><br><span class="line">sed -i &#x27;3,7d&#x27; log.txt</span><br><span class="line"> </span><br><span class="line"># 删除 log.txt 第1行</span><br><span class="line">sed -i &#x27;1d&#x27; log.txt</span><br><span class="line"> </span><br><span class="line"># 删除 log.txt 最后1行</span><br><span class="line">sed -i &#x27;$d&#x27; log.txt</span><br><span class="line"> </span><br><span class="line"># 删除 log.txt 文件中所有包含 233内容的行</span><br><span class="line">sed -i &#x27;/233/d&#x27; log.txt</span><br><span class="line"> </span><br><span class="line"># 替换 log.txt 文件中所有 233为666</span><br><span class="line">sed -i &#x27;s/233/666/&#x27; log.txt</span><br><span class="line"> </span><br><span class="line"># 替换 log.txt 文件中所有 /ver 为 doubi/，因为有斜杠，所以需要使用  转义，但是单引号会导致无法转义，所以要改成双引号。</span><br><span class="line">sed -i &quot;s//ver/doubi//&quot; log.txt</span><br><span class="line"> </span><br><span class="line"># 待写...</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 sed --help 来查看。</span><br></pre></td></tr></table></figure>

<h3 id="vi、vim、nano-编辑文件内容"><a href="#vi、vim、nano-编辑文件内容" class="headerlink" title="vi、vim、nano 编辑文件内容"></a>vi、vim、nano 编辑文件内容</h3><p><strong>vi 介绍</strong></p>
<p>vi 是Linux很棒的一个文本编辑器，不过也存在一些缺点，比如操作略麻烦。而 vim就相当于 vi的扩展或者加强版，主要介绍 vim。</p>
<p><strong>vim 介绍</strong></p>
<p>vim 相当于 vi的扩展或者加强版，一些系统只安装了 vi，所以想要用 vim还需要手动安装( yum install vim -y &#x2F; apt-get install vim -y)，安装 vim后，会自动替换或者说整合 vi。</p>
<p>当你使用 vi 命令的时候，首先进入的是 命令行模式，这个模式就是 vi 自身的功能，而点击 I 键 后就会进入编辑模式(插入模式)，这时候就可以直接输入字符了，这个就是 vim的扩展功能了。当修改完成后，按 ESC键 即可退出编辑模式回到命令行模式，这时候输入 :wq 并回车代表保存并退出，如果不想保存可以使用 :q! 不保存强制退出。</p>
<p>vim的命令行 命令很多，我也没打算都写出来，只写出最常用的好了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 打开当前目录下的 log.txt文件，如果没有那么会新建 log.txt文件（安装vim后，使用 vi和 vim打开文件没区别）</span><br><span class="line">vi log.txt</span><br><span class="line">vim log.txt</span><br><span class="line"> </span><br><span class="line"># 在命令行模式下，直接输入以下 符号和字母(区分大小写)</span><br><span class="line">## 进入编辑模式（插入模式，按 Esc键 即可返回命令行模式）</span><br><span class="line">i</span><br><span class="line">## 删除光标当前所在的一行</span><br><span class="line">dd</span><br><span class="line">## 删除文件内所有内容</span><br><span class="line">dddG</span><br><span class="line">## 复制光标当前所在的一行</span><br><span class="line">yy</span><br><span class="line">## 粘贴刚才复制的一行内容</span><br><span class="line">p</span><br><span class="line">## 撤销上个操作（误操作可以用这个恢复）</span><br><span class="line">u</span><br><span class="line">## 保存当前文件（ : 是英文的冒号）</span><br><span class="line">:w</span><br><span class="line">## 另存当前文件内容为 log2.txt</span><br><span class="line">:w log2.txt</span><br><span class="line">## 退出当前文件</span><br><span class="line">:q</span><br><span class="line">## 不保存 并强制退出当前文件</span><br><span class="line">:q!</span><br><span class="line">## 保存并退出当前文件</span><br><span class="line">:wq</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 vi --help / vim --help 来查看。</span><br></pre></td></tr></table></figure>

<p> </p>
<p><strong>nano 介绍</strong></p>
<p>nano 我挺少用的，一些系统也默认安装了这个 文本编辑器，在一些地方比 vim好用，不过我已经习惯了 vim。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 打开当前目录下的 log.txt文件，如果没有那么会新建 log.txt文件</span><br><span class="line">nano log.txt</span><br><span class="line"># 进入后直接就可以输入修改文本内容了，修改后我们可以使用这个 按键保存内容</span><br><span class="line">Ctrl+O</span><br><span class="line"># 如果不需要编辑了，那么可以用这个 按键退出当前文件</span><br><span class="line">Ctrl+X</span><br><span class="line"># 如果你在退出前已经修改但没有保存，那么会提醒你是否保存，如果保存就输入 y ，不保存输入 n</span><br><span class="line"># 然后就会让你输入要保存的文件名（默认原文件名，所以直接按 Enter回车即可，除非你要另存为其他文件名）</span><br><span class="line">Enter</span><br><span class="line"># 更多的命令可以用 nano --help 来查看。</span><br></pre></td></tr></table></figure>

<h2 id="解压缩-操作"><a href="#解压缩-操作" class="headerlink" title="解压缩 操作"></a>解压缩 操作</h2><p>在Linux中经常会下载到压缩文件，而压缩文件的格式有很多，比如 zip、rar、gz、xz、tar.gz、tar.xz等。</p>
<p>比较常见的就是各种 .tar、.tar.xz、.tar.gz、.tar.bz、.tar.bz2、.tar.Z 后缀压缩包，这几个的解压缩命令基本一样，说明一下参数的意义。</p>
<p>tar 本身只是一个打包的作用，而 .tar 后面的 .zx &#x2F; .gz &#x2F; .bz 等等才是压缩格式，也就是比如 log.tar.gz 压缩包，就是先用 .tar 把指定文件&#x2F;文件夹打包到一起，然后再用 gz 来压缩打包后的 .tar 为 .tar.gz 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-x 是从压缩文件提取(解压)文件出来，所以在解压命令中都有这个参数。</span><br><span class="line">-c ：创建一个新的压缩包文件，所以在压缩命令中都有这个参数。</span><br><span class="line">-f ：指定要解压的压缩包文件或要压缩的文件/文件夹，所以这个参数必须放在 解压缩命令参数的最后，然后后面跟着 要解压到压缩包文件或要压缩的文件/文件夹。</span><br><span class="line">-j ：解压缩 bz / bz2 格式的参数</span><br><span class="line">-J ：解压缩 xz / lzip 格式的参数</span><br><span class="line">-z ：解压缩 gz / tgz 格式的参数</span><br><span class="line">-Z ：解压缩 Z 格式的参数</span><br><span class="line">-v ：详细列出解压缩过程中处理的文件</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 tar --help 来查看。</span><br></pre></td></tr></table></figure>

<h3 id="tar-gz-zip等-解压-压缩包-示例"><a href="#tar-gz-zip等-解压-压缩包-示例" class="headerlink" title="tar gz zip等 解压 压缩包 示例"></a>tar gz zip等 解压 压缩包 示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 解压后缀为 .tar 的压缩包</span><br><span class="line">tar -xf log.tar</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 解压后缀为 .tar.xz 的压缩包</span><br><span class="line">tar -xJf log.tar.xz</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 解压后缀为 .tar.gz 的压缩包，有两个方法</span><br><span class="line">tar -xzf log.tar.gz</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 解压后缀为 .gz 的压缩包，有两个方法，如提示命令不存在，请安装 yum install gzip -y / apt-get install gzip -y</span><br><span class="line">gzip -d log.gz</span><br><span class="line">gunzip log.gz</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 解压后缀为 .bz / .bz2 / tar.bz2 的压缩包，有两个方法</span><br><span class="line">bzip2 -d log.bz</span><br><span class="line">bunzip2 log.bz</span><br><span class="line">tar -jxf log.tar.bz</span><br><span class="line"> </span><br><span class="line">bzip2 -d log.bz2</span><br><span class="line">bunzip2 log.bz2</span><br><span class="line">tar -jxf log.tar.bz2</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 解压后缀为 .Z / tar.Z 的压缩包，有两个方法</span><br><span class="line">uncompress log.Z log.txt</span><br><span class="line">uncompress log.Z log</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line">tar xZf log.tar.Z log.txt</span><br><span class="line">tar xZf log.tar.Z log</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 解压后缀为 .rar 的压缩包，如提示命令不存在，请安装 yum install unrar -y / apt-get install unrar -y ，注意 rar 和 unrar 是分开的</span><br><span class="line">unrar x log.rar</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 解压后缀为 .zip 的压缩包，如提示命令不存在，请安装 yum install unzip -y / apt-get install unzip -y，注意 zip 和 unzip 是分开的</span><br><span class="line">unzip log.zip</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 tar --help / gzip --help / unrar --help / unzip --help 来查看。</span><br></pre></td></tr></table></figure>

<h3 id="压缩-文件-x2F-文件夹-示例"><a href="#压缩-文件-x2F-文件夹-示例" class="headerlink" title="压缩 文件&#x2F;文件夹 示例"></a>压缩 文件&#x2F;文件夹 示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 分别压缩当前目录下的 log.txt文件 / log文件夹为 log.tar 压缩包</span><br><span class="line">tar -cf log.tar log.txt</span><br><span class="line">tar -cf log.tar log</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 如果要压缩多个文件和文件夹，那么只需要在后面一直加下去即可</span><br><span class="line">tar -cf log.tar log.txt doub.txt log bash</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 分别压缩当前目录下的 log.txt文件 / log文件夹为 log.tar.xz 压缩包，以下的其他后缀压缩命令都是一样</span><br><span class="line">tar -cJf log.tar.xz log.txt</span><br><span class="line">tar -cJf log.tar.xz log</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 分别压缩当前目录下的 log.txt文件 / log文件夹为 log.tar.gz 压缩包</span><br><span class="line">tar -czf log.tar.gz log.txt</span><br><span class="line">tar -czf log.tar.gz log</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 分别压缩当前目录下的 log.txt文件 / log文件夹为 log.gz 压缩包</span><br><span class="line">gzip log.gz log.txt</span><br><span class="line">gzip log.gz log</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 分别压缩当前目录下的 log.txt文件 / log文件夹为 log.tar.bz 压缩包</span><br><span class="line">暂时没查到</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 分别压缩当前目录下的 log.txt文件 / log文件夹为 log.bz / log.tar.bz / log.bz2 / log.tar.bz2压缩包</span><br><span class="line">bzip2 -z log.txt</span><br><span class="line">bzip2 -z log</span><br><span class="line"> </span><br><span class="line">tar cjf log.tar.bz2 log.txt</span><br><span class="line">tar cjf log.tar.bz2 log</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 分别压缩当前目录下的 log.txt文件 / log文件夹为 log.Z / log.tar.Z 压缩包</span><br><span class="line">compress log.txt</span><br><span class="line">compress log</span><br><span class="line"> </span><br><span class="line">tar cZf log.tar.Z log.txt</span><br><span class="line">tar cZf log.tar.Z log</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 分别压缩当前目录下的 log.txt文件 / log文件夹为 log.rar 压缩包，如提示命令不存在，请安装 yum install rar -y / apt-get install rar -y ，注意 rar 和 unrar 是分开的</span><br><span class="line">unrar a log.rar log.txt</span><br><span class="line">unrar a log.rar log</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"># 分别压缩当前目录下的 log.txt文件 / log文件夹为 log.zip 压缩包，如提示命令不存在，请安装 yum install zip -y / apt-get install zip -y ，注意 zip 和 unzip 是分开的</span><br><span class="line">zip log.zip log.txt</span><br><span class="line">zip log.zip log</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 tar --help / gzip --help / rar --help / zip --help 来查看。</span><br></pre></td></tr></table></figure>

<h2 id="网络工具"><a href="#网络工具" class="headerlink" title="网络工具"></a>网络工具</h2><h3 id="wget-下载工具"><a href="#wget-下载工具" class="headerlink" title="wget 下载工具"></a>wget 下载工具</h3><p>wget 是Linux系统最常用的工具之一，命令行方式的多功能下载工具，支持HTTP，HTTPS和FTP协议。</p>
<p><strong>参数介绍：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 只介绍最常用的参数</span><br><span class="line"># 如果提示命令不存在，那么使用 yum install wget -y / apt-get install wget -y 来安装（有一些非常精简的系统可能会没装）</span><br><span class="line"> </span><br><span class="line">-b ：启动后，后台下载</span><br><span class="line">-q ：安静模式（不输出任何信息）</span><br><span class="line">-c ：断点续传下载文件</span><br><span class="line">-O ：指定下载后的文件名（可使用绝对路径目录+文件名）</span><br><span class="line">-P ：指定下载后的文件目录（-P只能指定下载目录，并不能指定文件名）</span><br><span class="line">-t ：设置重试次数（0代表无限）</span><br><span class="line">-T ：设置超时时间（单位：秒）</span><br><span class="line">-N ：只获取比本地新的文件（新的覆盖旧的）</span><br><span class="line">-4 ：仅连接至 IPv4地址</span><br><span class="line">-6 ：仅连接至 IPv6地址</span><br><span class="line">--limit-rate=xxxk :限制下载速度（k代表KB/S）</span><br><span class="line">--post-data ：通过POST方式发送数据</span><br><span class="line">--no-check-certificate ：不验证服务器的SSL证书</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 wget --help 来查看。</span><br></pre></td></tr></table></figure>

<p><strong>使用示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载一个文件到当前目录</span><br><span class="line">wget https://softs.pw/100MB.bin</span><br><span class="line"> </span><br><span class="line"># 下载文件到当前目录并重命名为 200MB.bin</span><br><span class="line">wget -O &quot;200MB.bin&quot; https://softs.pw/100MB.bin</span><br><span class="line"> </span><br><span class="line"># 下载文件到 /root目录（-P只能指定下载目录，并不能指定文件名）</span><br><span class="line">wget -P &quot;/root&quot; https://softs.pw/100MB.bin</span><br><span class="line"> </span><br><span class="line"># 下载文件到 /root/doubi目录并重命名为 200MB.bin</span><br><span class="line">wget -O &quot;/root/doubi/200MB.bin&quot; https://softs.pw/100MB.bin</span><br><span class="line"> </span><br><span class="line"># 下载文件完成之前 wget进程结束了，那么可以使用断点续传重新下载中断的文件（前提是下载服务器支持断点续传）</span><br><span class="line">wget -c https://softs.pw/100MB.bin</span><br><span class="line"># 通过后台下载文件到 /root/doubi目录并重命名为 200MB.bin</span><br><span class="line">wget -b -O &quot;/root/doubi/200MB.bin&quot; https://softs.pw/100MB.bin</span><br><span class="line"># Continuing in background, pid 2333.</span><br><span class="line"># Output will be written to `wget-log&#x27;.</span><br><span class="line"># 后台下后，你可以使用以下命令来查看下载进度：</span><br><span class="line">tail -f wget-log</span><br><span class="line"> </span><br><span class="line"># 有时候一些Linux系统中的SSL证书不完整，会导致下载一些 HTTPS网站文件的时候会验证SSL证书失败，可以这样做</span><br><span class="line"># 不验证服务器SSL证书，下载文件到当前目录并重命名为 200MB.bin</span><br><span class="line">wget --no-check-certificate -O &quot;200MB.bin&quot; https://softs.pw/100MB.bin</span><br><span class="line"> </span><br><span class="line"># 使用wget发送POST请求数据</span><br><span class="line">wget --post-data &quot;user=doubi&amp;passwd=23333&quot; https://xxx.xx/</span><br><span class="line"> </span><br><span class="line"># 下载文件到当前目录 并仅通过IPv4连接 只获取比本地新的文件，限速 200KB/S</span><br><span class="line">wget --limit-rate=200k -N -4 https://softs.pw/100MB.bin</span><br><span class="line"> </span><br><span class="line"># 下载文件到当前目录 并重试次数为 1，超时时间为 2秒</span><br><span class="line">wget -t1 -T2 https://softs.pw/100MB.bin</span><br><span class="line"> </span><br><span class="line"># 通过 wget来获取服务器的外网IP（-qO- 代表运行完会输出下载的信息，并不会保存到本地文件）</span><br><span class="line">wget -qO- ipinfo.io/ip</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 wget --help 来查看。</span><br></pre></td></tr></table></figure>

<h3 id="curl-下载工具"><a href="#curl-下载工具" class="headerlink" title="curl 下载工具"></a>curl 下载工具</h3><p>curl是Linux系统一个利用URL规则在命令行下工作的文件传输工具，是一款很强大的HTTP命令行工具。它支持文件的上传和下载，是综合传输工具，但习惯称curl为下载工具。</p>
<p><strong>参数介绍：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 只介绍最常用的参数</span><br><span class="line"># 如果提示命令不存在，那么使用 yum install curl -y / apt-get install curl -y 来安装（有一些非常精简的系统可能会没装）</span><br><span class="line"> </span><br><span class="line">-s ：安静模式（不会输出任何信息）</span><br><span class="line">-C ：断点续传下载文件</span><br><span class="line">-o ：输出写入到文件中</span><br><span class="line">-O ：输出写入到文件，文件名为 远程文件的名称</span><br><span class="line">-k ：不验证服务器SSL证书</span><br><span class="line">-T ：上传文件</span><br><span class="line">-4 ：仅连接至 IPv4地址</span><br><span class="line">-6 ：仅连接至 IPv6地址</span><br><span class="line">-m ：设置传输总时间（单位：秒）</span><br><span class="line">--retry ：设置重试次数</span><br><span class="line">--data ：通过POST方式发送数据</span><br><span class="line">--limit-rate xxxK ：限制下载速度（K代表KB/S）</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 curl --help 来查看。</span><br></pre></td></tr></table></figure>

<p><strong>使用示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 获取当前服务器的外网IP</span><br><span class="line">curl ipinfo.io/ip</span><br><span class="line"> </span><br><span class="line"># 获取一个文件保存到当前目录中</span><br><span class="line">wget -O https://softs.pw/Bash/ssr.sh</span><br><span class="line"> </span><br><span class="line"># 获取一个文件保存到 /root/doubi目录中 并修改文件名为 233.sh</span><br><span class="line">curl -o &quot;/root/doubi/233.sh&quot; https://softs.pw/Bash/ssr.sh</span><br><span class="line"> </span><br><span class="line"># 下载文件完成之前 curl进程结束了，那么可以使用断点续传重新下载中断的文件（前提是下载服务器支持断点续传）</span><br><span class="line">curl -C -O https://softs.pw/100MB.bin</span><br><span class="line"> </span><br><span class="line"># 有时候一些Linux系统中的SSL证书不完整，会导致访问/下载一些 HTTPS网站/文件的时候会验证SSL证书失败，可以这样做</span><br><span class="line"># 不验证服务器SSL证书，下载文件到当前目录并重命名为 233.sh</span><br><span class="line">curl -k -o &quot;233.sh&quot; https://softs.pw/Bash/ssr.sh</span><br><span class="line"> </span><br><span class="line"># 使用curl发送GET请求数据</span><br><span class="line">curl https://xxx.xx/?user=doubi</span><br><span class="line"> </span><br><span class="line"># 使用curl发送POST请求数据</span><br><span class="line">curl --data &quot;user=doubi&amp;passwd=23333&quot; https://xxx.xx/</span><br><span class="line"> </span><br><span class="line"># 下载文件到当前目录 并仅通过IPv4连接，限速 200KB/S</span><br><span class="line">curl --limit-rate 200K -4 https://softs.pw/100MB.bin</span><br><span class="line"> </span><br><span class="line"># 下载文件到当前目录 并重试次数为 1，超时时间为 2秒</span><br><span class="line">curl --retry 1 -m 10 https://softs.pw/100MB.bin</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 curl --help 来查看。</span><br></pre></td></tr></table></figure>

<h3 id="netstat-查看链接和端口监听等信息"><a href="#netstat-查看链接和端口监听等信息" class="headerlink" title="netstat 查看链接和端口监听等信息"></a>netstat 查看链接和端口监听等信息</h3><p><strong>参数介绍：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-n ：不显示别名（主机名/域名以 数字或IP显示）</span><br><span class="line">-e ：显示其他/更多信息</span><br><span class="line">-p ：显示进程PID/进程名</span><br><span class="line">-c ：持续输出（设置后会每隔 1秒输出一次，Ctrl+C 终止）</span><br><span class="line">-l ：显示正在监听的套接字</span><br><span class="line">-a ：显示全部信息</span><br><span class="line"> </span><br><span class="line"># 下面这些就不很常用了。</span><br><span class="line">-r ：显示路由表</span><br><span class="line">-i ：显示网络接口（网卡）</span><br><span class="line">-g ：显示多播组信息</span><br><span class="line">-s ：显示网络统计</span><br><span class="line">-M ：显示伪装连接</span><br><span class="line">-v ：显示正在进行的工作</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 netstat --help 来查看。</span><br></pre></td></tr></table></figure>

<p><strong>使用示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示当前服务器的所有连接信息</span><br><span class="line">netstat -a</span><br><span class="line"> </span><br><span class="line"># 显示当前服务器的所有 TCP连接信息</span><br><span class="line">netstat -at</span><br><span class="line"> </span><br><span class="line"># 显示当前服务器的所有 UDP连接信息</span><br><span class="line">netstat -au</span><br></pre></td></tr></table></figure>

<p>一般来说经常使用这个命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示当前服务器的所有正在监听 TCP端口的信息，并且 显示进程PID和进程名，但不显示别名（域名以IP显示），这个命令算是最常用的了。</span><br><span class="line">netstat -lntp</span><br><span class="line"> </span><br><span class="line"># 输出示例</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name</span><br><span class="line">tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 14233/nginx.conf</span><br><span class="line">tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 1555/sshd</span><br><span class="line">tcp 0 0 0.0.0.0:443 0.0.0.0:* LISTEN 14233/nginx.conf</span><br><span class="line">tcp6 0 0 :::22 :::* LISTEN 1555/sshd</span><br><span class="line"># 显示监听 80端口的进程PID和进程名，grep是匹配并显示 符合关键词的行。</span><br><span class="line">netstat -lntpgrep &quot;:80&quot;</span><br><span class="line"> </span><br><span class="line"># 输出示例</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name</span><br><span class="line">tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 14233/nginx.conf</span><br><span class="line"> </span><br><span class="line"># 显示 ssh的监听情况，grep是匹配并显示 符合关键词的行。</span><br><span class="line">netstat -lntpgrep &quot;ssh&quot;</span><br><span class="line"> </span><br><span class="line"># 输出示例</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name</span><br><span class="line">tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 1555/sshd</span><br></pre></td></tr></table></figure>

<p>表头解释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Proto ：连接协议（tcp/udp是IPv4，tcp6/udp6是IPv6）</span><br><span class="line">Recv-Q ： 接收队列（基本都是0，如果不是代表堆积）</span><br><span class="line">Send-Q ：发送队列（基本都是0，如果不是代表堆积）</span><br><span class="line">Local Address ：本地地址和端口</span><br><span class="line">Foreign Address ：对外地址和端口</span><br><span class="line">State ：连接状态</span><br><span class="line">PID/Program name ：进程PID/进程名</span><br><span class="line"># 每隔 1秒显示一次当前服务器的所有连接信息</span><br><span class="line">netstat -c</span><br><span class="line"> </span><br><span class="line"># 每隔 1秒显示一次当前服务器的所有 TCP连接信息</span><br><span class="line">netstat -ct</span><br><span class="line"> </span><br><span class="line"># 每隔 1秒显示一次当前服务器的所有 UDP连接信息</span><br><span class="line">netstat -cu</span><br><span class="line"> </span><br><span class="line"># 显示当前服务器的路由表</span><br><span class="line">netstat -r</span><br><span class="line"> </span><br><span class="line"># 显示当前服务器的网络接口信息（网卡）</span><br><span class="line">netstat -i</span><br><span class="line"> </span><br><span class="line"># 显示当前服务器的网络统计信息</span><br><span class="line">netstat -s</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 netstat --help 来查看。</span><br></pre></td></tr></table></figure>

<p>在使用 netstat命令中，会显示一些连接状态，下面是各状态的意思：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LISTEN</span><br><span class="line"># 监听来自远程连接的 TCP端口连接请求</span><br><span class="line">SYN-SENT</span><br><span class="line"># 在发送连接请求后，等待匹配的连接请求</span><br><span class="line">SYN-RECEIVED</span><br><span class="line"># 在收到和发送一个连接请求后，等待对方对连接请求的确认</span><br><span class="line">ESTABLISHED</span><br><span class="line"># 代表一个打开的连接</span><br><span class="line">FIN-WAIT-1</span><br><span class="line"># 等待远程 TCP连接中断请求，或先前的连接中断请求的确认</span><br><span class="line">FIN-WAIT-2</span><br><span class="line"># 从远程 TCP等待连接中断请求</span><br><span class="line">CLOSE-WAIT</span><br><span class="line"># 等待从本地用户发来的连接中断请求</span><br><span class="line">CLOSING</span><br><span class="line"># 等待远程TCP对连接中断的确认</span><br><span class="line">LAST-ACK</span><br><span class="line"># 等待原来的发向远程TCP的连接中断请求的确认</span><br><span class="line">TIME-WAIT</span><br><span class="line"># 等待足够的时间，以确保远程TCP接收到连接中断请求的确认</span><br><span class="line">CLOSED</span><br><span class="line"># 没有任何连接状态（或者关闭了连接）</span><br></pre></td></tr></table></figure>

<h2 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h2><h3 id="ps-查看进程信息"><a href="#ps-查看进程信息" class="headerlink" title="ps 查看进程信息"></a>ps 查看进程信息</h3><p><strong>参数介绍：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 更多的命令可以用 man ps 来查看。</span><br></pre></td></tr></table></figure>

<p><strong>使用示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示当前进程信息</span><br><span class="line">ps -ef</span><br><span class="line"> </span><br><span class="line"># 显示 ssh 进程（ grep -v grep 表示排除关键词grep，因为使用 grep匹配ssh，也会把grep自己的进程匹配进去的）</span><br><span class="line">ps -efgrep -v grepgrep ssh</span><br><span class="line"># 输出示例</span><br><span class="line">UID PID PPID C STIME TTY TIME CMD #注意使用上面命令的话是不会显示表头这一行的，我只是为了更好理解加上的</span><br><span class="line">root 1738 1 0 01/27 ? 00:08:56 /usr/sbin/sshd</span><br><span class="line"># 待写...</span><br></pre></td></tr></table></figure>

<p>表头解释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UID ：启动进程的用户</span><br><span class="line">PID ：进程标识符（进程 1代表init 是整个系统的父进程）</span><br><span class="line">PPID ：父进程标识符（进程 1代表init 是整个系统的父进程）</span><br><span class="line">C ：CPU占用率 %</span><br><span class="line">STIME ：启动进程的日期</span><br><span class="line">TTY ：终端号</span><br><span class="line">TIME ：进程运行时间（非休眠状态）</span><br><span class="line">CMD ：启动进程的命令（或进程名/进程程序所在目录）</span><br></pre></td></tr></table></figure>

<h3 id="kill-结束进程"><a href="#kill-结束进程" class="headerlink" title="kill 结束进程"></a>kill 结束进程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 当我们想要结束一个进程的时候，我们可以用 kill 命令</span><br><span class="line"># PID是每个进程的一个唯一标识符，可以使用上面的 ps 命令来查看你要结束进程的PID。</span><br><span class="line"> </span><br><span class="line"># 假设我们要结束 Nginx的进程，那么这样做（ grep -v grep 表示排除关键词grep，因为使用 grep匹配ssh，也会把grep自己的进程匹配进去的）：</span><br><span class="line">ps -efgrep -v grepgrep &quot;nginx&quot;</span><br><span class="line"> </span><br><span class="line"># 输出示例</span><br><span class="line">UID PID PPID C STIME TTY TIME CMD #注意使用上面命令的话是不会显示表头这一行的，我只是为了更好理解加上的</span><br><span class="line">root 2356 1 0 04/03 ? 00:03:12 nginx</span><br><span class="line"> </span><br><span class="line"># 然后我们可以看到第二列的 PID 进程标识符，然后我们 kill 即可。</span><br><span class="line">kill -9 2356</span><br><span class="line"> </span><br><span class="line"># 中断进程 -2 相当于 程序运行在前台，然后输入 Ctrl+C 的效果，但是进程有权利忽略，所以不一定能结束进程</span><br><span class="line">kill -2 PID</span><br><span class="line"># 强制结束进程 -9 ，注意：强制结束某个进程后，可能会造成进程数据丢失等问题！</span><br><span class="line">kill -9 PID</span><br></pre></td></tr></table></figure>

<h3 id="free-查看内存使用信息"><a href="#free-查看内存使用信息" class="headerlink" title="free 查看内存使用信息"></a>free 查看内存使用信息</h3><p><strong>参数介绍：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-b ：以 字节(bytes/B) 为单位显示</span><br><span class="line">-k ：以 KB 为单位显示</span><br><span class="line">-m ：以 MB 为单位显示</span><br><span class="line">-g ：以 GB 为单位显示</span><br><span class="line">--tera ：以 TB 为单位显示</span><br><span class="line">-h ：以 人类易读的方式输出</span><br><span class="line">--si ：以 1000为单位转换，而不是 1024（1MB=1*1024KB改成 1MB=1*1000KB）</span><br><span class="line">-t ：显示 内存总数 行</span><br><span class="line">-s 时间 ：每隔 X秒输出一次（重复输出监视内存，使用 Ctrl+C 终止）</span><br><span class="line">-c 次数 ：每隔 1秒输出 X次</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 free --help 来查看。</span><br></pre></td></tr></table></figure>

<p><strong>使用示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示当前系统内存（默认 free = free -k，单位为 KB）</span><br><span class="line">free</span><br><span class="line"> </span><br><span class="line"># 输出示例</span><br><span class="line">total used free shared buffers cached</span><br><span class="line">Mem: 250872 237752 13120 0 34620 70520</span><br><span class="line">-/+ buffers/cache: 132612 118260</span><br><span class="line">Swap: 643064 1744 641320</span><br><span class="line"> </span><br><span class="line"># 以单位 B/KB/MB/GB/TG 显示当前系统内存</span><br><span class="line">free -b / free -k / free -m / free -g / free --tera</span><br><span class="line"> </span><br><span class="line"># 以人类易读的方式 显示当前系统内存</span><br><span class="line">free -h</span><br><span class="line"> </span><br><span class="line"># 输出示例</span><br><span class="line">total used free shared buffers cached</span><br><span class="line">Mem: 244M 232M 12M 0B 33M 68M</span><br><span class="line">-/+ buffers/cache: 129M 115M</span><br><span class="line">Swap: 627M 1.7M 626M</span><br><span class="line"> </span><br><span class="line"># 以 1000为单位转换并使用 MB为单位 显示当前系统内存（1MB=1*1024KB改成 1MB=1*1000KB）</span><br><span class="line">free -m --si</span><br><span class="line"> </span><br><span class="line"># 每隔 3秒并使用 MB为单位 显示一次当前系统内存</span><br><span class="line">free -ms 3</span><br><span class="line"> </span><br><span class="line"># 每隔 1秒并使用 MB为单位 显示 5次当前系统内存</span><br><span class="line">free -mc 5</span><br><span class="line"> </span><br><span class="line"># 每隔 2秒并使用 MB为单位 总共显示 6次当前系统内存</span><br><span class="line">free -m -c 6 -s 2</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 free --help 来查看。</span><br></pre></td></tr></table></figure>

<p><strong>表头解释：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 说明示例</span><br><span class="line">total used free shared buffers cached</span><br><span class="line">Mem: 244M 232M 12M 0B 33M 69M</span><br><span class="line">-/+ buffers/cache: 129M 115M</span><br><span class="line">Swap: 627M 1.7M 626M</span><br><span class="line"># Mem 行，表示物理内存统计</span><br><span class="line">total :系统 总物理内存</span><br><span class="line">used :系统 已分配物理内存（但非全部都在使用，包含buffers好cached）</span><br><span class="line">free :系统 未分配物理内存</span><br><span class="line">shared :系统 共享内存，一般都是 0</span><br><span class="line">buffers :系统 分配但未使用的 buffers数量</span><br><span class="line">cached :系统 分配但未使用的 cached数量</span><br><span class="line"> </span><br><span class="line"># -/+ buffers/cache 行，表示物理内存的缓存统计</span><br><span class="line">used :系统 实际使用的内存</span><br><span class="line"># user= Mem行 used-buffers-cached（232-33-69=130，因单位转换问题 所以会有一点差距）</span><br><span class="line">free :系统 实际可用的内存</span><br><span class="line"># free= Mem行 free+buffers+cached（12+33+69=114，因单位转换问题 所以会有一点差距）</span><br><span class="line"> </span><br><span class="line"># 所以我们看系统的真实 使用/剩余内存 只需要看这一行即可！</span><br><span class="line"> </span><br><span class="line"># Swap 行，表示硬盘的交换分区（虚拟内存）统计</span><br><span class="line">total :系统 总虚拟内存</span><br><span class="line">used :系统 已分配虚拟内存</span><br><span class="line">free :系统 未分配虚拟内存</span><br><span class="line"> </span><br><span class="line"># KVM虚拟化的VPS，可以用这个教程手动添加 SWAP虚拟内存：https://doub.bid/linux-jc7/</span><br></pre></td></tr></table></figure>

<h3 id="date-查看-x2F-设置-系统时间"><a href="#date-查看-x2F-设置-系统时间" class="headerlink" title="date 查看&#x2F;设置 系统时间"></a>date 查看&#x2F;设置 系统时间</h3><p><strong>参数介绍：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-d ：以指定的时间格式 显示时间</span><br><span class="line">-f ：显示 DATE FILE文件中的每行时间（我也不懂）</span><br><span class="line">-r ：显示 文件/文件夹 最后修改时间</span><br><span class="line">-s ：设置 系统时间</span><br><span class="line">-u ：显示 UTC时间</span><br><span class="line"> </span><br><span class="line"># 时间格式</span><br><span class="line"> </span><br><span class="line">%% - 显示字符%</span><br><span class="line">%a - 星期几的缩写(Sun..Sat)</span><br><span class="line">%A - 星期几的完整名称（Sunday...Saturday）</span><br><span class="line">%b - 月份的缩写(Jan..Dec)</span><br><span class="line">%B - 月份的完整名称(January..December)</span><br><span class="line">%c - 日期与时间。只输入date指令也会显示同样的结果</span><br><span class="line">%C - 世纪(年份除100后去整) [00-99]</span><br><span class="line">%d - 日期(以01-31来表示)。</span><br><span class="line">%D - 日期(含年月日)。</span><br><span class="line">%e - 一个月的第几天 ( 1..31)</span><br><span class="line">%F - 日期，同%Y-%m-%d</span><br><span class="line">%g - 年份(yy)</span><br><span class="line">%G - 年份(yyyy)</span><br><span class="line">%h - 同%b</span><br><span class="line">%H - 小时(00..23)</span><br><span class="line">%I - 小时(01..12)</span><br><span class="line">%j - 一年的第几天(001..366)</span><br><span class="line">%k - 小时( 0..23)</span><br><span class="line">%l - 小时( 1..12)</span><br><span class="line">%m - 月份(01..12)</span><br><span class="line">%M - 分钟(00..59)</span><br><span class="line">%n - 换行</span><br><span class="line">%N - 纳秒(000000000..999999999)</span><br><span class="line">%p - AM or PM</span><br><span class="line">%P - am or pm</span><br><span class="line">%r - 12小时制时间(hh:mm:ss [AP]M)</span><br><span class="line">%R - 24小时制时间(hh:mm)</span><br><span class="line">%s - 从00:00:00 1970-01-01 UTC开始的秒数</span><br><span class="line">%S - 秒(00..60)</span><br><span class="line">%t - 制表符</span><br><span class="line">%T - 24小时制时间(hh:mm:ss)</span><br><span class="line">%u - 一周的第几天(1..7); 1 表示星期一</span><br><span class="line">%U - 一年的第几周，周日为每周的第一天(00..53)</span><br><span class="line">%V - 一年的第几周，周一为每周的第一天 (01..53)</span><br><span class="line">%w - 一周的第几天 (0..6); 0 代表周日</span><br><span class="line">%W - 一年的第几周，周一为每周的第一天(00..53)</span><br><span class="line">%x - 日期(mm/dd/yy)</span><br><span class="line">%X - 时间(%H:%M:%S)</span><br><span class="line">%y - 年份(00..99)</span><br><span class="line">%Y - 年份 (1970…)</span><br><span class="line">%z - RFC-2822 风格数字格式时区(-0500)</span><br><span class="line">%Z - 时区(e.g., EDT), 无法确定时区则为空</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 date --help 来查看。</span><br></pre></td></tr></table></figure>

<p><strong>使用示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示 当前系统时间</span><br><span class="line">date</span><br><span class="line"># 输出：Wed Apr 5 12:38:44 CST 2017</span><br><span class="line"> </span><br><span class="line"># 显示当前系统的 UTC时间</span><br><span class="line">date -u</span><br><span class="line"># 输出：Wed Apr 5 04:30:06 UTC 2017</span><br><span class="line"># 显示 log.txt 文件的最后修改时间</span><br><span class="line">date -r log.txt</span><br><span class="line"># 显示 当前日期的年份</span><br><span class="line">date +%Y</span><br><span class="line"># 输出：2017</span><br><span class="line"> </span><br><span class="line"># 显示 当前日期的月份</span><br><span class="line">date +%m</span><br><span class="line"># 输出：4</span><br><span class="line"> </span><br><span class="line"># 显示 各种格式类型的日期</span><br><span class="line">date +%D</span><br><span class="line"># 输出：04/05/17</span><br><span class="line"> </span><br><span class="line">date +%Y-%m-%d</span><br><span class="line"># 输出：2017-04-05</span><br><span class="line"> </span><br><span class="line">date +%m/%d/%y</span><br><span class="line"># 输出：04/05/17</span><br><span class="line"> </span><br><span class="line">date +%m/%d/%Y</span><br><span class="line"># 输出：04/05/2017</span><br><span class="line"> </span><br><span class="line"># 显示 Unix时间戳</span><br><span class="line">date +%s</span><br><span class="line"># 输出：1491367399</span><br><span class="line"> </span><br><span class="line"># 显示一个完整的时间（年、月、日、小时、分钟、秒钟、周几 时区）</span><br><span class="line">date &quot;+%Y-%m-%d %H:%M:%S %u %Z&quot;</span><br><span class="line"># 输出：2017-04-05 12:12:15 3 CST</span><br><span class="line"> </span><br><span class="line"># 设置 系统时间（年、月、日）</span><br><span class="line">date -s &quot;2017-04-05&quot;</span><br><span class="line"> </span><br><span class="line"># 设置 系统时间（小时、分钟、秒钟）</span><br><span class="line">date -s &quot;10:29:05&quot;</span><br><span class="line"> </span><br><span class="line"># 设置 系统时间（年、月、日、小时、分钟、秒钟）</span><br><span class="line">date -s &quot;2017-04-05 10:29:05&quot;</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 date --help 来查看。</span><br></pre></td></tr></table></figure>

<p><strong>再教你们一个修改时区为上海（北京）时区的方法：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>

<p>然后再用 <code>date</code> 查看时间，就会发现时区变为 CST 了。</p>
<h3 id="chmod-修改-文件-x2F-文件夹-权限"><a href="#chmod-修改-文件-x2F-文件夹-权限" class="headerlink" title="chmod 修改 文件&#x2F;文件夹 权限"></a>chmod 修改 文件&#x2F;文件夹 权限</h3><p><strong>参数介绍：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-c :只输出被改变权限的文件信息</span><br><span class="line">-f :当chmod不能改变文件模式时，不通知文件的用户</span><br><span class="line">-R :可递归遍历子目录，把修改应到目录下所有文件和子目录</span><br><span class="line">-v :无论修改是否成功，输出每个文件的信息</span><br><span class="line"> </span><br><span class="line"># 操作符号：</span><br><span class="line"> </span><br><span class="line">+ :添加某个权限。</span><br><span class="line">- :取消某个权限。</span><br><span class="line">= :赋予给定权限并取消其他所有权限（如果有的话）。</span><br><span class="line"> </span><br><span class="line"># 权限设置字母：</span><br><span class="line"> </span><br><span class="line">r :可读</span><br><span class="line">w :可写</span><br><span class="line">x :可执行</span><br><span class="line">X :只有目标文件对某些用户是可执行的或该目标文件是目录时才追加x 属性</span><br><span class="line">s :在文件执行时把进程的属主或组ID置为该文件的文件属主。方式“u＋s”设置文件的用户ID位，“g＋s”设置组ID位</span><br><span class="line">t :保存程序的文本到交换设备上</span><br><span class="line">u :当前用户的权限</span><br><span class="line">g :当前用户同组的权限</span><br><span class="line">o :其他用户的权限</span><br><span class="line"> </span><br><span class="line"># 权限设定数字：</span><br><span class="line"> </span><br><span class="line"># 数字表示的属性含义：</span><br><span class="line">0 ：表示没有权限</span><br><span class="line">1 ：表示可执行权限</span><br><span class="line">2 ：表示可写权限</span><br><span class="line">4 ：表示可读权限</span><br><span class="line"> </span><br><span class="line"># 然后将其相加，所以数字属性的格式应为3个从0到7的八进制数，其顺序是（u）（g）（o）。</span><br><span class="line"># 如果想让某个文件的属主有“读/写”二种权限，需要把4（可读）+2（可写）＝6（读/写）。</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 chmod --help 来查看。</span><br></pre></td></tr></table></figure>

<p><strong>使用示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 当需要运行 可执行的脚本或者程序（比如 Go语言编写的软件）的时候，需要赋予执行权限</span><br><span class="line">chmod +x ssr.sh</span><br><span class="line"> </span><br><span class="line"># 赋予 log.txt 文件可读权限</span><br><span class="line">chmod 444 log.txt</span><br><span class="line"> </span><br><span class="line"># 赋予 /ver/log 文件夹 可读、可写权限</span><br><span class="line">chmod 666 log.txt</span><br><span class="line"> </span><br><span class="line"># 赋予 /home/www 文件夹 可读、可写、可执行权限</span><br><span class="line">chmod 777 log.txt</span><br><span class="line"> </span><br><span class="line"># 赋予 /home/www 文件夹极其所有子目录和文件 可读、可写、可执行权限</span><br><span class="line">chmod -R 777 log.txt</span><br><span class="line"># 更多的命令可以用 chmod --help 来查看。</span><br></pre></td></tr></table></figure>

<p> </p>
<h3 id="uname-获取操作系统信息"><a href="#uname-获取操作系统信息" class="headerlink" title="uname 获取操作系统信息"></a>uname 获取操作系统信息</h3><p><strong>参数介绍：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">–a：显示 全部信息</span><br><span class="line">–m：显示 系统位数</span><br><span class="line">–n：显示 主机名称</span><br><span class="line">–r：显示 操作系统的发行编号</span><br><span class="line">–s：显示 操作系统的名称</span><br><span class="line">–v：显示 操作系统的版本</span><br><span class="line">–p：输出 处理器类型 或“unknown”</span><br><span class="line">–i：输出 硬件平台 或“unknown”</span><br><span class="line">–o：输出 操作系统名称</span><br><span class="line"> </span><br><span class="line"># 更多的命令可以用 uname –help 来查看。</span><br></pre></td></tr></table></figure>

<p><strong>使用示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@doub.bid:~# uname #在使用 uname 的时候，相当于是使用 uname -s</span><br><span class="line">Linux</span><br><span class="line">root@doub.bid:~# uname -a</span><br><span class="line">Linux doub.bid 2.6.32–042stab120.6 #1 SMP Thu Oct 27 16:59:03 MSK 2016 i686 GNU/Linux</span><br><span class="line">root@doub.bid:~# uname -m #输出一般是64位: x86_64 / 32位: i386 或分支 i686</span><br><span class="line">i686</span><br><span class="line">root@doub.bid:~# uname -n</span><br><span class="line">doub.bid</span><br><span class="line">root@doub.bid:~# uname -r</span><br><span class="line">2.6.32–042stab120.6</span><br><span class="line">root@doub.bid:~# uname -s</span><br><span class="line">Linux</span><br><span class="line">root@doub.bid:~# uname -v</span><br><span class="line">#1 SMP Thu Oct 27 16:59:03 MSK 2016</span><br><span class="line">root@doub.bid:~# uname -p</span><br><span class="line">unknown</span><br><span class="line">root@doub.bid:~# uname -i</span><br><span class="line">unknown</span><br><span class="line">root@doub.bid:~# uname -o</span><br><span class="line">GNU/Linux</span><br></pre></td></tr></table></figure>

<p>我只是暂时把我想到的写出来了，我还会继续慢慢添加的，有什么建议可以在下面留言评论。</p>
<p><strong>转载请超链接注明：</strong><a href="https://doub.bid/">逗比根据地</a> » <a href="https://doub.bid/linux-jc8/">『持续更新』Linux 常用命令简单介绍 —— 基础篇</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Nginx</tag>
        <tag>Linux</tag>
        <tag>Github</tag>
        <tag>BBR</tag>
        <tag>锐速</tag>
        <tag>LNMP</tag>
        <tag>OpenVZ</tag>
        <tag>Apache</tag>
        <tag>HHVM</tag>
        <tag>LAMP</tag>
        <tag>LNMPA</tag>
        <tag>LNMT</tag>
        <tag>MariaDB</tag>
        <tag>Memcached</tag>
        <tag>MySQL</tag>
        <tag>OpenResty</tag>
        <tag>Percona</tag>
        <tag>PHP</tag>
        <tag>PPC</tag>
        <tag>Pure-Ftpd</tag>
        <tag>Redis</tag>
        <tag>Tengine</tag>
        <tag>Tomcat</tag>
        <tag>常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux VPS管理常用命令之tar.gz和zip</title>
    <url>/2018/11/07/linux-vps%E7%AE%A1%E7%90%86%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%B9%8Btar-gz%E5%92%8Czip/</url>
    <content><![CDATA[<h2 id="一、tar-gz压缩与解压缩"><a href="#一、tar-gz压缩与解压缩" class="headerlink" title="一、tar.gz压缩与解压缩"></a>一、<a href="https://www.xxorg.com/archives/tag/tar-gz">tar.gz</a>压缩与解压缩</h2><p>1、压缩命令：</p>
<p>命令格式：<em>tar  -zcf   压缩文件名.<a href="https://www.xxorg.com/archives/tag/tar-gz">tar.gz</a>   被压缩文件名</em> 可先切换到当前目录下。压缩文件名和被压缩文件名都可加入路径。</p>
<p>2、解压缩命令： 命令格式：<em>tar  -zxf   压缩文件名.tar.gz</em> 解压缩后的文件只能放在当前的目录。</p>
<h2 id="二、zip压缩与解压缩"><a href="#二、zip压缩与解压缩" class="headerlink" title="二、zip压缩与解压缩"></a>二、zip压缩与解压缩</h2><p>1、压缩命令：</p>
<p>命令格式：<em>zip -r 压缩文件名.zip 被压缩文件目录</em> 用zip格式压缩指定目录或文件</p>
<p>2、解压缩命令</p>
<p><em><a href="https://www.xxorg.com/archives/tag/unzip">unzip</a> 压缩文件名.zip</em></p>
<p>或 <em><a href="https://www.xxorg.com/archives/tag/unzip">unzip</a> 压缩文件名.zip -d 解压到的目录</em> 解压zip文件到当前目录，或者解压到指定目录</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/11/linux_zip_tar_gz.jpg" alt="Linux VPS管理常用命令之tar.gz和zip"></p>
<h2 id="三、tar-gz和zip压缩参数详解"><a href="#三、tar-gz和zip压缩参数详解" class="headerlink" title="三、tar.gz和zip压缩参数详解"></a>三、tar.gz和zip压缩参数详解</h2><p>1、tar.gz参数详解，使用该命令时，主选项是必须要有的，它告诉tar要做什么事情，辅选项是辅助使用的，可以选用。</p>
<p>#主选项： -c 创建新的档案文件。如果用户想备份一个目录或是一些文件，就要选择这个选项。 -r 把要存档的文件追加到档案文件的未尾。例如用户已经做好备份文件，又发现还有一个目录或是一些文件忘记备份了，这时可以使用该选项，将忘记的目录或文件追加到备份文件中。 -t 列出档案文件的内容，查看已经备份了哪些文件。 -u 更新文件。就是说，用新增的文件取代原备份文件，如果在备份文件中找不到要更新的文件，则把它追加到备份文件的最后。 -x 从档案文件中释放文件。</p>
<p>#辅助选项： -b 该选项是为磁带机设定的，其后跟一数字，用来说明区块的大小，系统预设值为20（20×512 bytes）。 -f 指定档案文件名或设备名，这个选项通常是必选的。 -k 保存已经存在的文件。例如把某个文件还原，在还原的过程中遇到相同的文件，不会进行覆盖。 -m 在还原文件时，把所有文件的修改时间设定为现在。 -M 创建多卷的档案文件，以便在几个磁盘中存放。 -v 详细报告tar处理的文件信息。如无此选项，tar不报告文件信息。 -w 每一步都要求确认。 -z 用gzip来压缩&#x2F;解压缩文件，加上该选项后可以将档案文件进行压缩，但还原时也一定要使用该选项进行解压缩。</p>
<p>2、zip参数详解</p>
<p>-c：将解压缩的结果<br>-l：显示压缩文件内所包含的文件<br>-p：与-c参数类似，会将解压缩的结果显示到屏幕上，但不会执行任何的转换<br>-t：检查压缩文件是否正确<br>-u：与-f参数类似，但是除了更新现有的文件外，也会将压缩文件中的其它文件解压缩到目录中<br>-v：执行是时显示详细的信息<br>-z：仅显示压缩文件的备注文字<br>-a：对文本文件进行必要的字符转换<br>-b：不要对文本文件进行字符转换<br>-C：压缩文件中的文件名称区分大小写<br>-j：不处理压缩文件中原有的目录路径<br>-L：将压缩文件中的全部文件名改为小写<br>-M：将输出结果送到more程序处理<br>-n：解压缩时不要覆盖原有的文件<br>-o：不必先询问用户，unzip执行后覆盖原有文件<br>-P：使用zip的密码选项<br>-q：执行时不显示任何信息<br>-s：将文件名中的空白字符转换为底线字符<br>-V：保留VMS的文件版本信息<br>-X：解压缩时同时回存文件原来的UID&#x2F;GID</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>tar.gz</tag>
        <tag>zip</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 添加 SWAP 交换内存/虚拟内存 的简单方法</title>
    <url>/2017/07/11/linux-%E6%B7%BB%E5%8A%A0-swap-%E4%BA%A4%E6%8D%A2%E5%86%85%E5%AD%98%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98-%E7%9A%84%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>最近见一些人买了 128MB小内存的KVM小鸡想要安装锐速，但是老是提示内存不足，或者运行ShadowsocksR服务端老被系统Kill，那么可以适当的添加一些虚拟内存，以避免内存不足的问题。</p>
<hr>
<h3 id="SWAP简单介绍"><a href="#SWAP简单介绍" class="headerlink" title="SWAP简单介绍"></a>SWAP简单介绍</h3><p>Linux的内存分为 物理内存 和 虚拟内存，虚拟内存(SWAP)也叫交换区、交换分区等。</p>
<p>当运行程序，产生进程时。系统会判断当前物理内存是否还有空闲内存 以允许进程调入内存运行，如果有那么 则直接调入内存进行运行；如果没有，那么会根据优先级选择一个进程挂起，把该进程交换到SWAP中等待，然后把新的进程调入到内存中运行。</p>
<p>根据这种换入和换出，实现了内存的循环利用，让用户感觉不到内存的限制。从这也可以看出SWAP扮演了一个非常重要的角色，就是暂存被换出的进程。</p>
<hr>
<p>当物理内存使用完或者达到一定比例之后，系统会自动使用SWAP做临时的内存使用。当物理内存和SWAP都被使用完那么就会出错：<strong>out of memory</strong></p>
<p>对于使用多大比例物理内存之后开始使用SWAP，在系统的配置文件中可以通过调整参数进行修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat  /proc/sys/vm/swappiness</span><br></pre></td></tr></table></figure>

<p>默认是 <code>60</code> ，一般不需要更改，当数值为 <code>0</code> 的时候，就会尽量使用物理内存直到用完才会使用SWAP，当数值为<code>100</code> 的时候，就会尽量使用SWAP。</p>
<hr>
<p>SWAP是从硬盘中虚拟出来的，所以速度由硬盘的读写速度决定，<strong>如果你的Linux服务器IO很低，硬盘是 HDD或者石头盘 钻石盘，那么效果会很差。</strong></p>
<p>如果你的VPS没有SWAP，那么添加一些可能会提高性能，但不建议添加太多，否则也是浪费，而且SWAP始终是硬盘虚拟的，比不上物理内存。</p>
<hr>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote>
<p>注意：只有虚拟化构架为XEN、KVM、VM-Ware的VPS可以自己添加SWAP，<strong>OpenVZ不支持添加SWAP！</strong></p>
</blockquote>
<h3 id="root-账号"><a href="#root-账号" class="headerlink" title="root 账号"></a>root 账号</h3><p><strong>添加SWAP操作，必须是 root 用户才可以操作</strong>，所以请用 root 账号登陆服务器或者切换为 root 用户：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure>

<p>输入执行后，会提示你输入 root 账号的密码，输入正确密码并回车后，没有报错那么就可以继续下面的步骤了。</p>
<h3 id="检查硬盘大小"><a href="#检查硬盘大小" class="headerlink" title="检查硬盘大小"></a>检查硬盘大小</h3><p>因为SWAP是在硬盘中建立一个交换区文件，所以需要磁盘中最少有 这个文件大小 的空闲空间。</p>
<p>输入执行这个命令，即可看到你的VPS当前磁盘大小和使用情况：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df -m</span><br></pre></td></tr></table></figure>

<p>从下面的示例中可以看到，这个VPS大概有 15GB的硬盘大小(14621 MB)，用了 1GB(1117 MB)，剩下12.5GB(12763 MB)大小。</p>
<p>既然硬盘大小充足，那就可以继续下面步骤了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># VPS示例提示 #</span><br><span class="line"># 下列参数表头分别为：文件系统、总大小(单位MB)、已用大小(单位MB)、未用大小(单位MB)、使用率(%)、挂载点</span><br><span class="line">root@doub.io:~# df -m</span><br><span class="line">Filesystem 1M-blocks Used Available Use% Mounted on</span><br><span class="line">rootfs 14621 1117 12763 9% /</span><br><span class="line">udev 10 0 10 0% /dev</span><br><span class="line">tmpfs 50 1 50 1% /run</span><br><span class="line">/dev/disk/by-uuid/12dc23 14621 1117 12763 9% /</span><br><span class="line">tmpfs 5 0 5 0% /run/lock</span><br><span class="line">tmpfs 202 0 202 0% /run/shm</span><br><span class="line"># VPS示例提示 #</span><br></pre></td></tr></table></figure>

<h2 id="添加交换区SWAP"><a href="#添加交换区SWAP" class="headerlink" title="添加交换区SWAP"></a>添加交换区SWAP</h2><h3 id="查看-当前SWAP大小"><a href="#查看-当前SWAP大小" class="headerlink" title="查看 当前SWAP大小"></a>查看 当前SWAP大小</h3><p>我们可以先查看一下当前的SWAP大小（单位 MB）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">free -m</span><br><span class="line"># VPS示例提示 #</span><br><span class="line">root@doub.io:~# free -m</span><br><span class="line">total used free shared buffers cached</span><br><span class="line">Mem: 244 141 103 0 38 76</span><br><span class="line">-/+ buffers/cache: 26 218</span><br><span class="line">Swap: 127 0 127</span><br><span class="line"># VPS示例提示 #</span><br></pre></td></tr></table></figure>

<h3 id="创建-SWAP文件"><a href="#创建-SWAP文件" class="headerlink" title="创建 SWAP文件"></a>创建 SWAP文件</h3><p>从上面的VPS示例中可以看到，这个VPS物理内存约等于 256MB，所以可以添加 <strong>物理内存*2的SWAP&#x3D;512MB</strong> 。</p>
<p>bs 是字节数，这里是1024 B，count 是blocks块数，of 是要输出的SWAP交换区文件<strong>（本文章仅为示例，文件和位置可以自己改）</strong></p>
<p>所以： <strong>bs&#x3D;1024 B&#x3D;1 KB，512000 * 1 KB&#x3D;512000 KB &#x2F; 1024 ≈ 512 MB</strong> （为了直观的看，就按1000来算了 <img src="https://doub.io/wp-content/themes/yusi1.0/img/smilies/icon_lol.gif" alt=":lol:">）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd if=/dev/zero of=/var/swapfile1 bs=1024 count=512000</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># VPS示例提示 #</span><br><span class="line">root@doub.io:~# dd if=/dev/zero of=/var/swapfile1 bs=1024 count=512000</span><br><span class="line">512000+0 records in</span><br><span class="line">512000+0 records out</span><br><span class="line">524288000 bytes (524 MB) copied, 4.09314 s, 128 MB/s</span><br><span class="line"># VPS示例提示 #</span><br></pre></td></tr></table></figure>

<p>查看文件是否创建成功，大小是否正确(因为按1000计算，所以会不足 512MB)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">du -ah /vargrep &quot;swapfile1&quot;</span><br><span class="line"># VPS示例提示 #</span><br><span class="line">root@doub.io:~# du -ah /vargrep &quot;swapfile1&quot;</span><br><span class="line">501M/var/swapfile1</span><br></pre></td></tr></table></figure>

<h3 id="建立-SWAP文件"><a href="#建立-SWAP文件" class="headerlink" title="建立 SWAP文件"></a>建立 SWAP文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkswap /var/swapfile1</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># VPS示例提示 #</span><br><span class="line">root@doub.io:~# mkswap /var/swapfile1</span><br><span class="line">Setting up swapspace version 1, size = 511996 KiB</span><br><span class="line">no label, UUID=c48fef60-7d49-450c-bfd1-7a7826de7cdd</span><br><span class="line"># VPS示例提示 #</span><br></pre></td></tr></table></figure>

<h3 id="启用-SWAP文件"><a href="#启用-SWAP文件" class="headerlink" title="启用 SWAP文件"></a>启用 SWAP文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">swapon /var/swapfile1</span><br></pre></td></tr></table></figure>

<p>启用 SWAP文件没有任何提示，启用后我们查看一下是否正常启用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">swapon -s</span><br><span class="line">free -m</span><br></pre></td></tr></table></figure>

<p>可以看到下面的SWAP中，成功添加启用了一个 SWAP交换区。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># VPS示例提示 #</span><br><span class="line">root@doub.io:~# swapon -s</span><br><span class="line">FilenameTypeSizeUsedPriority</span><br><span class="line">/dev/vda2 partition1310680-1</span><br><span class="line">/var/swapfile1 file5119960-2</span><br><span class="line"> </span><br><span class="line">root@doub.io:~# free -m</span><br><span class="line">total used free shared buffers cached</span><br><span class="line">Mem: 244 240 4 0 34 175</span><br><span class="line">-/+ buffers/cache: 30 214</span><br><span class="line">Swap: 627 0 627</span><br><span class="line"># VPS示例提示 #</span><br></pre></td></tr></table></figure>

<h3 id="开机启动加载"><a href="#开机启动加载" class="headerlink" title="开机启动加载"></a>开机启动加载</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;/var/swapfile1 swap swap defaults 0 0&quot; &gt;&gt; /etc/fstab</span><br></pre></td></tr></table></figure>

<hr>
<p>如果你又不想要刚才新添加的SWAP了，那么可以取消它们。</p>
<h3 id="取消-SWAP文件"><a href="#取消-SWAP文件" class="headerlink" title="取消 SWAP文件"></a>取消 SWAP文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">swapoff /var/swapfile1</span><br></pre></td></tr></table></figure>

<h3 id="取消-开机启动加载"><a href="#取消-开机启动加载" class="headerlink" title="取消 开机启动加载"></a>取消 开机启动加载</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &quot;/swapfile1/d&quot; /etc/fstab</span><br></pre></td></tr></table></figure>

<p>取消后，可以再 <code>free -m</code> 查看一下SWAP，确定取消了，那么就可以删除 SWAP文件了。</p>
<h3 id="删除-SWAP文件"><a href="#删除-SWAP文件" class="headerlink" title="删除 SWAP文件"></a>删除 SWAP文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf /var/swapfile1</span><br></pre></td></tr></table></figure>

<p>有什么问题请在下面留言！</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SWAP</tag>
      </tags>
  </entry>
  <entry>
    <title>LinuxMirrors一键脚本更换Linux系统源提高软件安装速度（包含10+国内源）</title>
    <url>/2022/02/08/linuxmirrors%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC%E6%9B%B4%E6%8D%A2linux%E7%B3%BB%E7%BB%9F%E6%BA%90%E6%8F%90%E9%AB%98%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E9%80%9F%E5%BA%A6%EF%BC%88%E5%8C%85%E5%90%AB10/</url>
    <content><![CDATA[<p>我们在选择海外服务器的时候是不是在安装软件比较慢？主要是海外服务器的镜像源都引用的海外节点的。这里我们一般会将服务器登录之后就更换国内的镜像源，这样安装软件的时候速度会比较快。老左在网站中也有分享过一些类似的文章，比如更换163、阿里云的源，包含Debian、Centos等。这样更换稍微有点笨拙。</p>
<p>在这里，老左看到有LinuxMirrors一键脚本可以用来更换Linux系统的源，直接运行脚本即可。包含我们常见的Debian、CentOS、Ubuntu等镜像。</p>
<p><strong>第一、脚本命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -sSL https://gitee.com/SuperManito/LinuxMirrors/raw/main/ChangeMirrors.sh)</span><br></pre></td></tr></table></figure>

<p>Select Code</p>
<p>Copy</p>
<p>这里我们执行命令即可。</p>
<p><strong>第二、安装进程</strong></p>
<p>我们看看安装的过程。</p>
<p><img src="/2022/02/ChangeMirrors-1.jpg"></p>
<p>这里我们可以根据需要选择源地址。比如选择1，为阿里云。</p>
<p><img src="/2022/02/ChangeMirrors-2.jpg"></p>
<p>根据向导替换源后执行更新。最后如果没有报错，那就完全没有问题。</p>
<p>这样，是不是比较简单的就可以将服务器的Linux镜像源更新到我们的国内源，安装软件的速度和效率提高不少。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>LinuxMirrors</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下查看网速脚本</title>
    <url>/2022/01/06/linux%E4%B8%8B%E6%9F%A5%E7%9C%8B%E7%BD%91%E9%80%9F%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>使用方法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./n1.sh eth0</span><br></pre></td></tr></table></figure>

<p>cat n1.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">eth=<span class="variable">$1</span></span><br><span class="line">RXpre=$(<span class="built_in">cat</span> /proc/net/dev  grep <span class="variable">$eth</span>  <span class="built_in">tr</span> : <span class="string">&quot; &quot;</span>  awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">TXpre=$(<span class="built_in">cat</span> /proc/net/dev  grep <span class="variable">$eth</span>  <span class="built_in">tr</span> : <span class="string">&quot; &quot;</span>  awk <span class="string">&#x27;&#123;print $10&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line">RXnext=$(<span class="built_in">cat</span> /proc/net/dev  grep <span class="variable">$eth</span>  <span class="built_in">tr</span> : <span class="string">&quot; &quot;</span>  awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">TXnext=$(<span class="built_in">cat</span> /proc/net/dev  grep <span class="variable">$eth</span>  <span class="built_in">tr</span> : <span class="string">&quot; &quot;</span>  awk <span class="string">&#x27;&#123;print $10&#125;&#x27;</span>)</span><br><span class="line"><span class="comment">#clear</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\t RX `date +%k:%M:%S` TX&quot;</span></span><br><span class="line">RX=$((<span class="variable">$&#123;RXnext&#125;</span>-<span class="variable">$&#123;RXpre&#125;</span>))</span><br><span class="line">TX=$((<span class="variable">$&#123;TXnext&#125;</span>-<span class="variable">$&#123;TXpre&#125;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$RX</span> -lt 1024 ]];<span class="keyword">then</span></span><br><span class="line">RX=<span class="string">&quot;<span class="variable">$&#123;RX&#125;</span>B/s&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [[ <span class="variable">$RX</span> -gt 1048576 ]];<span class="keyword">then</span></span><br><span class="line">RX=$(<span class="built_in">echo</span> <span class="variable">$RX</span>  awk <span class="string">&#x27;&#123;print $1/1048576 &quot;MB/s&quot;&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">RX=$(<span class="built_in">echo</span> <span class="variable">$RX</span>  awk <span class="string">&#x27;&#123;print $1/1024 &quot;KB/s&quot;&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$TX</span> -lt 1024 ]];<span class="keyword">then</span></span><br><span class="line">TX=<span class="string">&quot;<span class="variable">$&#123;TX&#125;</span>B/s&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [[ <span class="variable">$TX</span> -gt 1048576 ]];<span class="keyword">then</span></span><br><span class="line">TX=$(<span class="built_in">echo</span> <span class="variable">$TX</span>  awk <span class="string">&#x27;&#123;print $1/1048576 &quot;MB/s&quot;&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">TX=$(<span class="built_in">echo</span> <span class="variable">$TX</span>  awk <span class="string">&#x27;&#123;print $1/1024 &quot;KB/s&quot;&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="iftop"><a href="#iftop" class="headerlink" title="iftop"></a>iftop</h1><p>1、iftop界面相关说明</p>
<p>界面上面显示的是类似刻度尺的刻度范围，为显示流量图形的长条作标尺用的。 中间的&lt;&#x3D; &#x3D;&gt;这两个左右箭头，表示的是流量的方向。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TX：发送流量 </span><br><span class="line">RX：接收流量 </span><br><span class="line">TOTAL：总流量 </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2、iftop相关参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-i设定监测的网卡，如：# iftop -i eth1 </span><br><span class="line">-B 以bytes为单位显示流量(默认是bits)，如：# iftop -B </span><br><span class="line">-n使host信息默认直接都显示IP，如：# iftop -n </span><br><span class="line">-N使端口信息默认直接都显示端口号，如: # iftop -N </span><br><span class="line">-F显示特定网段的进出流量，如# iftop -F 10.10.1.0/24或# iftop -F 10.10.1.0/255.255.255.0 </span><br><span class="line">-h（display this message），帮助，显示参数信息 </span><br><span class="line">-p使用这个参数后，中间的列表显示的本地主机信息，出现了本机以外的IP信息; </span><br><span class="line">-b使流量图形条默认就显示; </span><br><span class="line">-f这个暂时还不太会用，过滤计算包用的; </span><br><span class="line">-P使host信息及端口信息默认就都显示; </span><br><span class="line">-m设置界面最上边的刻度的最大值，刻度分五个大段显示，例：# iftop -m 100M </span><br></pre></td></tr></table></figure>

<p>3、进入iftop画面后的一些操作命令(注意大小写)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">按h切换是否显示帮助; </span><br><span class="line">按n切换显示本机的IP或主机名; </span><br><span class="line">按s切换是否显示本机的host信息; </span><br><span class="line">按d切换是否显示远端目标主机的host信息; </span><br><span class="line">按t切换显示格式为2行/1行/只显示发送流量/只显示接收流量; </span><br><span class="line">按N切换显示端口号或端口服务名称; </span><br><span class="line">按S切换是否显示本机的端口信息; </span><br><span class="line">按D切换是否显示远端目标主机的端口信息; </span><br><span class="line">按p切换是否显示端口信息; </span><br><span class="line">按P切换暂停/继续显示; </span><br><span class="line">按b切换是否显示平均流量图形条; </span><br><span class="line">按B切换计算2秒或10秒或40秒内的平均流量; </span><br><span class="line">按T切换是否显示每个连接的总流量; </span><br><span class="line">按l打开屏幕过滤功能，输入要过滤的字符，比如ip,按回车后，屏幕就只显示这个IP相关的流量信息; </span><br><span class="line">按L切换显示画面上边的刻度;刻度不同，流量图形条会有变化; </span><br><span class="line">按j或按k可以向上或向下滚动屏幕显示的连接记录; </span><br><span class="line">按1或2或3可以根据右侧显示的三列流量数据进行排序; </span><br><span class="line">按&lt;根据左边的本机名或IP排序; </span><br><span class="line">按&gt;根据远端目标主机的主机名或IP排序; </span><br><span class="line">按o切换是否固定只显示当前的连接; </span><br><span class="line">按f可以编辑过滤代码</span><br><span class="line">按!可以使用Shell命令</span><br><span class="line">按q退出监控。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>网速</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下锐速一键安装脚本及Centos、Debian更换内核教程</title>
    <url>/2018/10/24/linux%E4%B8%8B%E9%94%90%E9%80%9F%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E5%8F%8Acentos%E3%80%81debian%E6%9B%B4%E6%8D%A2%E5%86%85%E6%A0%B8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><strong>一、安装</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -qO /tmp/appex.sh &quot;https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh&quot; &amp;&amp; bash /tmp/appex.sh &#x27;install&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>二、更换内核方法</strong>： （一）CentOS系统更换内核 1、CentOS 6 32位系统更换内核为：2.6.32-504.el6</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh http://vault.centos.org/6.6/os/i386/Packages/kernel-firmware-2.6.32-504.el6.noarch.rpm --nodeps --force</span><br><span class="line">rpm -ivh http://vault.centos.org/6.6/os/i386/Packages/kernel-2.6.32-504.el6.i686.rpm --force</span><br></pre></td></tr></table></figure>

<p>2、CentOS 6 64位系统更换内核为：2.6.32-642.el6.x86_64</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh http://vault.centos.org/6.8/os/x86_64/Packages/kernel-firmware-2.6.32-642.el6.noarch.rpm --nodeps --force</span><br><span class="line">rpm -ivh http://vault.centos.org/6.8/os/x86_64/Packages/kernel-2.6.32-642.el6.x86_64.rpm --force</span><br></pre></td></tr></table></figure>

<p>3、CentOS 7 系统更换内核为： 3.10.0-229.1.2.el7.x86_64</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh http://vault.centos.org/7.0.1406/os/x86_64/Packages/kernel-3.10.0-123.el7.x86_64.rpm --force</span><br></pre></td></tr></table></figure>

<p>4、查看内核是否更换成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -qa  grep kernel</span><br></pre></td></tr></table></figure>

<p>如果成功，重启VPS即可。</p>
<p>（二）Debian系统更换内核 debian 8 64更换内核为3.16.0.4-deb内核 1、安装新内核</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://security-cdn.debian.org/pool/updates/main/l/linux/linux-image-3.16.0-4-amd64_3.16.43-2+deb8u5_amd64.deb</span><br><span class="line">dpkg -i linux-image-3.16.0-4*.deb</span><br></pre></td></tr></table></figure>

<p>2、删除就内核</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg -lgrep linux-image</span><br></pre></td></tr></table></figure>

<p>会显示所有内核，删除除3.16.0.4以外的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get remove 内核</span><br></pre></td></tr></table></figure>

<p>更新系统引导</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure>

<p>重启即可</p>
<p><strong>三、强制安装指定内核版本的锐速</strong>:</p>
<p>查看内核 uname -r，发现版本号为3.10.0-514.2.2.el7.x86_64 查看版本库：<a href="https://github.com/0oVicero0/serverSpeeder_kernel/blob/master/serverSpeeder.txt">https://github.com/0oVicero0/serverSpeeder_kernel&#x2F;blob&#x2F;master&#x2F;serverSpeeder.txt</a>，找个最接近的 开始安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; chmod +x appex.sh &amp;&amp; bash appex.sh install &#x27;3.10.0-123.el7.x86_64&#x27;</span><br></pre></td></tr></table></figure>

<p>查看是否启动：&#x2F;appex&#x2F;bin&#x2F;serverSpeeder.sh start 如果不能，换个版本，继续重复以上步骤。</p>
<p><strong>四、卸载</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -qO /tmp/appex.sh &quot;https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh&quot; &amp;&amp; bash /tmp/appex.sh &#x27;uninstall&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>五、使用</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">启动命令 /appex/bin/serverSpeeder.sh start</span><br><span class="line">停止加速 /appex/bin/serverSpeeder.sh stop</span><br><span class="line">状态查询 /appex/bin/serverSpeeder.sh status</span><br><span class="line">更新许可 /appex/bin/serverSpeeder.sh renewLic</span><br><span class="line">重新启动 /appex/bin/serverSpeeder.sh restart</span><br></pre></td></tr></table></figure>

<p><strong>特征: 0.#0 Only for Linux.</strong></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>CentOS</tag>
        <tag>Debian</tag>
        <tag>锐速</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 常用配置及硬件检测命令</title>
    <url>/2021/03/25/linux-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E7%A1%AC%E4%BB%B6%E6%A3%80%E6%B5%8B%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><strong>查看系统版本相关命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ uname -a # 查看系统，主机名，内核版本，系统架构等命令</span><br><span class="line">$ top # 总览系统全面信息命令，Ctrl + C 退出界面</span><br><span class="line">$ hostname # 查看服务器主机名命令</span><br><span class="line">$ cat /etc/issue # 查看 Ubuntu Debian 系发行版版本命令</span><br><span class="line">$ cat /etc/redhat-release # 查看 CentOS RedHat 系发行版版本命令</span><br><span class="line">$ cat /etc/os-release # 查看通用 Linux 发行版版本命令</span><br></pre></td></tr></table></figure>

<p><strong>查看CPU相关命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat /proc/cpuinfo # 查看 CPU 核心数，架构，名字，频率，缓存，指令集等命令</span><br><span class="line">$ grep name /proc/cpuinfo # 查看 CPU 名字命令</span><br><span class="line">$ grep cores /proc/cpuinfo # 查看 CPU 核心数命令</span><br><span class="line">$ grep MHz /proc/cpuinfo # 查看 CPU 频率命令</span><br></pre></td></tr></table></figure>

<p><strong>查看内存相关命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat /proc/meminfo # 查看内存硬件相关信息命令</span><br><span class="line">$ free -m # 查看内存总量，使用量，swap 信息等命令</span><br><span class="line">$ swapon -s # 查看 swap 交换分区的路径，大小命令</span><br></pre></td></tr></table></figure>

<p><strong>查看硬盘分区相关系统命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ uptime # 查看开机时间，系统用户数，平均负载命令</span><br><span class="line">$ cat /proc/loadavg # 查看系统负载命令</span><br><span class="line">$ w # 查看系统时间，负载，登入用户，用户使用资源情况命令</span><br><span class="line">$ top # 总览系统全面信息命令，Ctrl + C 退出界面</span><br></pre></td></tr></table></figure>

<p><strong>查看网络相关情况命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ifconfig # 查看网卡及本机 ip 情况命令（需要系统安装了 net-tools 工具）</span><br><span class="line">$ ip addr show # 功能同上，新的 Linux 发行版已经逐渐用 ip 命令替代 ifconfig 相关功能命令</span><br><span class="line">$ iptables -L # 查看防火墙等相关情况命令</span><br><span class="line">$ netstat -s # 查看系统网络连接情况统计信息命令</span><br><span class="line">$ netstat -tunlp # 查看服务器端口监听使用情况命令</span><br><span class="line">$ netstat -auntp # 查看已经建立连接的端口情况命令</span><br><span class="line">$ lsof -i:[端口] # 查看指定端口占用情况命令</span><br><span class="line">$ route -n # 查看路由表命令</span><br></pre></td></tr></table></figure>

<p><strong>查看进程相关命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ps -aux # 列出所有进程以及相关信息命令</span><br><span class="line">$ kill -9 [进程PID] # 从上命令取到相关进程的PID后，高权限kill杀死进程命令命令</span><br><span class="line">$ top # 总览系统全面信息命令，Ctrl + C 退出界面</span><br></pre></td></tr></table></figure>

<p><strong>查看用户相关命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ w # 查看系统时间，负载，登入用户，用户使用资源情况命令</span><br><span class="line">$ cut -d: -f1 /etc/passwd # 查看系统所有用户命令</span><br><span class="line">$ last # 查看系统前几次登陆情况</span><br><span class="line">$ crontab -l # 查看用户计划任务情况命令</span><br><span class="line">$ crontab -e # 编辑计划任务命令</span><br></pre></td></tr></table></figure>

<p><strong>查看开机启动相关命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ chkconfig # 查看开机启动服务命令</span><br><span class="line">$ ls /etc/init.d # 查看开机启动配置文件命令</span><br><span class="line">$ cat /etc/rc.local # 查看 rc 启动文件</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>CentOS</tag>
        <tag>Debian</tag>
        <tag>Linux</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下，BBR/BBR2/BBR Plus/ 锐速等多合一安装脚本</title>
    <url>/2020/02/09/linux%E4%B8%8B%EF%BC%8Cbbr-bbr2-bbr-plus-%E9%94%90%E9%80%9F%E7%AD%89%E5%A4%9A%E5%90%88%E4%B8%80%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>可一键安装BBR、BBR2、BBR Plus、锐速等。安装是先安装内核，然后再启用加速。</p>
<p>建议SSH下，root用户。</p>
<p><img src="/2021/12/tcp-nice.jpg"></p>
<p><strong>一、安装证书</strong> <code>apt-get -y install ca-certificates</code> 或 <code>yum -y install ca-certificates</code></p>
<p><strong>二、安装</strong></p>
<p>1、不卸载内核（安全，若出现不能启动等，可VNC换启动内核）</p>
<p>wget -O tcpx.sh “<a href="https://github.com/ylx2016/Linux-NetSpeed/raw/master/tcpx.sh&quot;">https://github.com/ylx2016/Linux-NetSpeed/raw/master/tcpx.sh&quot;</a> &amp;&amp; chmod +x tcpx.sh &amp;&amp; .&#x2F;tcpx.sh</p>
<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://zhujiwiki.com/wp-content/uploads/2020/02/tcpx.sh&quot; &amp;&amp; chmod +x tcpx.sh &amp;&amp; ./tcpx.sh</span><br></pre></td></tr></table></figure>

<p>2、卸载内核（节省空间，强迫症）</p>
<p>wget -O tcp.sh “<a href="https://github.com/ylx2016/Linux-NetSpeed/raw/master/tcp.sh&quot;">https://github.com/ylx2016/Linux-NetSpeed/raw/master/tcp.sh&quot;</a> &amp;&amp; chmod +x tcp.sh &amp;&amp; .&#x2F;tcp.sh </p>
<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://zhujiwiki.com/wp-content/uploads/2020/02/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure>

<p><strong>三、相关问题</strong></p>
<p>1、双持bbr+锐速 bbr 添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<p>编辑锐速文件</p>
<p>nano &#x2F;appex&#x2F;etc&#x2F;config</p>
<p>2、提示Abort kernel removal? 选择No</p>
<p>开源页面：<a href="https://github.com/ylx2016/Linux-NetSpeed/releases">https://github.com/ylx2016/Linux-NetSpeed/releases</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>BBR</tag>
        <tag>BBR Plus</tag>
        <tag>锐速</tag>
        <tag>BBR2</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下，一键检测VPS回程国内三网路由</title>
    <url>/2022/01/06/linux%E4%B8%8B%EF%BC%8C%E4%B8%80%E9%94%AE%E6%A3%80%E6%B5%8Bvps%E5%9B%9E%E7%A8%8B%E5%9B%BD%E5%86%85%E4%B8%89%E7%BD%91%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<p>一键检测VPS回程国内三网路由，建议root用户。</p>
<p>用法：</p>
<p>curl <a href="https://raw.githubusercontent.com/zhucaidan/mtr/_trace/main/mtr/_trace.shbash">https://raw.githubusercontent.com/zhucaidan/mtr\_trace/main/mtr\_trace.shbash</a></p>
<p>或者</p>
<p>curl <a href="https://zhujiwiki.com/wp-content/uploads/2022/01/mtr/_trace.shbash">https://zhujiwiki.com/wp-content/uploads/2022/01/mtr\_trace.shbash</a></p>
<p>支持的线路为：电信CN2 GT，电信CN2 GIA，联通169，电信163，联通9929，联通4837，移动CMI</p>
<p><img src="/2022/01/mtr_trace.jpg"></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>LINUX下，使用SPEEDTEST测试网络的上/下行速率</title>
    <url>/2018/11/07/linux%E4%B8%8B%EF%BC%8C%E4%BD%BF%E7%94%A8speedtest%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E7%9A%84%E4%B8%8A-%E4%B8%8B%E8%A1%8C%E9%80%9F%E7%8E%87/</url>
    <content><![CDATA[<p>speedtest是一个用Python编写的轻量级Linux命令行工具，在Python2.4至3.4版本下均可运行。它基于Speedtest.net的基础架构来测量网络的上&#x2F;下行速率。安装speedtest很简单——只需要下载其Python脚本文件。</p>
<p>SSH下使用： <strong>1、安装</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py</span><br><span class="line">chmod a+rx speedtest.py</span><br><span class="line">mv speedtest.py /usr/local/bin/speedtest</span><br><span class="line">chown root:root /usr/local/bin/speedtest</span><br></pre></td></tr></table></figure>

<p><strong>2、使用</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">speedtest</span><br></pre></td></tr></table></figure>

<p>输入这个命令后，它会自动发现离你最近的Speedtest.net服务器（地理距离），然后打印出测试的网络上&#x2F;下行速率。 <img src="https://www.jarods.org/wp-content/uploads/2018/11/3917530244.jpg" alt="speedtest.jpg" title="speedtest.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">speedtest --share</span><br></pre></td></tr></table></figure>

<p>这个命令将会把你的测试结果上传到Speedtest.net服务器，并以图形的方式分享给其他人。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">speedtest --list</span><br></pre></td></tr></table></figure>

<p>这个命令将会打印出所有的Speedtest.net服务器（按照离你的地理距离由近及远排序）。 <img src="https://www.jarods.org/wp-content/uploads/2018/11/3107553046.jpg" alt="speedtest-list.jpg" title="speedtest-list.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">speedtest --server 935</span><br></pre></td></tr></table></figure>

<p>在上面的列表中，每个服务器的前面都有一个与其对应的ID。如果想使用指定的服务器来测试你的网速，你只需要在speedtest-cli命令后指定其ID即可。例如，如果想使用在Washington DC的服务器，你只需要指定相对应的服务器ID（如935）。</p>
<p>项目地址：<a href="https://github.com/sivel/speedtest-cli">https://github.com/sivel/speedtest-cli</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>SPEEDTEST</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下，安装Rclone，挂载Google Drive、OneDrive、WebDAV、FTP等等；互相拷贝、备份文件等</title>
    <url>/2019/09/28/linux%E4%B8%8B%EF%BC%8C%E5%AE%89%E8%A3%85rclone%EF%BC%8C%E6%8C%82%E8%BD%BDgoogle-drive%E3%80%81onedrive%E3%80%81webdav%E3%80%81ftp%E7%AD%89%E7%AD%89%EF%BC%9B%E4%BA%92%E7%9B%B8%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<p>Rclone，Linux下，可挂载Google Drive、OneDrive、WebDAV、FTP等等，堪称神器。下面是安装和使用教程。</p>
<p><strong>一、安装Rclone</strong> 下面的操作基于Centos系统</p>
<p>1、安装必须的应用</p>
<p>yum -y install wget unzip screen fuse fuse-devel</p>
<p>2、安装Rclone</p>
<p>curl <a href="https://rclone.org/install.sh">https://rclone.org/install.sh</a>  sudo bash</p>
<p><strong>二、挂载Google Drive</strong></p>
<p>1、挂载GDrive</p>
<p>rclone config</p>
<p>选择 <em>n</em> ，创建新链接，并命名为 <em>gdrive</em> 。然后选择Google Drive <img src="https://www.jarods.org/wp-content/uploads/2019/09/rclone-01.png"></p>
<p>client_id、client_secret 留空直接回车，SCOPE 选1，root_folder_id、service_account_file留空回车,Edit advanced config、Use auto config 选择n</p>
<p>这时，会出现个链接，复制到浏览器中，获取授权代码，并把授权代码粘贴到终端。 根据提示选择，一般为n、y、q <img src="https://www.jarods.org/wp-content/uploads/2019/09/rclone-02.png"></p>
<p>把Google Drive挂载到服务器上的一个目录。为便于以后web访问，可挂载到&#x2F;www&#x2F;wwwroot&#x2F;下（以下演示为&#x2F;www&#x2F;wwwroot&#x2F;gdrive.xxx.com，gdrive.xxx.com改为自己的域名）</p>
<p>.&#x2F;rclone mount gdrive: &#x2F;www&#x2F;wwwroot&#x2F;gdrive.xxx.com –allow-other –allow-non-empty –vfs-cache-mode writes</p>
<p>2、设置开机启动rclone</p>
<p>先把rclone的可执行文件复制到&#x2F;usr&#x2F;bin：</p>
<p>cp &#x2F;root&#x2F;rclone-v*&#x2F;rclone &#x2F;usr&#x2F;bin&#x2F;rclone</p>
<p>新建一个rclone.service文件：</p>
<p>vi &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;rclone.service</p>
<p>粘贴：</p>
<p>[Unit]<br>Description&#x3D;rclone<br>    <br>[Service]<br>User&#x3D;root<br>ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;rclone mount gdrive: &#x2F;www&#x2F;wwwroot&#x2F;gdrive.xxx.com –allow-other –allow-non-empty –vfs-cache-mode writes<br>Restart&#x3D;on-abort<br>    <br>[Install]<br>WantedBy&#x3D;multi-user.target</p>
<p>重载daemon，让新的服务文件生效：</p>
<p>systemctl daemon-reload</p>
<p>启动rclone：</p>
<p>systemctl start rclone</p>
<p>设置开机启动：</p>
<p>systemctl enable rclone</p>
<p><strong>三、Rclone的操作</strong></p>
<p>1、列出远程目录（gdrive为之前创建的）</p>
<p>rclone lsd gdrive</p>
<p>2、复制文件</p>
<p>rclone copy 源文件&#x2F;目录 目标目录</p>
<p>源文件&#x2F;目录、目标目录要绝对路径，均可以为服务器、网盘等 如要保存别人分享的Gdrive，可先保存到自己的网盘，然后复制这些文件到自己的网盘，以免共享的人删除文件。</p>
<p>rclone copy gdrive:gongxiang&#x2F;japan gdrive:gongxiang&#x2F;self</p>
<p>3、同步文件</p>
<p>rclone sync 源文件&#x2F;目录 目标目录</p>
<p>这个只同步没有的文件。适合变化较大的文件。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>CentOS</tag>
        <tag>Debian</tag>
        <tag>Linux</tag>
        <tag>FTP</tag>
        <tag>Google Drive</tag>
        <tag>OneDrive</tag>
        <tag>Rclone</tag>
        <tag>WebDAV</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux创建低权限用户</title>
    <url>/2022/01/05/linux%E5%88%9B%E5%BB%BA%E4%BD%8E%E6%9D%83%E9%99%90%E7%94%A8%E6%88%B7/</url>
    <content><![CDATA[<h1 id="使用-useradd-命令创建-SSH-用户："><a href="#使用-useradd-命令创建-SSH-用户：" class="headerlink" title="使用 useradd 命令创建 SSH 用户："></a>使用 useradd 命令创建 SSH 用户：</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd boy</span><br></pre></td></tr></table></figure>

<p>也可以用高级交互式命名创建用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adduser boy</span><br></pre></td></tr></table></figure>

<p>根据提示一步步操作</p>
<h1 id="使用-mknod-命令创建-x2F-dev-下的文件。在下面的命令中，-m-标志用来指定文件权限位，c-意思是字符文件，两个数字分别是文件指向的主要号和次要号。"><a href="#使用-mknod-命令创建-x2F-dev-下的文件。在下面的命令中，-m-标志用来指定文件权限位，c-意思是字符文件，两个数字分别是文件指向的主要号和次要号。" class="headerlink" title="使用 mknod 命令创建 &#x2F;dev 下的文件。在下面的命令中，-m 标志用来指定文件权限位，c 意思是字符文件，两个数字分别是文件指向的主要号和次要号。"></a>使用 mknod 命令创建 &#x2F;dev 下的文件。在下面的命令中，-m 标志用来指定文件权限位，c 意思是字符文件，两个数字分别是文件指向的主要号和次要号。</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/test/dev/      </span><br><span class="line">cd /home/test/dev/</span><br><span class="line">mknod -m 666 null c 1 3</span><br><span class="line">mknod -m 666 tty c 5 0</span><br><span class="line">mknod -m 666 zero c 1 5</span><br><span class="line">mknod -m 666 random c 1 8</span><br></pre></td></tr></table></figure>

<p>对于交互式会话，这需要至少一个 shell，通常为 sh 和基本的 &#x2F;dev 节点，例如 null、zero、stdin、stdout、stderr 和 tty 设备：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /dev/&#123;null,zero,stdin,stdout,stderr,random,tty&#125;</span><br></pre></td></tr></table></figure>

<h1 id="在-chroot-中设置合适的权限。注意-chroot-和它的子目录以及子文件必须被-root-用户所有，并且对普通用户或用户组不可写："><a href="#在-chroot-中设置合适的权限。注意-chroot-和它的子目录以及子文件必须被-root-用户所有，并且对普通用户或用户组不可写：" class="headerlink" title="在 chroot 中设置合适的权限。注意 chroot 和它的子目录以及子文件必须被 root 用户所有，并且对普通用户或用户组不可写："></a>在 chroot 中设置合适的权限。注意 chroot 和它的子目录以及子文件必须被 root 用户所有，并且对普通用户或用户组不可写：</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown root:root /home/test</span><br><span class="line">chmod 0755 /home/test</span><br><span class="line">ls -ld /home/test</span><br></pre></td></tr></table></figure>

<h1 id="为-SSH-chroot-设置交互式-shell-创建-bin-目录并复制-x2F-bin-x2F-bash-到-bin-中："><a href="#为-SSH-chroot-设置交互式-shell-创建-bin-目录并复制-x2F-bin-x2F-bash-到-bin-中：" class="headerlink" title="为 SSH chroot 设置交互式 shell,创建 bin 目录并复制 &#x2F;bin&#x2F;bash 到 bin 中："></a>为 SSH chroot 设置交互式 shell,创建 bin 目录并复制 &#x2F;bin&#x2F;bash 到 bin 中：</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/test/bin</span><br><span class="line">cp -v /bin/bash /home/test/bin/</span><br></pre></td></tr></table></figure>

<h1 id="识别-bash-所需的共享库，如下所示复制它们到-lib64-和-lib-中"><a href="#识别-bash-所需的共享库，如下所示复制它们到-lib64-和-lib-中" class="headerlink" title="识别 bash 所需的共享库，如下所示复制它们到 lib64 和 lib 中"></a>识别 bash 所需的共享库，如下所示复制它们到 lib64 和 lib 中</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ldd /bin/bash</span><br><span class="line">mkdir -p /home/test/lib64</span><br><span class="line">cp -v /lib64/ld-linux-x86-64.so.2 /home/test/lib64/</span><br><span class="line">mkdir -p /home/test/lib/x86_64-linux-gnu/</span><br><span class="line">cp -v /lib/x86_64-linux-gnu/&#123;libtinfo.so.5,libdl.so.2,libc.so.6&#125; /home/test/lib/x86_64-linux-gnu/</span><br></pre></td></tr></table></figure>

<h1 id="创建-chroot-通用配置目录-x2F-home-x2F-test-x2F-etc-并复制已更新的账号文件（-x2F-etc-x2F-passwd-和-x2F-etc-x2F-group）到这个目录中："><a href="#创建-chroot-通用配置目录-x2F-home-x2F-test-x2F-etc-并复制已更新的账号文件（-x2F-etc-x2F-passwd-和-x2F-etc-x2F-group）到这个目录中：" class="headerlink" title="创建 chroot 通用配置目录 &#x2F;home&#x2F;test&#x2F;etc 并复制已更新的账号文件（&#x2F;etc&#x2F;passwd 和 &#x2F;etc&#x2F;group）到这个目录中："></a>创建 chroot 通用配置目录 &#x2F;home&#x2F;test&#x2F;etc 并复制已更新的账号文件（&#x2F;etc&#x2F;passwd 和 &#x2F;etc&#x2F;group）到这个目录中：</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /home/test/etc</span><br><span class="line">cp -vf /etc/&#123;passwd,group&#125; /home/test/etc/</span><br></pre></td></tr></table></figure>

<p>注意：每次向系统添加更多 SSH 用户时，都需要将更新的帐户文件复制到 &#x2F;home&#x2F;test&#x2F;etc 目录中。</p>
<h1 id="配置-SSH-来使用-chroot"><a href="#配置-SSH-来使用-chroot" class="headerlink" title="配置 SSH 来使用 chroot"></a>配置 SSH 来使用 chroot</h1><p>打开 sshd_config 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>文件中添加或修改下面这些行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 定义要使用 chroot 的用户</span><br><span class="line">Match User boy</span><br><span class="line"># 指定 chroot </span><br><span class="line">ChrootDirectory /home/test</span><br></pre></td></tr></table></figure>

<p>重启sshd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd 或者</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://linux.cn/article-8313-1.html">https://linux.cn/article-8313-1.html</a></p>
<h1 id="相关脚本"><a href="#相关脚本" class="headerlink" title="相关脚本"></a>相关脚本</h1><p><a href="http://git.malu.me/Linux%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC/#%E5%88%9B%E5%BB%BA%E4%BD%8E%E6%9D%83%E9%99%90%E7%94%A8%E6%88%B7%E8%84%9A%E6%9C%AC">创建低权限用户脚本</a></p>
<h1 id="给用户sudo权限"><a href="#给用户sudo权限" class="headerlink" title="给用户sudo权限"></a>给用户sudo权限</h1><p>方法一：</p>
<p>修改&#x2F;etc&#x2F;sudoers文件，添加 “malu ALL&#x3D;(ALL) ALL”</p>
<p>方法二：</p>
<p>先查看sudo组ID</p>
<p>cat &#x2F;etc&#x2F;group grep sudo</p>
<p>把用户加入sudo组</p>
<p>usermod -G 27 malu</p>
<p>方法三：</p>
<p>直接编辑&#x2F;etc&#x2F;group，在sudo组后面添加malu用户，多个用户用逗号”,”分割</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>权限</tag>
        <tag>用户</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中使用crontab命令启用自定义定时任务</title>
    <url>/2018/08/05/linux%E4%B8%AD%E4%BD%BF%E7%94%A8crontab%E5%91%BD%E4%BB%A4%E5%90%AF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<p>Crontab是一个Unix&#x2F;Linux系统下的常用的定时执行工具，可以在无需人工干预的情况下运行指定作业。很多时候我们都要用到Crontab命令，例如在<a href="https://wzfou.com/lets-encrypt-wildcard-ssl/">Let’s Encrypt Wildcard 免费泛域名SSL证书</a>中提到了acme.sh 脚本就是利用了Crontab定时任务的形式来更新SSL证书。</p>
<p>通过crontab命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本，在<a href="https://wzfou.com/linux-vps-drive/">Linux VPS挂载Google Drive和Dropbox</a>中就可以用Crontab命令实现定时同步备份，用Crontab实现每天定时重启VPS、服务器或者是Nginx、PHP、MysqL服务等。</p>
<p>总之，掌握基本的Crontab命令语法对于我们管理自己的<a href="https://wzfou.com/vps/">VPS主机</a>是非常有必要的，本篇文章通过实例来讲解如何使用<a href="https://wzfou.com/tag/linux-crontab/">Linux Crontab</a>命令，不作深入的探究，主要是方便日后的快速查询与参考。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/08/crontab_00.jpg" alt="Linux Crontab命令定时任务基本语法与操作教程-VPS/服务器自动化操作"></p>
<p>更多的关于<a href="https://wzfou.com/vps/">VPS主机</a>有关的命令使用方法与应用，可以看看：</p>
<ol>
<li><a href="https://wzfou.com/linux-jiankong/">Linux系统监控命令整理汇总-掌握CPU,内存,磁盘IO等找出性能瓶颈</a></li>
<li><a href="https://wzfou.com/rsync-scp-tar/">三个命令工具Rsync,SCP,Tar-快速解决VPS远程网站搬家与数据同步</a></li>
<li><a href="https://wzfou.com/nfs-glusterfs-samba/">Linux共享文件夹目录三种方法-NFS远程挂载,GlusterFS共享存储和samba共享目录</a></li>
</ol>
<h2 id="一、Crontab查看编辑重启"><a href="#一、Crontab查看编辑重启" class="headerlink" title="一、Crontab查看编辑重启"></a>一、Crontab查看编辑重启</h2><p>1、查看crontab定时执行任务列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure>

<p>2、编辑crontab定时执行任务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<p>3、删除crontab定时任务</p>
<p>crontab -r</p>
<p>4、相关命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service crond start     #启动服务</span><br><span class="line">sudo service crond stop      #关闭服务</span><br><span class="line">sudo service crond restart   #重启服务</span><br><span class="line">sudo service crond reload    #重新载入配置</span><br><span class="line">sudo service crond status    #查看服务状态</span><br></pre></td></tr></table></figure>

<h2 id="二、Crontab基本格式语法"><a href="#二、Crontab基本格式语法" class="headerlink" title="二、Crontab基本格式语法"></a>二、Crontab基本格式语法</h2><p>crontab 的时间表达式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">基本格式 :</span><br><span class="line">*　　*　　*　　*　　*　　command</span><br><span class="line">分　时　日　月　周　命令</span><br></pre></td></tr></table></figure>

<p>先来看一个例子。每天凌晨1:00执行备份程序：<code>0 1 * * * /root/wzfou.com/backup.sh</code> 。其中<code>/root/wzfou.com/backup.sh</code> 这是脚本路径，要使用绝对路径，前面的日期格式请直接看下图就知道了。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/08/crontab_01.gif" alt="Linux Crontab命令日期格式"></p>
<p><a href="https://wzfou.com/tag/crontab/">crontab</a>还有操作符，用来实现一些复杂的时间设定需要。操作符有：</p>
<blockquote>
<p><strong>1、*</strong> 取值范围内的所有数字 ，代表所有。</p>
<p><strong>2、&#x2F;</strong> 每过多少个数字 ，代表每隔n长时间。</p>
<p><strong>3、-</strong> 从X到Z ，代表一段时间范围。</p>
<p><strong>4、，</strong>散列数字，代表分割开多个值。</p>
</blockquote>
<p><strong>PS：2018年4月15日更新，</strong>感谢好友<a href="https://wzfou.com/crontab/#comment-5954">云落</a>提醒，如果还有搞不懂代码公式的，可以使用这个在线Cron表达式生成器：<a href="http://cron.qqe2.com/">http://cron.qqe2.com/</a></p>
<h2 id="三、20个经典Crontab应用实例"><a href="#三、20个经典Crontab应用实例" class="headerlink" title="三、20个经典Crontab应用实例"></a>三、20个经典Crontab应用实例</h2><p>以脚本<code>/root/wzfou.com/backup.sh</code> 为演示，大家在使用时记得替换为自己的脚本路径。感谢<a href="https://wzfou.com/crontab/#comment-6017">bukai.men</a>提醒，请在相应的脚本第一行加上<code>#!/bin/bash</code>，否则脚本在定时任务中无法执行。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/08/crontab_03.jpg" alt="Linux Crontab命令应用实例"></p>
<p><strong>实例1：</strong>每1分钟执行一次</p>
<p>* * * * * <code>/root/wzfou.com/backup.sh</code></p>
<p><strong>实例2：</strong>每小时的第3和第15分钟执行一次</p>
<p>3,15 * * * * <code>/root/wzfou.com/backup.sh</code></p>
<p><strong>实例3：</strong>每天的8点到11点的第3和第15分钟执行一次</p>
<p>3,15 8-11 * * * <code>/root/wzfou.com/backup.sh</code></p>
<p><strong>实例4：</strong>每隔两天的上午8点到11点的第3和第15分钟执行一次</p>
<p>3,15 8-11 *&#x2F;2  *  * <code>/root/wzfou.com/backup.sh</code></p>
<p><strong>实例5：</strong>每周一上午8点到11点的第3和第15分钟执行一次</p>
<p>3,15 8-11 * * 1 &#x2F;root&#x2F;wzfou.com&#x2F;backup.sh</p>
<p><strong>实例6：</strong>每晚的21:30执行一次</p>
<p>30 21 * * * <code>/root/wzfou.com/backup.sh</code></p>
<p><strong>实例7：</strong>每月1、10、22日的4 : 45执行一次</p>
<p>45 4 1,10,22 * * <code>/root/wzfou.com/backup.sh</code></p>
<p><strong>实例8：</strong>每周六、周日的1 : 10执行一次</p>
<p>10 1 * * 6,0 <code>/root/wzfou.com/backup.sh</code></p>
<p><strong>实例9：</strong>每天18 : 00至23 : 00之间每隔30分钟执行一次</p>
<p>0,30 18-23 * * * <code>/root/wzfou.com/backup.sh</code></p>
<p><strong>实例10：</strong>每星期六的晚上23: 00 pm执行一次</p>
<p>0 23 * * 6 <code>/root/wzfou.com/backup.sh</code></p>
<p><strong>实例11：</strong>每一小时执行一次</p>
<p>* *&#x2F;1 * * * <code>/root/wzfou.com/backup.sh</code></p>
<p><strong>实例12：</strong>每天晚上23点到第二天7点之间，每隔一小时执行一次</p>
<p>* 23-7&#x2F;1 * * * &#x2F;root&#x2F;wzfou.com&#x2F;backup.sh</p>
<p><strong>实例13：</strong> 每个星期的第一天执行一次（即每个星期天晚上24：00开始执行）.</p>
<p>@weekly &#x2F;root&#x2F;wzfou.com&#x2F;backup.sh</p>
<p><strong>实例14：</strong>每个月的15日执行一次.</p>
<p>0 11 15 * * &#x2F;root&#x2F;wzfou.com&#x2F;backup.sh</p>
<p><strong>实例15：</strong>每个月的第一天执行一次（即每个月的1日凌晨0点开始执行）.</p>
<p>@monthly &#x2F;root&#x2F;wzfou.com&#x2F;backup.sh</p>
<p><strong>实例16：</strong> 在指定的月份执行一次（在1月,4月和 6月每天晚上0点执行一次）.</p>
<p>0 0 * jan,apr,jun * &#x2F;root&#x2F;wzfou.com&#x2F;backup.sh</p>
<p><strong>实例17：</strong> 重启后执行一次.</p>
<p>@reboot &#x2F;root&#x2F;wzfou.com&#x2F;backup.sh</p>
<p><strong>实例18：</strong>定时任务执行后发一封邮件通知.</p>
<p>MAILTO&#x3D;”raj”<br>1 1 * * * &#x2F;root&#x2F;wzfou.com&#x2F;backup.sh</p>
<p><strong>实例19：</strong>指定shell （默认的是&#x2F;bin&#x2F;bash）</p>
<p>SHELL&#x3D;&#x2F;bin&#x2F;sh<br>1 1 * * * &#x2F;root&#x2F;wzfou.com&#x2F;backup.sh</p>
<p><strong>实例20：</strong>指定环境变量.</p>
<p>PATH&#x3D;&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin<br>1 1 * * * &#x2F;root&#x2F;wzfou.com&#x2F;backup.sh</p>
<h2 id="四、Crontab可能存在的问题"><a href="#四、Crontab可能存在的问题" class="headerlink" title="四、Crontab可能存在的问题"></a>四、Crontab可能存在的问题</h2><h3 id="4-1-Crontab不立即生效"><a href="#4-1-Crontab不立即生效" class="headerlink" title="4.1  Crontab不立即生效"></a>4.1  Crontab不立即生效</h3><p>大家新建的Crontab定时任务保存后需要等待2分钟后才会执行，当然如果想要立即执行可以重启Crontab。当crontab失效时，可以尝试&#x2F;etc&#x2F;init.d&#x2F;crond restart解决问题，或者查看日志看某个任务有没有执行&#x2F;报错tail -f &#x2F;var&#x2F;log&#x2F;cron。</p>
<h3 id="4-2-Crontab不执行"><a href="#4-2-Crontab不执行" class="headerlink" title="4.2  Crontab不执行"></a>4.2  Crontab不执行</h3><p>脚本中涉及文件路径时写全局路径，更新系统时间时区后需要重启cron。当手动执行脚本OK，但是crontab死活不执行时很有可能是环境变量，可尝试在crontab中直接引入环境变量解决问题，例如：</p>
<p>0 * * * * . &#x2F;etc&#x2F;profile;&#x2F;bin&#x2F;sh <code>/root/wzfou.com/backup.sh</code></p>
<h3 id="4-3-Crontab无权限执行"><a href="#4-3-Crontab无权限执行" class="headerlink" title="4.3  Crontab无权限执行"></a>4.3  Crontab无权限执行</h3><p>要注意系统级任务调度与用户级任务调度。只有 root 用户和 <strong>crontab</strong> 文件的所有者可以在 <strong>-e</strong> 、<strong>-l</strong>、<strong>-r</strong> 和 <strong>-v</strong>标志后面使用 <em>UserName</em> 以编辑、列出、除去或验证指定用户的 <strong>crontab</strong> 文件。</p>
<p>root用户的任务调度操作可以通过”crontab –uroot –e”来设置，也可以将调度任务直接写入&#x2F;etc&#x2F;crontab文件。</p>
<p>想编辑别的用户的 crontab, 使用root运行下面的命令，同一个格式 (追加 “-u _username_” 到命令后) 也可以用来列出或删除 crontabs。</p>
<p> crontab -u <em>username</em> -e</p>
<h3 id="4-4-Crontab执行后通知"><a href="#4-4-Crontab执行后通知" class="headerlink" title="4.4  Crontab执行后通知"></a>4.4  Crontab执行后通知</h3><p>当<a href="https://wzfou.com/tag/crontab-dingshi/">Crontab定时任务</a>在你所指定的时间执行后，系统会寄一封信给你，显示该程序执行的内容，可以在日志中**&#x2F;var&#x2F;log&#x2F;cron**看到。若是你不希望收到这样的通知，请在每一行空一格之后加上 <code>&gt; /dev/null 2&gt;&amp;1</code> 即可。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下一键安装Aria2 + YAAW实现离线下载</title>
    <url>/2017/12/18/linux%E4%B8%8B%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85aria2-yaaw%E5%AE%9E%E7%8E%B0%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<p>一、<strong>功能与特点</strong> 支持多种不同Linux系统 一键安装Aria2 + Caddy + YAAW 使用FileFileManager作为文件管理器 离线下载 + 视频在线播放</p>
<p><strong>二、一键安装Aria2 + YAAW</strong> 1、安装wget、unzip等</p>
<h1 id="Centos系统"><a href="#Centos系统" class="headerlink" title="Centos系统"></a>Centos系统</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install wget unzip</span><br></pre></td></tr></table></figure>

<h1 id="Debian-or-Ubuntu系统"><a href="#Debian-or-Ubuntu系统" class="headerlink" title="Debian or Ubuntu系统"></a>Debian or Ubuntu系统</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install -y wget unzip</span><br></pre></td></tr></table></figure>

<p>2、安装Aria2 + YAAW wget <a href="https://zhujiwiki.com/usr/uploads/2017/12/aria2.zip">https://zhujiwiki.com/usr/uploads/2017/12/aria2.zip</a> unzip aria2.zip &amp;&amp; cd aria2 &amp;&amp; chmod u+x *.sh &amp;&amp; .&#x2F;install_aria2.sh <img src="https://www.jarods.org/wp-content/uploads/2017/12/1898892716.png" alt="Aria2-YAAW1.png" title="Aria2-YAAW1.png"></p>
<p>注意：Aria2授权令牌建议用字母 + 数字组合，最好不要含有特殊符号，尤其是@之类的符号，以免出现不必要的问题。 <img src="https://www.jarods.org/wp-content/uploads/2017/12/4089989441.png" alt="Aria2-YAAW2.png" title="Aria2-YAAW2.png"></p>
<p>安装完成后会看到如下信息，建议将信息保存。 <img src="https://www.jarods.org/wp-content/uploads/2017/12/2557036497.png" alt="Aria2-YAAW3.png" title="Aria2-YAAW3.png"></p>
<p><strong>三、使用Aria2 + YAAW</strong> 安装完成后输入<a href="http://ip/">http://IP</a>:6080进行访问，输入您刚刚设置的用户名、密码，就可以看到YAAW。 <img src="https://www.jarods.org/wp-content/uploads/2017/12/1114732865.png" alt="Aria2-YAAW4.png" title="Aria2-YAAW4.png"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/12/3025062266.png" alt="Aria2-YAAW5.png" title="Aria2-YAAW5.png"></p>
<p>点击右上角“Setting”按钮，在JSON-RPC Path那里输入安装完后显示的RPC地址：<a href="http://token/">http://token</a>:abc123@IP:6800&#x2F;jsonrpc，然后保存。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/12/2577333104.png" alt="Aria2-YAAW6.png" title="Aria2-YAAW6.png"></p>
<p>添加下载任务</p>
<p>只要配置没有问题的情况下，点击“Add”按钮添加一个下载任务试试。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/12/2570428843.png" alt="Aria2-YAAW7.png" title="Aria2-YAAW7.png"></p>
<p>管理文件</p>
<p>输入<a href="http://ip/">http://IP</a>:6080&#x2F;admin进入FileManager可以看到所有文件，下载的文件保存在download目录，其它文件请不要随意修改，以免出现异常。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/12/2968968796.png" alt="Aria2-YAAW8.png" title="Aria2-YAAW8.png"></p>
<p><strong>四、相关命令</strong></p>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>&#x2F;data&#x2F;aria2&#x2F;aria2.sh start</p>
<h1 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h1><p>&#x2F;data&#x2F;aria2&#x2F;aria2.sh stop</p>
<h1 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h1><p>&#x2F;data&#x2F;aria2&#x2F;aria2.sh restart</p>
<h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><p>cd aria2-master &amp;&amp; .&#x2F;uninstall.sh</p>
<h1 id="Caddy-server配置文件"><a href="#Caddy-server配置文件" class="headerlink" title="Caddy server配置文件"></a>Caddy server配置文件</h1><p>&#x2F;data&#x2F;aria2&#x2F;caddy.conf</p>
<h1 id="Aria2配置文件"><a href="#Aria2配置文件" class="headerlink" title="Aria2配置文件"></a>Aria2配置文件</h1><p>&#x2F;data&#x2F;aria2&#x2F;aria2.conf</p>
<h1 id="离线下载目录"><a href="#离线下载目录" class="headerlink" title="离线下载目录"></a>离线下载目录</h1><p>&#x2F;data&#x2F;aria2&#x2F;download</p>
<p>via：<a href="https://www.xiaoz.me/archives/9694">https://www.xiaoz.me/archives/9694</a></p>
<p>五、下面是个一键安装Aria2+Ariang+Filemanager+H5aii脚本的脚本 debian测试通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/Thnineer/Bash/master/aria2u.sh &amp;&amp; chmod +x aria2u.sh &amp;&amp; bash aria2u.sh</span><br></pre></td></tr></table></figure>

<p>via：<a href="http://www.hostloc.com/forum.php?mod=redirect&goto=findpost&ptid=412979&pid=5048605">http://www.hostloc.com/forum.php?mod=redirect&goto=findpost&ptid=412979&pid=5048605</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Aria2</tag>
        <tag>YAAW</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用脚本</title>
    <url>/2022/01/05/linux%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>记录日常使用到的脚本</p>
<h1 id="Git切换开关"><a href="#Git切换开关" class="headerlink" title="Git切换开关"></a>Git切换开关</h1><p>cat git-proxy</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">if [[ $1 == &quot;no&quot; ]];then</span><br><span class="line">    git config --global --unset https.proxy</span><br><span class="line">else</span><br><span class="line">    git config --global https.proxy socks5://192.168.2.2:10808</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>放入&#x2F;usr&#x2F;local&#x2F;bin&#x2F;git-proxy</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git-proxy     #开启代理</span><br><span class="line">git-proxy no  #关闭代理</span><br></pre></td></tr></table></figure>

<h1 id="本地hosts模拟实现DNS轮询脚本"><a href="#本地hosts模拟实现DNS轮询脚本" class="headerlink" title="本地hosts模拟实现DNS轮询脚本"></a>本地hosts模拟实现DNS轮询脚本</h1><p>cat auto_change_hosts.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">MY_PATH=$(cd &quot;$(dirname &quot;$0&quot;)&quot;; pwd)</span><br><span class="line">cd $MY_PATH</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>cat iplist</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">11.5.100.20010</span><br><span class="line">11.5.100.20100</span><br><span class="line">11.5.200.20200</span><br><span class="line">11.5.200.20300</span><br><span class="line">11.5.300.20400</span><br></pre></td></tr></table></figure>

<p>cat &#x2F;etc&#x2F;hosts</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">11.5.100.200 malu.me</span><br></pre></td></tr></table></figure>

<p>使用方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_change_hosts.sh [error]</span><br></pre></td></tr></table></figure>

<p>如果加参数error，则iplist最后一列数值会累加，用于调用次数统计。</p>
<h1 id="创建低权限用户脚本"><a href="#创建低权限用户脚本" class="headerlink" title="创建低权限用户脚本"></a>创建低权限用户脚本</h1><p>首先添加用户boy并修改sshd_config文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd boy</span><br><span class="line">passwd boy</span><br></pre></td></tr></table></figure>

<p>如果遇到无法找到&#x2F;bin&#x2F;sh的提示，则修改&#x2F;etc&#x2F;passwd文件中boy的shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">把 /bin/sh 改成 /bin/bash</span><br></pre></td></tr></table></figure>

<p>vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Match User boy</span><br><span class="line">ChrootDirectory /home/test</span><br></pre></td></tr></table></figure>

<p>cat create_low_user.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">CHROOT_PATH=&#x27;/home/test&#x27;</span><br><span class="line">mkdir -p $&#123;CHROOT_PATH&#125;/dev/      </span><br><span class="line">cd $&#123;CHROOT_PATH&#125;/dev/</span><br><span class="line">mknod -m 666 null c 1 3</span><br><span class="line">mknod -m 666 tty c 5 0</span><br><span class="line">mknod -m 666 zero c 1 5</span><br><span class="line">mknod -m 666 random c 1 8</span><br><span class="line"></span><br><span class="line">chown root:root $&#123;CHROOT_PATH&#125;</span><br><span class="line">chmod 0755 $&#123;CHROOT_PATH&#125;</span><br><span class="line">ls -ld $&#123;CHROOT_PATH&#125;</span><br><span class="line"></span><br><span class="line">mkdir -p $&#123;CHROOT_PATH&#125;/bin</span><br><span class="line">cp -v /bin/bash $&#123;CHROOT_PATH&#125;/bin/</span><br><span class="line"></span><br><span class="line">ldd /bin/bash</span><br><span class="line">mkdir -p $&#123;CHROOT_PATH&#125;/lib64</span><br><span class="line">cp -v /lib64/ld-linux-x86-64.so.2 $&#123;CHROOT_PATH&#125;/lib64/</span><br><span class="line">mkdir -p $&#123;CHROOT_PATH&#125;/lib/x86_64-linux-gnu/</span><br><span class="line">cp -v /lib/x86_64-linux-gnu/&#123;libtinfo.so.5,libdl.so.2,libc.so.6&#125; $&#123;CHROOT_PATH&#125;/lib/x86_64-linux-gnu/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="把本地文件夹备份至远程服务器"><a href="#把本地文件夹备份至远程服务器" class="headerlink" title="把本地文件夹备份至远程服务器"></a>把本地文件夹备份至远程服务器</h1><p>1.通过scp拷贝目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">dd=`date &#x27;+%Y-%m-%d-%H%M%S&#x27;`</span><br><span class="line">scp -i /root/.ssh/id_rsa -P 22 -r /local root@malu.me:/backup/$&#123;dd&#125;</span><br></pre></td></tr></table></figure>

<p>2.拷贝目录至windows共享 (如果有防火墙，需允许445, 135, 137, 138, 139 UDP和TCP)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">dd=`date &#x27;+%Y-%m-%d-%H%M%S&#x27;`</span><br><span class="line">smbclient -c &quot;mkdir $&#123;dd&#125;;prompt OFF;recurse ON;lcd /local;cd $&#123;dd&#125;;mput *&quot; //IP/share -U username%password</span><br></pre></td></tr></table></figure>

<h1 id="切换到当前目录执行脚本"><a href="#切换到当前目录执行脚本" class="headerlink" title="切换到当前目录执行脚本"></a>切换到当前目录执行脚本</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">MY_PATH=$(cd &quot;$(dirname &quot;$0&quot;)&quot;; pwd)</span><br><span class="line">cd $MY_PATH</span><br></pre></td></tr></table></figure>

<h1 id="防止脚本重复执行-每次只有一个脚本在执行"><a href="#防止脚本重复执行-每次只有一个脚本在执行" class="headerlink" title="防止脚本重复执行(每次只有一个脚本在执行)"></a>防止脚本重复执行(每次只有一个脚本在执行)</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">function run_only_one()&#123;</span><br><span class="line">        PID=$$</span><br><span class="line">        snum=`ps -efgrep $0grep -v grepgrep -v &quot; $PPID &quot;grep -v &quot; $PID &quot;wc -l`</span><br><span class="line">        if [ $snum -lt 1 ]; then</span><br><span class="line">            echo &quot;start process.....&quot;</span><br><span class="line">        else</span><br><span class="line">            echo &quot;runing.....&quot;</span><br><span class="line">            exit</span><br><span class="line">        fi  </span><br><span class="line">&#125;</span><br><span class="line">run_only_one</span><br></pre></td></tr></table></figure>

<h1 id="scp拷贝最近3天日期命名的tar-z文件，并删除本地6天前的tar-z文件"><a href="#scp拷贝最近3天日期命名的tar-z文件，并删除本地6天前的tar-z文件" class="headerlink" title="scp拷贝最近3天日期命名的tar.z文件，并删除本地6天前的tar.z文件"></a>scp拷贝最近3天日期命名的tar.z文件，并删除本地6天前的tar.z文件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">for((i=0;i&lt;=3;i++)); do</span><br><span class="line">datefile=`date -d&quot;$i day ago&quot; +%Y%m%d`.tar.z</span><br><span class="line">if [ ! -f &quot;$datefile&quot; ]; then</span><br><span class="line">scp malu.me:/backup/$datefile /home/backup/</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line">find ./ -mtime +6 -type f -name &quot;*.tar.z&quot;xargs rm -f</span><br></pre></td></tr></table></figure>

<h1 id="合并指定目录下的所有文本，并去除重复行，并过滤-M字符-生成超级字典"><a href="#合并指定目录下的所有文本，并去除重复行，并过滤-M字符-生成超级字典" class="headerlink" title="合并指定目录下的所有文本，并去除重复行，并过滤^M字符 (生成超级字典)"></a>合并指定目录下的所有文本，并去除重复行，并过滤^M字符 (生成超级字典)</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">if [ $# != 1 ] ; then </span><br><span class="line">echo &quot;USAGE: $0 FLODER&quot; </span><br><span class="line">exit 1;  </span><br><span class="line">fi</span><br><span class="line">root_dir=$1</span><br><span class="line">NEWFILE=newfile_dic.txt</span><br><span class="line">NEWFILE_TMP=newfile_dic.txt.tmp</span><br><span class="line">SAVEIFS=$IFS</span><br><span class="line">IFS=$(echo -en &quot;\n\b&quot;)</span><br><span class="line">function getdir()&#123;</span><br><span class="line">    for element in `ls $1`</span><br><span class="line">    do  </span><br><span class="line">        dir_or_file=$1&quot;/&quot;$element</span><br><span class="line">        if [ -d $dir_or_file ]</span><br><span class="line">        then </span><br><span class="line">            getdir $dir_or_file</span><br><span class="line">        else</span><br><span class="line">            echo -n $dir_or_file</span><br><span class="line">            cat $dir_or_file sed &#x27;s/^M//g&#x27;&gt;&gt; $NEWFILE_TMP</span><br><span class="line">            echo &#x27;              ok&#x27;</span><br><span class="line">        fi  </span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line">getdir $root_dir</span><br><span class="line">IFS=$SAVEIFS</span><br><span class="line">sort $NEWFILE_TMPuniq &gt; $NEWFILE</span><br><span class="line">rm -f $NEWFILE_TMP</span><br></pre></td></tr></table></figure>

<p><strong>注意：^M的输入方式是 Ctrl + v ，然后Ctrl + m</strong></p>
<h1 id="杀死进程及其所有子进程"><a href="#杀死进程及其所有子进程" class="headerlink" title="杀死进程及其所有子进程"></a>杀死进程及其所有子进程</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pstree -p PID  grep -oP &#x27;(?&lt;=\()[0-9]+(?=\))&#x27;xargs kill -9</span><br></pre></td></tr></table></figure>

<h1 id="杀死包含关键字的进程，及其所有子进程"><a href="#杀死包含关键字的进程，及其所有子进程" class="headerlink" title="杀死包含关键字的进程，及其所有子进程"></a>杀死包含关键字的进程，及其所有子进程</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">PID=`ps -efgrep [n]ameawk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">expr 1 + $PID &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">if [[ $? -eq 0 ]]; then</span><br><span class="line">pstree -p $PID  grep -oP &#x27;(?&lt;=\()[0-9]+(?=\))&#x27;xargs kill -9</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h1 id="将目录下所有文件名改成小写"><a href="#将目录下所有文件名改成小写" class="headerlink" title="将目录下所有文件名改成小写"></a>将目录下所有文件名改成小写</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in `find ./`;do mv $i `echo $i tr [A-Z] [a-z]`;done</span><br></pre></td></tr></table></figure>

<h1 id="防御CC攻击脚本"><a href="#防御CC攻击脚本" class="headerlink" title="防御CC攻击脚本"></a>防御CC攻击脚本</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">status=`netstat -naawk &#x27;$5 ~ /[0-9]+:[0-9]+/ &#123;print $5&#125;&#x27; awk -F &quot;:&quot; -- &#x27;&#123;print $1&#125;&#x27; sort -nuniq -c sort -ntail -n 1`</span><br><span class="line">NUM=`echo $statusawk &#x27;&#123;print $1&#125;&#x27;`</span><br><span class="line">IP=`echo $statusawk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">result=`echo &quot;$NUM &gt; 150&quot;  bc`</span><br><span class="line">if [ $result = 1 ]</span><br><span class="line">then</span><br><span class="line">  echo IP:$IP is over $NUM, BAN IT!</span><br><span class="line">  /sbin/iptables -I INPUT -s $IP -j DROP</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h1 id="向进程发送按键指令"><a href="#向进程发送按键指令" class="headerlink" title="向进程发送按键指令"></a>向进程发送按键指令</h1><p>其实用C写的，算不上脚本。需要先编译：</p>
<p>gcc key.c -o key.bin</p>
<p>运行：</p>
<p>.&#x2F;key.bin PID cmd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;sys/ioctl.h&gt;</span><br><span class="line">#include &lt;termios.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">void stackchar(int fd,char c)</span><br><span class="line">&#123;</span><br><span class="line">        if (ioctl(fd, TIOCSTI, &amp;c) &lt; 0) &#123;</span><br><span class="line">                perror(&quot;ioctl&quot;);</span><br><span class="line">                exit(1);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">        int i, j;</span><br><span class="line">        char c;</span><br><span class="line">        char proc_file[20];</span><br><span class="line">        int mixer_fd=0;</span><br><span class="line"></span><br><span class="line">        strcpy(proc_file,&quot;/proc/&quot;);</span><br><span class="line">        strcat(proc_file,argv[1]);</span><br><span class="line">        strcat(proc_file,&quot;/fd/1&quot;);</span><br><span class="line"></span><br><span class="line">        if ((mixer_fd = open(proc_file,O_WRONLY)))&#123;</span><br><span class="line">                for (i = 2; i &lt; argc; i++) &#123;</span><br><span class="line">                        if (i &gt; 1) stackchar(mixer_fd,&#x27; &#x27;);</span><br><span class="line">                        for (j=0; (c = argv[i][j]); j++) &#123;</span><br><span class="line">                                stackchar(mixer_fd,c);</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="向本地监听的所有匹配端口发送curl请求"><a href="#向本地监听的所有匹配端口发送curl请求" class="headerlink" title="向本地监听的所有匹配端口发送curl请求"></a>向本地监听的所有匹配端口发送curl请求</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -lnt4pgrep sshdgrep -v &#x27;:22 &#x27;awk -F &#x27;0.0.0.0:&#x27; &#x27;&#123;print $2&#125;&#x27;awk &#x27;&#123;print $1&#125;&#x27;xargs -t -i curl localhost:&#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>常用脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux终端下截图</title>
    <url>/2022/01/06/linux%E7%BB%88%E7%AB%AF%E4%B8%8B%E6%88%AA%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="网页截图"><a href="#网页截图" class="headerlink" title="网页截图"></a>网页截图</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libqt4-webkit libqt4-dev g++ sudo </span><br><span class="line">apt-get install xvfb sudo </span><br><span class="line">apt-get install cutycapt</span><br></pre></td></tr></table></figure>

<p>安装中文字体：</p>
<p>复制windows下的字体文件到&#x2F;usr&#x2F;share&#x2F;fonts&#x2F;目录下</p>
<p>执行fc-cache刷新字体缓存</p>
<p>使用方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xvfb-run cutycapt --url=http://malu.me --out=malu.png</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><blockquote>
<p>个人用户字体文件在~&#x2F;.local&#x2F;share&#x2F;fonts</p>
<p>系统字体文件在&#x2F;usr&#x2F;share&#x2F;fonts</p>
<p>字体配置文件在&#x2F;etc&#x2F;fonts&#x2F;</p>
</blockquote>
<h3 id="更多命令行截图参考："><a href="#更多命令行截图参考：" class="headerlink" title="更多命令行截图参考："></a>更多命令行截图参考：</h3><p>Ghost.py网页截图: <a href="http://git.malu.me/Ghost.py%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/">http://git.malu.me/Ghost.py%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/</a></p>
<h1 id="显示桌面截图"><a href="#显示桌面截图" class="headerlink" title="显示桌面截图"></a>显示桌面截图</h1><p>需要安装fbcat</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install fbcat</span><br></pre></td></tr></table></figure>

<p>使用脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">NAME=`date &quot;+%Y%m%d_%H_%M_%S&quot;`</span><br><span class="line">PNG_PATH=&quot;/tmp/fbcat_&quot;$NAME&quot;.png&quot;</span><br><span class="line">fbgrab $PNG_PATH &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">sz $PNG_PATH</span><br></pre></td></tr></table></figure>

<h1 id="摄像头截图"><a href="#摄像头截图" class="headerlink" title="摄像头截图"></a>摄像头截图</h1><p>借助命令streamer：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install streamer</span><br></pre></td></tr></table></figure>

<p>使用脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">NAME=`date &quot;+%Y%m%d_%H_%M_%S&quot;`</span><br><span class="line">streamer -c /dev/video0 -t 3 -r 0.1 -q -b 16 -o /root/camera/jp_$NAME-00.jpeg &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">sz /root/camera/jp_$NAME-02.jpeg</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">killall streamer</span></span><br></pre></td></tr></table></figure>

<p>其中：</p>
<p>-t 抓取3张图</p>
<p>-r 0.1帧率</p>
<p>以上参数为了给摄像头启动时间（部分摄像头会休眠）</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>截图</tag>
        <tag>终端</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux的php-fpm优化心得-php-fpm进程占用内存大和不释放内存问题</title>
    <url>/2020/04/30/linux%E7%9A%84php-fpm%E4%BC%98%E5%8C%96%E5%BF%83%E5%BE%97-php-fpm%E8%BF%9B%E7%A8%8B%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98%E5%A4%A7%E5%92%8C%E4%B8%8D%E9%87%8A%E6%94%BE%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>最近发现博客的内存老是隔三差五地被“吃掉”了，登录到后台后偶尔会出卡顿的情况，一开始怀疑是Swap不够导致的，于是给VPS主机增加了几个G的Swap，观察了一段时间后发现再大的Swap也被慢慢地“吃掉”了！</p>
<p>很显然是PHP某些服务一直在占用着VPS的内存没有释放，导致物理内存耗尽后调用了Swap，显然Swap没有物理内存运行的效率高，于是就出现了进程卡死的情况了。考虑到挖站否现在用的Wordpress用的主题与插件过多，出现这样的情况也是正常。</p>
<p>LNMP架构中PHP是运行在FastCGI模式下，按照官方的说法，php-cgi会在每个请求结束的时候会回收脚本使用的全部内存，但是并不会释放给操作系统，而是继续持有以应对下一次PHP请求。而php-fpm是FastCGI进程管理器，用于控制php的内存和进程等。</p>
<p><img src="/2020/04/php-fpm_13.jpg" alt="Linux的php-fpm优化心得-php-fpm进程占用内存大和不释放内存"></p>
<p>所以，解决的办法就是通过php-fpm优化总的进程数和单个进程占用的内存，从而解决php-fpm进程占用内存大和不释放内存的问题。更多的Linux服务器优化方法以及建站心得，还有：</p>
<ol>
<li><a href="https://wzfou.com/crontab/">Linux Crontab命令定时任务基本语法与操作教程-VPS&#x2F;服务器自动化</a></li>
<li><a href="https://wzfou.com/aliyun-jp/">阿里云日本VPS主机速度性能评测-日本软银SoftBank\香港NTT线路</a></li>
<li><a href="https://wzfou.com/dnssec-dns/">DNS域名解析启用DNSSEC防止DNS劫持-Google Cloud DNS设置DNSSEC</a></li>
</ol>
<blockquote>
<p><strong>PS：2018年12月14日更新，</strong>如果你的VPS主机的内存和性能不是很好的话，这时最好是启用缓存可以大大节省资源消耗：<a href="https://wzfou.com/nginx-fastcgi-cache/">WordPress开启Nginx fastcgi_cache缓存加速方法-Nginx配置实例</a>。</p>
<p><strong>PS：2019年9月29日更新，</strong>由于Google主导开发的服务器优化神器ngx_pagespeed，集成了图片延迟加载、自适应webp、JS和CSS优化、图片优化等一整套优化工具：<a href="https://wzfou.com/ngx-pagespeed/">PageSpeed服务器优化神器-Nginx部署ngx_pagespeed模块和加速效果体验</a>。</p>
</blockquote>
<h2 id="一、分析判断php-fpm内存占用情况"><a href="#一、分析判断php-fpm内存占用情况" class="headerlink" title="一、分析判断php-fpm内存占用情况"></a>一、分析判断php-fpm内存占用情况</h2><p>如果你发现VPS主机出现了卡顿的情况，首先查看一下内存的占用情况，常用的命令就是Top、Glances、Free等，不了解这些命令的朋友可以先看看挖站否做的专题：<a href="https://wzfou.com/linux-jiankong/">Linux系统监控命令整理汇总-掌握CPU,内存,磁盘IO等找出性能瓶颈</a>。</p>
<p>使用Glances命令，再按下m，就可以查看到当前VPS主机进程内存占用情况了，按照占用内存由多到少排序（或者使用Top命令，按下M，效果是一样的）。如下图（点击放大）：</p>
<p><img src="/2020/04/php-pfm_01.gif" alt="php-fpm内存占用情况"></p>
<p>这是一张重启后进程内存占用情况图，从前后对比中可以发现：随着开机时间的增长，php-fpm占用的内存越来越大，最终php-fpm耗尽了VPS所有物理内存。</p>
<p><img src="/2020/04/php-pfm_02.gif" alt="php-fpm重启后内存"></p>
<p><strong>查看当前php-fpm总进程数</strong>，命令：<code>ps -ylC php-fpm --sort:rss</code>。其中RSS就是占用的内存情况。如下图：</p>
<p><img src="/2020/04/php-pfm_04.gif" alt="php-fpm进程总数"></p>
<p><strong>查看当前php-fpm进程的内存占用情况及启动时间</strong>，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -e -o &#x27;pid,comm,args,pcpu,rsz,vsz,stime,user,uid&#x27;grep wwwsort -nrk5</span><br></pre></td></tr></table></figure>

<p>从下图可以看出当前php-fpm所有进程平均每个进程占用了60-70MB的内存，启动时间，是当天的话就是3：12，否则会显示是X月X日。</p>
<p><img src="/2020/04/php-pfm_06.gif" alt="php-fpm启动时间"></p>
<p><strong>查看当前php-fpm进程平均占用内存情况</strong>，一般来说一个php-fpm进程占用的内存为30-40MB，本次查询的结果是60MB，显然是多了。命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps --no-headers -o &quot;rss,cmd&quot; -C php-fpm  awk &#x27;&#123; sum+=$1 &#125; END &#123; printf (&quot;%d%s\n&quot;, sum/NR/1024,&quot;M&quot;) &#125;&#x27;</span><br><span class="line">结果61M</span><br></pre></td></tr></table></figure>

<h2 id="二、熟悉php-fpm配置文件说明"><a href="#二、熟悉php-fpm配置文件说明" class="headerlink" title="二、熟悉php-fpm配置文件说明"></a>二、熟悉php-fpm配置文件说明</h2><p>php-fpm.conf就是php-fpm的配置文件，路径一般在：<code>/usr/local/php/etc</code>，如下图：</p>
<p><img src="/2020/04/php-pfm_05.gif" alt="php-fpm配置路径"></p>
<p>php-fpm.conf几个重要的参数说明如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm = dynamic #指定进程管理方式，有3种可供选择：static、dynamic和ondemand。</span><br><span class="line">pm.max_children = 16 #static模式下创建的子进程数或dynamic模式下同一时刻允许最大的php-fpm子进程数量。</span><br><span class="line">pm.start_servers = 10 #动态方式下的起始php-fpm进程数量。</span><br><span class="line">pm.min_spare_servers = 8 #动态方式下服务器空闲时最小php-fpm进程数量。</span><br><span class="line">pm.max_spare_servers = 16 #动态方式下服务器空闲时最大php-fpm进程数量。</span><br><span class="line">pm.max_requests = 2000 #php-fpm子进程能处理的最大请求数。</span><br><span class="line">pm.process_idle_timeout = 10s</span><br><span class="line">request_terminate_timeout = 120</span><br></pre></td></tr></table></figure>

<p>pm三种进程管理模式说明如下：</p>
<blockquote>
<p>pm &#x3D; static，始终保持一个固定数量的子进程，这个数由pm.max_children定义，这种方式很不灵活，也通常不是默认的。</p>
<p>pm &#x3D; dynamic，启动时会产生固定数量的子进程（由pm.start_servers控制）可以理解成最小子进程数，而最大子进程数则由pm.max_children去控制，子进程数会在最大和最小数范围中变化。闲置的子进程数还可以由另2个配置控制，分别是pm.min_spare_servers和pm.max_spare_servers。如果闲置的子进程超出了pm.max_spare_servers，则会被杀掉。小于pm.min_spare_servers则会启动进程（注意，pm.max_spare_servers应小于pm.max_children）。</p>
<p>pm &#x3D; ondemand，这种模式和pm &#x3D; dynamic相反，把内存放在第一位，每个闲置进程在持续闲置了pm.process_idle_timeout秒后就会被杀掉，如果服务器长时间没有请求，就只会有一个php-fpm主进程。弊端是遇到高峰期或者如果pm.process_idle_timeout的值太短的话，容易出现504 Gateway Time-out错误，因此pm &#x3D; dynamic和pm &#x3D; ondemand谁更适合视实际情况而定。</p>
</blockquote>
<h2 id="三、解决php-fpm进程占用内存大问题"><a href="#三、解决php-fpm进程占用内存大问题" class="headerlink" title="三、解决php-fpm进程占用内存大问题"></a>三、解决php-fpm进程占用内存大问题</h2><h3 id="3-1-调整管理模式"><a href="#3-1-调整管理模式" class="headerlink" title="3.1  调整管理模式"></a>3.1  调整管理模式</h3><p>static管理模式适合比较大内存的服务器，而dynamic则适合小内存的服务器，你可以设置一个pm.min_spare_servers和pm.max_spare_servers合理范围，这样进程数会不断变动。ondemand模式则更加适合微小内存，例如512MB或者256MB内存，以及对可用性要求不高的环境。</p>
<p><img src="/2020/04/php-fpm_10.jpg" alt="php-fpm调整管理模式"></p>
<h3 id="3-2-减少php-fpm进程数"><a href="#3-2-减少php-fpm进程数" class="headerlink" title="3.2  减少php-fpm进程数"></a>3.2  减少php-fpm进程数</h3><p>如果你的VPS主机的内存被占用耗尽，可以检查一下你的php-fpm进程数，按照php-fpm进程数&#x3D;内存&#x2F;2&#x2F;30来计算，1GB内存适合的php-fpm进程数为10-20之间，具体还得根据你的PHP加载的附加组件有关系。</p>
<p><img src="/2020/04/php-fpm_09.jpg" alt="Linux的php-fpm加载情况"></p>
<h3 id="3-3-php-fpm配置示例"><a href="#3-3-php-fpm配置示例" class="headerlink" title="3.3  php-fpm配置示例"></a>3.3  php-fpm配置示例</h3><p>这里以1GB内存的VPS配置php-fpm为演示，实际操作来看设置数值还得根据服务器本身的性能、PHP等综合考虑。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm = dynamic #dynamic和ondemand适合小内存。</span><br><span class="line">pm.max_children = 15 #static模式下生效，dynamic不生效。</span><br><span class="line">pm.start_servers = 8 #dynamic模式下开机的进程数量。</span><br><span class="line">pm.min_spare_servers = 6 #dynamic模式下最小php-fpm进程数量。</span><br><span class="line">pm.max_spare_servers = 15 #dynamic模式下最大php-fpm进程数量。</span><br></pre></td></tr></table></figure>

<h2 id="四、解决php-fpm进程不释放内存问题"><a href="#四、解决php-fpm进程不释放内存问题" class="headerlink" title="四、解决php-fpm进程不释放内存问题"></a>四、解决php-fpm进程不释放内存问题</h2><p>上面通过减少php-fpm进程总数来达到减少php-fpm内存占用的问题，实际使用过程中发现php-fpm进程还存长期占用内存而不释放的问题。解决的方法就是减少pm.max_requests数。</p>
<p><img src="/2020/04/php-fpm_12.jpg" alt="php-fpm减少进程数"></p>
<p>最大请求数max_requests，即当一个 PHP-CGI 进程处理的请求数累积到 max_requests 个后，自动重启该进程，这样达到了释放内存的目的了。以1GB内存的VPS主机设置为例（如果你设置的数值没有达到释放内存可以继续调低）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm.max_requests = 500 </span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/php-fpm_11.jpg" alt="php-fpm释放内存"></p>
<p>当php-fpm进程达到了pm.max_requests设定的数值后，就会重启该进程，从而释放内存。下图是我测试后的效果，可以看出php-fpm进程被强制结束并释放了内存。</p>
<p><img src="/2020/04/php-pfm_03.gif" alt="php-fpm重启进程释放内存"></p>
<h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>对于大内存以及对并发和可用性要求的话，建议使用static管理模式+最大的pm.max_children。如果是小内存的服务器，建议使用dynamic或者ondemand模式，同时降低pm.start_servers和pm.max_spare_servers进程数。</p>
<p>为什么我调整了参数没有达到应有的效果？根据wzfou.com的经验，php-fpm配置文件参数不能一概而论，必须要结合服务器自身的性能、WEB动态内容以及对可用性的要求来进行调整，内存长期占用最好是再检查一下是否有内存泄露。</p>
<p><strong>2019年10月9日更新，</strong>如果你的php-fpm参数调整得过小，有可能出现502错误，解决办法：<a href="https://wzfou.com/question/18791/">解决WordPress后台编辑保存菜单出现502错误</a>。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>OneinStack</tag>
        <tag>php-fpm</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之TCPIP内核参数优化</title>
    <url>/2018/07/29/linux%E4%B9%8Btcpip%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>本文以Ubuntu 12.04 LTS Desktop (x64)默认配置为例（机器的内存为4GB），推荐先阅读**<a href="http://www.cnblogs.com/fczjuever/archive/2013/04/05/3000680.html">《TCP连接的状态与关闭方式，及其对Server与Client的影响》</a><strong>、</strong><a href="http://www.cnblogs.com/fczjuever/archive/2013/04/05/3000697.html">《Windows系统下的TCP参数优化》</a>**，以了解TCP优化的相关知识。</p>
<hr>
<h1 id="x2F-proc-x2F-sys-x2F-net目录"><a href="#x2F-proc-x2F-sys-x2F-net目录" class="headerlink" title="&#x2F;proc&#x2F;sys&#x2F;net目录"></a><strong>&#x2F;proc&#x2F;sys&#x2F;net目录</strong></h1><p>所有的TCP&#x2F;IP参数都位于&#x2F;proc&#x2F;sys&#x2F;net目录下（请注意，对&#x2F;proc&#x2F;sys&#x2F;net目录下内容的修改都是临时的，任何修改在系统重启后都会丢失），例如下面这些重要的参数：</p>
<p><strong>参数（路径</strong>**+**<strong>文件）</strong></p>
<p><strong>描述</strong></p>
<p><strong>默认值</strong></p>
<p><strong>优化值</strong></p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;rmem_default</p>
<p>默认的TCP数据接收窗口大小（字节）。</p>
<p>229376</p>
<p>256960</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;rmem_max</p>
<p>最大的TCP数据接收窗口（字节）。</p>
<p>131071</p>
<p>513920</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;wmem_default</p>
<p>默认的TCP数据发送窗口大小（字节）。</p>
<p>229376</p>
<p>256960</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;wmem_max</p>
<p>最大的TCP数据发送窗口（字节）。</p>
<p>131071</p>
<p>513920</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;netdev_max_backlog</p>
<p>在每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。</p>
<p>1000</p>
<p>2000</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn</p>
<p>定义了系统中每一个端口最大的监听队列的长度，这是个全局的参数。</p>
<p>128</p>
<p>2048</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;optmem_max</p>
<p>表示每个套接字所允许的最大缓冲区的大小。</p>
<p>20480</p>
<p>81920</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_mem</p>
<p>确定TCP栈应该如何反映内存使用，每个值的单位都是内存页（通常是4KB）。第一个值是内存使用的下限；第二个值是内存压力模式开始对缓冲区使用应用压力的上限；第三个值是内存使用的上限。在这个层次上可以将报文丢弃，从而减少对内存的使用。对于较大的BDP可以增大这些值（注意，其单位是内存页而不是字节）。</p>
<p>94011  125351  188022</p>
<p>131072  262144  524288</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_rmem</p>
<p>为自动调优定义socket使用的内存。第一个值是为socket接收缓冲区分配的最少字节数；第二个值是默认值（该值会被rmem_default覆盖），缓冲区在系统负载不重的情况下可以增长到这个值；第三个值是接收缓冲区空间的最大字节数（该值会被rmem_max覆盖）。</p>
<p>4096  87380  4011232</p>
<p>8760  256960  4088000</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_wmem</p>
<p>为自动调优定义socket使用的内存。第一个值是为socket发送缓冲区分配的最少字节数；第二个值是默认值（该值会被wmem_default覆盖），缓冲区在系统负载不重的情况下可以增长到这个值；第三个值是发送缓冲区空间的最大字节数（该值会被wmem_max覆盖）。</p>
<p>4096  16384  4011232</p>
<p>8760  256960  4088000</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_keepalive_time</p>
<p>TCP发送keepalive探测消息的间隔时间（秒），用于确认TCP连接是否有效。</p>
<p>7200</p>
<p>1800</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_keepalive_intvl</p>
<p>探测消息未获得响应时，重发该消息的间隔时间（秒）。</p>
<p>75</p>
<p>30</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_keepalive_probes</p>
<p>在认定TCP连接失效之前，最多发送多少个keepalive探测消息。</p>
<p>9</p>
<p>3</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_sack</p>
<p>启用有选择的应答（1表示启用），通过有选择地应答乱序接收到的报文来提高性能，让发送者只发送丢失的报文段，（对于广域网通信来说）这个选项应该启用，但是会增加对CPU的占用。</p>
<p>1</p>
<p>1</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_fack</p>
<p>启用转发应答，可以进行有选择应答（SACK）从而减少拥塞情况的发生，这个选项也应该启用。</p>
<p>1</p>
<p>1</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_timestamps</p>
<p>TCP时间戳（会在TCP包头增加12个字节），以一种比重发超时更精确的方法（参考RFC 1323）来启用对RTT 的计算，为实现更好的性能应该启用这个选项。</p>
<p>1</p>
<p>1</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_window_scaling</p>
<p>启用RFC 1323定义的window scaling，要支持超过64KB的TCP窗口，必须启用该值（1表示启用），TCP窗口最大至1GB，TCP连接双方都启用时才生效。</p>
<p>1</p>
<p>1</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_syncookies</p>
<p>表示是否打开TCP同步标签（syncookie），内核必须打开了CONFIG_SYN_COOKIES项进行编译，同步标签可以防止一个套接字在有过多试图连接到达时引起过载。</p>
<p>1</p>
<p>1</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_tw_reuse</p>
<p>表示是否允许将处于TIME-WAIT状态的socket（TIME-WAIT的端口）用于新的TCP连接 。</p>
<p>0</p>
<p>1</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_tw_recycle</p>
<p>能够更快地回收TIME-WAIT套接字。</p>
<p>0</p>
<p>1</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_fin_timeout</p>
<p>对于本端断开的socket连接，TCP保持在FIN-WAIT-2状态的时间（秒）。对方可能会断开连接或一直不结束连接或不可预料的进程死亡。</p>
<p>60</p>
<p>30</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_local_port_range</p>
<p>表示TCP&#x2F;UDP协议允许使用的本地端口号</p>
<p>32768  61000</p>
<p>1024  65000</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_max_syn_backlog</p>
<p>对于还未获得对方确认的连接请求，可保存在队列中的最大数目。如果服务器经常出现过载，可以尝试增加这个数字。</p>
<p>2048</p>
<p>2048</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_low_latency</p>
<p>允许TCP&#x2F;IP栈适应在高吞吐量情况下低延时的情况，这个选项应该禁用。</p>
<p>0</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_westwood</p>
<p>启用发送者端的拥塞控制算法，它可以维护对吞吐量的评估，并试图对带宽的整体利用情况进行优化，对于WAN 通信来说应该启用这个选项。</p>
<p>0</p>
<p>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_bic</p>
<p>为快速长距离网络启用Binary Increase Congestion，这样可以更好地利用以GB速度进行操作的链接，对于WAN通信应该启用这个选项。</p>
<p>1</p>
<p> </p>
<hr>
<p><strong>&#x2F;etc&#x2F;sysctl.conf文件</strong></p>
<p>&#x2F;etc&#x2F;sysctl.conf是一个允许你改变正在运行中的Linux系统的接口。它包含一些TCP&#x2F;IP堆栈和虚拟内存系统的高级选项，可用来控制Linux网络配置，由于&#x2F;proc&#x2F;sys&#x2F;net目录内容的临时性，建议把TCPIP参数的修改添加到&#x2F;etc&#x2F;sysctl.conf文件, 然后保存文件，使用命令“&#x2F;sbin&#x2F;sysctl –p”使之立即生效。具体修改方案参照上文：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net.core.rmem_default = 256960</span><br><span class="line"></span><br><span class="line">net.core.rmem_max = 513920</span><br><span class="line"></span><br><span class="line">net.core.wmem_default = 256960</span><br><span class="line"></span><br><span class="line">net.core.wmem_max = 513920</span><br><span class="line"></span><br><span class="line">net.core.netdev_max_backlog = 2000</span><br><span class="line"></span><br><span class="line">net.core.somaxconn = 2048</span><br><span class="line"></span><br><span class="line">net.core.optmem_max = 81920</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_mem = 131072  262144  524288</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_rmem = 8760  256960  4088000</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_wmem = 8760  256960  4088000</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_keepalive_time = 1800</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_keepalive_intvl = 30</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_keepalive_probes = 3</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_sack = 1</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_fack = 1</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_timestamps = 1</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_window_scaling = 1</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line"></span><br><span class="line">net.ipv4.ip_local_port_range = 1024  65000</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这儿所列参数是老男孩老师生产中常用的参数：</span><br><span class="line">net.ipv4.tcp_syn_retries = 1</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_synack_retries = 1</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_keepalive_time = 600</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_keepalive_probes = 3</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_keepalive_intvl =15</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_retries2 = 5</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_fin_timeout = 2</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 36000</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_max_orphans = 32768</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 16384</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_wmem = 8192 131072 16777216</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_rmem = 32768 131072 16777216</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_mem = 786432 1048576 1572864</span><br><span class="line"></span><br><span class="line">net.ipv4.ip_local_port_range = 1024 65000</span><br><span class="line"></span><br><span class="line">net.ipv4.ip_conntrack_max = 65536</span><br><span class="line"></span><br><span class="line">net.ipv4.netfilter.ip_conntrack_max=65536</span><br><span class="line"></span><br><span class="line">net.ipv4.netfilter.ip_conntrack_tcp_timeout_established=180</span><br><span class="line"></span><br><span class="line">net.core.somaxconn = 16384</span><br><span class="line"></span><br><span class="line">net.core.netdev_max_backlog = 16384</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>TCP/IP</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux网络优化加速一键脚本</title>
    <url>/2018/11/14/linux%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96%E5%8A%A0%E9%80%9F%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>在之前的<a href="https://www.94ish.me/1609.html" title="文章">文章</a>里我说过：<strong>对于出口带宽，我们常常采用BBR，锐速等TCP加速软件来争夺带宽提高自己的速度。</strong></p>
<p>但是原版的BBR并没有太多<strong>侵略性</strong>，在这个_人人都用_TCP加速的大环境下，BBR的加速功效就略显不足了。loc的大佬专门改进了下这个BBR，使BBR具有了侵略性。</p>
<p>最近我也连续购买了几个服务器，每次都手动搭建，感觉到十分麻烦，干脆写个脚本吧。由于是<strong>第一次</strong>接触shell脚本这一方面的内容，写起来感觉十分_吃力_，且与一般的高级语言语法<del>差别有些大</del>。所有有些不足的地方欢迎在下方评论反馈。</p>
<p>同时也加入了<strong>锐速一键换内核</strong>，<strong>锐速一键安装</strong>，<strong>自动根据vps情况优化锐速参数</strong>，<strong>一键优化内核参数</strong>。</p>
<p>也可以在锐速，BBR，BBR魔改版中自由切换。</p>
<h2 id="一键脚本"><a href="#一键脚本" class="headerlink" title="一键脚本"></a>一键脚本</h2><p><img src="https://www.jarods.org/wp-content/uploads/2018/11/557206173.png" alt="qianyingbbr(1).png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot;</span><br><span class="line">chmod +x tcp.sh</span><br><span class="line">./tcp.sh</span><br></pre></td></tr></table></figure>

<h2 id="脚本说明"><a href="#脚本说明" class="headerlink" title="脚本说明"></a>脚本说明</h2><blockquote>
<p>支持系统 Centos 6+ &#x2F; Debian 7+ &#x2F; Ubuntu 14+ BBR魔改版不支持Debian 8</p>
</blockquote>
<p>如果在删除内核环节出现这样一张图 <img src="https://www.jarods.org/wp-content/uploads/2018/11/4150223835.png" alt="3363374172.png"> <strong>注意选择NO</strong></p>
<p>根据自己需求操作，重启后再使用<code>./tcp.sh</code>命令接着操作</p>
<p>脚本会自动检测安装的情况，请注意脚本菜单下的<strong>状态检测</strong>即可。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li>魔改BBR原帖：<a href="http://www.hostloc.com/thread-372277-1-2.html" title="http://www.hostloc.com/thread-372277-1-2.html">http://www.hostloc.com/thread-372277-1-2.html</a></li>
<li>脚本参考：<a href="https://ylws.me/tech/68.html" title="https://ylws.me/tech/68.html">https://ylws.me/tech/68.html</a></li>
<li>技术参考：<a href="http://51.ruyo.net/p/4415.html" title="http://51.ruyo.net/p/4415.html">http://51.ruyo.net/p/4415.html</a></li>
</ol>
<p>同时非常感谢vicer提供Lotserver一键脚本。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>BBR</tag>
        <tag>BBR魔改版</tag>
        <tag>锐速</tag>
      </tags>
  </entry>
  <entry>
    <title>LNMP/LAMP/LNMPA/LNMT/环境一键安装</title>
    <url>/2017/07/09/lnmplamplnmpalnmt%E7%8E%AF%E5%A2%83%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果有单独数据盘，建议您先挂载数据盘，建议将网站内容、数据库放在数据盘中。如何挂载数据盘，请参考（支持阿里云、腾讯云）：《<a href="https://oneinstack.com/question/how-to-mount-a-data-disc/">如何利用脚本自动化挂载数据盘？</a>》</p>
<p>yum -y install wget screen curl python #for CentOS&#x2F;Redhat</p>
<h1 id="apt-get-y-install-wget-screen-curl-python-for-Debian-x2F-Ubuntu"><a href="#apt-get-y-install-wget-screen-curl-python-for-Debian-x2F-Ubuntu" class="headerlink" title="apt-get -y install wget screen curl python #for Debian&#x2F;Ubuntu"></a>apt-get -y install wget screen curl python #for Debian&#x2F;Ubuntu</h1><p>wget <a href="http://aliyun-oss.linuxeye.com/oneinstack-full.tar.gz">http://aliyun-oss.linuxeye.com/oneinstack-full.tar.gz</a> #阿里云经典网络下载<br>wget <a href="http://mirrors.linuxeye.com/oneinstack-full.tar.gz">http://mirrors.linuxeye.com/oneinstack-full.tar.gz</a> #包含源码，国内外均可下载<br>wget <a href="http://mirrors.linuxeye.com/oneinstack.tar.gz">http://mirrors.linuxeye.com/oneinstack.tar.gz</a> #不包含源码，建议仅国外主机下载<br>tar xzf oneinstack-full.tar.gz<br>cd oneinstack #如果需要修改目录(安装、数据存储、Nginx日志)，请修改options.conf文件<br>screen -S oneinstack #如果网路出现中断，可以执行命令`screen -R oneinstack`重新连接安装窗口<br>.&#x2F;install.sh #注：请勿sh install.sh或者bash install.sh这样执行</p>
<h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://www.jarods.org/wp-content/uploads/2017/07/install_oneinstack.png"></h3><h2 id="如何添加附加组件？"><a href="#如何添加附加组件？" class="headerlink" title="如何添加附加组件？"></a>如何添加附加组件？</h2><p>.&#x2F;addons.sh</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/07/addons.png"></p>
<h2 id="如何添加虚拟主机？"><a href="#如何添加虚拟主机？" class="headerlink" title="如何添加虚拟主机？"></a>如何添加虚拟主机？</h2><p>.&#x2F;vhost.sh</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/07/vhost.png"></p>
<h2 id="如何删除虚拟主机？"><a href="#如何删除虚拟主机？" class="headerlink" title="如何删除虚拟主机？"></a>如何删除虚拟主机？</h2><p>.&#x2F;vhost.sh del</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/07/vhost_del.png"></p>
<h2 id="如何管理FTP账号？"><a href="#如何管理FTP账号？" class="headerlink" title="如何管理FTP账号？"></a>如何管理FTP账号？</h2><p>.&#x2F;pureftpd_vhost.sh</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/07/pureftpd.png"> <a href="https://github.com/lj2007331/oneinstack#how-to-backup"></a></p>
<h2 id="如何备份？"><a href="#如何备份？" class="headerlink" title="如何备份？"></a>如何备份？</h2><p>.&#x2F;backup_setup.sh # Set backup options </p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/07/backup.png"></p>
<p> .&#x2F;backup.sh # Start backup, You can add cron jobs</p>
<h1 id="crontab-l-Examples"><a href="#crontab-l-Examples" class="headerlink" title="crontab -l # Examples"></a>crontab -l # Examples</h1><pre><code> 0 1 \* \* \* cd ~/oneinstack;./backup.sh  &gt; /dev/null 2&gt;&amp;1 &amp;
</code></pre>
<h2 id="如何管理服务？"><a href="#如何管理服务？" class="headerlink" title="如何管理服务？"></a>如何管理服务？</h2><p>Nginx&#x2F;Tengine&#x2F;OpenResty:</p>
<p>service nginx {startstopstatusrestartreloadconfigtest}</p>
<p>MySQL&#x2F;MariaDB&#x2F;Percona:</p>
<p>service mysqld {startstoprestartreloadstatus}</p>
<p>PHP:</p>
<p>service php-fpm {startstoprestartreloadstatus}</p>
<p>HHVM:</p>
<p>service supervisord {startstopstatusrestartreload}</p>
<p><strong>注</strong>：hhvm进程交给supervisord管理，了解更多请访问《<a href="https://blog.linuxeye.com/408.html">Supervisor管理hhvm进程</a>》 Apache:</p>
<p>service httpd {startrestartstop}</p>
<p>Tomcat:</p>
<p>service tomcat {startstopstatusrestart}</p>
<p>Pure-Ftpd:</p>
<p>service pureftpd {startstoprestartstatus}</p>
<p>Redis:</p>
<p>service redis-server {startstopstatusrestartreload}</p>
<p>Memcached:</p>
<p>service memcached {startstopstatusrestartreload}</p>
<h2 id="如何更新版本？"><a href="#如何更新版本？" class="headerlink" title="如何更新版本？"></a>如何更新版本？</h2><p>.&#x2F;upgrade.sh</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/07/upgrade.png"></p>
<h2 id="如何卸载"><a href="#如何卸载" class="headerlink" title="如何卸载?"></a>如何卸载?</h2><p>.&#x2F;uninstall.sh</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/07/uninstall.png"></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>LNMP</tag>
        <tag>Apache</tag>
        <tag>HHVM</tag>
        <tag>LAMP</tag>
        <tag>LNMPA</tag>
        <tag>LNMT</tag>
        <tag>MariaDB</tag>
        <tag>Memcached</tag>
        <tag>MySQL</tag>
        <tag>OpenResty</tag>
        <tag>Percona</tag>
        <tag>PHP</tag>
        <tag>Pure-Ftpd</tag>
        <tag>Redis</tag>
        <tag>Tengine</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装DNSmasq搭建自己的公共DNS</title>
    <url>/2018/10/03/linux%E5%AE%89%E8%A3%85dnsmasq%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%85%AC%E5%85%B1dns/</url>
    <content><![CDATA[<p>DNSmasq是一个小巧且方便地用于配置DNS和DHCP的工具，适用于小型网络，它提供了DNS功能和可选择的DHCP功能。自己搭建公共DNS更加灵活，如果是在本地搭建，还可以大幅提高解析速度。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/dnsf0.png"></p>
<h3 id="安装DNSmasq"><a href="#安装DNSmasq" class="headerlink" title="安装DNSmasq"></a>安装DNSmasq</h3><p>可以下载软件包编译安装，不过一般Linux软件仓库已经提供了DNSmasq，相关命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#centos安装</span><br><span class="line">yum -y install dnsmasq</span><br><span class="line">#如果是ubuntu系统</span><br><span class="line">apt-get -y install dnsmasq</span><br></pre></td></tr></table></figure>

<h3 id="配置DNSmasq"><a href="#配置DNSmasq" class="headerlink" title="配置DNSmasq"></a>配置DNSmasq</h3><p>DNSmasq配置文件再<code>/etc/dnsmasq.conf</code>，我们需要修改几个参数，分别为：</p>
<ul>
<li>resolv-file&#x3D;&#x2F;etc&#x2F;resolv.dnsmasq.conf 这个参数表示 dnsmasq 会从这个指定的文件中寻找上游 dns 服务器</li>
<li>取消注释的 strict-order ，表示严格按照 resolv-file 文件中的顺序从上到下进行 DNS 解析, 直到第一个成功解析成功为止</li>
<li>注释掉 no-hosts, 默认情况下这是注释掉的, dnsmasq 会首先寻找本地的 hosts 文件再去寻找缓存下来的域名, 最后去上游 dns 服务器寻找.</li>
<li>设置 listen-address&#x3D;127.0.0.1 ,<code>127.0.0.1</code>改成自己服务器IP</li>
</ul>
<p>我们来整理下上面我们修改了那些配置内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#需要新建一个resolv.dnsmasq.conf文件,这个是配置上游DNS，也就是真正的公共DNS</span><br><span class="line">vi /etc/resolv.dnsmasq.conf</span><br><span class="line">#内容如下</span><br><span class="line">nameserver 119.29.29.29</span><br><span class="line">nameserver 1.2.4.8</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#修改/etc/dnsmasq.conf</span><br><span class="line">#上游DNS路径</span><br><span class="line">resolv-file=/etc/resolv.dnsmasq.conf</span><br><span class="line">#取消strict-order注释</span><br><span class="line">strict-order</span><br><span class="line">#监听地址，改成自己服务器公网IP</span><br><span class="line">listen-address=127.0.0.1</span><br></pre></td></tr></table></figure>

<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>DNSmasq可以设置不同的域名指定不同的DNS进行解析，修改<code>/etc/dnsmasq.conf</code>文件即可，若不对域名设置DNS，则从上游DNS获取记录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#指定淘宝使用114 DNS进行解析</span><br><span class="line">server=/taobao.com/114.114.114.114</span><br><span class="line">#google指定8.8.8.8进行解析</span><br><span class="line">server=/google.com/8.8.8.8</span><br></pre></td></tr></table></figure>

<p>也可以对指定的域名进行解析，相当于就是本地hosts指向，可以利用这个功能实现广告屏蔽等效果。也是需要修改<code>/etc/dnsmasq.conf</code>文件，DNSmasq也可以对域名进行泛解析，填写<code>*.xiaoz.me</code>,这样的格式即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#将广告域名指向到127.0.0.1实现广告屏蔽</span><br><span class="line">address=/ad.youku.com/127.0.0.1</span><br><span class="line">address=/ad.iqiyi.com/127.0.0.1</span><br><span class="line">#对xiaoz.me进行泛解析</span><br><span class="line">address=/*.xiaoz.me/192.168.20.138</span><br></pre></td></tr></table></figure>

<h3 id="启动与测试"><a href="#启动与测试" class="headerlink" title="启动与测试"></a>启动与测试</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#启动</span><br><span class="line">/etc/init.d/dnsmasq start</span><br><span class="line">#停止</span><br><span class="line">/etc/init.d/dnsmasq stop</span><br><span class="line">#重新启动</span><br><span class="line">/etc/init.d/dnsmasq restart</span><br></pre></td></tr></table></figure>

<p>比如我在本地一台Linux服务器（192.168.20.127）安装了DNSmasq，并在局域网内其它PC将DNS配置为192.168.20.127，使用dig命令进行测试，第一次查询相对较长，第二次几乎再10ms内，如下截图。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/digtest.png"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果是在内网搭建DNSmasq，不仅可以提高解析速度，还可以有效的防止DNS劫持，实现屏蔽广告等作用。如果是在公网搭建DNSmasq，还可以对指定的域名解析hosts指向，从而避免DNS污染，实现fq</p>
<p>如果您发现DNSmasq启动正常，但就是无法解析，请注意防火墙是否放行tcp&#x2F;upd 53端口。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>DNS</tag>
        <tag>DNSmasq</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac book pro关于盒盖休眠掉电快的解决办法</title>
    <url>/2019/02/13/mac-book-pro%E5%85%B3%E4%BA%8E%E7%9B%92%E7%9B%96%E4%BC%91%E7%9C%A0%E6%8E%89%E7%94%B5%E5%BF%AB%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>第一个修改是修改待机模式，这个很多人都知道了。</p>
<p>查看自己电脑的休眠状态，改成25可以解决待机耗电的问题</p>
<p>查看状态命令 pmset -g</p>
<p> </p>
<p>hibernatemode&#x3D;25</p>
<p>is only settable via pmset. The system will store a copy of memory to persistent storage (the disk), and will remove power to memory. The system will restore from disk image. If you want hibernation—slower sleeps, slower wakes, and better battery life you should use this setting.</p>
<p> </p>
<p>修改状态命令 <strong>sudo pmset -a hibernatemode 25</strong></p>
<p>当时我改了这个之后，掉电有所改善，但是还是掉的很快，我的目标是放一晚上不掉电，于是继续找方法。 后来看到一个帖子里面说的很有道理，其实盒盖之后掉电主要是因为还有网络活动的状态导致的，那就直接把网络活动给关闭了。于是我又输了下面这个命令。</p>
<p>修改<strong>tcpkeepalive</strong>。</p>
<p>    $ pmset -g custom #默认是 1 ，打开状态</p>
<p>    $ <strong>sudo pmset -b tcpkeepalive 0</strong> #设置为关闭</p>
<p>其中Battery Power（电池）和 AC Power（电源）的信息是分开的，pmset -b是只对Battery Power（电池）模式的参数进行调整。</p>
<p>把tcpkeepalive设置成0就可以了。</p>
<p>我改了这两个东西之后，每晚盒盖掉电从来没掉过1%。周末带笔记本回家，周一去上班，电基本都还能是满的。</p>
<p>但是，<strong>有一点特别重要，就是修改这两个东西后，在节能设置里面，千万不要恢复成默认，不然前面会恢复未修改前的状态。</strong> 如果升级系统后，或者某一天突然发现掉电又快了，请进终端查看一下上面两个参数有没有变动，查看命令上面也有。 另外，终端如果需要你输入密码的时候，你只管输入自己的开机密码然后回车就行了，终端里面输入密码是不显示的。</p>
<p>最近看到关于盒盖休眠的帖子有点多，有些是求助帖，有些是解决方案，但是看来看去我觉得还是我这个比较方便，两个命令就搞定，所以分享出来。</p>
<p>以上。 好像有朋友不太熟悉怎么操作，下面对不太懂的朋友给个操作流程。 1.搜索“终端”，打开 2.将帖子里面第一条蓝色加粗的命令复制进去，回车。 3.会提示输入密码，输入开机密码（这个时候是看不到密码的，输就是了），回车 4.复制第二条蓝色加粗命令进去，回车，同样输入密码操作，回车 5.重启。（其实不用重启都行） 6.特别注意：改了这个之后，就不要把节能那里恢复默认了，不然还得再改一次。</p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac你不知道的小技巧</title>
    <url>/2019/02/27/mac%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>1.在Launchpad下按住control＋option＋command 然后按B 有没有发现launchpad背景变了 总共有5种效果</p>
<p>2系统偏好设置长按 ‘显示全部’拉到最下面选择自定…然后就可以隐藏一些碍眼的设置了</p>
<p><img src="https://www.fengimg.com/attachments/photo/Day_120831/181327_335113463927694b82ab862bbd40c.jpg">3 锁定屏幕 应用程序——&gt;实用工具——&gt; 钥匙串访问 打开偏好设置 通用 勾选在菜单栏中显示钥匙串状态 然后在你需要离开时就可以直接锁定屏幕了 4.调整声音的时候，系统会发出“嘟嘟”的声音，按住shift键就没了 同时按shift+option， 可以4分1格调节（这个同样适用键盘背光和屏幕亮度） 5.把多个文件归类到一个文件夹中：选中你想要的文件 按cntrol＋command＋n（动画很帅气，没办法截图自己试试吧） 6.快速关机 正常左上角苹果－关机会出来个对话框 按住option再点关机就不会出现了 其实按住option很多菜单会发生些小变化，自己探索吧～ 7.快速重命名 选中回车 这个都知道的吧。。。 8.finder下 command＋1234 能切换不同的显示方式～ 9.当打开一个程序的多个窗口 如finder 如果要同时最小化， 按住Option ，然后按其中一个窗口上的最小化按钮就ok了，要同时全部还原就按住option点dock图标就好了～ 10.伪造恐怖标签 纯好玩而已的，可以先在桌面建立个空白文件夹玩玩， 学会了可以邪恶的对别人电脑恶作剧，可以想象下要是在打开熟悉的文件夹时候看到的是病毒感染，文件破坏的对话框，会多么恐怖～ 建立文件夹，command+i,spotlight里面注释，如“”提示 文件已被病毒感染 下一步，右击选”文件夹操作设置“，勾选”显示文件夹设置“，点＋选择”附加脚本“最后一项”opten…“ 大功告成，点击这个文件夹会出现你设置的提示，足以以假乱真 11.按下command+option+control+8 18L的旋转效果 多次对同一widgets频繁加载 可能会导致Dashboard崩溃甚至系统崩溃 刚刚的五国可能就跟我这操作有点关系…… 没办法那个旋转效果有点意思 忍不住多看了几遍恩 三五次都是可以的</p>
<p>好要加分！！不要做伸手党！！！</p>
<p>新 Finder 窗口 Command + n（这个快捷键在safari等基本上所有的mac程序都适用，从此可以挂两个或多个qq，你懂得！） 关闭当前程序窗口 command＋w（这个不退出程序，只是关闭当前窗口） 隐藏当前正在使用的这个程序command＋h（如果想使这个程序的窗口再出现，直接点程序图标就可以！） 完全退出程序，关闭程序command＋q safari刷新页面command＋r 复制command＋c     粘贴command＋v 查看文件简介command＋i 注销电脑shift＋command＋q 不提醒直接注销电脑shift＋command＋option＋q 打开文件command＋o（我觉得打开很多文件好用，直接全选中再command＋o） 最小化command＋m 直接在finder中清倒废纸篓shift＋command＋option＋delete 快速启动itunes  f8 ctrl command alt(option) + eject(右上角那个）</p>
<p>同样重启的快捷键： Command-Ctrl-Eject.</p>
<p>将Mac置于休眠状态: Command-Alt(Option)-Eject 我最常用用这些，个人觉得很实用，还想要什么快捷键可以问我，，，， 下面是基本能用上的的快捷键！ 先说一下Mac OS X系统图形表示方法 ⇧ &#x3D; shift ⌃ &#x3D; control ⌥ &#x3D; option &#x2F; alt Home&#x3D;fn + ◄ End&#x3D;fn + ► Page Up&#x3D;fn + ▲ Page Down&#x3D;fn + ▼ 删除后一个字符（普通键盘的Delete)&#x3D;fn + delete 截图保存整个屏幕到桌面&#x3D;shift + command + 3 保存整个屏幕到剪贴板&#x3D;control + shift + command + 3 截取指定屏幕区域到桌面&#x3D;shift + command + 4 前一个输入法&#x3D;command + 空格 下一个输入法&#x3D;alt + command + 空格 强制重新启动 Command + Ctrl + 电源 key 启动到安全模式 Shift (在开机声音后) 打开登录窗口 Shift (当屏幕变成蓝色以后) 并闭打开的窗口 Shift (登录过程中) 从光盘启动 c 选择启动磁盘 Option 启动到 verbose 模式 Command + v 启动为单用户模式 Command + s 打开固件 Command + Shift + o + f 火线连接方式 t</p>
<p>Com或者command就是指的命令键(苹果键&#x2F;花键)啦。 隐藏 Finder Command + h 隐藏其它 Command + Option + h 清空废纸篓 Command + Shift + Delete 清空废纸篓 (不提示) Command + Option + Shift + Delete 获取信息 (静态窗口) Command + i 获取信息 (动态窗口) Command + Option + i 查找 … Command + f 弹出 Command + e 查看显示选项 Command + j 转到计算机 Command + Shift + c 转到个人主目录 Command + Shift + h 转到 iDisk Command + Shift + i 转到应用程序目录 Command + Shift + a 转到个人收藏 Command + Shift + f 转到目录 … Command + Shift + g 连接到服务器 … Command + k 注销… Command + Shift + q 注销 (不提示) Command + Option + Shift + q</p>
<p>动作 快捷键</p>
<p>选择下一图标 Arrow keys 选择图标名字的首字母 Letter key 选择下一个(字母顺序) Tab 添加图标到选择的项目 Shift + click 选择相邻的图标 (列表显示) Shift + click 选择不相邻的图标 (列表显示) Command + click 编辑图标名字 Return</p>
<p>文件及目录快捷键</p>
<p>动作 快捷键</p>
<p>拷贝项目 Option + 拖拉 原位复制 Command + d 创建替身(拖拉方式) Command + Option + 拖拉 创建替身(命令方式) Command + l (L) 显示原身位置 Command + r 添加到个人收藏 Command + t 对齐项目 Command + 拖拉 在单独的窗口中打开目录 Command + 双击 打开项目 Command + Down Arrow 关闭目录 (转到上层目录) Command + Up Arrow 打开目录 (列表显示) Option + Right Arrow 关闭目录 (列表显示) Option + Left Arrow 打开选择的目录中的所有目录 (列表显示) Command + Option + Right Arrow 关闭选择的目录中的所有目录 (列表显示) Command + Option + Left Arrow 删除项目 Command + Delete</p>
<p>窗口快捷键</p>
<p>动作 快捷键</p>
<p>新 Finder 窗口 Command + n 关闭当前窗口 Command + w 最小化当前窗口 Command + m 关闭所有窗口 Option + click close button 最小化所有窗口 Option + click minimize button 适合屏幕 Option + click zoom button 隐藏应用程序 Option + click (Desktop, Dock item, …) 移动一个非当前窗口 Command + 拖拉窗口 查看路径 Command + 点击窗口标题 图标显示 Command + 1 列表显示 Command + 2 分栏显示 Command + 3 隐藏&#x2F;显示栏 Command + b</p>
<p>dock快捷键</p>
<p>动作 快捷键</p>
<p>在 Finder 中显示项目 Command + click dock item 切换dock (全键盘操作) Ctrl + d 导航 (全键盘操作) Arrow Left, Arrow Right or Tab, Shift + Tab 打开项目 Space, Return, Enter 隐藏&#x2F;显示Dock Command + Option + d</p>
<p>用户进程快捷键</p>
<p>动作 动作</p>
<p>查看活动的用户程序 Command + Tab 往回查看活动的用户程序 Command + Shift + Tab</p>
<p>对话框快捷键</p>
<p>动作 快捷键</p>
<p>选择下一区域 Tab 选择默认按钮 Return or Enter 关闭提示 Esc or Command + period 选择上层或者下层目录(保存&#x2F;打开) Up Arrow, Down Arrow 向上滚动 (列表) Page up 向下滚动 (列表) Page down</p>
<p>全键盘操作</p>
<p>动作 快捷键</p>
<p>打开全键盘操作 Ctrl + F1 提示以及窗口任意控制 Ctrl + F7 高亮下一控制 Tab</p>
<p>高亮下一控制 (文本框) Ctrl + Tab 高亮下一窗口 Command + ` 高亮在列表, 标签组或菜单中的项目 Arrow keys 移动滚动条 Arrow keys 高亮文本框相邻的控制 Ctrl + Arrow keys</p>
<p>选择高亮项目 Space bar 选择默认按钮 Return or Enter 点击取消按钮 Esc 不选择项目关闭菜单 Esc 反转高亮移动的顺序 Shift + &quot;key&quot; 菜单条 Ctrl + F2 Dock Ctrl + F3 浏览窗口 Ctrl + F4 (Ctrl + Shift + F4) 工具栏 Ctrl + F5 实用程序窗口 Ctrl + F6</p>
<p>再加一些，可能会重复</p>
<p>1、在电脑启动时，同时按住“option”键可以重建桌面。</p>
<p> </p>
<p>2、在电脑启动时，按住“shift”键可以关闭所有系统功能扩展。</p>
<p> </p>
<p>3、在电脑启动时，按住鼠标可以推出软盘以避免将其用作启动磁盘。</p>
<p> </p>
<p>4、在电脑启动时，同时按住“shift”+“option”+“delete”键可以忽略启动磁盘，并自动寻找另一个介质做启动盘。</p>
<p> </p>
<p>5、在电脑启动时，同时按住“option”+“P”+“R”键可以重设“选配器”和“控制板”，清除PRAM。这种方法对于使用时间较长(半年以上)且系统有问题的电脑会有意想不到的效果</p>
<p> </p>
<p>6、同时按住“shift”+“option” +“电源键”可以重新启动或关闭电脑</p>
<p> </p>
<p>7、在鼠标不能动时，同时按住“control”+“电源键”可以强行启动电脑。</p>
<p> </p>
<p>使用显示图像或文件夹工作时的使用：</p>
<p> </p>
<p>1、鼠标连按图像或文件夹可以打开图像或文件夹;点按桌面上的图像能使桌面成为现用(不包括所选图像)。</p>
<p> </p>
<p>2、用鼠标拖曳图像或文件夹可以移动到所需位置。</p>
<p> </p>
<p>3、按住“option”键+鼠标拖曳图像或文件夹可以将图像或文件夹拷贝到其它文件夹中，而不是移动。</p>
<p> </p>
<p>4、在拖曳图像或文件夹时将图像或文件夹拖至窗口上端的菜单栏可以取消对它的移动或拷贝。</p>
<p> </p>
<p>5、按住“shift”键+整理窗口可以整理所选图像。</p>
<p> </p>
<p>6、按住“return”或“enter”键可以编辑所选图像或文件夹的名称。</p>
<p> </p>
<p>7、按任一字母键将选择以该字母开头而命名的图像或文件夹。按“tab”键将按字母顺序选择下一个图像或文件夹。</p>
<p> </p>
<p>8、同时按住“shift”+“tab”键将按字母顺序选择上一个图像或文件夹(注：中文名称以第一个字的汉语拼音的第一个英文字母为准)。</p>
<p> </p>
<p>9、按“→”或“←”键将选择左面或右面的像或文件夹;按“↑”或“↓”键将选择上面或下面的图像或文件夹。</p>
<p> </p>
<p>10、按“shift”+点按所需图像或文件夹可以选择多个图像或文件夹，或用鼠标拖曳到封入所需图像或文件夹而选择多个图像或文件夹。</p>
<p> </p>
<p>使用文件对话框时的使用：</p>
<p> </p>
<p>1、打开对话框时(如使用“文件”菜单下的“打开”或“存储”等命令时同时)按“.”或按“esc”键可以取消该命令。</p>
<p> </p>
<p>2、同时按“苹果键”+“↑”或点按桌面图像可以上移一层。按“↑”或“↓”键可以选择上一个或下一个项目。</p>
<p> </p>
<p>3、按“option”键+打开替身可以显示而不是打开替身的原文件。</p>
<p> </p>
<p>4、“tab”键使目录或名称框成为现用。</p>
<p> </p>
<p>5、按“苹果键”+“N”键可以建立新文件夹。按“return”或“enter”或“O”键可以打开所选项目。</p>
<p> </p>
<p>使用窗口工作时的使用：</p>
<p> </p>
<p>1、按“苹果键”+“W”键或点按窗口关闭格(位于窗口左上角)可以关闭当前文件夹窗口。</p>
<p> </p>
<p>2、同时按“option”+“苹果键”+“W”键或“option”+点按窗口关闭格可以关闭所有文件夹窗口。</p>
<p> </p>
<p>3、按“苹果键”+拖曳窗口可以移动该窗口，但不使其成为现用窗口。</p>
<p> </p>
<p>4、连续点按两下文件夹的标题行即隐藏显示该文件夹，再连续点按两下即恢复显示。</p>
<p> </p>
<p>5、按“option”键点按缩放格(位于窗口右上角)可以将窗口放大至它所在的屏幕大小。</p>
<p> </p>
<p>6、按“option”键+打开或“option”键+连按图像可以在打开该图像后自动关闭该窗口。</p>
<p> </p>
<p>在其它一些选项中的巧妙使用 ：</p>
<p> </p>
<p>1.按“option”键+清倒废纸篓可以跳过“清倒废纸篓”警告和删除“废纸篓”内已锁定的文件。</p>
<p> </p>
<p>2.按“苹果键”+拖曳图像可以在移动图像时更改当前设置“整齐排列”(仅在“显示”控制板内)。</p>
<p> </p>
<p>3.在插入磁盘时，按住“苹果键”+“option”+“tab”键可以在插入时自动抹掉磁盘内容。</p>
<p> </p>
<p>4.在“选配器”内，按住“tab”键可以使下个列表成为现用。按住“shift”+“tab”键可以使上个列表成为现用。</p>
<p> </p>
<p>5.按“option”键+使其它程序成为现用(从“应用程序”菜单内选取或点按其中一个窗口)可以在切换到其它程序时隐藏该程序窗口。</p>
<p> </p>
<p>6.同时按住“苹果键”+“option”+“esc”键可以强行退出死机程序。</p>
<p> </p>
<p>7.同时按住“苹果键”+“shift”+“3”键可以把当前屏幕上的内容转变成一个图像，此图像可以在Photoshop软件中打开使用，也可以打印输出。</p>
<p> </p>
<p>8.按住“苹果键”+“G”键可以在连接其它计算机时选定“客人”。按住“苹果键”+“R”键可以在连接其它计算机时选定“注册用户”。</p>
<p> </p>
<p>9.如果安装了WordScript，按“苹果键”+“→”键可以设置为英语，按“苹果键”+“←”键可以设置为系统语系。</p>
<p> </p>
<p>10.按“苹果键”+“space”键可以设置为“键盘”菜单内的下一个语系(比如：英文切换到中文，中文切换到英文);按“苹果键”+“option” +“space”键可以设置为当前语系内的下一种语言(如果此语系有多种语言的话)。</p>
<p>ps：</p>
<p>command键就是苹果键</p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Magi搜索引擎</title>
    <url>/2019/12/12/magi%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<h3 id="Magi-是什么"><a href="#Magi-是什么" class="headerlink" title="Magi 是什么?"></a>Magi 是什么?</h3><p>Magi 是由 <a href="https://www.peak-labs.com/">Peak Labs</a> 研发的基于机器学习的信息抽取和检索系统，它能将任何领域的自然语言文本中的知识提取成结构化的数据，通过终身学习持续聚合和纠错，进而为人类用户和其他人工智能提供<strong>可解析</strong>、<strong>可检索</strong>、<strong>可溯源</strong>的知识体系。</p>
<h3 id="Magi-能做什么"><a href="#Magi-能做什么" class="headerlink" title="Magi 能做什么?"></a>Magi 能做什么?</h3><p>如果您是从 <a href="https://magi.com/">magi.com</a> 来到这里的话，那么恭喜您发现了 Magi 的一半！这个长得很像搜索引擎的网站就是 Magi 的公众版本，但与搜索引擎不同，Magi 不仅收录互联网上的海量文本，还会去尝试理解并学习这些文本中蕴含的知识和数据。</p>
<p>不妨在 <a href="https://magi.com/">magi.com</a>（<a href="https://www.peak-labs.com/docs/zh/magi/help">使用帮助</a>）尝试搜索一些您关心的事物，或者直接提出问题，Magi 都将竭力为您提供高度聚合的结构化知识结果：</p>
<p>[video width&#x3D;”1280” height&#x3D;”620” mp4&#x3D;”<a href="http://www.jarods.org/wp-content/uploads/2019/12/webui.mp4&quot;">http://www.jarods.org/wp-content/uploads/2019/12/webui.mp4&quot;</a> loop&#x3D;”true” autoplay&#x3D;”true” preload&#x3D;”auto”][&#x2F;video]</p>
<p><em>每条信息会用颜色表示其可信度，点击可展开看到 Magi 是从哪些具体来源习得的该知识。</em></p>
<p>我们为 Magi 从零研发了一套互联网搜索引擎，所以 <a href="https://magi.com/">magi.com</a> 同时提供<strong>全网规模</strong>的普通搜索结果。因此，即使不巧没有结构化结果，您也不会白来。</p>
<p>值得一提的是，上述的学习过程是在无人干预的情况下 7 x 24 小时不间断运行的，实时新闻事件中的知识一般只需要 5 分钟就会被掌握。随着可<strong>交叉验证</strong>的信息源不断增加，先前学习到的知识的可信度会被重新评估，使结果中的错误被自动纠正。</p>
<h3 id="Magi-的使命"><a href="#Magi-的使命" class="headerlink" title="Magi 的使命"></a>Magi 的使命</h3><p>目前，互联网上只有极少数知识被人类手工整理成了机器可以解析的格式，如各种百科栏目和垂直领域数据库，然而这些信息仅仅是沧海之一粟，无论是<strong>覆盖范围</strong>、<strong>更新频率</strong>、<strong>可靠程度</strong>都无法满足日益增长的自动化和智能化需求。</p>
<p>其根本矛盾在于：读懂自然语言对人类来说不难，但人的精力有限，无法跟上有价值信息的产生速度，也不能保证稳定和客观；机器虽然不知疲倦且速度超群，但面对纷繁复杂的自由文本却难以利用，使得不可估量的价值被埋没于字里行间。</p>
<p>试想一下，假如有一个不断自动更新的数据库，包含着互联网各处的文本信息提取而成的便于程序和算法处理的数据结构，那么也许：</p>
<ul>
<li>各种语音助手不会再对您说：“对不起，我不清楚。”；</li>
<li>商业智能可获得广泛的背景知识来做出更好的判断；</li>
<li>金融信息服务的数据收集与验证的效率将显著提升；</li>
<li>… …</li>
</ul>
<p>作为公众版本的 <a href="https://magi.com/">magi.com</a> 为人类用户提供了与互联网数据交互的新方式，而 Magi 系统背后的技术平台则承载着另一半重要的意义：<strong>让机器像人一样能理解并充分利用互联网中无穷无尽的知识</strong>。</p>
<h3 id="Magi-的技术"><a href="#Magi-的技术" class="headerlink" title="Magi 的技术"></a>Magi 的技术</h3><p>在目前相关领域的尝试中，机器问答终究还是面向人类的服务，依照文本问题给出的文本回答并不能供下游任务直接利用。同时，问答模型本身无论从容量还是更新效率都无法满足规模化的需求，更致命的是模型中的知识存在于由浮点数组成的“黑箱”中，在我们看来将这些无法解读和溯源的信息直接呈现给用户并不是最负责任的做法。另外，基于文档检索的方案同样无法满足结构化的需求，在实时线上服务中效率限制会导致其难以评估全部文档来获得全局最优，而且其对用户输入的查询要求较高。</p>
<p>综上所述，我们认为知识提取的重要性远高于单纯地回答问题，主动发现潜在知识并持续提炼修正则显著强于被动地根据输入的问题去匹配结果。让机器去理解语言已经十分困难，而 Magi 更是选择面对其中最复杂的目标：<strong>开放领域的互联网文本</strong>，去直面<strong>规模化</strong>和<strong>准确度</strong>这一组知识工程中的核心矛盾点。</p>
<p>[video width&#x3D;”816” height&#x3D;”720” mp4&#x3D;”<a href="http://www.jarods.org/wp-content/uploads/2019/12/extraction.mp4&quot;">http://www.jarods.org/wp-content/uploads/2019/12/extraction.mp4&quot;</a> loop&#x3D;”true” autoplay&#x3D;”true”][&#x2F;video]</p>
<p><em>一个简单的句子就包含大量交错重叠的信息，而 Magi 要以整篇文章为单位处理语法松散又充满错误的互联网文本，其难度可想而知。</em></p>
<p>为了提升信息的<strong>利用率</strong>，Magi 必须尽可能彻底地从每一段质量参差不齐且主题各异的文本中提取出全部知识。这决定了一切现有的技术方案都不可用：这不再是一个清晰的序列标注问题，交错叠加的关系使得搜索空间爆炸式增长，不受限制的领域还意味着根本没有可用的训练数据。</p>
<p>我们用了多年时间从零设计研发了整个技术堆栈：采用原创 succinct 索引结构的<a href="https://www.peak-labs.com/#Ramiel">分布式搜索引擎</a>、使用专门设计的 Attention 网络的<a href="https://www.peak-labs.com/#Ireul">神经提取系统</a>、不依赖 Headless 浏览器的<a href="https://www.peak-labs.com/#Matarael">流式抓取系统</a>、支持混合处理 170 余种语言的<a href="https://www.peak-labs.com/#Arael">自然语言处理管线</a>、… 。与此同时，我们默默耕耘并收获了独一无二的训练&#x2F;预训练数据。</p>
<p>这个系统通过引入传统搜索中的 query-independent 质量因素，使得优质可靠的消息源会更被重视；其基于多级迁移学习的提取模型则完全摒弃了人工规则、角色标注、依存分析等限制泛化能力的环节，并且可在 zero-resource 的前提下直接应用到各种外语文本上并取得令人满意的效果；而随着数据的积累以及来源多样性的扩充，这个系统还能够持续学习与调整，自动消除学习到的噪音和错误结果；…</p>
<p>这些努力共同作用将 Magi 呈现于此。作为独特且具有前瞻性的项目，Magi 的部分数据与相关研究成果将定期公开于 <a href="https://zenodo.org/">Zenodo</a> 和 <a href="https://arxiv.org/">arXiv</a> 等平台。</p>
<h3 id="Magi-的愿景"><a href="#Magi-的愿景" class="headerlink" title="Magi 的愿景"></a>Magi 的愿景</h3><p>Magi 现在还远算不上成熟，但其特性决定了它无穷的可能性和成长空间。</p>
<p>从最棘手的互联网开放领域信息入手，Magi 证明了其作为 <a href="https://en.wikipedia.org/wiki/One_Ring">the One system to rule them all</a> 的可能性。面对各种领域的文本信息，Magi 的技术方案则从逐项击破跃进到了大一统，这代表着有限到无限的区别。</p>
<p>随着数据量和可信度的不断增长，Magi 将作为知识的 <a href="http://image-net.org/index">ImageNet</a> 来赋能各行各业。各个专业细分领域的信息提取任务，都可以通过利用少量数据对 Magi 模型进行 fine-tuning 来实现更优的方案。</p>
<p>也许在不远的未来，伴随着整个行业的进步，Magi 所构建的包容万事万物的结构化网络将成为通向可解释人工智能的基石。</p>
<h3 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a>了解更多</h3><ul>
<li><a href="https://www.peak-labs.com/docs/zh/magi/hardcore-faq">面向硬核用户的问题与解答</a></li>
<li><a href="https://www.peak-labs.com/docs/zh/magi/about-magibot">关于 MagiBot 抓取程序</a></li>
<li><a href="https://www.peak-labs.com/docs/zh/magi/help">Magi.com 使用帮助</a></li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Magi</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 的启动组合键</title>
    <url>/2019/03/24/mac-%E7%9A%84%E5%90%AF%E5%8A%A8%E7%BB%84%E5%90%88%E9%94%AE/</url>
    <content><![CDATA[<p>了解可通过在启动时按住一个或多个按键来访问的 Mac 功能和工具。</p>
<p>若要使用这些组合键中的任何一个，请在按下电源按钮以<a href="https://support.apple.com/zh-cn/HT201150">开启 Mac</a> 后或在 Mac 开始重新启动后，立即按住相应按键。请一直按住，直至电脑出现对应的行为。</p>
<p>如果您的 Mac 使用了<a href="https://support.apple.com/zh-cn/HT204455">固件密码</a>，这些组合键全都会停用（下文另有注明除外）。</p>
<p><strong>Command (⌘)-R：</strong>从内建的 <a href="https://support.apple.com/zh-cn/HT201314">macOS 恢复</a>系统启动。或者，您也可以使用 Option-Command-R 或 Shift-Option-Command-R 以通过互联网从 macOS 恢复功能启动。<a href="https://support.apple.com/zh-cn/HT204904">macOS 恢复功能可以安装不同版本的 macOS</a>，具体取决于您在电脑启动时使用的组合键。如果您的 Mac 使用了<a href="https://support.apple.com/zh-cn/HT204455">固件密码</a>，系统将要求您输入这个密码。</p>
<p><strong>Option (⌥)：</strong>启动进入“<a href="https://support.apple.com/zh-cn/HT202796">启动管理器</a>”，您可以从中选取其他启动磁盘或宗卷（若可用）。如果您的 Mac 使用了<a href="https://support.apple.com/zh-cn/HT204455">固件密码</a>，系统将要求您输入这个密码。</p>
<p><strong>Option-Command-P-R：</strong><a href="https://support.apple.com/zh-cn/HT204063">重置 NVRAM</a> 或 PRAM。如果您的 Mac 使用了<a href="https://support.apple.com/zh-cn/HT204455">固件密码</a>，它会忽略这个组合键或从 macOS 恢复功能启动。</p>
<p><strong>Shift (⇧)：</strong>以<a href="https://support.apple.com/zh-cn/HT201262">安全模式</a>启动。</p>
<p><strong>D：</strong>从内建的 <a href="https://support.apple.com/zh-cn/HT201257">Apple Hardware Test</a> 或“<a href="https://support.apple.com/zh-cn/HT202731">Apple 诊断</a>”实用工具启动，具体取决于您的 Mac 机型。或者，您也可以使用 Option-D 通过互联网从这个实用工具启动。</p>
<p><strong>N：</strong>从兼容的 <a href="https://support.apple.com/zh-cn/HT202770">NetBoot 服务器</a>启动（若可用）。要使用 NetBoot 服务器上默认的引导映像，请按住 Option-N。<a href="https://support.apple.com/zh-cn/HT208862">配备 Apple T2 安全芯片的电脑</a>不支持这个启动键。</p>
<p><strong>Command-S：</strong>以<a href="https://support.apple.com/zh-cn/HT201573">单用户模式</a>启动。这个组合键要求使用 <a href="https://support.apple.com/zh-cn/HT201260">macOS High Sierra 或更早版本</a>。</p>
<p><strong>T：</strong>以<a href="https://support.apple.com/zh-cn/HT201462">目标磁盘模式</a>启动。</p>
<p><strong>Command-V：</strong>以<a href="https://support.apple.com/zh-cn/HT201573">详细模式</a>启动。</p>
<p><strong>推出键</strong> (⏏)、<strong>F12</strong>、<strong>鼠标按钮</strong>或<strong>触控板按钮：</strong>推出可移动介质，例如，光盘。</p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>组合键</tag>
      </tags>
  </entry>
  <entry>
    <title>MEMTEST：LINUX下测试VPS实际可用内存数</title>
    <url>/2018/11/07/memtest%EF%BC%9Alinux%E4%B8%8B%E6%B5%8B%E8%AF%95vps%E5%AE%9E%E9%99%85%E5%8F%AF%E7%94%A8%E5%86%85%E5%AD%98%E6%95%B0/</url>
    <content><![CDATA[<p>内存量对于VPS来说是一个重要的指标，但是因为有些主机商的VPS存在超售现象，所以实际分配到的可用内存数可能达不到标称的内存数，memtest这个工具可以测试VPS实际可使用的内存的最大值。memtest这个VPS测评工具，通过不断增加填充内存的量，直到内存被占用玩，进程被杀掉为止。</p>
<p>SSH下运行： 64位系统</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://zhujiwiki.com/wp-content/uploads/2018/06/memtest_1M_64</span><br><span class="line">chmod +x ./memtest_1M_64</span><br><span class="line">./memtest_1M_64</span><br></pre></td></tr></table></figure>

<p>32位系统</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://zhujiwiki.com/wp-content/uploads/2018/06/memtest_1M_32</span><br><span class="line">chmod +x ./memtest_1M_32</span><br><span class="line">./memtest_1M_32</span><br></pre></td></tr></table></figure>

<p>via：<a href="https://www.xxorg.com/archives/4409">https://www.xxorg.com/archives/4409</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>MEMTEST</tag>
      </tags>
  </entry>
  <entry>
    <title>MAC 重置 Nvram 和 SMC</title>
    <url>/2019/02/23/mac-%E9%87%8D%E7%BD%AE-nvram-%E5%92%8C-smc/</url>
    <content><![CDATA[<p>客服在通话中引导我做了如下操作。<br>1.重置 Mac 上的系统管理控制器<br>选取苹果菜单 &gt;“关机”。<br>在 Mac 关机后，按下内建键盘左侧的 Shift-Control-Option，然后同时按下电源按钮。按住这些按键和电源按钮 10 秒钟。如果您的 MacBook Pro 配有触控 ID，则触控 ID 按钮也是电源按钮。<br>松开所有按键。<br>再次按下电源按钮以开启 Mac。</p>
<h3 id="配有-T2-芯片的-Mac-笔记本电脑"><a href="#配有-T2-芯片的-Mac-笔记本电脑" class="headerlink" title="配有 T2 芯片的 Mac 笔记本电脑"></a>配有 T2 芯片的 Mac 笔记本电脑</h3><p>先尝试以下操作：</p>
<ol>
<li>选取苹果菜单 &gt;“关机”。</li>
<li>在 Mac 关机后，按住电源按钮 10 秒钟。</li>
<li>松开电源按钮，然后等待几秒钟。</li>
<li>再次按下电源按钮以开启 Mac。</li>
</ol>
<p>如果上述操作无法解决问题，请按照以下步骤操作：</p>
<ol>
<li>选取苹果菜单 &gt;“关机”。</li>
<li>在 Mac 关机后，按住右 Shift 键、左 Option 键和左 Control 键 7 秒钟。然后，在按住电源按钮的同时继续按住这些按键 7 秒钟。</li>
<li>松开所有三个按键和电源按钮，然后等待几秒钟。</li>
<li>再次按下电源按钮以开启 Mac。</li>
</ol>
<p>2.重置 NVRAM<br>Option+Command+P+R<br>将 Mac 关机，然后开机并立即同时按住以下四个按键：Option、Command、P 和 R。您可以在大约 20 秒后松开这些按键，在此期间您的 Mac 可能看似在重新启动。</p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Nvram</tag>
        <tag>SMC</tag>
      </tags>
  </entry>
  <entry>
    <title>Microsoft 自动填充：全平台密码自动填充，可替代LastPass</title>
    <url>/2021/02/23/microsoft-%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%EF%BC%9A%E5%85%A8%E5%B9%B3%E5%8F%B0%E5%AF%86%E7%A0%81%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%EF%BC%8C%E5%8F%AF%E6%9B%BF%E4%BB%A3lastpass/</url>
    <content><![CDATA[<p>Microsoft 自动填充（英文名 Microsoft Authenticator） 为微软推出的密码填充、记录工具，支持各浏览器、安卓等。</p>
<p>Microsoft 自动填充官网：<a href="https://www.microsoft.com/en-us/account/authenticator">https://www.microsoft.com/en-us/account/authenticator</a></p>
<p><strong>chrome插件</strong>：<a href="https://chrome.google.com/webstore/detail/microsoft-autofill/fiedbfgcleddlbcmgdigjgdfcggjcion?hl=zh-CN">https://chrome.google.com/webstore/detail/microsoft-autofill/fiedbfgcleddlbcmgdigjgdfcggjcion?hl=zh-CN</a></p>
<p>安卓版下载：<a href="https://apkpure.com/cn/microsoft-authenticator/com.azure.authenticator">https://apkpure.com/cn/microsoft-authenticator/com.azure.authenticator</a></p>
<p>LastPass密码导出：Account Options – Advanced – Export，选择CSV格式</p>
<p>Microsoft 自动填充导入：设置 – 导入数据</p>
]]></content>
      <categories>
        <category>Linux教程</category>
        <category>Mac</category>
        <category>Win</category>
      </categories>
      <tags>
        <tag>Microsoft</tag>
        <tag>Microsoft Authenticator</tag>
      </tags>
  </entry>
  <entry>
    <title>mPing一键测试回程Ping值</title>
    <url>/2018/07/30/mping%E4%B8%80%E9%94%AE%E6%B5%8B%E8%AF%95%E5%9B%9E%E7%A8%8Bping%E5%80%BC/</url>
    <content><![CDATA[<p>来自Hostloc的一位坛友做的一个脚本，方便测试回程Ping值。目前支持众多区域和各大运营商。</p>
<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/helloxz/mping/master/mping.sh</span><br><span class="line">bash mping.sh</span><br></pre></td></tr></table></figure>

<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="https://www.jarods.org/wp-content/uploads/2018/07/181027254551.png"></p>
<p>如果希望增加更多测试节点，直接编辑源码，修改修改即可。（节点来自各地运营商DNS）</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ping</tag>
      </tags>
  </entry>
  <entry>
    <title>MYDM – 模块化下载工具，可组合插件：百度盘、MSDN、人人影视</title>
    <url>/2017/12/23/mydm-%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7%EF%BC%8C%E5%8F%AF%E7%BB%84%E5%90%88%E6%8F%92%E4%BB%B6%EF%BC%9A%E7%99%BE%E5%BA%A6%E7%9B%98%E3%80%81msdn%E3%80%81%E4%BA%BA/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MYDM 是一款免费的、轻量级、模块化<a href="https://www.zhujiboke.com/tag/%e4%b8%8b%e8%bd%bd">下载</a><a href="https://www.zhujiboke.com/tag/%e5%b7%a5%e5%85%b7">工具</a>，支持 HTTP&#x2F;HTTPS、FTP、Magnet、Thunder <a href="https://www.zhujiboke.com/tag/%e4%b8%8b%e8%bd%bd">下载</a>协议，并且可以通过插件扩展内容，目前可选插件为：百度盘、MSDN、人人影视。</p>
<h2 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h2><p><a href="http://mydownload.ml/">http://mydownload.ml/</a></p>
<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="https://www.jarods.org/wp-content/uploads/2017/12/screenshot_3.pngo_.png"></p>
<p>非常有创意的一款下载<a href="https://www.zhujiboke.com/tag/%e5%b7%a5%e5%85%b7">工具</a>。</p>
<p>其本身只提供简单的下载功能，扩展功能由第三方插件提供，比如 MSDN 插件，就可以快速选择不同系统然后再使用 MYDM 下载。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/12/2017-12-15-6-40-59.jpgo_.jpeg">而百度盘插件也是有独立界面：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/12/2017-12-15-6-51-40.jpgo_.jpeg"></p>
<p>而那个人人影视插件，青小蛙没有找到正确使用姿势，有会用的么？</p>
<p>另外，MYDM 集成了迅雷接口，使用 Thunder 协议时会走迅雷网络，而其它协议则走本地网络。</p>
<p>哎，这么多年，下载界都被迅雷惯坏了，要知道真不会有多少人白白自掏腰包买服务器和带宽帮你加速啊…</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>MSDN</tag>
        <tag>MYDM</tag>
        <tag>下载工具</tag>
        <tag>人人影视</tag>
        <tag>百度盘</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 键盘快捷键</title>
    <url>/2019/03/24/mac-%E9%94%AE%E7%9B%98%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>您可以按下某些组合键来实现通常需要鼠标、触控板或其他输入设备才能完成的操作。</p>
<p>要使用键盘快捷键，请按住一个或多个修饰键，然后按快捷键的最后一个键。例如，要使用 Command-C（拷贝），请按住 Command 键并按 C 键，然后同时松开这两个键。Mac 菜单和键盘通常<a href="https://support.apple.com/zh-cn/guide/mac-help/what-are-those-symbols-shown-in-menus-cpmh0011/mac">对某些按键使用符号</a>，其中包括以下修饰键：</p>
<ul>
<li><p>Command（或 Cmd）⌘</p>
</li>
<li><p>Shift ⇧</p>
</li>
<li><p>Option（或 Alt）⌥</p>
</li>
<li><p>Control（或 Ctrl）⌃</p>
</li>
<li><p>Caps Lock ⇪</p>
</li>
<li><p>Fn</p>
</li>
</ul>
<p>在 Windows PC 专用键盘上，请用 Alt 键代替 Option 键，用 Windows 标志键代替 Command 键。</p>
<p>Apple 键盘上的某些按键具有特殊符号和功能，例如显示屏亮度 <img src="https://www.jarods.org/wp-content/uploads/2019/03/keyboard-icon-increase-display-brightness.png">、键盘亮度 <img src="https://www.jarods.org/wp-content/uploads/2019/03/keyboard-icon-increase-keyboard-brightness.png">、调度中心等。如果您的键盘上没有这些功能，您也许可以通过<a href="https://support.apple.com/zh-cn/guide/mac-help/create-keyboard-shortcuts-for-apps-mchlp2271/mac">创建自己的键盘快捷键</a>来实现其中的一些功能。要将这些键用作 F1、F2、F3 或其他标准功能键，请将它们与 Fn 键组合使用。</p>
<p><img src="https://support.apple.com/library/content/dam/edam/applecare/images/en_US/mac_apps/itunes/divider.png"></p>
<h2 id="剪切、拷贝、粘贴和其他常用快捷键"><a href="#剪切、拷贝、粘贴和其他常用快捷键" class="headerlink" title="剪切、拷贝、粘贴和其他常用快捷键"></a>剪切、拷贝、粘贴和其他常用快捷键</h2><ul>
<li><strong>Command-X</strong>：剪切所选项并拷贝到剪贴板。</li>
<li><strong>Command-C</strong>：将所选项拷贝到剪贴板。这同样适用于“访达”中的文件。</li>
<li><strong>Command-V</strong>：将剪贴板的内容粘贴到当前文稿或应用中。这同样适用于“访达”中的文件。</li>
<li><strong>Command-Z</strong>：撤销上一个命令。随后您可以按 Shift-Command-Z 来重做，从而反向执行撤销命令。在某些应用中，您可以撤销和重做多个命令。</li>
<li><strong>Command-A</strong>：全选各项。</li>
<li><strong>Command-F</strong>：查找文稿中的项目或打开“查找”窗口。</li>
<li><strong>Command-G</strong>：再次查找：查找之前所找到项目出现的下一个位置。要查找出现的上一个位置，请按 Shift-Command-G。</li>
<li><strong>Command-H</strong>：隐藏最前面的应用的窗口。要查看最前面的应用但隐藏所有其他应用，请按 Option-Command-H。</li>
<li><strong>Command-M</strong>：将最前面的窗口最小化至“程序坞”。要最小化最前面的应用的所有窗口，请按 Option-Command-M。</li>
<li><strong>Command-O：</strong>打开所选项，或打开一个对话框以选择要打开的文件。</li>
<li><strong>Command-P</strong>：打印当前文稿。</li>
<li><strong>Command-S</strong>：存储当前文稿。</li>
<li><strong>Command-T</strong>：打开新标签页。</li>
<li><strong>Command-W</strong>：关闭最前面的窗口。要关闭应用的所有窗口，请按下 Option-Command-W。</li>
<li><strong>Option-Command-Esc</strong>：<a href="https://support.apple.com/zh-cn/HT201276">强制退出</a>应用。</li>
<li><strong>Command–空格键</strong>：显示或隐藏“<a href="https://support.apple.com/zh-cn/HT201744">聚焦</a>”搜索栏。要从“访达”窗口执行“聚焦”搜索，请按 Command–Option–空格键。（如果您<a href="https://support.apple.com/zh-cn/guide/mac-help/type-in-another-language-with-input-sources-mchlp1406/mac">使用多个输入源</a>以便用不同的语言键入内容，这些快捷键会更改输入源而非显示“聚焦”。了解如何<a href="https://support.apple.com/zh-cn/guide/mac-help/change-a-conflicting-keyboard-shortcut-mh35591/mac">更改冲突的键盘快捷键</a>。）</li>
<li><strong>Control-Command–空格键</strong>：显示字符检视器，您可以从中选择<a href="https://support.apple.com/zh-cn/HT201586">表情符号和其他符号</a>。</li>
<li><strong>Control-Command-F</strong>：全屏使用应用（如果应用支持）。</li>
<li><strong>空格键</strong>：使用<a href="https://support.apple.com/zh-cn/guide/mac-help/quick-look-files-and-folders-mh14119/mac">快速查看</a>来预览所选项。</li>
<li><strong>Command-Tab</strong>：在打开的应用中切换到下一个最近使用的应用。</li>
<li><strong>Shift-Command-5</strong>：在 <a href="https://support.apple.com/zh-cn/HT201475">macOS Mojave</a> 中，拍摄屏幕快照或录制屏幕。在更早的 macOS 版本中，请使用 Shift-Command-3 或 Shift-Command-4 来拍摄屏幕快照。<a href="https://support.apple.com/zh-cn/HT201361">进一步了解屏幕快照</a>。</li>
<li><strong>Shift-Command-N：</strong>在“访达”中创建一个新文件夹。</li>
<li>**Command-逗号 (,)**：打开最前面的应用的偏好设置。</li>
</ul>
<p><img src="https://support.apple.com/library/content/dam/edam/applecare/images/en_US/mac_apps/itunes/divider.png"></p>
<h2 id="睡眠、退出登录和关机快捷键"><a href="#睡眠、退出登录和关机快捷键" class="headerlink" title="睡眠、退出登录和关机快捷键"></a>睡眠、退出登录和关机快捷键</h2><p>在这些快捷键中，您可能需要按住其中一些快捷键稍长时间。这样可以避免您无意中启用快捷键。</p>
<ul>
<li><strong>电源按钮</strong>：按下可将 Mac 开机或将 Mac 从睡眠状态唤醒。按住这个按钮 1.5 秒可使 Mac 进入睡眠状态。*继续按住<a href="https://support.apple.com/zh-cn/HT201150">则会强制您的 Mac 关机</a>。</li>
<li><strong>Option–Command–电源按钮</strong>*或 <strong>Option–Command–Media Eject（Option–Command–介质推出键）</strong><img src="https://www.jarods.org/wp-content/uploads/2019/03/eject-button-icon.png">：将您的 Mac 置于睡眠状态。</li>
<li><strong>Control–Shift–电源按钮</strong>*或 <strong>Control–Shift–Media Eject（Control–Shift–介质推出键）</strong><img src="https://www.jarods.org/wp-content/uploads/2019/03/eject-button-icon.png">：将显示器置于睡眠状态。</li>
<li><strong>Control–电源按钮</strong>*或 <strong>Control–Media Eject（Control–介质推出键）</strong><img src="https://www.jarods.org/wp-content/uploads/2019/03/eject-button-icon.png">：显示一个对话框，询问您是要重新启动、睡眠还是关机。</li>
<li><strong>Control–Command–Power 电源按钮</strong>：*强制 Mac 重新启动，系统不会提示是否要存储任何打开且未存储的文稿。</li>
<li><strong>Control–Command–Media Eject（Control–Command–介质推出键）</strong><img src="https://www.jarods.org/wp-content/uploads/2019/03/eject-button-icon.png">：退出所有应用，然后重新启动您的 Mac。如果任何打开的文稿有未存储的更改，系统会询问您是否要存储这些更改。</li>
<li><strong>Control–Option-Command–电源按钮</strong>*或 <strong>Control–Option–Command–Media Eject（Control–Option–Command–介质推出键）</strong><img src="https://www.jarods.org/wp-content/uploads/2019/03/eject-button-icon.png">：退出所有应用，然后将您的 Mac 关机。如果任何打开的文稿有未存储的更改，系统会询问您是否要存储这些更改。</li>
<li><strong>Shift–Command–Q</strong>：退出登录您的 macOS 用户帐户。系统将提示您确认。要在不确认的情况下立即退出登录，请按下 Option-Shift-Command-Q。</li>
</ul>
<p>* 不适用于<a href="https://support.apple.com/zh-cn/HT207054">触控 ID 传感器</a>。</p>
<p><img src="https://support.apple.com/library/content/dam/edam/applecare/images/en_US/mac_apps/itunes/divider.png"></p>
<h2 id="访达和系统快捷键"><a href="#访达和系统快捷键" class="headerlink" title="访达和系统快捷键"></a>访达和系统快捷键</h2><ul>
<li><strong>Command-D</strong>：复制所选文件。</li>
<li><strong>Command-E</strong>：推出所选磁盘或宗卷。</li>
<li><strong>Command-F</strong>：在“访达”窗口中开始“聚焦”搜索。</li>
<li><strong>Command-I</strong>：显示所选文件的“显示简介”窗口。</li>
<li><strong>Command-R</strong>：(1) 如果在“访达”中选择了某个别名：显示所选别名对应的原始文件。(2) 在某些应用（如“日历”或 Safari 浏览器）中，刷新或重新载入页面。(3) 在<a href="https://support.apple.com/zh-cn/HT201541">“软件更新”偏好设置</a>中，再次检查有没有软件更新。</li>
<li><strong>Shift-Command-C</strong>：打开“电脑”窗口。</li>
<li><strong>Shift-Command-D</strong>：打开“桌面”文件夹。</li>
<li><strong>Shift-Command-F</strong>：打开“最近使用”窗口，其中显示了您最近查看或更改过的所有文件。</li>
<li><strong>Shift-Command-G</strong>：打开“前往文件夹”窗口。</li>
<li><strong>Shift-Command-H</strong>：打开当前 macOS 用户帐户的个人文件夹。</li>
<li><strong>Shift-Command-I</strong>：打开 iCloud 云盘。</li>
<li><strong>Shift-Command-K</strong>：打开“网络”窗口。</li>
<li><strong>Option-Command-L</strong>：打开“下载”文件夹。</li>
<li><strong>Shift-Command-N：</strong>新建文件夹。</li>
<li><strong>Shift-Command-O</strong>：打开“文稿”文件夹。</li>
<li><strong>Shift-Command-P</strong>：在“访达”窗口中显示或隐藏预览面板。</li>
<li><strong>Shift-Command-R</strong>：打开“隔空投送”窗口。</li>
<li><strong>Shift-Command-T</strong>：显示或隐藏“访达”窗口中的标签页栏。</li>
<li><strong>Ctrl-Shift-Command-T</strong>：将所选的“访达”项目添加到“程序坞”（OS X Mavericks 或更高版本）</li>
<li><strong>Shift-Command-U</strong>：打开“实用工具”文件夹。</li>
<li><strong>Option-Command-D</strong>：显示或隐藏“程序坞”。</li>
<li><strong>Control-Command-T</strong>：将所选项添加到边栏（OS X Mavericks 或更高版本）。</li>
<li><strong>Option-Command-P</strong>：隐藏或显示“访达”窗口中的路径栏。</li>
<li><strong>Option-Command-S</strong>：隐藏或显示“访达”窗口中的边栏。</li>
<li>**Command–斜线 (&#x2F;)**：隐藏或显示“访达”窗口中的状态栏。</li>
<li><strong>Command-J</strong>：显示“显示”选项。</li>
<li><strong>Command-K</strong>：打开“连接服务器”窗口。</li>
<li><strong>Command-L</strong>：为所选项制作替身。</li>
<li><strong>Command-N</strong>：打开一个新的“访达”窗口。</li>
<li><strong>Command-N</strong>：新建智能文件夹。</li>
<li><strong>Command-T</strong>：在当前“访达”窗口中有单个标签页开着的状态下显示或隐藏标签页栏。</li>
<li><strong>Option-Command-T</strong>：在当前“访达”窗口中有单个标签页开着的状态下显示或隐藏工具栏。</li>
<li><strong>Option-Command-V</strong>：移动：将剪贴板中的文件从原始位置移动到当前位置。</li>
<li><strong>Command-Y</strong>：使用“快速查看”预览所选文件。</li>
<li><strong>Option-Command-Y</strong>：显示所选文件的快速查看幻灯片显示。</li>
<li><strong>Command-1</strong>：以图标方式显示“访达”窗口中的项目。</li>
<li><strong>Command-2</strong>：以列表方式显示“访达”窗口中的项目。</li>
<li><strong>Command-3</strong>：以分栏方式显示“访达”窗口中的项目。</li>
<li><strong>Command-4</strong>：以封面流方式显示“访达”窗口中的项目。</li>
<li>**Command–左中括号 ([)**：前往上一文件夹。</li>
<li>**Command–右中括号 (])**：前往下一个文件夹。</li>
<li><strong>Command–上箭头</strong>：打开包含当前文件夹的文件夹。</li>
<li><strong>Command–Control–上箭头</strong>：在新窗口中打开包含当前文件夹的文件夹。</li>
<li><strong>Command–下箭头</strong>：打开所选项。</li>
<li><strong>右箭头</strong>：打开所选文件夹。这个快捷键仅在列表视图中有效。</li>
<li><strong>左箭头</strong>：关闭所选文件夹。这个快捷键仅在列表视图中有效。</li>
<li><strong>Command-Delete</strong>：将所选项移到废纸篓。</li>
<li><strong>Shift-Command-Delete</strong>：清倒废纸篓。</li>
<li><strong>Option-Shift-Command-Delete</strong>：清倒废纸篓而不显示确认对话框。</li>
<li><strong>Command–调高亮度</strong>：打开或关闭<a href="https://support.apple.com/zh-cn/HT204592">目标显示器模式</a>。</li>
<li><strong>Command–调低亮度</strong>：当您的 Mac 连接到多台显示器时，打开或关闭<a href="https://support.apple.com/zh-cn/HT202351#mirroring">视频镜像</a>。</li>
<li><strong>Option–调高亮度</strong>：打开“显示器”偏好设置。这个快捷键可与任一亮度键搭配使用。</li>
<li><strong>Control–调高亮度</strong>或 <strong>Control–调低亮度</strong>：更改外部显示器的亮度（如果显示器支持）。</li>
<li><strong>Option-Shift–调高亮度</strong>或 <strong>Option-Shift–调低亮度</strong>：以较小的步幅调节显示器亮度。如果您的显示器支持，可以将 Control 键添加到此快捷键，以便在外置显示器上进行调节。</li>
<li><strong>Option–“调度中心”</strong>：打开“调度中心”偏好设置。</li>
<li><strong>Command–“调度中心”</strong>：显示桌面。</li>
<li><strong>Control–下箭头</strong>：显示最前面的应用的所有窗口。</li>
<li><strong>Option–调高音量</strong>：打开“声音”偏好设置。这个快捷键可与任一音量键搭配使用。</li>
<li><strong>Option-Shift–调高音量</strong>或 <strong>Option-Shift–调低音量</strong>：以较小的步幅调节音量。</li>
<li><strong>Option–键盘调高亮度</strong>：打开“键盘”偏好设置。这个快捷键可与任一键盘亮度键搭配使用。</li>
<li><strong>Option-Shift–键盘调高亮度</strong>或 <strong>Option-Shift–键盘调低亮度</strong>：以较小的步幅调节键盘亮度。</li>
<li><strong>连按 Option 键</strong>：在单独的窗口中打开项目，然后关闭原始窗口。</li>
<li><strong>连按 Command 键</strong>：在单独的标签页或窗口中打开文件夹。</li>
<li><strong>按住 Command 键拖移到另一个宗卷</strong>：将拖移的项目移到另一个宗卷，而不是拷贝它。</li>
<li><strong>按住 Option 键拖移</strong>：拷贝托移的项目。拖移项目时指针会随之变化。</li>
<li><strong>按住 Option-Command 键拖移</strong>：为拖移的项目制作替身。拖移项目时指针会随之变化。</li>
<li><strong>按住 Option 键点按开合三角</strong>：打开所选文件夹内的所有文件夹。这个快捷键仅在列表视图中有效。</li>
<li><strong>按住 Command 键点按窗口标题</strong>：查看包含当前文件夹的文件夹。</li>
<li><a href="https://support.apple.com/zh-cn/guide/mac-help/select-items-mchlp1378/mac">了解如何使用 Command 或 Shift 在“访达”中选择多个项目</a>。</li>
<li>点按“访达”菜单栏中的“前往”菜单查看用于打开许多常用文件夹（如“应用程序”、“文稿”、“下载”、“实用工具”和“iCloud 云盘”）的快捷键。</li>
</ul>
<p><img src="https://support.apple.com/library/content/dam/edam/applecare/images/en_US/mac_apps/itunes/divider.png"></p>
<h2 id="文稿快捷键"><a href="#文稿快捷键" class="headerlink" title="文稿快捷键"></a>文稿快捷键</h2><p>这些快捷键的行为可能因您使用的应用而异。</p>
<ul>
<li><strong>Command-B</strong>：以粗体显示所选文本，或者打开或关闭粗体显示功能。</li>
<li><strong>Command-I</strong>：以斜体显示所选文本，或者打开或关闭斜体显示功能。</li>
<li><strong>Command-K</strong>：添加网页链接。</li>
<li><strong>Command-U</strong>：对所选文本加下划线，或者打开或关闭加下划线功能。</li>
<li><strong>Command-T</strong>：显示或隐藏“字体”窗口。</li>
<li><strong>Command-D</strong>：从“打开”对话框或“存储”对话框内选择“桌面”文件夹。</li>
<li><strong>Control-Command-D</strong>：显示或隐藏所选字词的定义。</li>
<li>**Shift-Command–冒号 (:)**：显示“拼写和语法”窗口。</li>
<li>**Command–分号 (;)**：查找文稿中拼写错误的字词。</li>
<li><strong>Option-Delete</strong>：删除插入点左边的字词。</li>
<li><strong>Control-H</strong>：删除插入点左边的字符。也可以使用 Delete 键。</li>
<li><strong>Control-D</strong>：删除插入点右边的字符。也可以使用 Fn-Delete。</li>
<li><strong>Fn-Delete</strong>：在没有向前删除   键的键盘上向前删除。也可以使用 Control-D。</li>
<li><strong>Control-K</strong>：删除插入点与行或段落末尾处之间的文本。</li>
<li><strong>Fn–上箭头</strong>：Page Up：向上滚动一页。</li>
<li><strong>Fn–下箭头</strong>：Page Down：向下滚动一页。</li>
<li><strong>Fn–左箭头：</strong>Home：滚动到文稿开头。</li>
<li><strong>Fn–右箭头</strong>：End：滚动到文稿末尾。</li>
<li><strong>Command–上箭头</strong>：将插入点移至文稿开头。</li>
<li><strong>Command–下箭头</strong>：将插入点移至文稿末尾。</li>
<li><strong>Command–左箭头</strong>：将插入点移至当前行的行首。</li>
<li><strong>Command–右箭头</strong>：将插入点移至当前行的行尾。</li>
<li><strong>Option–左箭头</strong>：将插入点移至上一字词的词首。</li>
<li><strong>Option–右箭头</strong>：将插入点移至下一字词的词尾。</li>
<li><strong>Shift-Command–上箭头</strong>：选中插入点与文稿开头之间的文本。</li>
<li><strong>Shift-Command–下箭头</strong>：选中插入点与文稿末尾之间的文本。</li>
<li><strong>Shift-Command–左箭头</strong>：选中插入点与当前行行首之间的文本。</li>
<li><strong>Shift-Command–右箭头</strong>：选中插入点与当前行行尾之间的文本。</li>
<li><strong>Shift–上箭头</strong>：将文本选择范围扩展到上一行相同水平位置的最近字符处。</li>
<li><strong>Shift–下箭头</strong>：将文本选择范围扩展到下一行相同水平位置的最近字符处。</li>
<li><strong>Shift–左箭头</strong>：将文本选择范围向左扩展一个字符。</li>
<li><strong>Shift–右箭头</strong>：将文本选择范围向右扩展一个字符。</li>
<li><strong>Option–Shift–上箭头</strong>：将文本选择范围扩展到当前段落的段首，再按一次则扩展到下一段落的段首。</li>
<li><strong>Option–Shift–下箭头</strong>：将文本选择范围扩展到当前段落的段尾，再按一次则扩展到下一段落的段尾。</li>
<li><strong>Option–Shift–左箭头</strong>：将文本选择范围扩展到当前字词的词首，再按一次则扩展到后一字词的词首。</li>
<li><strong>Option–Shift–左箭头</strong>：将文本选择范围扩展到当前字词的词尾，再按一次则扩展到后一字词的词尾。</li>
<li><strong>Control–A</strong>：移至行或段落的开头。</li>
<li><strong>Control–E</strong>：移至行或段落的末尾。</li>
<li><strong>Control–F</strong>：向前移动一个字符。</li>
<li><strong>Control–B</strong>：向后移动一个字符。</li>
<li><strong>Control–L</strong>：将光标或所选内容置于可见区域中央。</li>
<li><strong>Control–P</strong>：上移一行。</li>
<li><strong>Control–N</strong>：下移一行。</li>
<li><strong>Control–O</strong>：在插入点后新插入一行。</li>
<li><strong>Control–T</strong>：将插入点后面的字符与插入点前面的字符交换。</li>
<li>**Command–左花括号 ({)**：左对齐。</li>
<li>**Command–右花括号 (})**：右对齐。</li>
<li>**Shift-Command–竖线 ()**：居中对齐。</li>
<li><strong>Option-Command-F</strong>：前往搜索栏。</li>
<li><strong>Option-Command-T</strong>：显示或隐藏应用中的工具栏。</li>
<li><strong>Option-Command-C</strong>：拷贝样式：将所选项的格式设置拷贝到剪贴板。</li>
<li><strong>Option-Command-V</strong>：粘贴样式：将拷贝的样式应用到所选项。</li>
<li><strong>Option-Shift-Command-V</strong>：粘贴并匹配样式：将周围内容的样式应用到粘贴在该内容中的项目。</li>
<li><strong>Option-Command-I</strong>：显示或隐藏检查器窗口。</li>
<li><strong>Shift-Command-P</strong>：页面设置：显示用于选择文稿设置的窗口。</li>
<li><strong>Shift-Command-S</strong>：显示“存储为”对话框或复制当前文稿。</li>
<li>**Shift-Command-减号 (-)**：缩小所选项。</li>
<li>**Shift-Command-加号 (+)**：放大所选项。Command–等号 (&#x3D;) 可实现相同的功能。</li>
<li>**Shift-Command–问号 (?)**：打开“帮助”菜单。</li>
</ul>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 的 root 密码忘记</title>
    <url>/2018/05/09/mysql-%E7%9A%84-root-%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="关闭mysql服务器"><a href="#关闭mysql服务器" class="headerlink" title="关闭mysql服务器"></a>关闭mysql服务器</h1><p>sudo &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;support-files&#x2F;mysql.server stop 或者系统偏好里有个 MySQL 里关闭</p>
<h1 id="进入-x2F-usr-x2F-local-x2F-mysql-x2F-bin-目录"><a href="#进入-x2F-usr-x2F-local-x2F-mysql-x2F-bin-目录" class="headerlink" title="进入 &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin 目录"></a>进入 &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin 目录</h1><p>cd &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin</p>
<h1 id="获取权限"><a href="#获取权限" class="headerlink" title="获取权限"></a>获取权限</h1><p>sudo su</p>
<h1 id="重启服务器"><a href="#重启服务器" class="headerlink" title="重启服务器"></a>重启服务器</h1><p>.&#x2F;mysqld_safe –skip-grant-tables &amp;</p>
<h1 id="重开个终端"><a href="#重开个终端" class="headerlink" title="重开个终端"></a>重开个终端</h1><p>mysql -uroot -p （提示输入密码时随便输入即可）</p>
<h1 id="获取权限，要不它不让你改"><a href="#获取权限，要不它不让你改" class="headerlink" title="获取权限，要不它不让你改"></a>获取权限，要不它不让你改</h1><p>flush privileges;</p>
<h1 id="设置新密码"><a href="#设置新密码" class="headerlink" title="设置新密码"></a>设置新密码</h1><p>set password for ‘root‘@’localhost’&#x3D;password(‘新密码’);</p>
<p>作者：JoinPerson 链接：<a href="https://www.jianshu.com/p/47caaf07fdfa">https://www.jianshu.com/p/47caaf07fdfa</a> 來源：简书 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 简明语法手册</title>
    <url>/2020/05/14/markdown-%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<ol>
<li><p>初次接触Markdown，很多地方需要熟悉一下，转来这篇小教程，算是练练手，也为以后使用留个参考。<img src="https://www.jarods.org/wp-content/uploads/2020/05/3290158440.jpg" alt="Markdown" title="Markdown"></p>
<h2 id="Cmd-Markdown-简明语法手册"><a href="#Cmd-Markdown-简明语法手册" class="headerlink" title="Cmd Markdown 简明语法手册"></a>Cmd Markdown 简明语法手册</h2><hr>
<h3 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h3><p>使用 * 或 ** 包裹文字表示斜体和粗体。</p>
<p><strong>示例：</strong></p>
<p>这是 *斜体*，这是 **粗体**。</p>
<p><strong>表现：</strong></p>
<p>这是 _斜体_，这是 <strong>粗体</strong>。</p>
<h3 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h3><p>使用 &#x3D;&#x3D;&#x3D; 表示一级标题，使用 — 表示二级标题。 你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p>
<p><strong>示例：</strong></p>
<p>这是一个一级标题 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>这是一个二级标题 ————————————————–</p>
<p>### 这是一个三级标题</p>
<p><strong>表现：</strong></p>
<blockquote>
<h1 id="这是一个一级标题"><a href="#这是一个一级标题" class="headerlink" title="这是一个一级标题"></a>这是一个一级标题</h1><h2 id="这是一个二级标题"><a href="#这是一个二级标题" class="headerlink" title="这是一个二级标题"></a>这是一个二级标题</h2><h3 id="这是一个三级标题"><a href="#这是一个三级标题" class="headerlink" title="这是一个三级标题"></a>这是一个三级标题</h3></blockquote>
<h3 id="3-外链接"><a href="#3-外链接" class="headerlink" title="3. 外链接"></a>3. 外链接</h3><p>使用 [描述](链接地址) 的形式为文字增加外链接。</p>
<p><strong>示例：</strong></p>
<p>这是去往 [本人博客](<a href="https://www.offodd.com/">https://www.offodd.com</a>) 的链接。</p>
<p><strong>表现：</strong></p>
<p>这是去往 <a href="https://www.offodd.com/">本人博客</a> 的链接。</p>
<h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h3><p>行首使用 * 或 + 或 - 开头表示无序列表。 行首使用 空格 缩进可添加二级列表</p>
<p><strong>示例：</strong></p>
<p>* 无序列表项一 ﹏* 表项1(此行左侧有一个不可见的空格) + 无序列表项二 ﹏+ 表项2(此行左侧有一个不可见的空格) - 无序列表项三 ﹏- 表项3(此行左侧有一个不可见的空格)</p>
<p><strong>表现：</strong></p>
<ul>
<li>无序列表项一<ul>
<li>表项1(此行左侧有一个不可见的空格)</li>
</ul>
</li>
<li>无序列表项二<ul>
<li>表项2(此行左侧有一个不可见的空格)</li>
</ul>
</li>
<li>无序列表项三<ul>
<li>表项3(此行左侧有一个不可见的空格)</li>
</ul>
</li>
</ul>
<h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h3><p>行首使用 数字和点 开头表示有序列表。</p>
<p><strong>示例：</strong></p>
<p>1. 有序列表项一 2. 有序列表项二 3. 有序列表项三</p>
<p><strong>表现：</strong></p>
<ol>
<li>有序列表项一</li>
<li>有序列表项二</li>
<li>有序列表项三</li>
</ol>
<h3 id="6-文字引用"><a href="#6-文字引用" class="headerlink" title="6. 文字引用"></a>6. 文字引用</h3><p>行首使用 &gt; 表示文字引用，使用多个 &gt;&gt; 可多级嵌套引用。</p>
<p><strong>示例：</strong></p>
<p>&gt; 离离原上草，一岁一枯荣。 &gt;&gt; 野火烧不尽，春风吹又生。</p>
<p><strong>表现：</strong></p>
<blockquote>
<p>离离原上草，一岁一枯荣。</p>
<blockquote>
<p>野火烧不尽，春风吹又生。</p>
</blockquote>
</blockquote>
<h3 id="7-行内代码块"><a href="#7-行内代码块" class="headerlink" title="7. 行内代码块"></a>7. 行内代码块</h3><p>使用 `代码` 表示行内代码。</p>
<p><strong>示例：</strong></p>
<p>让我们聊聊 `html`。</p>
<p><strong>表现：</strong></p>
<p>让我们聊聊 <code>html</code>。</p>
<h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8. 代码块"></a>8. 代码块</h3><p>行首使用 四个缩进空格 或 一个制表符（Tab） 开头表示代码块。 或在代码块前后一行使用 ``` 包裹代码块。</p>
<p><strong>示例：</strong></p>
<p>﹏﹏﹏﹏这是一个代码块    &#x2F;&#x2F;此行左侧有四个不可见的空格。</p>
<p>``` 这也是一个代码块 ```</p>
<p><strong>表现：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是一个代码块    //此行左侧有四个不可见的空格。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这也是一个代码块</span><br></pre></td></tr></table></figure>

<h3 id="9-插入图像"><a href="#9-插入图像" class="headerlink" title="9. 插入图像"></a>9. 插入图像</h3><p>使用 ![描述](图片链接地址) 的形式插入图像。</p>
<p><strong>示例：</strong></p>
<p>![我的Logo](<a href="https://www.offodd.com/logo.png">https://www.offodd.com/logo.png</a>)</p>
<p><strong>表现：</strong></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/05/logo.png" alt="我的Logo" title="我的Logo"></p>
<h3 id="10-删除线"><a href="#10-删除线" class="headerlink" title="10. 删除线"></a>10. 删除线</h3><p>使用 ~~ 表示删除线。</p>
<p><strong>示例：</strong></p>
<p><del>这是一段错误的文本。</del></p>
<p><strong>表现：</strong></p>
<p>这是一段错误的文本。</p>
<h3 id="11-分割线"><a href="#11-分割线" class="headerlink" title="11. 分割线"></a>11. 分割线</h3><p>分割线最常使用就是三个或三个以上的 - 或 *</p>
<p><strong>示例：</strong></p>
<p>-——-</p>
<p>********</p>
<p><strong>表现：</strong></p>
<hr>
<hr>
<h2 id="Cmd-Markdown-高阶语法手册"><a href="#Cmd-Markdown-高阶语法手册" class="headerlink" title="Cmd Markdown 高阶语法手册"></a>Cmd Markdown 高阶语法手册</h2><hr>
<h3 id="1-注脚"><a href="#1-注脚" class="headerlink" title="1. 注脚"></a>1. 注脚</h3><p>使用 [^keyword] 表示注脚，然后使用 [^keyword]: 表示注脚的解释。</p>
<p><strong>示例：</strong></p>
<p>这是一个注脚[^footnote]的样例。(注脚解释在页脚)</p>
<p>这是第二个注脚[^footnote2]的样例。(注脚解释在页脚)</p>
<p>[^footnote]: 这是一个 *注脚* 的 **解释文本**。</p>
<p>[^footnote2]: 这是另一个 *注脚* 的 **解释文本**。</p>
<p><strong>表现：</strong></p>
<p>这是一个注脚<a href="https://www.offodd.com/19.html#fn-1">1</a>的样例。(注脚解释在页脚)</p>
<p>这是第二个注脚<a href="https://www.offodd.com/19.html#fn-2">2</a>的样例。(注脚解释在页脚)</p>
<h3 id="2-表格支持"><a href="#2-表格支持" class="headerlink" title="2. 表格支持"></a>2. 表格支持</h3><p>用 表示表格纵向边界，表头和表体用 - 隔开；用 : 进行对齐设置，在左边则表示左对齐，在右边则表示右对齐，两边都有:则表示居中，若不加 : 则默认左对齐。</p>
<ul>
<li>-—:为右对齐</li>
<li>:—-为左对齐</li>
<li>:—:为居中对齐</li>
<li>-—-为默认左对齐</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">项目         价格     数量  </span><br><span class="line">--------    -----:   :----:  </span><br><span class="line">计算机      \$1600    5     </span><br><span class="line">手机           \$12      12   </span><br><span class="line">管线            \$1      234  </span><br></pre></td></tr></table></figure>

<p><strong>表现：</strong></p>
<p>项目</p>
<p>价格</p>
<p>数量</p>
<p>计算机</p>
<p>$1600</p>
<p>5</p>
<p>手机</p>
<p>$12</p>
<p>12</p>
<p>管线</p>
<p>$1</p>
<p>234</p>
<h3 id="3-Html-标签"><a href="#3-Html-标签" class="headerlink" title="3. Html 标签"></a>3. Html 标签</h3><p>支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p>
<p><strong>示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;星期一&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;星期二&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;星期三&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;李强&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;张明&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;王平&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;星期一&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;星期二&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;星期三&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;李强&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;张明&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;王平&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<p><strong>表现：</strong></p>
<p>值班人员</p>
<p>星期一</p>
<p>星期二</p>
<p>星期三</p>
<p>李强</p>
<p>张明</p>
<p>王平</p>
<p>值班人员</p>
<p>星期一</p>
<p>星期二</p>
<p>星期三</p>
<p>李强</p>
<p>张明</p>
<p>王平</p>
<h2 id="本文参考"><a href="#本文参考" class="headerlink" title="本文参考"></a>本文参考</h2><p>作业部落：<a href="https://www.zybuluo.com/mdeditor">https://www.zybuluo.com/mdeditor</a> Markdown的基本语法：<a href="https://www.jianshu.com/p/250e36bb5690">https://www.jianshu.com/p/250e36bb5690</a></p>
<hr>
<ol>
<li>这是一个 <em>注脚</em> 的 <strong>解释文本</strong>。 <a href="https://www.offodd.com/19.html#fnref-1">↩</a></li>
<li>这是另一个 <em>注脚</em> 的 <strong>解释文本</strong>。 <a href="https://www.offodd.com/19.html#fnref-2">↩</a></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL主从数据库同步大致教程</title>
    <url>/2018/06/29/mysql%E4%B8%BB%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8C%E6%AD%A5%E5%A4%A7%E8%87%B4%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>主从数据库</p>
<p>mysql主从复制原理: mysql支持单向、异步复制，复制过程中一个服务器充当主服务器，而一个或多个其它服务器充当从服务器。 mysql复制基于主服务器在二进制日志中跟踪所有对数据库的更改(更新、删除等等)。因此，要进行复制，必须在主服务器上启用二进制日志。 每个从服务器从主服务器接收主服务器已经记录到其二进制日志的保存的更新。当一个从服务器连接主服务器时， 它通知主服务器从服务器在日志中读取的最后一次成功更新的位置。从服务器接收从那时起发生的任何更新，并在本机上执行相同的更新。 然后封锁并等待主服务器通知新的更新。从服务器执行备份不会干扰主服务器，在备份过程中主服务器可以继续处理更新。</p>
<p>1、修改主服务器master: #vi &#x2F;etc&#x2F;my.cnf [mysqld] log-bin&#x3D;mysql-bin &#x2F;&#x2F;[必须]启用二进制日志 server-id&#x3D;1 &#x2F;&#x2F;[必须]服务器唯一ID，默认是1，一般取IP最后一段</p>
<p>2、修改从服务器slave: #vi &#x2F;etc&#x2F;my.cnf [mysqld] log-bin&#x3D;mysql-bin &#x2F;&#x2F;[不是必须]启用二进制日志 server-id&#x3D;226 &#x2F;&#x2F;[必须]服务器唯一ID，默认是1，一般取IP最后一段</p>
<p>3、重启数据库 service mysqld restart</p>
<p>4、创建用户 xxxx</p>
<p>5、登录主服务器的mysql，查询master的状态 mysql&gt;show master status; MySQL [mysql]&gt; show master status; +——————+———-+————–+——————+——————-+ File Position Binlog_Do_DB Binlog_Ignore_DB Executed_Gtid_Set +——————+———-+————–+——————+——————-+ mysql-bin.000020 82373 +——————+———-+————–+——————+——————-+ 1 row in set (0.00 sec)</p>
<p>6、配置从服务器Slave： Mysql&gt;change master to master_host&#x3D;’xxxx’,master_user&#x3D;’xxxx’,master_password&#x3D;’xxxxx1′,master_log_file&#x3D;’mysql-bin.000020′,master_log_pos&#x3D;14141889; &#x2F;&#x2F;注意不要断开，308数字前后无单引号。 Mysql&gt;flush privileges; Mysql&gt;start slave; &#x2F;&#x2F;启动从服务器复制功能</p>
<p>7、查看 Mysql&gt; show slave status\G</p>
<p>*************************** 1. row ***************************</p>
<p>Slave_IO_State: Waiting for master to send event Master_Host: xxx &#x2F;&#x2F;主服务器地址 Master_User: xxxxx &#x2F;&#x2F;授权帐户名，尽量避免使用root Master_Port: 3306 &#x2F;&#x2F;数据库端口，部分版本没有此行 Connect_Retry: 60 Master_Log_File: mysql-bin.000004 Read_Master_Log_Pos: 600 &#x2F;&#x2F;#同步读取二进制日志的位置，大于等于Exec_Master_Log_Pos Relay_Log_File: ddte-relay-bin.000003 Relay_Log_Pos: 251 Relay_Master_Log_File: mysql-bin.000004 Slave_IO_Running: Yes &#x2F;&#x2F;此状态必须YES Slave_SQL_Running: Yes &#x2F;&#x2F;此状态必须YES ……</p>
<p>注：Slave_IO及Slave_SQL进程必须正常运行，即YES状态，否则都是错误的状态(如：其中一个NO均属错误)。 主从服务器配置完成。 ————— 错误 2017-06-19 06:37:28 2209 [Warning] ‘proxies_priv’ entry ‘@ root@centos-512mb-ams3-02’ ignored in –skip-name-resolve mode. 2017-06-19 06:37:28 2209 [Warning] Neither –relay-log nor –relay-log-index were used; so replication may break when this MySQL server acts as a slave and has his hostname changed!! Please use ‘–relay-log&#x3D;mysql-relay-bin’ to avoid this problem. 2017-06-19 06:37:28 2209 [Warning] Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the ‘START SLAVE Syntax’ in the MySQL Manual for more information. 2017-06-19 06:37:28 2209 [Warning] Slave SQL: If a crash happens this configuration does not guarantee that the relay log info will be consistent, Error_code: 0 2017-06-19 06:37:28 2209 [Note] Slave SQL thread initialized, starting replication in log ‘mysql-bin.000020’ at position 82373, relay log ‘.&#x2F;mysql-relay-bin.000002’ position: 283 2017-06-19 06:37:28 2209 [ERROR] Slave SQL: Error ‘Table ‘ba.tc_options’ doesn’t exist’ on query. Default database: ‘ba’. Query: ‘INSERT INTO `tc_options` (`name`, `value`) VALUES (‘cron_sign_again’,’a:2:{s:3:”num”;i:0;s:6:”lastdo”;s:10:”2017-06-18″;}’) ON DUPLICATE KEY UPDATE `value` &#x3D; ‘a:2:{s:3:”num”;i:0;s:6:”lastdo”;s:10:”2017-06-18″;}”, Error_code: 1146</p>
<p>1、锁定主服务器数据库 mysql&gt; flush tables with read lock; 2、 导出全部数据库 mysqldump -uroot -pxxxx -A &gt; all_database.mysql</p>
<p>3、从服务器停止slave，情况配置 mysql&gt; stop slave; reset slave; 4、导入数据库 mysql -uroot -pxxxx &lt; all_database.mysql</p>
<p>5、解锁主服务器数据库mysql&gt; unlock tables;</p>
<p>6、从数据库查看 show slave status\G</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL线上与本地实时同步</title>
    <url>/2022/01/05/mysql%E7%BA%BF%E4%B8%8A%E4%B8%8E%E6%9C%AC%E5%9C%B0%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<h3 id="运行环境："><a href="#运行环境：" class="headerlink" title="运行环境："></a>运行环境：</h3><p>线上：RDS（内网）+ECS</p>
<p>本地：xampp</p>
<p>由于本地只能访问ECS，需要在ECS上架设mysql代理：</p>
<p>参考这篇笔记：<a href="http://git.malu.me/MySQL-Proxy/">http://git.malu.me/MySQL-Proxy/</a></p>
<h1 id="mysql线上与本地实现主从同步"><a href="#mysql线上与本地实现主从同步" class="headerlink" title="mysql线上与本地实现主从同步"></a>mysql线上与本地实现主从同步</h1><h3 id="ECS配置（作为主服务器master）"><a href="#ECS配置（作为主服务器master）" class="headerlink" title="ECS配置（作为主服务器master）:"></a>ECS配置（作为主服务器master）:</h3><p>修改配置文件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#vim /etc/my.cnf</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>重启mysql：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/mysql restart</span><br></pre></td></tr></table></figure>

<p>在主服务器上建立帐户mysync并授权给slave主机:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -h localhost</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* to &#x27;mysync&#x27;@&#x27;%&#x27; identified by &#x27;passwd&#x27;;</span><br><span class="line"></span><br><span class="line">mysql&gt; show master status;    #查看master的状态</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line"> File              Position  Binlog_Do_DB  Binlog_Ignore_DB </span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line"> mysql-bin.000002       532                                 </span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">注：执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值Position变化</span><br><span class="line"></span><br><span class="line">mysql&gt; show master logs;    #查看master二进制日志位置</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &#x27;server_id&#x27;;   #查看server_id</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="本地xampp配置（作为从服务器slave）："><a href="#本地xampp配置（作为从服务器slave）：" class="headerlink" title="本地xampp配置（作为从服务器slave）："></a>本地xampp配置（作为从服务器slave）：</h3><p>修改配置文件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X:\Xampp\mysql\bin\my.ini   #xampp默认配置文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>配置Slave：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; change master to  master_host=&#x27;mysql.malu.me&#x27;,master_port=3306,master_user=&#x27;mysync&#x27;,master_password=&#x27;passwd&#x27;,master_log_file=&#x27;mysql-bin.000001&#x27;,master_log_pos=532;</span><br><span class="line"></span><br><span class="line">mysql&gt; start slave;          #启动从服务器复制功能</span><br><span class="line"></span><br><span class="line">注：master_log_pos即为master主机状态里的Position</span><br><span class="line"></span><br><span class="line">mysql&gt; show slave status\G   #检查slave的状态</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接下来往RDS写入数据的时候会自动同步到本地mysql</p>
<h1 id="mysql线上与本地实现主主同步"><a href="#mysql线上与本地实现主主同步" class="headerlink" title="mysql线上与本地实现主主同步"></a>mysql线上与本地实现主主同步</h1><p>双主架构需要mysql双方能互相通讯，但是本地mysql在内网，所以必须先让ECS穿透到内网:</p>
<p>内网穿透参考这篇笔记：<a href="http://git.malu.me/%E4%BA%8C%E7%BA%A7proxy%E9%83%A8%E7%BD%B2/">http://git.malu.me/二级proxy部署/</a></p>
<h3 id="ECS-（作为master-A）"><a href="#ECS-（作为master-A）" class="headerlink" title="ECS （作为master-A）:"></a>ECS （作为master-A）:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin                           #开启二进制日志功能</span><br><span class="line">server-id=1                                 #注意server-id的唯一性</span><br><span class="line">binlog-ignore-db = mysql,information_schema #忽略写入binlog日志的库</span><br><span class="line">relay-log=/app/mysql/relaylogs/relay-bin    #指定中继日志路径</span><br><span class="line">log_slave_updates=1                         #开启从库更新操作写入二进制日志功能*</span><br><span class="line">auto_increment_increment=2                  #双主复制中自增长字段的步长*</span><br><span class="line">auto_increment_offset=1                     #双主复制中自增长字段的起始值，主为1 副为2*</span><br><span class="line">sync_binlog = 1                             #可保证事务日志及时写入磁盘文件</span><br><span class="line">binlog-do-db = TestXXX                      #指定binlog日志记录哪个db</span><br><span class="line">slave-skip-errors                           #定义复制过程中从服务器可以自动跳过错误</span><br></pre></td></tr></table></figure>

<h3 id="本地xampp（作为master-B）："><a href="#本地xampp（作为master-B）：" class="headerlink" title="本地xampp（作为master-B）："></a>本地xampp（作为master-B）：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin                           #开启二进制日志功能</span><br><span class="line">server-id=2                                 #注意server-id的唯一性</span><br><span class="line">binlog-ignore-db = mysql,information_schema #忽略写入binlog日志的库</span><br><span class="line">relay-log=/app/mysql/relaylogs/relay-bin    #指定中继日志路径</span><br><span class="line">log_slave_updates=1                         #开启从库更新操作写入二进制日志功能*</span><br><span class="line">auto_increment_increment=2                  #双主复制中自增长字段的步长*</span><br><span class="line">auto_increment_offset=2                     #双主复制中自增长字段的起始值，主为1 副为2*</span><br><span class="line">sync_binlog = 1                             #可保证事务日志及时写入磁盘文件</span><br><span class="line">binlog-do-db = TestXXX                      #指定binlog日志记录哪个db</span><br><span class="line">slave-skip-errors                           #定义复制过程中从服务器可以自动跳过错误</span><br></pre></td></tr></table></figure>

<h3 id="ECS执行："><a href="#ECS执行：" class="headerlink" title="ECS执行："></a>ECS执行：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* to &#x27;mysync&#x27;@&#x27;%&#x27; identified by &#x27;passwd&#x27;;</span><br><span class="line">mysql&gt; flush  privileges;</span><br><span class="line">mysql&gt; change master to  master_host=&#x27;127.0.0.1&#x27;,master_port=3307,master_user=&#x27;mysync&#x27;,master_password=&#x27;passwd&#x27;,master_log_file=&#x27;mysql-bin.000001&#x27;,master_log_pos=532;</span><br><span class="line"></span><br><span class="line">注：3307为隧道入口</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="本地xampp执行："><a href="#本地xampp执行：" class="headerlink" title="本地xampp执行："></a>本地xampp执行：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* to &#x27;mysync&#x27;@&#x27;%&#x27; identified by &#x27;passwd&#x27;;</span><br><span class="line">mysql&gt; flush  privileges;</span><br><span class="line">mysql&gt; change master to  master_host=&#x27;mysql.malu.me&#x27;,master_port=3306,master_user=&#x27;mysync&#x27;,master_password=&#x27;passwd&#x27;,master_log_file=&#x27;mysql-bin.000001&#x27;,master_log_pos=532;</span><br><span class="line"></span><br><span class="line">mysql&gt; start slave;          #启动master-B复制功能</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接下来写入数据试试吧！</p>
<p>附录：</p>
<p>mysql主从自动切换脚本:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">cat &lt;&lt; README</span><br><span class="line">#####################################################################################################</span><br><span class="line">#Step 1: point the slave IP                                                                         #</span><br><span class="line">#Step 2: check the master and slave information whether good for change                             #</span><br><span class="line">#Step 3: stop old slave,then get new master binlog name and postation,then execute change master to #</span><br><span class="line">#Step 4: start slave,and show whether change successed.                                             #</span><br><span class="line">#####################################################################################################</span><br><span class="line">README</span><br><span class="line">User=root</span><br><span class="line">PW=123456</span><br><span class="line">read -p &quot;-- Please input the slave IP:&quot; Slave</span><br><span class="line">Master=$(mysql -u$&#123;User&#125; -h$&#123;Slave&#125; -p$&#123;PW&#125; -e &quot;show slave status \G;&quot;awk &#x27;/Master_Host/&#123;print $2&#125;&#x27;)</span><br><span class="line"> if [ -n &quot;$&#123;Master&#125;&quot; ]</span><br><span class="line"> then</span><br><span class="line">echo -e &quot;--Master IP:$&#123;Master&#125;,Slave IP:$&#123;Slave&#125;&quot;</span><br><span class="line">M=$(mysql -u$&#123;User&#125; -h$&#123;Master&#125; -p$&#123;PW&#125; -e &quot;show master status;&quot;awk &#x27;NR==2&#123;print $2&#125;&#x27;)</span><br><span class="line">S=$(mysql -u$&#123;User&#125; -h$&#123;Slave&#125; -p$&#123;PW&#125; -e &quot;show slave status \G;&quot;awk &#x27;/Read_Master_Log_Pos/&#123;print $2&#125;&#x27;)</span><br><span class="line">echo -e &quot;-- master pos:$&#123;M&#125;;slave pos is:$&#123;S&#125;&quot;</span><br><span class="line"> else</span><br><span class="line">echo &quot;-- Slave IP input wrong,please input again ! &quot;</span><br><span class="line">exit 1</span><br><span class="line"> fi</span><br><span class="line">       if [ &quot;$&#123;M&#125;&quot; -eq &quot;$&#123;S&#125;&quot; ]</span><br><span class="line">       then</span><br><span class="line">            read -p &quot;-- Master-Slave is accordance,input Yes to start changing:&quot; var</span><br><span class="line">            case &quot;$var&quot; in</span><br><span class="line">                [Yy]es)</span><br><span class="line">                    mysql -u$&#123;User&#125; -h$&#123;Slave&#125; -p$&#123;PW&#125; -e &quot;stop slave;reset slave;change master to master_host=&#x27;&#x27;;&quot;</span><br><span class="line">                    Pos=$(mysql -u$&#123;User&#125; -h$&#123;Slave&#125; -p$&#123;PW&#125; -e &quot;show master status;&quot;awk &#x27;NR==2&#123;print $2&#125;&#x27;)</span><br><span class="line">                    File=$(mysql -u$&#123;User&#125; -h$&#123;Slave&#125; -p$&#123;PW&#125; -e &quot;show master status;&quot;awk &#x27;NR==2&#123;print $1&#125;&#x27;)</span><br><span class="line">                    mysql -u$&#123;User&#125; -h$&#123;Master&#125; -p$&#123;PW&#125; -e &quot;stop slave;</span><br><span class="line">                    change master to master_user=&#x27;ideal&#x27;,master_host=&#x27;$&#123;Slave&#125;&#x27;,master_password=&#x27;123456&#x27;,master_log_file=&#x27;$&#123;File&#125;&#x27;,master_log_pos=$&#123;Pos&#125;;</span><br><span class="line">                   start slave;&quot;</span><br><span class="line">                   ;;</span><br><span class="line">                *)</span><br><span class="line">                   echo &quot;-- error input .... exit!&quot;</span><br><span class="line">                   ;;</span><br><span class="line">           esac</span><br><span class="line">               echo &quot;-- changing, please wait 3s....&quot;</span><br><span class="line">               sleep 3</span><br><span class="line">               echo &quot;-- change successfull,the new master is:$&#123;Slave&#125;,new slave is $&#123;Master&#125;&quot;</span><br><span class="line">                SlaveIOStatus=$(mysql -u$&#123;User&#125; -h$&#123;Master&#125; -p$&#123;PW&#125; -e &quot;show slave status \G;&quot;awk &#x27;/Slave_IO_Running/&#123;print $2&#125;&#x27;)</span><br><span class="line">                SlaveSQLStatus=$(mysql -u$&#123;User&#125; -h$&#123;Master&#125; -p$&#123;PW&#125; -e &quot;show slave status \G;&quot;awk &#x27;/Slave_SQL_Running/&#123;print $2&#125;&#x27;)</span><br><span class="line">                printf &quot;The new master is: \n Slave_IO_Running=$&#123;SlaveIOStatus&#125;\n&quot;</span><br><span class="line">                printf &quot;Slave_SQL_Running=$&#123;SlaveSQLStatus&#125;\n&quot;</span><br><span class="line">       else</span><br><span class="line">          echo &quot;node change failed please change again ! &quot;</span><br><span class="line">          exit 1</span><br><span class="line">       fi</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>OneDrive变身外链网盘-Aria2+Aria2Ng+OneIndex自动上传OneDrive</title>
    <url>/2019/01/27/onedrive%E5%8F%98%E8%BA%AB%E5%A4%96%E9%93%BE%E7%BD%91%E7%9B%98-aria2aria2ngoneindex%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0onedrive/</url>
    <content><![CDATA[<p>OneDrive，全名Microsoft OneDrive，前称Windows Live SkyDrive，是微软所推出的网络硬盘及云端服务。由于与BSkyB存在商标争议，2014年1月，微软宣布SkyDrive更名为OneDrive。OneDrive前身是SkyDrive，开始于2007，目前已经运行了十几年。</p>
<p>所以说，<a href="https://wzfou.com/tag/onedrive/">OneDrive</a>是一个老牌稳定的免费网络硬盘。在国内，OneDrive又是一个“神奇”的网盘，它的竞争对手如Google Drive、Dropbox在国内都早就上QQ了，而OneDrive依然可以正常使用。个人认为有一个原因不容忽视，那就是OneDrive上传下载速度太慢了。</p>
<p>很多人用OneDrive，恐怕看重的是OneDrive由微软出品，与Windows等完全融合，况且国内也可以正常访问，特别适合那些需要网盘来存文档的朋友使用。另外，OneDrive免费用户有5GB存储容量，但是如果是Office 365订阅用户，则可以获得5TB的存储空间。</p>
<p>这么大的存储空间，自然有人想到要将<a href="https://wzfou.com/tag/onedrive-for-business/">OneDrive for Business</a>变身外链网盘，本篇文章就来分享一下Aria2+Aria2Ng+OneIndex一键安装方法。<a href="https://wzfou.com/tag/oneindex/">OneIndex</a>是一个目录列表程序，可以将OneDrive网盘里面的文件列出来供我们查看&#x2F;下载，而且并不会消耗服务器的流量和空间。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_00.jpg" alt="OneDrive变身外链网盘-Aria2+Aria2Ng+OneIndex自动上传OneDrive"></p>
<p>而Aria2+Aria2Ng则可以让我们直接在VPS上下载BT种子，同时Aria2+Aria2Ng+OneIndex一键安装包会自动将Aria2+Aria2Ng下载的文件上传到OneDrive，从而让OneDrive成功变身为外链网盘。如果你还想将其它的网盘也变成自己的<a href="https://wzfou.com/tag/geren-wangpan/">个人网盘</a>，可以看看：</p>
<ol>
<li><a href="https://wzfou.com/rclone-cos-fuse-ossfs/">VPS挂载国内外网盘实现免费扩容工具:Rclone,COS-Fuse和OSSFS</a></li>
<li><a href="https://wzfou.com/linux-vps-drive/">Linux VPS挂载Google Drive和Dropbox-实现VPS主机数据同步备份</a></li>
<li><a href="https://wzfou.com/nextcloud-aria2/">Nextcloud离线下载搭建方法-整合Aria2和AriaNg、Aria2 WebUI实现离线下载</a></li>
</ol>
<h2 id="一、安装前准备"><a href="#一、安装前准备" class="headerlink" title="一、安装前准备"></a>一、安装前准备</h2><p>网站：</p>
<ol>
<li><a href="https://github.com/donwa/oneindex">https://github.com/donwa/oneindex</a></li>
<li><a href="https://onedrive.live.com/">https://onedrive.live.com/</a></li>
</ol>
<h3 id="1-1-一个OneDrive账户"><a href="#1-1-一个OneDrive账户" class="headerlink" title="1.1  一个OneDrive账户"></a>1.1  一个OneDrive账户</h3><p>支持OneDrive个人账户和商业账户，个人账户只有5GB存储空间，如何获得OneDrive商业账户？<strong>方法一：</strong>用钱购买。<strong>方法二：</strong>用edu教育邮箱免费加入Office 365教育版。</p>
<ol>
<li><a href="https://signup.microsoft.com/signup?sku=Education">https://signup.microsoft.com/signup?sku=Education</a></li>
</ol>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_30.gif" alt="OneDrive教育版"></p>
<p>那么问题来了，到哪里注册到edu教育邮箱？<strong>此处有三个方法，方法一：</strong>直接搜索寻找那些冷门的.edu邮箱注册，可以参考这里：<a href="https://wzfou.com/edu-email/">免费.edu邮箱获取方法-用教育邮箱获取免费VPS\域名\软件汇总列表</a>。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_31.gif" alt="OneDrive免费edu邮箱"></p>
<p><strong>方法二：</strong>自己使用.edu域名搭建邮局，开通邮箱账号。此方法通过率不一定高，最好找一些冷门的.edu后缀域名：<a href="https://wzfou.com/az-pl/">AZ.PL波兰域名注册商提供免费的.com,.pl,.eu,.pl和.edu.pl教育域名</a>。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_32.jpg" alt="OneDrive自建邮局 "></p>
<p><strong>方法三：</strong>申请Office 365开发者计划。网站：<a href="https://dev.office.com/devprogram%EF%BC%8C%E8%AF%A5%E6%B4%BB%E5%8A%A8%E4%B8%8D%E6%98%AF%E9%95%BF%E6%9C%9F%E7%9A%84%EF%BC%8C%E9%9C%80%E8%A6%81%E5%8A%A0%E5%85%A5%E8%AF%B7%E8%BF%85%E9%80%9F%E3%80%82">https://dev.office.com/devprogram，该活动不是长期的，需要加入请迅速。</a></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_32.gif" alt="OneDrive加入开发计划"></p>
<p>按照要求填写注册信息即可，然后就可以成功申请到免费试用一年的Office 365企业版了，最高可获取21TB的OneDrive for Business存储空间，1TB用于管理员帐户，5TB用于4个子账户。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_05.gif" alt="OneDrive成功申请"></p>
<p>注册成功后，使用你的Office 365账号就可以登录了。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_06.gif" alt="OneDrive开始登录"></p>
<p>在创建新用户之前，记得在“存储设置” 页面上编辑1024到5120的默认OneDrive存储 ：<a href="https://admin.onedrive.com/?v=StorageSettings%E3%80%82">https://admin.onedrive.com/?v=StorageSettings。</a></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_09.gif" alt="OneDrive调整存储"></p>
<h3 id="1-2-一台VPS主机或服务器"><a href="#1-2-一台VPS主机或服务器" class="headerlink" title="1.2  一台VPS主机或服务器"></a>1.2  一台VPS主机或服务器</h3><p>Aria2+Aria2Ng+OneIndex一键安装脚本只适用于Debian 8、9，且无网站环境，会自动签发Let’s Encrypt SSL证书，所以你还需要一个域名。关于如何选择VPS主机可以看：<a href="https://wzfou.com/vps-bangdan/">VPS主机排行榜单</a>。追求速度的话，可以看：<a href="https://wzfou.com/cn2-gia-vps/">CN2 GIA VPS主机收集整理汇总</a>。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_33.jpg" alt="OneDrive需要一台VPS"></p>
<h2 id="二、Aria2-Aria2Ng-OneIndex一键安装"><a href="#二、Aria2-Aria2Ng-OneIndex一键安装" class="headerlink" title="二、Aria2+Aria2Ng+OneIndex一键安装"></a>二、Aria2+Aria2Ng+OneIndex一键安装</h2><p><strong>运行命令：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://www.moerats.com/usr/shell/Aria2_OneIndex.sh &amp;&amp; bash Aria2_OneIndex.sh</span><br></pre></td></tr></table></figure>

<p>按要求输入以下选项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请输入你的OneIndex域名信息(如:one.wzfou.com):</span><br><span class="line">请输入你的Aria2密钥:例如wzfou.com</span><br><span class="line">请输入你OneIndex/OneDrive中的一个文件夹（格式:RATS，此后所有文件都会上传到该文件夹）:</span><br></pre></td></tr></table></figure>

<p>如下图：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_12.gif" alt="OneIndex输入密钥"></p>
<p>输入好了后直到安装完成，如果<code>Nginx</code>安装失败，检查下系统是否自带<code>Apache2</code>，然后卸载掉就行了。<code>Aria2Ng</code>访问地址：<code>http://IP:8080</code>。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_13.gif" alt="OneIndex安装成功"></p>
<p><strong>相关文件：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OneIndex及域名根目录：/home/wwwroot/xx.com</span><br><span class="line">Aria2Ng根目录：/home/wwwroot/aria2ng</span><br><span class="line">域名证书目录：/home/wwwroot/ssl</span><br><span class="line">Aria2配置文件夹：/root/.aria2</span><br></pre></td></tr></table></figure>

<p><strong>相关提示：</strong></p>
<p>如果你用的是<a href="https://wzfou.com/tag/aliyun/">阿里云</a>、<a href="https://wzfou.com/tag/tencent-yun/">腾讯云</a>等带有安全组的云主机，记得在安全组中开启相应的端口，例如8080、443、80、6800等端口。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_14.gif" alt="OneIndex打开防火墙"></p>
<h2 id="三、OneIndex配置与使用"><a href="#三、OneIndex配置与使用" class="headerlink" title="三、OneIndex配置与使用"></a>三、OneIndex配置与使用</h2><h3 id="3-1-OneIndex配置"><a href="#3-1-OneIndex配置" class="headerlink" title="3.1  OneIndex配置"></a>3.1  OneIndex配置</h3><p>通过上面的方法我们已经在服务器上安装好了Aria2+Aria2Ng+OneIndex，现在我们还需要对OneIndex进行相应的配置。打开你的OneIndex域名就会自动跳转到安装界面。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_15.gif" alt="OneIndex安装界面"></p>
<p>安装过程中需要填写你的应用ID和密钥，直接点击链接跳转到微软的官网中获取即可。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_16.gif" alt="OneIndex填写ID"></p>
<p>绑定好你的OneDrive账号，此处就可以使用我们刚刚申请到了的OneDrive商业版账号了。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_18.gif" alt="OneIndex授权账号"></p>
<p>OneIndex配置成功。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_19.gif" alt="OneIndex配置成功"></p>
<h3 id="3-2-OneIndex使用"><a href="#3-2-OneIndex使用" class="headerlink" title="3.2  OneIndex使用"></a>3.2  OneIndex使用</h3><p>OneIndex后台登录地址类似于：<a href="https://one.wzfou.com/?/admin/%E8%BF%99%E6%A0%B7%E7%9A%84%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%B0%B1%E6%98%AFOneIndex%E7%9A%84%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0%E7%95%8C%E9%9D%A2%E3%80%82%EF%BC%88%E7%82%B9%E5%87%BB%E6%94%BE%E5%A4%A7%EF%BC%89">https://one.wzfou.com/?/admin/这样的，这个就是OneIndex的管理后台界面。（点击放大）</a></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_20.gif" alt="OneIndex管理后台界面"></p>
<p>这是前台界面，演示可以看：<a href="https://one.wzfou.edu.pl/%E6%88%96%E8%80%85https://xn.tn/">https://one.wzfou.edu.pl/或者https://xn.tn/</a></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_24.gif" alt="OneIndex前台页面"></p>
<p>OneIndex可以直接查看图片并显示可引用的外链地址（点击放大）。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_25.jpg" alt="OneIndex查看图片"></p>
<p>OneIndex也可以直接在线播放视频（点击放大）。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_26.jpg" alt="OneIndex观看视频"></p>
<p>OneIndex还可以允许游客上传文件到OneDrive中，你只需要在OneIndex后台管理中开启此功能。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_22.gif" alt="OneIndex开启图片上传"></p>
<p>然后游客就可以直接从OneIndex前台上传图片文件了。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_23.gif" alt="OneIndex游客上传文件"></p>
<h2 id="四、Aria2下载并自动上传至OneDrive"><a href="#四、Aria2下载并自动上传至OneDrive" class="headerlink" title="四、Aria2下载并自动上传至OneDrive"></a>四、Aria2下载并自动上传至OneDrive</h2><p>首先，打开你的Aria2Ng界面，然后在服务器一栏填入你在安装时设置的密钥。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_25.gif" alt="OneIndex填入密钥"></p>
<p>一切没有问题的话，Aria2Ng会显示Aria2连接成功。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_26.gif" alt="OneIndex连接成功"></p>
<p>现在你就可以像使用迅雷一样直接添加下载任务了，http或BT等都支持下载。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_27.gif" alt="OneIndex添加下载"></p>
<p>使用VPS服务器+Aria2下载文件最大的好处就是带宽足够大，一般机房给的带宽都可以达到10MB&#x2F;s以上。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_28.gif" alt="OneIndex机房带宽"></p>
<p>Aria2下载好的文件会自动上传到OneDrive，你可以通过OneIndex直接浏览观看了。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/01/onedrive-dev_29.gif" alt="OneIndex自动上传"></p>
<h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>OneIndex可以单独安装，你可以进入Github项目主页下载OneIndex程序包解压上传就可以了。由于OneDrive在国内访问速度比较慢，所以使用OneIndex查看浏览图片视频等会有卡顿的情况。</p>
<p>Aria2+Aria2Ng+OneIndex自动上传OneDrive有个注意的地方就是选择购买大带宽的VPS主机，像阿里云这样的限带宽的主机，下载速度很快，但是将服务器里的文件传出去真的是慢得不行。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Aria2</tag>
        <tag>OneDrive</tag>
        <tag>Aria2Ng</tag>
        <tag>OneIndex</tag>
      </tags>
  </entry>
  <entry>
    <title>ols1clk – OpenLiteSpeed 高性能一键包</title>
    <url>/2019/03/17/ols1clk-openlitespeed-%E9%AB%98%E6%80%A7%E8%83%BD%E4%B8%80%E9%94%AE%E5%8C%85/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前有介绍过很多种 Nginx&#x2F;OpenResty 优化 WordPress 的方法，不过可靠性较低，设置难度也比较大，这里就要推荐一下 OpenLiteSpeed（简称OLS） 了。</p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>OpenLiteSpeed 是著名的 LiteSpeed Server（简称 LSWS） 的开源版本，（相对 Apache Httpd）拥有非常多的优异特性，最重要的就是 SAPI 方式驱动的 PHP 即 LSPHP／php-litespeed 性能比 php-fpm 更好，还有就是 LSCache 了，能够轻松为 WordPress、Woocomare、XenForo、Joomla、Mediawiki 等软件，要知道 Nginx&#x2F;OpenResty 优化方式对其他软件的支持是比较少的。</p>
<p>OpenLiteSpeed 也能说是 LSWS 的试验田，会率先支持一些新特性例如：TLS1.3、HTTP&#x2F;2 都是很早就实现开箱即用的，相对 Nginx 来说也比较方便。</p>
<h1 id="ols1clk"><a href="#ols1clk" class="headerlink" title="ols1clk"></a>ols1clk</h1><p>为了方便大家使用 OLS，LiteSpeed Tech 团队推出了 ols1clk 一键包。米饭也贡献了一些小内容，并进行了中文方便大家使用。对WP的支持特别好，并且预装了 LS Cache 插件。</p>
<h1 id="ols1clk-OpenLiteSpeed-一键包"><a href="#ols1clk-OpenLiteSpeed-一键包" class="headerlink" title="ols1clk - OpenLiteSpeed 一键包"></a><a href="https://github.com/ivmm/ols1clk">ols1clk - OpenLiteSpeed 一键包</a></h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>ols1clk 是 OpenLiteSpeed 的一键安装包。使用 ols1clk 可以快速安装 OpenLiteSpeed 以及 PHP、MariaDB 等环境组件，并且还提供了方便 WordPress 安装的相关参数。</p>
<p><strong>支持安装的系统：</strong></p>
<ul>
<li>RHEL 6&#x2F;7 （推荐）</li>
<li>CloudLinux 6&#x2F;7 （推荐）</li>
<li>CentOS 6&#x2F;7</li>
<li>Debian 8&#x2F;9</li>
<li>Ubuntu 14.04 16.04</li>
</ul>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol>
<li>事件驱动架构，节省 CPU 和内存凯旋</li>
<li>WEB GUI 后台界面并提供实时统计</li>
<li>不限制并发数，低负载压力</li>
<li>支持 <strong>LS Cache</strong> 高性能页面缓存</li>
<li>兼容 Apache mod_rewrite 语法</li>
<li>PHP-LiteSpeed 比 php-fpm、mod_php 更高效</li>
<li>支持 HTTPS、HTTP&#x2F;2、TLS1.2 1.3</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>在 SSH 终端中运行：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/ivmm/ols1clk/zh-cn/ols1clk.sh</span><br><span class="line"><span class="built_in">chmod</span> 755 ols1clk.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果不添加 <code>选项</code> 设置，会以默认参数运行</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>自动安装 OpenLiteSpeed + MariaDB10.2 + PHP5.6</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./ols1clk.sh</span><br></pre></td></tr></table></figure>

<p><strong>自动安装 OpenLiteSpeed + MariaDB10.2 + PHP5.6 并安装 WP</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./ols1clk.sh -w</span><br></pre></td></tr></table></figure>

<p><strong>自动安装 OpenLiteSpeed + MariaDB10.1 + PHP7.0 并安装 WP</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./ols1clk.sh --lsphp 70 --mariadbver 10.1</span><br></pre></td></tr></table></figure>

<p><strong>自动安装 OpenLiteSpeed + MariaDB10.2 + PHP7.1，并安装 WP 指定域名为 <a href="http://www.mf8.biz/">www.mf8.biz</a></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./ols1clk.sh -a pa55w0rd -e your@email.com --lsphp 71 -w --wordpressplus www.mf8.biz</span><br></pre></td></tr></table></figure>

<h4 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h4><ul>
<li><strong>--adminpassword(-a) [PASSWORD]:</strong> 设置 LiteSpeed 控制面板的密码，如果不设置就随机生成并在终端中显示。 例如：<code>-a pa55w0rd</code></li>
<li><strong>--email(-e) EMAIL:</strong> 设置管理员电子邮件。 例如：<code>-e your@email.com</code></li>
<li><strong>--lsphp VERSION:</strong> 安装以 php-litespeed 方式运行的 PHP，目前支持：54、55、56、70、71</li>
<li><strong>--mariadbver VERSION:</strong> 安装 MariaDB 官方提供的二进制 MariaDB Server，目前支持：10.0 10.1 10.2</li>
<li><strong>--wordpress(-w):</strong> 自动安装 WordPress</li>
<li><strong>--wordpressplus SITEDOMAIN:</strong> 设置运行 WP 网站的域名</li>
<li><strong>--wordpresspath WORDPRESSPATH:</strong> 设置 WP 所安装的路径</li>
<li><strong>--dbrootpassword(-r) [PASSWORD]:</strong> 设置 MySQl 的 root 账户密码，若不填写则自动生成并在终端中显示</li>
<li><strong>--dbname DATABASENAME:</strong> 设置 WP 所安装的数据名</li>
<li><strong>--dbuser DBUSERNAME:</strong> 设置 WP 所安装的数据用户</li>
<li><strong>--dbpassword [PASSWORD]:</strong> 设置 WP 所安装的数据密码</li>
<li><strong>--listenport WORDPRESSPORT:</strong> 服务所运行的端口, 默认80</li>
<li><strong>--wpuser WORDPRESSUSER:</strong> 设置 WP 管理员用户名</li>
<li><strong>--wppassword [PASSWORD]:</strong> 设置 WP 管理员米啊么</li>
<li><strong>--wplang WORDPRESSLANGUAGE:</strong> 设置 WP 语言，zh_CN 表示中文，默认英文</li>
<li><strong>--sitetitle WORDPRESSSITETITLE:</strong> 设置 WP 网站标题, 默认为 mySite.</li>
<li><strong>--uninstall:</strong> 卸载 OpenLiteSpeed 并移除相关文件</li>
<li><strong>--purgeall:</strong> 卸载 OpenLiteSpeed、MariaDB 并移除相关文件</li>
<li><strong>--version(-v):</strong> 显示版本悉尼下</li>
<li><strong>--help(-h):</strong> 查看帮助</li>
</ul>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>LiteSpedd</tag>
        <tag>LS Cache</tag>
        <tag>LSWS</tag>
        <tag>OLS</tag>
        <tag>ols1clk</tag>
        <tag>OpenLiteSpeed</tag>
        <tag>Wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>OneinStack一键安装脚本-轻松部署Let’s Encrypt证书配置Https站点</title>
    <url>/2020/04/30/oneinstack%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC-%E8%BD%BB%E6%9D%BE%E9%83%A8%E7%BD%B2lets-encrypt%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AEhttps%E7%AB%99%E7%82%B9/</url>
    <content><![CDATA[<p>OneinStack 自带了Let’s Encrypt安装组件，想要使用SSL证书的朋友只需要在创建网站时输入域名，然后就可以自动为域名配置SSL证书了，并且OneinStack 还会贴心地设置Let’s Encrypt证书自动续期。至于其它的Memcached、Redis、ionCube、ZendGuardLoader等都可以一键安装。</p>
<p><img src="/2020/04/conoha_000.jpg" alt="OneinStack一键安装脚本-轻松部署Let’s Encrypt证书和配置Https站点"></p>
<p>本篇文章就来分享一下我使用<a href="https://wzfou.com/tag/oneinstack-mianban/">OneinStack面板</a>的一些心得与体会，更多的关于建站软件与建站工具，你可以看看：</p>
<ol>
<li><a href="https://wzfou.com/lnmp-1-4/">Linux VPS建站工具LNMP 1.4安装与使用-SSL自动配置续期和多版本PHP支持</a></li>
<li><a href="https://wzfou.com/conoha/">ConoHa日本VPS主机使用感受-东京机房速度一般支付宝付款</a></li>
<li><a href="https://wzfou.com/wp-video/">用JW Player,ckplayer,Smartideo搭建视频直播站-支持各大视频网站和rtmp</a></li>
</ol>
<h2 id="一、OneinStack安装方法"><a href="#一、OneinStack安装方法" class="headerlink" title="一、OneinStack安装方法"></a>一、OneinStack安装方法</h2><p>OneinStack支持一键安装的操作系统有：CentOS 6~7（包括redhat） 、Debian 6～8 、Ubuntu 12～16 、Aliyun Linux 15.1。主要包括以下组合：</p>
<blockquote>
<p>lnmp（Linux + Nginx+ MySQL+ PHP）</p>
<p>lamp（Linux + Apache+ MySQL+ PHP）</p>
<p>lnmpa（Linux + Nginx+ MySQL+ PHP+ Apache）：Nginx处理静态，Apache（mod_php）处理动态PHP</p>
<p>lnmt（Linux + Nginx+ MySQL+ Tomcat）：Nginx处理静态，Tomcat（JDK）处理JAVA</p>
<p>lnmh（Linux + Nginx+ MySQL+ HHVM）</p>
</blockquote>
<p>OneinStack安装命令如下（如果有新的变化，请参考官网：<a href="https://oneinstack.com/%EF%BC%89%EF%BC%9A">https://oneinstack.com/）：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install wget screen curl python #for CentOS/Redhat</span><br><span class="line"># apt-get -y install wget screen curl python #for Debian/Ubuntu</span><br><span class="line">wget http://aliyun-oss.linuxeye.com/oneinstack-full.tar.gz #阿里云经典网络下载</span><br><span class="line">wget http://mirrors.linuxeye.com/oneinstack-full.tar.gz #包含源码，国内外均可下载</span><br><span class="line">wget http://mirrors.linuxeye.com/oneinstack.tar.gz #不包含源码，建议仅国外主机下载</span><br><span class="line">tar xzf oneinstack-full.tar.gz</span><br><span class="line">cd oneinstack #如果需要修改目录(安装、数据存储、Nginx日志)，请修改options.conf文件</span><br><span class="line">screen -S oneinstack #如果网路出现中断，可以执行命令`screen -R oneinstack`重新连接安装窗口</span><br><span class="line">./install.sh #注：请勿sh install.sh或者bash install.sh这样执行</span><br></pre></td></tr></table></figure>

<p>在安装过程中，脚本会让你先选择是否安装Nginx、Apache等。根据你自己的需要来选择不同的版本来安装，如果只是建站的话建议使用LNMP，不要使用LNMPA。</p>
<p><img src="/2020/04/conoha_22.gif" alt="OneinStack选择Nginx"></p>
<p>接着会要求你选择MysqL数据库版本，5.7版本在性能上有所提升，但是有些程序可能无法兼容MysqL 5.7以下，请谨慎安装与使用。</p>
<p><img src="/2020/04/conoha_23.gif" alt="OneinStack选择MysqL版本"></p>
<p>最后就是选择安装PHP的版本，还有各种组件，包括了缓存ZendOPcache、xcache、apcu、eAccelerator；php加解密工具ionCube、ZendGuardLoader ；还有Memcached、Redis等等。</p>
<p><img src="/2020/04/conoha_24.gif" alt="OneinStack安装组件"></p>
<p>这是OneinStack安装成功的界面。</p>
<p><img src="/2020/04/conoha_25.gif" alt="OneinStack安装成功"></p>
<p>打开你的IP，你就可以看到OneinStack默认页面了，这里会有探针、PHPmyAdmin等，直接点击就可以打开了。建议在正式生产环境中将此页面重命名或者直接删除，防止被人利用。</p>
<p><img src="/2020/04/conoha_25_1.gif" alt="OneinStack探针"></p>
<h2 id="二、OneinStack一键部署Https站点"><a href="#二、OneinStack一键部署Https站点" class="headerlink" title="二、OneinStack一键部署Https站点"></a>二、OneinStack一键部署Https站点</h2><p>首先，如果你自己没有购买证书的话，可以先安装OneinStack提供的Let’s Encrypt申请部署组件，执行命令：.&#x2F;addons.sh，选择Let’s Encrypt安装。</p>
<p><img src="/2020/04/conoha_27.gif" alt="OneinStack添加证书组件"></p>
<p>接着，到你的域名DNS管理处，将域名的A记录解析到服务器上，<strong>因为我们在申请Let’s Encrypt证书时需要验证域名，如果没有解析会出失败的情况。</strong></p>
<p><img src="/2020/04/conoha_26.gif" alt="OneinStack解析域名"></p>
<p>然后，你就可以执行命令：.&#x2F;vhost.sh，开始添加新的虚拟主机了。下面的配置是绑定wzfou.net域名，同时将www跳转到非www的，其它的文件目录都是默认，在最后一项选择安装Let’s Encrypt。</p>
<p><img src="/2020/04/conoha_28.gif" alt="OneinStack创建网站"></p>
<p>最后，选择OneinStack提供的默认URL重写规则，自带了Wordpress、DZ、typecho等热门程序。这是OneinStack添加虚拟主机成功的界面。</p>
<p><img src="/2020/04/conoha_29.gif" alt="OneinStack添加网站成功"></p>
<p>打开你的域名，这时你就可以看到Https站点已经部署成功了。</p>
<p><img src="/2020/04/conoha_30.gif" alt="OneinStack站点部署Https成功"></p>
<h2 id="三、OneinStack多版本PHP共存"><a href="#三、OneinStack多版本PHP共存" class="headerlink" title="三、OneinStack多版本PHP共存"></a>三、OneinStack多版本PHP共存</h2><p>经过测试，<a href="https://howsvps.com/tag/lnmp/">LNMP</a> 1.4实现多版本PHP共存比较简单，有这个需要的朋友建议使用LNMP 1.4：<a href="https://wzfou.com/lnmp-1-4/">Linux VPS建站工具LNMP 1.4安装与使用-SSL自动配置续期和多版本PHP支持</a>。</p>
<p>OneinStack实现多版本PHP有些麻烦，以下内容参考自官网。如果你之前安装的是PHP 5.4，想要安装PHP 7，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service php-fpm stop #后面需要再安装php，需要停止php</span><br><span class="line">mv /etc/init.d/php-fpm&#123;,_bk&#125; #后面需要再安装php会覆盖，备份启动脚本</span><br><span class="line">默认php5.4安装路径是/usr/local/php，如果再次安装会提示php已经安装，因此必须修改options.conf的php安装目录，将php7安装路径设置为/usr/local/php7，修改/root/oneinstack/options.conf：</span><br><span class="line">php_install_dir=/usr/local/php7</span><br><span class="line">再次执行./install.sh，选择Install php-7，其余均选择n，等待ing</span><br></pre></td></tr></table></figure>

<p>修改php配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service php-fpm stop #停止php7启动脚本</span><br><span class="line">mv /etc/init.d/php-fpm /etc/init.d/php7-fpm  #重命名php7启动脚本</span><br><span class="line">mv /etc/init.d/php-fpm_bk /etc/init.d/php-fpm  #恢复php5.4启动脚本</span><br><span class="line">设置php5.4、php7开机自启动：</span><br><span class="line"># CentOS:</span><br><span class="line">chkconfig --add php7-fpm</span><br><span class="line">chkconfig --add php-fpm</span><br><span class="line">chkconfig php7-fpm on</span><br><span class="line">chkconfig php-fpm on</span><br><span class="line"># Ubuntu/Debian:</span><br><span class="line">update-rc.d php7-fpm defaults</span><br><span class="line">update-rc.d php-fpm defaults</span><br><span class="line">防止php5.4、php7监听sock冲突，修改php7的listen，更改配置文件/usr/local/php7/etc/php-fpm.conf：</span><br><span class="line">listen = /dev/shm/php-cgi.sock</span><br><span class="line">#改成</span><br><span class="line">listen = /dev/shm/php7-cgi.sock</span><br><span class="line">手工启动php5.4、php7：</span><br><span class="line">service php-fpm start  #启动php5.4</span><br><span class="line">service php7-fpm start #启动php7</span><br></pre></td></tr></table></figure>

<p>修改nginx虚拟主机配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./vhost.sh绑定域名，默认是运行在php5.4，如需要将网站运行在php7下，需要修改/usr/local/nginx/conf/vhost/www.oneinstack.com.conf（www.oneinstack.com改成自己绑定域名）：</span><br><span class="line">fastcgi_pass unix:/dev/shm/php-cgi.sock;</span><br><span class="line">#改成</span><br><span class="line">fastcgi_pass unix:/dev/shm/php7-cgi.sock;</span><br><span class="line">重新加载nginx，使配置生效：</span><br><span class="line">service nginx reload</span><br></pre></td></tr></table></figure>

<h2 id="四、使用OneinStack遇到的问题"><a href="#四、使用OneinStack遇到的问题" class="headerlink" title="四、使用OneinStack遇到的问题"></a>四、使用OneinStack遇到的问题</h2><p><strong>第一个问题：let’s encpty SSL证书自动续期失败。</strong>我之前遇到过这样的问题，猜测的原因可能是OneinStack在执行let’s encpty 续期时因为80端口被Nginx占用而导致失败的。解决的办法停止Nginx，然后自己手动执行一下Crontab定时任务。或者直接强制执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/python/bin/certbot renew –force-renewal –renew-hook “/etc/init.d/nginx reload”</span><br></pre></td></tr></table></figure>

<p><strong>第二个问题：修改PHP后不生效。</strong>这是因为在安装OneinStack时默认地给PHP环境默认加载了Opcache模块（PHP5.5、5.6、7.0、7.1），修改PHP代码后一般要1分钟后才见效。解决办法可以卸载Opcache，或者自己访问http:&#x2F;&#x2F;公网IP&#x2F;ocp.php，重置缓存。</p>
<p><img src="/2020/04/conoha_30_2.gif" alt="OneinStack重置缓存"></p>
<p><strong>第三个问题：OneinStack无法发送邮件。</strong>这是因为OneinStack没有PHP mail，你需要自己安装postfix或者使用第三方的SMTP如sendcloud、Amazon SES、MailGun等发送。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>CentOS</tag>
        <tag>Debian</tag>
        <tag>Linux</tag>
        <tag>OneinStack</tag>
      </tags>
  </entry>
  <entry>
    <title>OneinStack自动安装</title>
    <url>/2018/04/03/oneinstack/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://www.jarods.org/wp-content/uploads/2018/04/autoinstall.png" alt="《自动安装》"></h3><p>举例：如安装Nginx、PHP7.2、MySQL5.7、redis、phpmyadmin，并安装后重启服务器： <code>~/oneinstack/install.sh --nginx_option 1 --php_option 7 --phpcache_option 1 --db_option 1 --dbrootpwd admin --dbinstallmethod 1 --phpmyadmin --reboot</code> 参数如下：</p>
<p>变量名</p>
<p>变量值</p>
<p> 对应版本</p>
<p>变量值含义</p>
<p>--nginx_option</p>
<p>1 2 3</p>
<p>Nginx Tengine OpenResty</p>
<p>Nginx版本</p>
<p>--apache_option</p>
<p>1 2</p>
<p>Apache-2.4 Apache-2.2</p>
<p>Apache版本</p>
<p>--php_option</p>
<p>1 2 3 4 5 6 7</p>
<p>PHP-5.3 PHP-5.4 PHP-5.5 PHP-5.6 PHP-7.0 PHP-7.1 PHP-7.2</p>
<p>PHP版本</p>
<p>--phpcache_option</p>
<p>1 2 3 4</p>
<p>OPcache XCache APCU eAccelerator</p>
<p>PHP缓存</p>
<p>--php_extensions</p>
<p>zendguardloader ioncube imagick gmagick</p>
<p>可同时写多个，以逗号隔开</p>
<p>PHP扩展</p>
<p>--tomcat_option</p>
<p>1 2 3 4</p>
<p>Tomcat-9 Tomcat-8 Tomcat-7 Tomcat-6</p>
<p>Tomcat版本</p>
<p>--jdk_option</p>
<p>1 2 3 4</p>
<p>JDK-9 JDK-1.8 JDK-1.7 JDK-1.6</p>
<p>JDK版本</p>
<p>--db_option</p>
<p>1 2 3 4 5 6 7 8 9 10 11 12 13</p>
<p>MySQL-5.7 MySQL-5.6 MySQL-5.5 MariaDB-10.2 MariaDB-10.1 MariaDB-10.0 MariaDB-5.5 Percona-5.7 Percona-5.6 Percona-5.5 AliSQL-5.6 PostgreSQL MongoDB</p>
<p>数据库版本</p>
<p>--dbinstallmethod</p>
<p>1 2</p>
<p>二进制安装 源码编译安装</p>
<p>数据库安装方式</p>
<p>--dbrootpwd</p>
<p> 密码</p>
<p> 无</p>
<p>数据库密码</p>
<p>--pureftpd</p>
<p>无</p>
<p>无</p>
<p>安装pureftpd</p>
<p>--redis</p>
<p>无</p>
<p>无</p>
<p>安装redis</p>
<p>--memcached</p>
<p>无</p>
<p>无</p>
<p>安装memcached</p>
<p>--phpmyadmin</p>
<p>无</p>
<p>无</p>
<p>安装phpmyadmin</p>
<p>--hhvm</p>
<p>无</p>
<p>无</p>
<p>安装hhvm</p>
<p>--ssh_port</p>
<p>端口</p>
<p>无</p>
<p>ssh端口号</p>
<p>--iptables</p>
<p>无</p>
<p>无</p>
<p>启用iptables</p>
<p>--reboot</p>
<p>无</p>
<p>无</p>
<p>安装后重启服务器</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>LNMP</tag>
        <tag>OneinStack</tag>
        <tag>自动安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Oneinstack从入门到精通-Oneinstack安装与使用教程收集整理</title>
    <url>/2020/04/30/oneinstack%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-oneinstack%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%E6%94%B6%E9%9B%86%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>Oneinstack是一个Linux + Nginx+ Apache+MySQL&#x2F;MongoDB+ PHP一键安装包，支持的模式有：lnmp、lamp、lnmpa、lnpp、lnmh等等。相对于LNMP.org的LNMP一键安装包，Oneinstack主要特点是版本更新很及时，特别适合愿意折腾的用户。</p>
<p>目前Oneinstack的PHP已经支持PHP 7.4了，喜欢尝鲜的朋友可以试试升级了，不过用于生产环境的话还是建议使用成熟的PHP版本，不容易出现问题。由于挖站否平时用Oneinstack建站，所以好多的折腾都是基于Oneinstack完成的，这篇就作一个收集整理汇总，以便于查找。</p>
<p><img src="/2020/04/oneinstack_00.jpg" alt="Oneinstack从入门到精通-Oneinstack安装与使用教程收集整理"></p>
<p>更多的<a href="https://wzfou.com/tag/vps-mianban/">主机面板</a>，这里有几个汇总专题可供参考：<a href="https://wzfou.com/solusvm-list/">SolusVM从入门到精通</a>、<a href="https://wzfou.com/vps-mianban/">服务器控制面板榜单</a>、<a href="https://wzfou.com/whmcs-jiaocheng/">WHMCS从入门到精通</a>。</p>
<h2 id="Oneinstack从入门到精通-Oneinstack安装与使用教程收集整理"><a href="#Oneinstack从入门到精通-Oneinstack安装与使用教程收集整理" class="headerlink" title="Oneinstack从入门到精通-Oneinstack安装与使用教程收集整理"></a>Oneinstack从入门到精通-Oneinstack安装与使用教程收集整理</h2><p>目录</p>
<p>教程地址</p>
<p>主要内容</p>
<p><strong>安装</strong></p>
<p><a href="https://wzfou.com/oneinstack/">OneinStack一键安装</a></p>
<p>OneinStack一键安装脚本-轻松部署Let’s Encrypt证书配置Https站点</p>
<p><strong>防火墙</strong></p>
<p><a href="https://wzfou.com/question/6311/">Ping超时问题</a></p>
<p>解决ONEINSTACK PING超时问题-LINUX防火墙规则修改与恢复</p>
<p><strong>模块</strong></p>
<p><a href="https://wzfou.com/ngx-pagespeed/">ngx_pagespeed模块</a></p>
<p>PageSpeed服务器优化神器-Nginx部署ngx_pagespeed模块和加速效果体验</p>
<p><strong>Https</strong></p>
<p><a href="https://wzfou.com/https-ssl/">HTTPS和SSL优化</a></p>
<p>八个HTTPS和SSL优化使用心得-减少等待时间和降低Https性能损耗</p>
<p><strong>HSTS</strong></p>
<p><a href="https://wzfou.com/hsts-preload/">启用HSTS</a></p>
<p>启用HSTS并加入HSTS Preload List让网站Https访问更加安全-附删除HSTS方法</p>
<p><strong>B-B-r</strong></p>
<p><a href="https://wzfou.com/vps-jiasu/">一键安装加速模块</a></p>
<p>VPS主机加速方法 – 一键安装加速模块 从“软件”上提升VPS主机速度</p>
<p><strong>优化</strong></p>
<p><a href="https://wzfou.com/tlsv1-3-brotli/">开启TLSV1.3和Brotli压缩</a></p>
<p>网站优化加速-开启TLSV1.3和Brotli压缩-Oneinstack,LNMP,宝塔面板</p>
<p><strong>缓存</strong></p>
<p><a href="https://wzfou.com/nginx-fastcgi-cache/">Nginx fastcgi_cache缓存</a></p>
<p>WordPress开启Nginx fastcgi_cache缓存加速方法-Nginx配置实例</p>
<p><strong>内存</strong></p>
<p><a href="https://wzfou.com/php-fpm/">php-fpm优化</a></p>
<p>Linux的php-fpm优化心得-php-fpm进程占用内存大和不释放内存问题</p>
<p><strong>TTRSS</strong></p>
<p><a href="https://wzfou.com/tt-rss/">自建RSS阅读器</a></p>
<p>自建RSS阅读器Tiny Tiny RSS安装和配置自动更新,全文RSS,更换主题,手机RSS登录</p>
<p><strong>NextCloud</strong></p>
<p><a href="https://wzfou.com/nextcloud-lixian/">安装NextCloud</a></p>
<p>Oneinstack安装NextCloud以及使用Aria2离线下载和ocDownloader插件配置</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>OneinStack</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenVZ VPS 安装 Google BBR 一键脚本</title>
    <url>/2017/11/19/openvz-vps-%E5%AE%89%E8%A3%85-google-bbr-%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p><strong>仅限于OpenVZ VPS</strong>，共2个，第一个手动安装，第二个自动安装。 KVM或者Xen VPS、独立服务器请使用： 1、<a href="https://zhujiwiki.com/10156.html">TCP加速：BBR 一键安装</a> 2、<a href="https://zhujiwiki.com/11016.html">TCP加速：BBR 增强版 for Debian&#x2F;Ubuntu</a></p>
<p>一、下面这个适用于Ubuntu 14.04 x64、Ubuntu 16.04 x64、CentOS 6 x64、CentOS 7 x64等64位系统，要求 glibc 版本 2.14 以上。</p>
<p>SSH下操作。 <strong>（一）、停止防火墙</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl disable firewalld</span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>

<p><strong>（二）、安装BBR</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://zhujiwiki.com/usr/uploads/2017/11/ovz-bbr-installer.sh</span><br><span class="line">chmod +x ovz-bbr-installer.sh</span><br><span class="line">./ovz-bbr-installer.sh</span><br></pre></td></tr></table></figure>

<p>需要配置的有如下几个选项： 1.需要加速的端口，即的 SS 端口。加速开启之后，流量会先经过 BBR 处理，之后再发送给后端的 SS。 2.可能需要配置 “公网接口名称”，即你服务器上具有公网 IP 的接口名称。</p>
<p><strong>（三）、卸载BBR</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./ovz-bbr-installer.sh uninstall</span><br></pre></td></tr></table></figure>

<p><strong>（四）、判断 BBR 已正常工作</strong> ping 10.0.0.2，如果能通，说明 bbr 已经启动。</p>
<p>via：<a href="https://blog.kuoruan.com/116.html">https://blog.kuoruan.com/116.html</a></p>
<p>二、下面是其他博主的一键安装包（LKL BBR RINETD），适用于CentOS&#x2F;RHEL7+，Ubuntu15+，Debian8+：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl https://zhujiwiki.com/usr/uploads/2017/11/rinetd.sh  bash</span><br></pre></td></tr></table></figure>

<p><img src="https://www.jarods.org/wp-content/uploads/2017/11/3198464223.jpg" alt="ovz-bbr-port.jpg" title="ovz-bbr-port.jpg"></p>
<p>via：<a href="https://github.com/mixool/rinetd">https://github.com/mixool/rinetd</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>BBR</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs</title>
    <url>/2022/01/05/nodejs/</url>
    <content><![CDATA[<p>本文记录nvm、node、npm、yarn安装过程</p>
<h1 id="Windows下安装"><a href="#Windows下安装" class="headerlink" title="Windows下安装"></a>Windows下安装</h1><p>nvm-windowns下载 <a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p>
<h2 id="切换nvm安装源："><a href="#切换nvm安装源：" class="headerlink" title="切换nvm安装源："></a>切换nvm安装源：</h2><p>在 nvm 的安装路径下，找到 settings.txt，在后面加上这两行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure>

<p>切换npm安装源：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h1 id="Linux下安装"><a href="#Linux下安装" class="headerlink" title="Linux下安装"></a>Linux下安装</h1><p>官方地址：<a href="https://github.com/creationix/nvm">https://github.com/creationix/nvm</a></p>
<p>Linux下推荐使用nvm来安装nodejs</p>
<h2 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh  bash</span><br></pre></td></tr></table></figure>

<p>脚本会自动把以下执行环境写入.bashrc：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br><span class="line">[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure>

<h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install 10.8.0</span><br></pre></td></tr></table></figure>

<h3 id="国内使用淘宝node镜像，加速nodejs安装过程："><a href="#国内使用淘宝node镜像，加速nodejs安装过程：" class="headerlink" title="国内使用淘宝node镜像，加速nodejs安装过程："></a>国内使用淘宝node镜像，加速nodejs安装过程：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node/</span><br><span class="line">nvm install 10.11.0</span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node/ nvm install 10.11.0</span><br></pre></td></tr></table></figure>

<h3 id="Linux使用淘宝NPM镜像："><a href="#Linux使用淘宝NPM镜像：" class="headerlink" title="Linux使用淘宝NPM镜像："></a>Linux使用淘宝NPM镜像：</h3><p>编辑 ~&#x2F;.npmrc，添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">registry=https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure>

<p>若不想将本源设置为默认源，只想使用本源安装某个软件包，可在安装包时采用以下用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm --registry https://npm.taobao.org/mirrors/npm/ install &lt;packagename&gt;</span><br></pre></td></tr></table></figure>

<h1 id="windows下安装"><a href="#windows下安装" class="headerlink" title="windows下安装"></a>windows下安装</h1><p>直接去github下载msi安装包： <a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p>
<p>windows使用淘宝node镜像：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm node_mirror https://npm.taobao.org/mirrors/node/</span><br></pre></td></tr></table></figure>

<p>windows使用淘宝npm镜像：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure>

<h1 id="CNPM"><a href="#CNPM" class="headerlink" title="CNPM"></a>CNPM</h1><p>安装方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h1 id="YARN"><a href="#YARN" class="headerlink" title="YARN"></a>YARN</h1><p>下载地址：<a href="https://github.com/yarnpkg/yarn/releases">https://github.com/yarnpkg/yarn/releases</a></p>
<p>使用文档：<a href="https://yarnpkg.com/zh-Hans/docs">https://yarnpkg.com/zh-Hans/docs</a></p>
<h3 id="升级自身yarn"><a href="#升级自身yarn" class="headerlink" title="升级自身yarn"></a>升级自身yarn</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install yarn -g</span><br></pre></td></tr></table></figure>

<p>查看yarn版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn -v</span><br></pre></td></tr></table></figure>

<p>Yarn 设置淘宝镜像</p>
<p>1.查询当前配置的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn config get registry</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.设置成淘宝镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn config set registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>

<p>3.显示当前安装的全局yarn依赖库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn global list</span><br></pre></td></tr></table></figure>

<h3 id="npm与yarn-CLI-命令比较"><a href="#npm与yarn-CLI-命令比较" class="headerlink" title="npm与yarn CLI 命令比较"></a>npm与yarn CLI 命令比较</h3><p>npm (v5)</p>
<p>Yarn</p>
<p>npm install</p>
<p>yarn install</p>
<p>(不适用)</p>
<p>yarn install –flat</p>
<p>(不适用)</p>
<p>yarn install –har</p>
<p>npm install –no-package-lock</p>
<p>yarn install –no-lockfile</p>
<p>(不适用)</p>
<p>yarn install –pure-lockfile</p>
<p>npm install [package]</p>
<p>yarn add [package]</p>
<p>npm install [package] –save-dev</p>
<p>yarn add [package] –dev</p>
<p>(不适用)</p>
<p>yarn add [package] –peer</p>
<p>npm install [package] –save-optional</p>
<p>yarn add [package] –optional</p>
<p>npm install [package] –save-exact</p>
<p>yarn add [package] –exact</p>
<p>(不适用)</p>
<p>yarn add [package] –tilde</p>
<p>npm install [package] –global</p>
<p>yarn global add [package]</p>
<p>npm update –global</p>
<p>yarn global upgrade</p>
<p>npm rebuild</p>
<p>yarn install –force</p>
<p>npm uninstall [package]</p>
<p>yarn remove [package]</p>
<p>npm cache clean</p>
<p>yarn cache clean [package]</p>
<p>rm -rf node_modules &amp;&amp; npm install</p>
<p>yarn upgrade</p>
<h3 id="异常处理-使用yarn升级vue-cli后显示-‘vue’-不是内部或外部命令，也不是可运行的程序"><a href="#异常处理-使用yarn升级vue-cli后显示-‘vue’-不是内部或外部命令，也不是可运行的程序" class="headerlink" title="异常处理: 使用yarn升级vue cli后显示 ‘vue’ 不是内部或外部命令，也不是可运行的程序"></a>异常处理: 使用yarn升级vue cli后显示 ‘vue’ 不是内部或外部命令，也不是可运行的程序</h3><p>解决办法：把yarn的包执行目录添加到系统环境变量里。</p>
<p>处理方式：</p>
<p>1.执行yarn global dir 显示出yarn安装路径</p>
<p>2.定位到Yarn\bin目录，把该路径复制到系统环境变量Path里</p>
<h1 id="nvm使用方法"><a href="#nvm使用方法" class="headerlink" title="nvm使用方法"></a>nvm使用方法</h1><p>列出全部可以安装的版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm ls-remote</span><br></pre></td></tr></table></figure>

<p>（windows下为）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm list available</span><br></pre></td></tr></table></figure>

<p>安装指定版本nodejs</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install 9.3.0</span><br></pre></td></tr></table></figure>

<p>切换指定版本，切换效果是全局的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm use v8.0.0</span><br></pre></td></tr></table></figure>

<p>查看当前使用的版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm current</span><br></pre></td></tr></table></figure>

<p>查看本地安装版本，这个命令也能看到当前使用的是哪个版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm ls --depth 0</span><br></pre></td></tr></table></figure>

<p>清空模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf node_modules/ &amp;&amp; npm cache clean &amp;&amp; npm prune</span><br></pre></td></tr></table></figure>

<h1 id="npm的常用命令"><a href="#npm的常用命令" class="headerlink" title="npm的常用命令:"></a>npm的常用命令:</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm ci                #使用安装package.lock.json安装，锁定依赖版本</span><br><span class="line"></span><br><span class="line">npm -v                #显示版本，检查npm 是否正确安装。</span><br><span class="line"> </span><br><span class="line">npm install express   #安装express模块</span><br><span class="line"> </span><br><span class="line">npm install -g express  #全局安装express模块</span><br><span class="line"> </span><br><span class="line">npm list              #列出已安装模块</span><br><span class="line"> </span><br><span class="line">npm show express      #显示模块详情</span><br><span class="line"> </span><br><span class="line">npm update            #升级当前目录下的项目的所有模块</span><br><span class="line"> </span><br><span class="line">npm update express    #升级当前目录下的项目的指定模块</span><br><span class="line"> </span><br><span class="line">npm update -g express  #升级全局安装的express模块</span><br><span class="line"> </span><br><span class="line">npm uninstall express  #删除指定的模块</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="生成package-json文件"><a href="#生成package-json文件" class="headerlink" title="生成package.json文件"></a>生成package.json文件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node init</span><br></pre></td></tr></table></figure>

<h1 id="其他安装方式-old"><a href="#其他安装方式-old" class="headerlink" title="其他安装方式 old"></a>其他安装方式 old</h1><p>快速安装过程:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install -y nodejs npm</span><br><span class="line">npm config set registry http://registry.npm.taobao.org  #使用淘宝源</span><br><span class="line">npm install -g n     #安装n模块</span><br><span class="line">n stable#升级到nodejs最新稳定版</span><br></pre></td></tr></table></figure>

<p>n后面也可以跟随版本号比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n v0.10.26</span><br><span class="line">n 0.10.26</span><br></pre></td></tr></table></figure>

<p>编译安装：</p>
<p>nodejs下载地址：<a href="https://nodejs.org/dist/">https://nodejs.org/dist/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://nodejs.org/download/rc/v4.0.0-rc.1/node-v4.0.0-rc.1.tar.gz</span><br><span class="line">tar -zxvf node-v4.0.0-rc.1.tar.gz</span><br><span class="line">cd node-v4.0.0-rc.1</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">node -v</span><br></pre></td></tr></table></figure>

<p>源码安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /tmp &amp;&amp; \</span><br><span class="line">wget http://nodejs.org/dist/node-latest.tar.gz &amp;&amp; \</span><br><span class="line">tar xvzf node-latest.tar.gz &amp;&amp; \</span><br><span class="line">rm -f node-latest.tar.gz &amp;&amp; \</span><br><span class="line">cd node-v* &amp;&amp; \</span><br><span class="line">./configure &amp;&amp; \</span><br><span class="line">CXX=&quot;g++ -Wno-unused-local-typedefs&quot; make &amp;&amp; \</span><br><span class="line">CXX=&quot;g++ -Wno-unused-local-typedefs&quot; make install &amp;&amp; \</span><br><span class="line">cd /tmp &amp;&amp; \</span><br><span class="line">rm -rf /tmp/node-v* &amp;&amp; \</span><br><span class="line">npm install -g npm &amp;&amp; \</span><br><span class="line">printf &#x27;\n# Node.js\nexport PATH=&quot;node_modules/.bin:$PATH&quot;&#x27; &gt;&gt; /root/.bashrc</span><br></pre></td></tr></table></figure>

<h1 id="ERROR"><a href="#ERROR" class="headerlink" title="ERROR"></a>ERROR</h1><h3 id="MSBUILD-error-MSB3428-未能加载-Visual-C-组件“VCBuild-exe”。"><a href="#MSBUILD-error-MSB3428-未能加载-Visual-C-组件“VCBuild-exe”。" class="headerlink" title="MSBUILD : error MSB3428: 未能加载 Visual C++ 组件“VCBuild.exe”。"></a>MSBUILD : error MSB3428: 未能加载 Visual C++ 组件“VCBuild.exe”。</h3><p>解决方法：npm install –global –production windows-build-tools （全局安装windows构建工具）</p>
<h3 id="Module-build-failed-Error-ENOENT-no-such-file-or-directory-scandir-node-sass"><a href="#Module-build-failed-Error-ENOENT-no-such-file-or-directory-scandir-node-sass" class="headerlink" title="Module build failed: Error: ENOENT: no such file or directory, scandir node-sass"></a>Module build failed: Error: ENOENT: no such file or directory, scandir node-sass</h3><p>解决办法：npm rebuild node-sass</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenVZ VPS使用BBR加速之优化</title>
    <url>/2017/07/09/openvz-vps%E4%BD%BF%E7%94%A8bbr%E5%8A%A0%E9%80%9F%E4%B9%8B%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>建议系统为Debian 8 64、Centos 7及以上。</p>
<p>1、下载脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/mixool/rinetd/master/rinetd_bbr_powered -O /root/rinetd</span><br></pre></td></tr></table></figure>

<p>2、设置权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x rinetd</span><br></pre></td></tr></table></figure>

<p>3、添加监听地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi rinetd.conf</span><br></pre></td></tr></table></figure>

<p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># bindadress bindport connectaddress connectport</span><br><span class="line">0.0.0.0 443 0.0.0.0 443</span><br><span class="line">0.0.0.0 80 0.0.0.0 80</span><br></pre></td></tr></table></figure>

<p>这块可以添加其他端口，如你的ss端口为9001，则再添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0.0.0.0 9001 0.0.0.0 9001</span><br></pre></td></tr></table></figure>

<p>4、设置开机启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/systemd/system/rinetd.service</span><br></pre></td></tr></table></figure>

<p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=rinetd</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/root/rinetd -f -c /root/rinetd.conf raw venet0:0</span><br><span class="line">Restart=always</span><br><span class="line">  </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>5、启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable rinetd.service &amp;&amp; systemctl start rinetd.service</span><br></pre></td></tr></table></figure>

<p>6、效果 比较明显，对于OpenVZ VPS来说，救星啊。 我的alpharacks ovz vps，用了后，轻松1080P。 <img src="https://www.jarods.org/wp-content/uploads/2017/07/3964594940.jpg" alt="alpharacks-bbr.jpg"></p>
<p>via：<a href="http://xpsss.com/851.html">http://xpsss.com/851.html</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>BBR</tag>
        <tag>OpenVZ</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenVZ 魔改 BBR - lkl-rinetd 一键脚本</title>
    <url>/2018/11/14/openvz-%E9%AD%94%E6%94%B9-bbr-lkl-rinetd-%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>这里是 <a href="https://github.com/tcp-nanqinlang/wiki/wiki/general">tcp_nanqinlang</a> 的 <code>lkl-rinetd</code> 分支。</p>
<p>本项目 Github 地址： <a href="https://github.com/tcp-nanqinlang/lkl-rinetd">https://github.com/tcp-nanqinlang/lkl-rinetd</a></p>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a><a href="https://github.com/tcp-nanqinlang/wiki/wiki/lkl-rinetd#%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8"></a>开始使用</h2><p>要求以下：</p>
<ul>
<li>OpenVZ</li>
<li>64 bit</li>
<li>Ram &gt;&gt; 64M</li>
</ul>
<p>更新： 2018-03-24 新增 多网卡 适配</p>
<h3 id="Debian-or-Ubuntu"><a href="#Debian-or-Ubuntu" class="headerlink" title="Debian or Ubuntu"></a><a href="https://github.com/tcp-nanqinlang/wiki/wiki/lkl-rinetd#debian-or-ubuntu"></a>Debian or Ubuntu</h3><p>适用于 <code>单网卡（单 IP）</code> 服务器：</p>
<p>wget <a href="https://github.com/tcp-nanqinlang/lkl-rinetd/releases/download/1.1.0/tcp/_nanqinlang-rinetd-debianorubuntu.sh">https://github.com/tcp-nanqinlang/lkl-rinetd/releases/download/1.1.0/tcp\_nanqinlang-rinetd-debianorubuntu.sh</a><br>bash tcp_nanqinlang-rinetd-debianorubuntu.sh</p>
<p>适用于 <code>多网卡（多 IP）</code> 服务器，会为所有网卡（所有 IP）提供加速：</p>
<p>wget <a href="https://github.com/tcp-nanqinlang/lkl-rinetd/releases/download/1.1.0/tcp/_nanqinlang-rinetd-debianorubuntu-multiNIC.sh">https://github.com/tcp-nanqinlang/lkl-rinetd/releases/download/1.1.0/tcp\_nanqinlang-rinetd-debianorubuntu-multiNIC.sh</a><br>bash tcp_nanqinlang-rinetd-debianorubuntu-multiNIC.sh</p>
<h3 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a><a href="https://github.com/tcp-nanqinlang/wiki/wiki/lkl-rinetd#centos-7"></a>CentOS 7</h3><p>和上面一样，也分 单网卡 和 多网卡 版本：</p>
<p># 单网卡<br>wget <a href="https://github.com/tcp-nanqinlang/lkl-rinetd/releases/download/1.1.0/tcp/_nanqinlang-rinetd-centos.sh">https://github.com/tcp-nanqinlang/lkl-rinetd/releases/download/1.1.0/tcp\_nanqinlang-rinetd-centos.sh</a><br>bash tcp_nanqinlang-rinetd-centos.sh</p>
<p># 多网卡<br>wget <a href="https://github.com/tcp-nanqinlang/lkl-rinetd/releases/download/1.1.0/tcp/_nanqinlang-rinetd-centos-multiNIC.sh">https://github.com/tcp-nanqinlang/lkl-rinetd/releases/download/1.1.0/tcp\_nanqinlang-rinetd-centos-multiNIC.sh</a><br>bash tcp_nanqinlang-rinetd-centos-multiNIC.sh</p>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a><a href="https://github.com/tcp-nanqinlang/wiki/wiki/lkl-rinetd#%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E"></a>使用说明</h2><p>以下进行脚本使用说明：</p>
<h3 id="安装-lkl-rinetd"><a href="#安装-lkl-rinetd" class="headerlink" title="安装 lkl-rinetd"></a><a href="https://github.com/tcp-nanqinlang/wiki/wiki/lkl-rinetd#%E5%AE%89%E8%A3%85-lkl-rinetd"></a>安装 lkl-rinetd</h3><p>此命令用于安装 lkl-rinetd。</p>
<p>在 <code>/home/tcp_nanqinlang</code> 进行安装，所以安装完成后不要动这个文件夹了（除非你想修改端口）。</p>
<p>安装过程中，会提示输入端口号。多个端口号用空格隔开。不支持端口段。</p>
<p>安装完成后，会开启 lkl-rinetd。以后重启机器也会随开机自启。</p>
<p>使用前请注意自己的 iptables 相关设置。</p>
<h3 id="检查-lkl-rinetd-运行状态"><a href="#检查-lkl-rinetd-运行状态" class="headerlink" title="检查 lkl-rinetd 运行状态"></a><a href="https://github.com/tcp-nanqinlang/wiki/wiki/lkl-rinetd#%E6%A3%80%E6%9F%A5-lkl-rinetd-%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81"></a>检查 lkl-rinetd 运行状态</h3><p>此命令用于检查 lkl-rinetd 运行与否，可通过返回的提示判断。</p>
<h3 id="卸载-lkl-rinetd"><a href="#卸载-lkl-rinetd" class="headerlink" title="卸载 lkl-rinetd"></a><a href="https://github.com/tcp-nanqinlang/wiki/wiki/lkl-rinetd#%E5%8D%B8%E8%BD%BD-lkl-rinetd"></a>卸载 lkl-rinetd</h3><p>运行此命令会删除 &#x2F;home&#x2F;tcp_nanqinlang 、移除 rc.local 对应开机自启项和清空 iptables raw 表。属于完整卸载，不会有残留。且卸载后无需重启。</p>
<h2 id="参考-issue"><a href="#参考-issue" class="headerlink" title="参考 issue"></a><a href="https://github.com/tcp-nanqinlang/wiki/wiki/lkl-rinetd#%E5%8F%82%E8%80%83-issue"></a>参考 issue</h2><p><a href="https://github.com/sometimesnaiveorg/mainland/issues/85">https://github.com/sometimesnaiveorg/mainland/issues/85</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>BBR</tag>
        <tag>OpenVZ</tag>
        <tag>lkl</tag>
        <tag>rinetd</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenVZ 魔改 BBR - lkl-haproxy 一键脚本</title>
    <url>/2018/11/14/openvz-%E9%AD%94%E6%94%B9-bbr-lkl-haproxy-%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>这里是 <a href="https://github.com/tcp-nanqinlang/wiki/wiki/general">tcp_nanqinlang</a> 的 <code>lkl-haproxy</code> 分支。</p>
<p>本项目 Github 地址： <a href="https://github.com/tcp-nanqinlang/lkl-haproxy">https://github.com/tcp-nanqinlang/lkl-haproxy</a></p>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a><a href="https://github.com/tcp-nanqinlang/wiki/wiki/lkl-haproxy#%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8"></a>开始使用</h2><p>以下适用于 Debian 8+ 环境：</p>
<p># Debian 8+<br># 64 bit<br># ldd &gt; &#x3D; 2.14<br># tun&#x2F;tap enabled<br>wget <a href="https://github.com/tcp-nanqinlang/lkl-haproxy/releases/download/1.1.1/tcp/_nanqinlang-haproxy-debian.sh">https://github.com/tcp-nanqinlang/lkl-haproxy/releases/download/1.1.1/tcp\_nanqinlang-haproxy-debian.sh</a><br>bash tcp_nanqinlang-haproxy-debian.sh</p>
<p>以下适用于 CentOS 7 环境：</p>
<p># CentOS 7<br># 64 bit<br># ldd &gt; &#x3D; 2.14<br># tun&#x2F;tap enabled<br>wget <a href="https://github.com/tcp-nanqinlang/lkl-haproxy/releases/download/1.1.1/tcp/_nanqinlang-haproxy-centos.sh">https://github.com/tcp-nanqinlang/lkl-haproxy/releases/download/1.1.1/tcp\_nanqinlang-haproxy-centos.sh</a><br>bash tcp_nanqinlang-haproxy-centos.sh</p>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a><a href="https://github.com/tcp-nanqinlang/wiki/wiki/lkl-haproxy#%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E"></a>使用说明</h2><p>以下进行脚本使用说明：</p>
<h3 id="安装-lkl-haproxy"><a href="#安装-lkl-haproxy" class="headerlink" title="安装 lkl-haproxy"></a><a href="https://github.com/tcp-nanqinlang/wiki/wiki/lkl-haproxy#%E5%AE%89%E8%A3%85-lkl-haproxy"></a>安装 lkl-haproxy</h3><p>此命令用于安装 lkl-haproxy。</p>
<p>在 <code>/home/tcp_nanqinlang</code> 进行安装，所以安装完成后不要动这个文件夹了（除非你想修改端口）。</p>
<p>安装过程中，会提示你选择<code>单个端口</code>或<code>端口段</code>输入，具体已在运行脚本的提示中有说明，这里不再赘述。</p>
<p>安装完成后，会开启 lkl-haproxy。以后重启机器也会随开机自启。</p>
<p>以后若需要修改转发端口，请将 <code>/home/tcp_nanqinlang/haproxy.cfg</code> 中的端口号和 <code>/home/tcp_nanqinlang/redirect.sh</code> 中的端口号改为你想要的端口或端口段，修改完成后重启服务器。</p>
<p>使用前请注意自己的 iptables 相关设置。</p>
<h3 id="检查-lkl-haproxy-运行状态"><a href="#检查-lkl-haproxy-运行状态" class="headerlink" title="检查 lkl-haproxy 运行状态"></a><a href="https://github.com/tcp-nanqinlang/wiki/wiki/lkl-haproxy#%E6%A3%80%E6%9F%A5-lkl-haproxy-%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81"></a>检查 lkl-haproxy 运行状态</h3><p>此命令用于检查 lkl-haproxy 运行与否，可通过返回的提示判断。</p>
<h3 id="卸载-lkl-haproxy"><a href="#卸载-lkl-haproxy" class="headerlink" title="卸载 lkl-haproxy"></a><a href="https://github.com/tcp-nanqinlang/wiki/wiki/lkl-haproxy#%E5%8D%B8%E8%BD%BD-lkl-haproxy"></a>卸载 lkl-haproxy</h3><p>运行此命令会卸载 haproxy、删除 &#x2F;home&#x2F;tcp_nanqinlang、移除 rc.local 开机自启项。稍后请自行移除 <code>iptables</code> 相关规则。</p>
<h2 id="相关-issue"><a href="#相关-issue" class="headerlink" title="相关 issue"></a><a href="https://github.com/tcp-nanqinlang/wiki/wiki/lkl-haproxy#%E7%9B%B8%E5%85%B3-issue"></a>相关 issue</h2><p><a href="https://github.com/sometimesnaiveorg/mainland/issues/37">https://github.com/sometimesnaiveorg/mainland/issues/37</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>BBR</tag>
        <tag>lkl-haproxy</tag>
      </tags>
  </entry>
  <entry>
    <title>overture：自建无污染的DNS服务</title>
    <url>/2019/11/29/overture%EF%BC%9A%E8%87%AA%E5%BB%BA%E6%97%A0%E6%B1%A1%E6%9F%93%E7%9A%84dns%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>overture是一个用Go开发的DNS服务器，我个人觉得这是个神器，配置简单，使用方便。就是比较小众，用的人不多。。</p>
<p>以下部署步骤请在国内服务器或者本地进行。我这边就在本地的PVE开了一台Debian9部署。</p>
<p>首先在这里下载最新版本的压缩包：</p>
<p><a href="https://github.com/shawn1m/overture/releases">https://github.com/shawn1m/overture/releases</a></p>
<p>用ROOT权限登录进去安装一些需要用到的工具：</p>
<p>apt -y install dnsutils lrzsz unzip supervisor</p>
<p>新建目录然后用rz命令把下载好的压缩包传到Debian内：</p>
<p>mkdir -p &#x2F;opt&#x2F;overture &amp;&amp; cd &#x2F;opt&#x2F;overture &amp;&amp; rz</p>
<p>解压&#x2F;重命名：</p>
<p>unzip overture-linux-amd64.zip<br>cp overture-linux-amd64 overture</p>
<p>下载GFWLIST&#x2F;CHNROUTER列表：</p>
<p>wget <a href="https://cokebar.github.io/gfwlist2dnsmasq/gfwlist/_domain.txt">https://cokebar.github.io/gfwlist2dnsmasq/gfwlist\_domain.txt</a> wget <a href="https://raw.githubusercontent.com/17mon/china/_ip/_list/master/china/_ip/_list.txt">https://raw.githubusercontent.com/17mon/china\_ip\_list/master/china\_ip\_list.txt</a></p>
<p>编辑OVERTURE的配置文件：</p>
<p>nano &#x2F;opt&#x2F;overture&#x2F;config.json</p>
<p>下面是我的配置：</p>
<p>{<br>  “BindAddress”: “:53”,<br>  “DebugHTTPAddress”: “127.0.0.1:5555”,<br>  “PrimaryDNS”: [<br>    {<br>      “Name”: “DNSPod”,<br>      “Address”: “119.29.29.29:53”,<br>      “Protocol”: “udp”,<br>      “SOCKS5Address”: “”,<br>      “Timeout”: 6,<br>      “EDNSClientSubnet”: {<br>        “Policy”: “disable”,<br>        “ExternalIP”: “”,<br>        “NoCookie”: true<br>      }<br>    },<br>    {<br>      “Name”: “AliDNS”,<br>      “Address”: “223.5.5.5:53”,<br>      “Protocol”: “udp”,<br>      “SOCKS5Address”: “”,<br>      “Timeout”: 6,<br>      “EDNSClientSubnet”: {<br>        “Policy”: “disable”,<br>        “ExternalIP”: “”,<br>        “NoCookie”: true<br>      }<br>    }<br>  ],<br>  “AlternativeDNS”: [<br>    {<br>      “Name”: “CloudFlareDNS”,<br>      “Address”: “one.one.one.one:853”,<br>      “Protocol”: “tcp-tls”,<br>      “SOCKS5Address”: “”,<br>      “Timeout”: 6,<br>      “EDNSClientSubnet”: {<br>        “Policy”: “disable”,<br>        “ExternalIP”: “”,<br>        “NoCookie”: true<br>      }<br>    },<br>    {<br>      “Name”: “GoogleDNS”,<br>      “Address”: “dns.google:853”,<br>      “Protocol”: “tcp-tls”,<br>      “SOCKS5Address”: “”,<br>      “Timeout”: 6,<br>      “EDNSClientSubnet”: {<br>        “Policy”: “disable”,<br>        “ExternalIP”: “”,<br>        “NoCookie”: true<br>      }<br>    }<br>  ],<br>  “OnlyPrimaryDNS”: false,<br>  “IPv6UseAlternativeDNS”: false,<br>  “WhenPrimaryDNSAnswerNoneUse”: “PrimaryDNS”,<br>  “IPNetworkFile”: {<br>    “Primary”: “.&#x2F;china_ip_list.txt”,<br>    “Alternative”: “”<br>  },<br>  “DomainFile”: {<br>    “Primary”: “”,<br>    “Alternative”: “.&#x2F;gfwlist_domain.txt”,<br>    “Matcher”:  “regex-list”<br>  },<br>  “HostsFile”: “.&#x2F;hosts_sample”,<br>  “MinimumTTL”: 0,<br>  “DomainTTLFile” : “.&#x2F;domain_ttl_sample”,<br>  “CacheSize” : 0,<br>  “RejectQType”: [255]<br>}</p>
<p>新建supervisor配置文件：</p>
<p>nano &#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;overture.conf</p>
<p>写入如下配置：</p>
<p>[program:overture] priority=1 directory=&#x2F;opt&#x2F;overture<br>command=&#x2F;opt&#x2F;overture&#x2F;overture -c &#x2F;opt&#x2F;overture&#x2F;config.json<br>autostart=true autorestart=true redirect_stderr=true stdout_logfile=&#x2F;var&#x2F;log&#x2F;supervisor&#x2F;overture.log</p>
<p>更新supervisor配置，然后查看overture的运行状态：</p>
<p>supervisorctl update<br>supervisorctl status overture</p>
<p>是RUNNING状态就OK了，接下来使用dig命令进行测试，正好就拿我这个破博客测试吧，我这个域名就是被污染的，如果能够解析出正确的IP那么就说明overture工作是正常的：</p>
<p>dig @127.0.0.1 lala.im</p>
<p>OK没问题：</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/11/lala.im_2019-10-03_12-44-55.png"></p>
<p>那么现在局域网内的其他机器修改DNS地址为这台Debian的IP即可享用无污染DNS服务了：</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/11/lala.im_2019-10-03_12-47-56.png"></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>DNS</tag>
        <tag>Overture</tag>
      </tags>
  </entry>
  <entry>
    <title>openvz虚拟的VPS安装netspeeder实现加速</title>
    <url>/2018/06/29/openvz%E8%99%9A%E6%8B%9F%E7%9A%84vps%E5%AE%89%E8%A3%85netspeeder%E5%AE%9E%E7%8E%B0%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<p>1.net-speeder installation wget <a href="https://coding.net/u/njzhenghao/p/download/git/raw/master/net/_speeder-installer.sh">https://coding.net/u/njzhenghao/p/download/git/raw/master/net\_speeder-installer.sh</a> bash net_speeder–installer.sh 2.Port Acceleration Here acceleration on all ports nohup &#x2F;usr&#x2F;local&#x2F;net_speeder&#x2F;net_speeder venet0 “ip” &#x2F;dev&#x2F;null 2&gt;1 &amp;;echo “nohup &#x2F;usr&#x2F;local&#x2F;net_speeder&#x2F;net_speeder venet0 “ip” &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1″ &gt;&gt; &#x2F;etc&#x2F;rc.local;</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>OpenVZ</tag>
        <tag>netspeeder</tag>
      </tags>
  </entry>
  <entry>
    <title>Pi-Hole 自建DNS去广告（安装篇）</title>
    <url>/2020/04/05/pi-hole-%E8%87%AA%E5%BB%BAdns%E5%8E%BB%E5%B9%BF%E5%91%8A%EF%BC%88%E5%AE%89%E8%A3%85%E7%AF%87%EF%BC%89/</url>
    <content><![CDATA[<h3 id="0x01-Pi-Hole简介"><a href="#0x01-Pi-Hole简介" class="headerlink" title="0x01 Pi-Hole简介"></a>0x01 Pi-Hole简介</h3><blockquote>
<p>Pi-Hole是一个比较好用的自建DNS去广告方案，除阻止广告外，Pi-hole还提供了一个信息丰富的Web界面，可显示网络上正在查询的所有域的统计信息。</p>
</blockquote>
<h3 id="0x02-开始安装"><a href="#0x02-开始安装" class="headerlink" title="0x02 开始安装"></a>0x02 开始安装</h3><blockquote>
<p><a href="https://github.com/pi-hole/pi-hole"><strong>Pi-Hole GitHub地址</strong></a> <a href="https://docs.pi-hole.net/"><strong>Pi-Hole文档</strong></a></p>
</blockquote>
<p>Pi-Hole 的安装还是比较简单的，只需要一行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装Curl</span></span><br><span class="line">yum -y install curl</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装Pi-Hole</span></span><br><span class="line">curl -sSL https://install.pi-hole.net  bash</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>开始安装</strong></p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/3494593723.png"></p>
<blockquote>
<p><strong>推荐使用的PHP版本，直接YES</strong></p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/531241356.png"></p>
<blockquote>
<p><strong>提示系统上正在运行SELinux，一定要关闭SELinux，否则Web管理界面无法正常运行！！！</strong></p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/952465347.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">临时关闭SELinux</span></span><br><span class="line">setenforce 0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">永久关闭SELinux</span></span><br><span class="line">vim /etc/sysconfig/selinux</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SELINUX=enforcing 改为 SELINUX=disabled</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>下面一路回车过去就行</strong></p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/4246450777.png"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/954060440.png"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/2527302861.png"></p>
<blockquote>
<p><strong>首选DNS服务器,选Google就可以（忘了截图，从网上找了张）</strong></p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/2700399899.png"></p>
<blockquote>
<p><strong>广告过滤列表，可以根据自己需求选择，默认全选****广告过滤列表，可以根据自己需求选择，默认全选</strong></p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/3809775775.png"></p>
<blockquote>
<p><strong>选择协议，由于我暂时无IPV6，所以只勾选IPV4</strong></p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/3266936785.png"></p>
<blockquote>
<p><strong>确认IP信息</strong></p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/928696902.png"></p>
<blockquote>
<p><strong>继续回车</strong></p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/2191870302.png"></p>
<blockquote>
<p><strong>是否安装Web管理界面，选择安装</strong></p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/2718320144.png"></p>
<blockquote>
<p><strong>这个也装，否则Web管理界面无法正常使用</strong></p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/3468102405.png"></p>
<blockquote>
<p><strong>日志，直接回车</strong></p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/2665090561.png"></p>
<blockquote>
<p><strong>隐私设置，默认即可</strong></p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/2151213386.png"></p>
<blockquote>
<p><strong>接下来继续等待安装完成</strong></p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/4247291723.png"></p>
<blockquote>
<p><strong>开放防火墙http和dns端口权限给Pi-Hole</strong></p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/1539284596.png"></p>
<blockquote>
<p><strong>安装完成，显示了默认密码，根据所显示信息上的地址与密码进入Web管理界面</strong></p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/1601540478.png"></p>
<blockquote>
<p><strong>以下为Web管理界面</strong></p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/636154081.png"></p>
<blockquote>
<p><strong>点击左侧Login即可进入设置界面</strong></p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/2712928974.png"></p>
<blockquote>
<h3 id="至此，安装部分告一段落，使用教程后续会更新。"><a href="#至此，安装部分告一段落，使用教程后续会更新。" class="headerlink" title="至此，安装部分告一段落，使用教程后续会更新。"></a>至此，安装部分告一段落，使用教程后续会更新。</h3></blockquote>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>DNS</tag>
        <tag>Pi-Hole</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenVZ虚拟化（架构）VPS安装Windows一键安装脚本</title>
    <url>/2018/11/03/openvz%E8%99%9A%E6%8B%9F%E5%8C%96%EF%BC%88%E6%9E%B6%E6%9E%84%EF%BC%89vps%E5%AE%89%E8%A3%85windows%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>简介 很多人认为OpenVZ虚拟化的VPS都无法安装Windows，但事实上是可以通过Qemu来安装的，所以我就随便写了个破脚本：一键安装VNC+Qemu+附赠一个WinXP的iso</p>
<p>VNC脚本直接采用的：<a href="http://blog.ievo.top/index.php/archives/19/">http://blog.ievo.top/index.php/archives/19/</a></p>
<p>安装方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget  --no-check-certificate https://raw.githubusercontent.com/lpl2002/ovz_win/master/ovz_win.sh</span><br><span class="line">bash ovz_win.sh</span><br></pre></td></tr></table></figure>

<p>食用方法 1、下载系统ISO，这里我提供一个精简版XP的。建议Ghost</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://odrive.aptx.xin/System/DEEPIN-LITEXP-6.2.iso</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qemu-img create newvm.img 10G #newvm是硬盘，10G是硬盘大小</span><br><span class="line">qemu-system-i386 -cdrom winxp.iso -m 256 -boot d newvm.img  -k en-us #newvm.img是刚刚建立的硬盘，winxp.iso是你的系统安装盘 256M是内存大小</span><br></pre></td></tr></table></figure>

<p>3、安装后后期管理（注意提前打开远程桌面）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qemu-system-i386 -hda xitong.img -boot c -m 512M -k en-us -usb -redir tcp:3389::3389 //xitong.img是创立的硬盘，512M是内存 3389映射到虚拟机上</span><br></pre></td></tr></table></figure>

<p>注意事项 1、仅支持Debian 目前在Debian 8上测试通过。</p>
<p>2、安装VNC+桌面环境时可能需要输入键盘以及VNC密码</p>
<p>3、若有被主机商封VPS，本人拒不负责。</p>
<p>参考地址：<a href="http://www.kwx.gd/CentOSApp/CentOS-OpenVZ-Windows.html">http://www.kwx.gd/CentOSApp/CentOS-OpenVZ-Windows.html</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>OpenVZ</tag>
        <tag>VNC</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Portainer 轻松管理 Docker 的服务器Web面板</title>
    <url>/2019/02/27/portainer-%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86-docker-%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8web%E9%9D%A2%E6%9D%BF/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Portainer 是一款轻量级 Docker 容器管理平台，占用资源少，支持集群，支持权限分配。可以十分方便的用于管理自己服务器&#x2F;集群上的容器应用。博主本身也在使用，非常方便。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官网：<a href="https://www.portainer.io/installation/">https://www.portainer.io/installation/</a></p>
<p>在安装完Docker之后，运行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume create portainer_data</span><br><span class="line">docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br></pre></td></tr></table></figure>

<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><h3 id="仪表盘"><a href="#仪表盘" class="headerlink" title="仪表盘"></a>仪表盘</h3><p><img src="https://www.jarods.org/wp-content/uploads/2019/02/2019011718091244.png" alt="#工具# Portainer 轻松管理 Docker 的服务器Web面板"></p>
<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p><img src="https://www.jarods.org/wp-content/uploads/2019/02/2019011718091399.png" alt="#工具# Portainer 轻松管理 Docker 的服务器Web面板"></p>
<h3 id="容器列表"><a href="#容器列表" class="headerlink" title="容器列表"></a>容器列表</h3><p><img src="https://www.jarods.org/wp-content/uploads/2019/02/2019011718091510.png" alt="#工具# Portainer 轻松管理 Docker 的服务器Web面板"></p>
<h3 id="容器管理页"><a href="#容器管理页" class="headerlink" title="容器管理页"></a>容器管理页</h3><p><img src="https://www.jarods.org/wp-content/uploads/2019/02/tg_image_843139767.jpeg" alt="#工具# Portainer 轻松管理 Docker 的服务器Web面板"></p>
<h3 id="官方镜像列表"><a href="#官方镜像列表" class="headerlink" title="官方镜像列表"></a>官方镜像列表</h3><p><img src="https://www.jarods.org/wp-content/uploads/2019/02/2019011718091691.png" alt="#工具# Portainer 轻松管理 Docker 的服务器Web面板"></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Portainer</tag>
      </tags>
  </entry>
  <entry>
    <title>pacman常用命令</title>
    <url>/2021/12/14/pacman%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>pacman是arclinux中的软件管理工具，可以直接从网络上的软件仓库下载安装及删除软件，自动处理依赖关系，类似ubuntu中的apt-get。pacman也是widows上msys2默认的软件管理工具。</p>
<h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><ul>
<li><code>pacman -S 软件名</code>: 安装软件。也可以同时安装多个包，只需以空格分隔包名即可。</li>
<li><code>pacman -S --needed 软件名1 软件名2</code>: 安装软件，但不重新安装已经是最新的软件。</li>
<li><code>pacman -Sy 软件名</code>：安装软件前，先从远程仓库下载软件包数据库(数据库即所有软件列表)。</li>
<li><code>pacman -Sv 软件名</code>：在显示一些操作信息后执行安装。</li>
<li><code>pacman -Sw 软件名</code>: 只下载软件包，不安装。</li>
<li><code>pacman -U 软件名.pkg.tar.gz</code>：安装本地软件包。</li>
<li><code>pacman -U http://www.example.com/repo/example.pkg.tar.xz</code> : 安装一个远程包（不在 pacman 配置的源里面）。</li>
</ul>
<h3 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h3><ul>
<li><code>pacman -Sy</code>: 从服务器下载新的软件包数据库（实际上就是下载远程仓库最新软件列表到本地）。</li>
<li><code>pacman -Su</code>: 升级所有已安装的软件包。</li>
</ul>
<p>pacman 可以用一个命令就可以升级整个系统。花费的时间取决于系统有多老。这个命令会同步非本地(local)软件仓库并升级系统的软件包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -Syu</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在msys2中 pacman -Syu后需要重启一下msys2(关掉shell重新打开即可)。</p>
</blockquote>
<p>在Arch linux中，只支持系统完整升级，不支持部分升级。所以即使在msys2中，pacman -Syu也会升级整个系统。可以观察一下，即使新安装的msys2，pacman -Syu后，msys2安装目录占用空间立马变大很多。</p>
<p>如果升级时，网络比较慢，觉得既浪费时间又浪费硬盘，实在不想升级那么多东西，可以逐个软件包升级。用下面命令可以升级核心包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S --needed filesystem msys2-runtime bash libreadline libiconv libarchive libgpgme libcurl pacman ncurses libintl</span><br></pre></td></tr></table></figure>

<h3 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h3><ul>
<li><code>pacman -R 软件名</code>: 该命令将只删除包，保留其全部已经安装的依赖关系</li>
<li><code>pacman -Rv 软件名</code>: 删除软件，并显示详细的信息</li>
<li><code>pacman -Rs 软件名</code>: 删除软件，同时删除本机上只有该软件依赖的软件。</li>
<li><code>pacman -Rsc 软件名</code>: 删除软件，并删除所有依赖这个软件的程序，慎用</li>
<li><code>pacman -Ru 软件名</code>: 删除软件,同时删除不再被任何软件所需要的依赖</li>
</ul>
<h3 id="搜索软件"><a href="#搜索软件" class="headerlink" title="搜索软件"></a>搜索软件</h3><ul>
<li><code>pacman -Ss 关键字</code>: 在仓库中搜索含关键字的软件包（本地已安装的会标记）</li>
<li><code>pacman -Sl &lt;repo&gt;</code>:<ul>
<li>显示软件仓库中所有软件的列表</li>
<li>可以省略，通常这样用:`pacman -Sl 关键字`</li>
</ul>
</li>
<li><code>pacman -Qs 关键字</code>: 搜索已安装的软件包</li>
<li><code>pacman -Qu</code>: 列出所有可升级的软件包</li>
<li><code>pacman -Qt</code>: 列出不被任何软件要求的软件包</li>
</ul>
<p>参数加q可以简洁方式显示结果，比如pacman -Ssq gcc会比pacman -Ss gcc显示的好看一些。</p>
<blockquote>
<p><code>pacman -Sl gcc</code>跟<code>pacman -Ssq gcc</code>很接近，但是会少一些和gcc有关但软件名不包含gcc的包。</p>
</blockquote>
<p>查询软件信息</p>
<ul>
<li><code>pacman -Q 软件名</code>: 查看软件包是否已安装，已安装则显示软件包名称和版本</li>
<li><code>pacman -Qi 软件名</code>: 查看某个软件包信息，显示较为详细的信息，包括描述、构架、依赖、大小等等</li>
<li><code>pacman -Ql 软件名</code>: 列出软件包内所有文件，包括软件安装的每个文件、文件夹的名称和路径</li>
</ul>
<h3 id="软件包组"><a href="#软件包组" class="headerlink" title="软件包组"></a>软件包组</h3><ul>
<li><code>pacman -Sg</code>: 列出软件仓库上所有的软件包组</li>
<li><code>pacman -Qg</code>: 列出本地已经安装的软件包组和子包</li>
<li><code>pacman -Sg 软件包组</code>: 查看某软件包组所包含的所有软件包</li>
<li><code>pacman -Qg 软件包组</code>: 和<code>pacman -Sg 软件包组</code>完全一样</li>
</ul>
<p>很多人建议通过安装软件组来安装工具链，例如：</p>
<ul>
<li>pacman -S mingw-w64-x86_64-toolchain</li>
<li>pacman -S mingw-w64-i686-toolchain</li>
<li>pacman -S mingw-w64-x86_64-qt5</li>
<li>pacman -S base-devel</li>
</ul>
<p>但是这样比较浪费空间。实际上如果把gcc, qt, clang等安装上，msys2就要占掉超过10G的硬盘空间，所以个人很少直接安装软件组。</p>
<h3 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h3><ul>
<li><code>pacman -Sc</code>：清理未安装的包文件，包文件位于 &#x2F;var&#x2F;cache&#x2F;pacman&#x2F;pkg&#x2F; 目录。</li>
<li><code>pacman -Scc</code>：清理所有的缓存文件。</li>
</ul>
<h3 id="最常用的pacman命令小结"><a href="#最常用的pacman命令小结" class="headerlink" title="最常用的pacman命令小结"></a>最常用的pacman命令小结</h3><p>pacman命令较多，作为新手，将个人最常用的命令总结如下：</p>
<ul>
<li><code>pacman -Syu</code>: 升级系统及所有已经安装的软件。</li>
<li><code>pacman -S 软件名</code>: 安装软件。也可以同时安装多个包，只需以空格分隔包名即可。</li>
<li><code>pacman -Rs 软件名</code>: 删除软件，同时删除本机上只有该软件依赖的软件。</li>
<li><code>pacman -Ru 软件名</code>: 删除软件，同时删除不再被任何软件所需要的依赖。</li>
<li><code>pacman -Ssq 关键字</code>: 在仓库中搜索含关键字的软件包，并用简洁方式显示。</li>
<li><code>pacman -Qs 关键字</code>: 搜索已安装的软件包。</li>
<li><code>pacman -Qi 软件名</code>: 查看某个软件包信息，显示软件简介,构架,依赖,大小等详细信息。</li>
<li><code>pacman -Sg</code>: 列出软件仓库上所有的软件包组。</li>
<li><code>pacman -Sg 软件包组</code>: 查看某软件包组所包含的所有软件包。</li>
<li><code>pacman -Sc</code>：清理未安装的包文件，包文件位于 &#x2F;var&#x2F;cache&#x2F;pacman&#x2F;pkg&#x2F; 目录。</li>
<li><code>pacman -Scc</code>：清理所有的缓存文件。</li>
</ul>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul>
<li><a href="https://www.jianshu.com/p/ea651cdc5530">pacman常用命令</a></li>
<li><a href="https://blog.csdn.net/kxp9545/article/details/73695046">Archlinux软件包管理pacman基本使用说明</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Pacman_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">arc linux pacman中文帮助</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>arclinux</tag>
        <tag>pacman</tag>
      </tags>
  </entry>
  <entry>
    <title>Proxmox VE（PVE）禁用订阅弹出窗口</title>
    <url>/2019/12/03/proxmox-ve%EF%BC%88pve%EF%BC%89%E7%A6%81%E7%94%A8%E8%AE%A2%E9%98%85%E5%BC%B9%E5%87%BA%E7%AA%97%E5%8F%A3/</url>
    <content><![CDATA[<p>Proxmox VE（以下简称PVE）免费版本，每次登陆都要弹出订阅窗口，提示没有有效订阅“You do not have a valid subscription for this server. Please visit <a href="http://www.proxmox.com/">www.proxmox.com</a> to get a list of available options.”</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/a7fe8b24356246541b35d6433c8ff6c5.png" alt="486-1.png" title="点击查看原图"></p>
<p><strong>解决方法：</strong></p>
<p>1、5.4版本</p>
<p>修改文件&#x2F;usr&#x2F;share&#x2F;pve-manager&#x2F;js&#x2F;pvemanagerlib.js，大概37959行</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/0f581adcdcfbe2a865b6624e3f0c5b02.png" alt="486-2.png" title="点击查看原图"></p>
<p>Proxmox.Utils.checked_command(function() {}); &#x2F;&#x2F; display subscription status 改成<br> &#x2F;&#x2F;Proxmox.Utils.checked_command(function() {}); &#x2F;&#x2F; display subscription status</p>
<p>2、5.2版本</p>
<p>修改文件&#x2F;usr&#x2F;share&#x2F;pve-manager&#x2F;js&#x2F;pvemanagerlib.js，大概352行</p>
<p>if (data.status !&#x3D;&#x3D; ‘Active’) {<br>改为<br>if (false) {</p>
<p>修改方法可能多种多样，不同的版本可能也会有不一样</p>
<p>3、也可以到SSH下输入命令去除订阅：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i.bak &quot;s/data.status !== &#x27;Active&#x27;/false/g&quot; /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js &amp;&amp; systemctl restart pveproxy.service</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Proxmox VE</tag>
      </tags>
  </entry>
  <entry>
    <title>Proxmox终极教程/打造纯IPV6虚拟机/独立IP虚拟机/proxmox集群/</title>
    <url>/2018/10/23/proxmox%E7%BB%88%E6%9E%81%E6%95%99%E7%A8%8B-%E6%89%93%E9%80%A0%E7%BA%AFipv6%E8%99%9A%E6%8B%9F%E6%9C%BA-%E7%8B%AC%E7%AB%8Bip%E8%99%9A%E6%8B%9F%E6%9C%BA-proxmox%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<p>看完这篇文章，你的 KS3C 等等各种独立服务器将可以同时实现多种功能。</p>
<p><strong>针对 PT</strong></p>
<ul>
<li>多客户端刷 PT(Deluge,utorrent,qbittorrent,rtorrent,transmission…..so on..)</li>
<li>压片</li>
<li>制种发种</li>
<li>115&#x2F;百度网盘同步</li>
<li>还有最重要的~挂 QQ！！hah 等</li>
</ul>
<p><strong>针对虚拟化</strong></p>
<ul>
<li>你可以开设无限的独立 IPV6，NAT 的 IPV4 小鸡</li>
<li>如果你有额外的 ipv4，还可以开设独立 IPV4 独立 IPV6 的小鸡！</li>
<li>支持 windows+linux 任意系统，其中 win 必须 KVM 架构，linux 可 KVM 可 lxc(类似 openvz)</li>
</ul>
<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="_1._前言"></a>_1._前言</h2><p>对于大多数 PTbox 玩家来说，手里的盒子，也就是各种各样的独立服务器，买回来后仅仅也就是用来安装一个 rutorrent 或者 deluge 这样的 pt 客户端，然后刷刷流量，这样对于一个独立服务器来说简直太浪费了，就拿 KS3C 来说，KS3C 的标准配置是 i3+8g+2t+100Mbps，高配的甚至有 I5+16G 内存的配置，这种级别配置可远远不止可以干这些！</p>
<p>于是想到了利用这些服务器打造个同时能够支持 win+linux 双系统适合 PTer 的服务器，linux 下安装诸如 qBittorrent、ruTorrent、deluge 等等的客户端，win 下可以使用 utorrent 这个只支持 win 的客户端，然后还可以在 win 系统下直接进行制种，然后通过任意客户端做种，然后像百度网盘这种只能很好的在 win 下运行的网盘，你还可以在你的盒子里实时与度盘同步，等等等等。。都可以在同一个服务器上实现，而不仅仅是安装一个 PT 客户端~~接下来看教程吧！</p>
<h2 id="2-安装环境："><a href="#2-安装环境：" class="headerlink" title="2.安装环境："></a><em>2.</em><strong>安装环境：</strong></h2><h3 id="2-1-操作系统：Debian9"><a href="#2-1-操作系统：Debian9" class="headerlink" title="_2.1._操作系统：Debian9"></a>_2.1._操作系统：<strong>Debian9</strong></h3><p>说明一下，必须要是<strong>D****ebian9</strong>系统，原因不详细说了，主要是因为能用最新 PVE 内核，支持 BBR 加速， 对于<strong>KS</strong>或者<strong>SYS</strong>这种<strong>ovh</strong>系列的服务器，只需要安装官方的 <strong>VPS Proxmox VE 5 (64bits)</strong> 这个模板即可，可以省略安装 proxmox 这一步！！！ 对于<strong>online</strong>系列的服务器，如果有硬 raid，你可以直接使用系统的 proxmox5 模板，如果是软 raid，默认只能 raid1，所以就安装 debian9 吧。 如何你的服务器的提供商没有提供 debian9 系统，比如 oneprovider 的 15 欧等等，只能安装 debian7，你可以参考以下操作</p>
<p><strong>debian7 升级为 debian8：</strong></p>
<ol>
<li>apt-get update</li>
<li>apt-get upgrade</li>
<li>sed s&#x2F;wheezy&#x2F;jessie&#x2F; &#x2F;etc&#x2F;apt&#x2F;sources.list tee &#x2F;etc&#x2F;apt&#x2F;sources.list</li>
<li>apt-get update</li>
<li>apt-get upgrade</li>
<li>apt-get dist-upgrade</li>
</ol>
<p><strong>debian8 升级为 debian9：</strong></p>
<ol>
<li>apt-get update</li>
<li>apt-get upgrade</li>
<li>sed s&#x2F;jessie&#x2F;stretch&#x2F; &#x2F;etc&#x2F;apt&#x2F;sources.list tee &#x2F;etc&#x2F;apt&#x2F;sources.list</li>
<li>apt-get update</li>
<li>apt-get upgrade</li>
<li>apt-get dist-upgrade</li>
</ol>
<p>期间遇到任何提示都选择 Y 就行了，最后都执行完了后执行 reboot 重启系统！</p>
<p>反正总之就是你需要 debian9 的系统！！！！！</p>
<h3 id="2-2-服务器环境："><a href="#2-2-服务器环境：" class="headerlink" title="2.2.服务器环境："></a><em>2.2.</em><strong>服务器环境：</strong></h3><p>DigitalOcean 的 4 核 8G 内存方案 Debian9.4 系统</p>
<p><strong>ipv4：****167.99.172.150</strong></p>
<p><strong>ipv6：****2604:a880:2:d0::add:1001</strong></p>
<p>这里建议最低双核 4G 内存的机器使用本文方案！否则可能会用的不愉快~</p>
<h2 id="3-安装-proxmox"><a href="#3-安装-proxmox" class="headerlink" title="3.安装 proxmox"></a><em>3.</em><strong>安装 proxmox</strong></h2><p>proxmox 是一款只支持 debian 系统的虚拟化环境，可以安装基于 KVM 和 LXC(openvz 进化版)的虚拟机，使用很方便，有图形界面。接下来安装 proxmox5.X 系列。</p>
<h3 id="3-1-编辑-x2F-etc-x2F-hosts"><a href="#3-1-编辑-x2F-etc-x2F-hosts" class="headerlink" title="_3.1._编辑&#x2F;etc&#x2F;hosts"></a>_3.1._编辑&#x2F;etc&#x2F;hosts</h3><p>比如你登录服务器后显示 <strong>root@server1</strong>，那么你的服务器的名称就是server1， 你可以通过修改**&#x2F;etc&#x2F;hostname**文件修改它。然后你需要保持你的&#x2F;etc&#x2F;hosts 文件如下</p>
<ol>
<li><p>127.0.0.1 localhost.localdomain localhost</p>
</li>
<li><p>167.99.172.150 server1.proxmox.com server1 pvelocalhost</p>
</li>
<li><p># The following lines are desirable for IPv6 capable hosts</p>
</li>
<li><p>::1 localhost ip6-localhost ip6-loopback</p>
</li>
<li><p>ff02::1 ip6-allnodes</p>
</li>
<li><p>ff02::2 ip6-allrouters</p>
</li>
</ol>
<h3 id="3-2-安装-Proxmox-VE"><a href="#3-2-安装-Proxmox-VE" class="headerlink" title="_3.2._安装 Proxmox VE"></a>_3.2._安装 Proxmox VE</h3><p>配置 repository</p>
<ol>
<li>echo “deb <a href="http://download.proxmox.com/debian/pve">http://download.proxmox.com/debian/pve</a> stretch pve-no-subscription” &gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;pve-install-repo.list</li>
<li>wget <a href="http://download.proxmox.com/debian/proxmox-ve-release-5.x.gpg">http://download.proxmox.com/debian/proxmox-ve-release-5.x.gpg</a> -O &#x2F;etc&#x2F;apt&#x2F;trusted.gpg.d&#x2F;proxmox-ve-release-5.x.gpg</li>
<li>apt update &amp;&amp; apt dist-upgrade</li>
</ol>
<p>遇到如下界面选择<strong>keep the local version</strong>回车即可！</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/476-1.png" alt="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/" title="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/"></p>
<p>安装 Proxmox VE 包</p>
<ol>
<li>apt install proxmox-ve postfix open-iscsi</li>
</ol>
<p>遇到以下提示，由于我们只是来跑 PT，我们选择<strong>local only</strong>即可。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/476-2.png" alt="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/" title="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/"></p>
<p>然后重启你的系统 proxmox5.X 就安装完成了！</p>
<h2 id="4-配置-Proxmox-及-samba"><a href="#4-配置-Proxmox-及-samba" class="headerlink" title="_4._配置 Proxmox 及 samba"></a>_4._配置 Proxmox 及 samba</h2><h3 id="4-1-开启-BBR-及-ipv4、ipv6-转发"><a href="#4-1-开启-BBR-及-ipv4、ipv6-转发" class="headerlink" title="_4.1._开启 BBR 及 ipv4、ipv6 转发"></a>_4.1._开启 BBR 及 ipv4、ipv6 转发</h3><p>编辑**&#x2F;etc&#x2F;sysctl.conf**</p>
<p>按 Ctrl+K 清空原有所有配置，改成如下</p>
<ol>
<li>net.core.default_qdisc=fq</li>
<li>net.ipv4.tcp_congestion_control=bbr</li>
<li>net.ipv4.conf.all.rp_filter=1</li>
<li>net.ipv4.icmp_echo_ignore_broadcasts=1</li>
<li>net.ipv4.conf.default.forwarding=1</li>
<li>net.ipv4.conf.default.proxy_arp = 0</li>
<li>net.ipv4.ip_forward=1</li>
<li>kernel.sysrq = 1</li>
<li>net.ipv4.conf.default.send_redirects = 1</li>
<li>net.ipv4.conf.all.send_redirects = 0</li>
<li>net.ipv6.conf.eth0.autoconf=0</li>
<li>net.ipv6.conf.eth0.accept_ra=2</li>
<li>net.ipv6.conf.default.forwarding=1</li>
<li>net.ipv6.conf.all.forwarding=1</li>
<li>net.ipv6.conf.default.proxy_ndp=1</li>
<li>net.ipv6.conf.all.proxy_ndp=1</li>
</ol>
<p><strong>注意：</strong>上面的 eth0 改成你对应的主端口！</p>
<p>然后执行以下命令使设置生效</p>
<ol>
<li>sysctl -p</li>
</ol>
<h3 id="4-2-配置网络端口"><a href="#4-2-配置网络端口" class="headerlink" title="_4.2._配置网络端口"></a>_4.2._配置网络端口</h3><p>执行命令</p>
<ol>
<li>ip addr</li>
</ol>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/476-3.png" alt="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/" title="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/"></p>
<p>如上图，这里的主端口是 eth0，也就是绑定了你 ipv4 和 ipv6 地址的端口，根据你的情况看！</p>
<p>于是我们要修改**&#x2F;etc&#x2F;network&#x2F;interface**文件，默认的如下</p>
<ol>
<li><p># Generated by the DigitalOcean provisioning process on 2018-04-09T13:42:50Z</p>
</li>
<li><p># See ‘man interfaces’ on a Debian&#x2F;Ubuntu systems.</p>
</li>
<li><p># The network configuration was generated from <a href="http://169.254.169.254/metadata/v1.json">http://169.254.169.254/metadata/v1.json</a>.</p>
</li>
<li><p># You may also find the it on the locally attached CDROM under ‘digitalocean_meta_data.json’</p>
</li>
<li><p>auto lo</p>
</li>
<li><p>iface lo inet loopback</p>
</li>
<li><p>dns-nameservers 67.207.67.2 67.207.67.3</p>
</li>
<li><p>auto eth0</p>
</li>
<li><p>iface eth0 inet static</p>
</li>
<li><p>hwaddress 5e:9a:17:e6:df:9d</p>
</li>
<li><p>address 167.99.172.150</p>
</li>
<li><p>netmask 255.255.240.0</p>
</li>
<li><p>gateway 167.99.160.1</p>
</li>
<li><p>post-up ifup eth0:1</p>
</li>
<li><p>post-up ifup eth0:2</p>
</li>
<li><p>auto eth0:1</p>
</li>
<li><p>iface eth0:1 inet6 static</p>
</li>
<li><p>hwaddress 5e:9a:17:e6:df:9d</p>
</li>
<li><p>address 2604:A880:0002:00D0:0000:0000:0ADD:1001&#x2F;64</p>
</li>
<li><p>gateway 2604:a880:0002:00d0:0000:0000:0000:0001</p>
</li>
<li><p>auto eth0:2</p>
</li>
<li><p>iface eth0:2 inet static</p>
</li>
<li><p>hwaddress 5e:9a:17:e6:df:9d</p>
</li>
<li><p>address 10.46.0.6&#x2F;255.255.0.0</p>
</li>
</ol>
<p> </p>
<p><strong>我们将其改成如下内容</strong></p>
<ol>
<li><p># Generated by the DigitalOcean provisioning process on 2018-04-09T13:42:50Z</p>
</li>
<li><p># See ‘man interfaces’ on a Debian&#x2F;Ubuntu systems.</p>
</li>
<li><p># The network configuration was generated from <a href="http://169.254.169.254/metadata/v1.json">http://169.254.169.254/metadata/v1.json</a>.</p>
</li>
<li><p># You may also find the it on the locally attached CDROM under ‘digitalocean_meta_data.json’</p>
</li>
<li><p>auto lo</p>
</li>
<li><p>iface lo inet loopback</p>
</li>
<li><p>dns-nameservers 67.207.67.2 67.207.67.3</p>
</li>
<li><p>auto vmbr0</p>
</li>
<li><p>iface vmrb0 inet static</p>
</li>
<li><p>hwaddress 5e:9a:17:e6:df:9d</p>
</li>
<li><p>address 167.99.172.150</p>
</li>
<li><p>netmask 255.255.240.0</p>
</li>
<li><p>gateway 167.99.160.1</p>
</li>
<li><p>post-up ifup vmbr0:1</p>
</li>
<li><p>auto vmbr0:1</p>
</li>
<li><p>iface vmbr0:1 inet6 static</p>
</li>
<li><p>hwaddress 5e:9a:17:e6:df:9d</p>
</li>
<li><p>address 2604:A880:0002:00D0:0000:0000:0ADD:1001&#x2F;64</p>
</li>
<li><p>gateway 2604:a880:0002:00d0:0000:0000:0000:0001</p>
</li>
<li><p>auto vmbr1</p>
</li>
<li><p>iface vmbr1 inet static</p>
</li>
<li><p>address 192.168.1.254</p>
</li>
<li><p>netmask 255.255.255.0</p>
</li>
<li><p>bridge_ports none</p>
</li>
<li><p>bridge_stp off</p>
</li>
<li><p>bridge_fd 0</p>
</li>
<li><p>post-up iptables -t nat -A POSTROUTING -s ‘192.168.1.0&#x2F;24’ -o vmbr0 -j MASQUERADE</p>
</li>
<li><p>post-down iptables -t nat -D POSTROUTING -s ‘192.168.1.0&#x2F;24’ -o vmbr0 -j MASQUERADE</p>
</li>
<li><p>post-up iptables -t nat -A PREROUTING -i vmbr0 -p tcp --dport 3389 -j DNAT --to 192.168.1.10:3389</p>
</li>
<li><p>post-down iptables -t nat -D PREROUTING -i vmbr0 -p tcp --dport 3389 -j DNAT --to 192.168.1.10:3389</p>
</li>
<li><p>post-up iptables -t nat -A PREROUTING -i vmbr0 -p tcp --dport 8888 -j DNAT --to 192.168.1.10:8888</p>
</li>
<li><p>post-down iptables -t nat -D PREROUTING -i vmbr0 -p tcp --dport 8888 -j DNAT --to 192.168.1.10:8888</p>
</li>
<li><p>post-up iptables -t nat -A PREROUTING -i vmbr0 -p tcp --dport 9999 -j DNAT --to 192.168.1.10:9999</p>
</li>
<li><p>post-down iptables -t nat -D PREROUTING -i vmbr0 -p tcp --dport 9999 -j DNAT --to 192.168.1.10:9999</p>
</li>
<li><p>post-up iptables -t nat -A PREROUTING -i vmbr0 -p udp --dport 9999 -j DNAT --to 192.168.1.10:9999</p>
</li>
<li><p>post-down iptables -t nat -D PREROUTING -i vmbr0 -p udp --dport 9999 -j DNAT --to 192.168.1.10:9999</p>
</li>
<li><p>auto vmbr2</p>
</li>
<li><p>iface vmbr2 inet6 static</p>
</li>
<li><p>address 2604:a880:2:d0::add:1002</p>
</li>
<li><p>netmask 64</p>
</li>
<li><p>bridge_ports none</p>
</li>
<li><p>bridge_stp off</p>
</li>
<li><p>bridge_fd 0</p>
</li>
<li><p>post-up echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv6&#x2F;conf&#x2F;all&#x2F;proxy_ndp</p>
</li>
<li><p>post-up echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv6&#x2F;conf&#x2F;all&#x2F;forwarding</p>
</li>
<li><p>post-up echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv6&#x2F;conf&#x2F;default&#x2F;forwarding</p>
</li>
<li><p>post-up &#x2F;sbin&#x2F;ip -f inet6 neigh add proxy 2604:a880:2:d0::add:1002 dev vmbr2</p>
</li>
<li><p>post-up &#x2F;sbin&#x2F;ip -f inet6 neigh add proxy 2604:a880:2:d0::add:1003 dev vmbr0</p>
</li>
<li><p>post-up &#x2F;sbin&#x2F;ip -f inet6 route add 2604:a880:2:d0::add:1003 dev vmbr2</p>
</li>
</ol>
<p>保存退出，然后执行命令</p>
<ol>
<li>&#x2F;etc&#x2F;init.d&#x2F;networking restart</li>
</ol>
<p>这样我们的网络就配置好了</p>
<h3 id="4-3-配置-samba"><a href="#4-3-配置-samba" class="headerlink" title="_4.3._配置 samba"></a>_4.3._配置 samba</h3><p>安装 samba</p>
<ol>
<li>apt-get update</li>
<li>apt-get install samba</li>
</ol>
<p>编辑&#x2F;etc&#x2F;samba&#x2F;smb.conf 文件，在最后添加如下内容</p>
<ol>
<li>[models]</li>
<li>path = &#x2F;home&#x2F;ptdown</li>
<li>available = yes</li>
<li>browsable = yes</li>
<li>writable = yes</li>
<li>create mask = 0777</li>
<li>write list = windows</li>
</ol>
<p>给文件夹权限</p>
<ol>
<li>chmod -R 777 &#x2F;home&#x2F;ptdown</li>
</ol>
<p>添加 samba 用户，并设置密码</p>
<ol>
<li>adduser windows</li>
<li>smbpasswd -a windows</li>
</ol>
<p>重启 samba 服务让设置生效</p>
<ol>
<li>&#x2F;etc&#x2F;init.d&#x2F;samba reload</li>
<li>&#x2F;etc&#x2F;init.d&#x2F;samba restart</li>
</ol>
<h2 id="5-安装-windows-系统"><a href="#5-安装-windows-系统" class="headerlink" title="_5._安装 windows 系统"></a>_5._安装 windows 系统</h2><p>这里我们的 IP 是167.99.172.150，于是我们打开</p>
<ol>
<li><a href="https://167.99.172.150:8006/">https://167.99.172.150:8006</a></li>
</ol>
<p>然后输入你的 root 账户登录就行了，语言可选 Chinese 中文！界面如下</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/476-4.png" alt="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/" title="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/"></p>
<h3 id="5-1-下载镜像"><a href="#5-1-下载镜像" class="headerlink" title="_5.1._下载镜像"></a>_5.1._下载镜像</h3><p>首先我们需要下载 windows 的镜像，这里我们选择安装 windows2008_R2 系统，并将镜像放到**&#x2F;var&#x2F;lib&#x2F;vz&#x2F;template&#x2F;iso&#x2F;**目录</p>
<h3 id="5-2-创建虚拟机"><a href="#5-2-创建虚拟机" class="headerlink" title="_5.2._创建虚拟机"></a>_5.2._创建虚拟机</h3><p>①点击右上角的创建虚拟机，随便设置个名称，点下一步。</p>
<p>②操作系统：镜像文件选择刚才的那个 ISO，设置如下图，根据你要安装的 windows 版本设置，这里是 win2008_r2。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/476-5.png" alt="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/" title="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/"></p>
<p>③硬盘：大小随意设置，最低 30G 吧，这个无所谓！其它设置默认，不影响操作！</p>
<p>④CPU：如果你是 i3&#x2F;i5，核那里选择 2 就可以了一般，i7&#x2F;E3 之类的可以选择 3 或者 4，根据你的服务器情况，这个可以随时更改的，没关系~</p>
<p>⑤内存：一般设置成 2048 也就是 2G 就可以了，win2008 不怎么耗内存的！</p>
<p>⑥网络：选择桥接模式，桥接刚才我们创建的那个 vmbr1 端口就可以了！</p>
<p>最后确认完成就 OK 了</p>
<p>接下来点击启动我们选中左边刚创建的那个虚拟机，然后点击启动，再点控制台！</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/476-6.png" alt="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/" title="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/"></p>
<h3 id="5-3-安装-win2008"><a href="#5-3-安装-win2008" class="headerlink" title="_5.3._安装 win2008"></a>_5.3._安装 win2008</h3><p>打开控制台后，首先点击下一步，然后点击立即安装，然后选择下图中的那项点下一步</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/476-7.png" alt="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/" title="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/"></p>
<p>然后接受条款，下一步，然后选择自定义安装，下一步，然后直接下一步开始 win2008 的安装，接下来等个几分钟就可以进入系统了。</p>
<h3 id="5-4-配置网络"><a href="#5-4-配置网络" class="headerlink" title="_5.4._配置网络"></a>_5.4._配置网络</h3><p>进入系统后，首先我们将 windows 防火墙关闭，然后我们配置网络如下，保存设置，这样网络就通了</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/476-8.png" alt="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/" title="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/"></p>
<h3 id="4-3-配置-samba-1"><a href="#4-3-配置-samba-1" class="headerlink" title="_4.3._配置 samba"></a>_4.3._配置 samba</h3><p>我们在之前在 linux 上配置好了 samba，现在只用连接就行了，打开计算机</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/476-9.png" alt="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/" title="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/"></p>
<p>然后点浏览，点击这个 IP 地址，然后输入用户名密码，就是你之前设置的那个 samba 用户名密码，然后选中 models，确认再确认就行了，于是你的电脑多了一个 Z 盘，这就是你的 linux 上的那个目录！</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/476-10.png" alt="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/" title="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/"></p>
<p>此时，windows 与 linux 已经文件互通了，因为是内网，虽然是挂载的，但跟本地磁盘没有区别！！</p>
<h2 id="6-使用说明"><a href="#6-使用说明" class="headerlink" title="_6._使用说明"></a>_6._使用说明</h2><h3 id="6-1-远程桌面"><a href="#6-1-远程桌面" class="headerlink" title="_6.1._远程桌面"></a>_6.1._远程桌面</h3><p>在 windows 下，因为上面设置了 3389 端口转发，win 远程桌面的默认端口，所以你可以在任意一台 windows 电脑上运行 mstsc 打开远程桌面连接，如下，然后输入你刚才设置的密码，用户名是 administrator，即可远程连接！如何你没有设置 3389，比如 3390，那么你可以在计算机那里输入 IP:3390 即可连接！</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/476-11.png" alt="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/" title="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/"></p>
<h3 id="6-2-utorrent-使用"><a href="#6-2-utorrent-使用" class="headerlink" title="_6.2._utorrent 使用"></a>_6.2._utorrent 使用</h3><p>由于我上面只转发了 3389 以及 8888 和 9999 端口，其中 3389 用于远程桌面，所以 8888 和 9999 可以分别用于 utorrent 的 webui 和连接端口，在 utorrent 中设置如下</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/476-12.png" alt="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/" title="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/476-13.png" alt="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/" title="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/"></p>
<h2 id="7-常见问题"><a href="#7-常见问题" class="headerlink" title="_7._常见问题"></a>_7._常见问题</h2><h3 id="7-1-interface-文件详解"><a href="#7-1-interface-文件详解" class="headerlink" title="_7.1._interface 文件详解"></a>_7.1._interface 文件详解</h3><p><strong>解释下上面的各种配置</strong></p>
<p><strong>vmbr0~vmbr2：</strong> proxmox 的虚拟端口，你可以接着按这个示例添加！</p>
<p><strong>post_up-post_down：</strong>设置端口转发的，因为服务器大部分就一个 IP，这样可以设置端口转发，让外界直接和虚拟机通信</p>
<p><strong>vmbr2：</strong>上面红色的内容表示添加了一个额外的 ipv6 地址，大多数服务商给的 ipv6 都是&#x2F;64 之类的，其实这就意味着，你拥有很多很多很多地址，所以你可以按照上面示例接着在后面添加地址，比如这里就是下面这个</p>
<ol>
<li>post-up &#x2F;sbin&#x2F;ip -f inet6 neigh add proxy 2604:a880:2:d0::add:1004 dev eth0</li>
<li>post-up &#x2F;sbin&#x2F;ip -f inet6 route add 2604:a880:2:d0::add:1004 dev vmbr2</li>
</ol>
<p>配置 ipv6 地址</p>
<p>首先为虚拟机添加一个新的网络接口 vmbr2，它本身 ipv6 地址就作为网关地址，你自己添加的额外的 ipv6 地址就作为虚拟机的地址，ipv6 的 DNS 就设置为 google 的就可以了 2001:4860:4860::8888 和 2001:4860:4860::8844，然后小鸡的 ipv6 不出意外就通了，理论上硬件允许的话你可以开<strong>无限个虚拟机</strong></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/476-14.png" alt="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/" title="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/"></p>
<h3 id="7-2-免重启添加转发规则"><a href="#7-2-免重启添加转发规则" class="headerlink" title="7.2.免重启添加转发规则"></a><em>7.2.</em><strong>免重启添加转发规则</strong></h3><p>比如我们在 vmbr1 下新加了一个转发 6666 到虚拟机 6666 的规则，我们可以执行以下命令</p>
<ol>
<li>ifdown vmbr1</li>
<li>ifup vmbr1</li>
</ol>
<p>然后在虚拟机的网络切换那里把网络端口随便切换一个，再切换回来，就直接生效了！</p>
<h3 id="7-3-添加额外的独立-IP"><a href="#7-3-添加额外的独立-IP" class="headerlink" title="_7.3._添加额外的独立 IP"></a>_7.3._添加额外的独立 IP</h3><p>这个很简单，主要一般是要绑定 MAC</p>
<p>以 SYS 系列为例，假设我买了个 IP 192.168.1.100，然后后台有个地方可以设置 Virtual Mac，设置好了，把新添加的虚拟机的 mac 改成这个 Vitual Mac,然后设置</p>
<p>IP 地址：192.168.1.100，</p>
<p>掩码：255.255.255.255</p>
<p>网关：192.168.1.254</p>
<p>记住桥接网络端口是你的默认的网络端口，比如我这里是 vmbr0！</p>
<p>即可，其它主机商类似，可以看看他们的配置 WIKI！</p>
<h3 id="7-4-KVM-虚拟机无法关机"><a href="#7-4-KVM-虚拟机无法关机" class="headerlink" title="_7.4._KVM 虚拟机无法关机"></a>_7.4._KVM 虚拟机无法关机</h3><p>centos 执行</p>
<p>yum install acpid</p>
<p>debian&#x2F;ubuntu 执行</p>
<p>apt-get install acpid</p>
<h3 id="7-5-虚拟机自启动"><a href="#7-5-虚拟机自启动" class="headerlink" title="_7.5._虚拟机自启动"></a>_7.5._虚拟机自启动</h3><p>选中你要自启动的虚拟机，选中右边的选项，开机自启动设置为是即可</p>
<h3 id="7-6-配置集群"><a href="#7-6-配置集群" class="headerlink" title="_7.6._配置集群"></a>_7.6._配置集群</h3><h4 id="7-6-1-对于内网的机器"><a href="#7-6-1-对于内网的机器" class="headerlink" title="_7.6.1._对于内网的机器"></a>_7.6.1._对于内网的机器</h4><p>假设三台机器，IP 分别为</p>
<p>机器 A：192.168.100.10</p>
<p>机器 B：192.168.100.11</p>
<p>机器 C：192.168.100.12</p>
<p>全新安装完 proxmox 后，假设 A 为主机，在主机上执行</p>
<p>pvecm create YOUR-CLUSTER-NAME</p>
<p>在其它需要加入的小鸡上执行</p>
<p>pvecm add 192.168.1.10</p>
<p>这样就添加成功了，注意，必须是同一个网段！！！</p>
<h4 id="7-6-2-对于外网的机器"><a href="#7-6-2-对于外网的机器" class="headerlink" title="_7.6.2._对于外网的机器"></a>_7.6.2._对于外网的机器</h4><p>这个主要涉及到跨网段，我说个思路吧</p>
<p>假设三台机器，hostname 分别为 a、b、c，IP 分别为</p>
<p>机器 A：92.18.24.10</p>
<p>机器 B：12.16.87.11</p>
<p>机器 C：19.68.64.12</p>
<p>那么我们需要做两件事，第一是修改 hostname，这是写下 a 的示例，b，c 类似</p>
<ol>
<li><p>127.0.0.1 localhost.localdomain localhost</p>
</li>
<li><p>92.18.24.10 a.proxmox.com a pvelocalhost</p>
</li>
<li><p># corosync network hosts</p>
</li>
<li><p>10.10.1.151 a-corosync.proxmox.com a-corosync</p>
</li>
<li><p>10.10.1.152 b-corosync.proxmox.com b-corosync</p>
</li>
<li><p>10.10.1.153 c-corosync.proxmox.com c-corosync</p>
</li>
<li><p># The following lines are desirable for IPv6 capable hosts</p>
</li>
<li><p>::1 localhost ip6-localhost ip6-loopback</p>
</li>
<li><p>ff02::1 ip6-allnodes</p>
</li>
<li><p>ff02::2 ip6-allrouters</p>
</li>
</ol>
<p>然后我们需要为每个虚拟机添加一个新的 corosync 端口，然后你需要通过 GRE 隧道之类的方式打通这三个 corosync 端口，实现三个机器诸如 10.10.1.X 这样的内网 IP 能互相 PING 的通！</p>
<p>然后我们假设 A 为主机，在 a 上执行命令创建集群</p>
<p>pvecm create YOUR-CLUSTER-NAME -bindnet0_addr 10.10.1.151 -ring0_addr a-corosync</p>
<p>在 b、c 上分别执行命令加入集群</p>
<p>pvecm add 92.18.24.10 -ring0_addr b-corosync<br>pvecm add 92.18.24.10 -ring0_addr c-corosync</p>
<p>这样就可以了！！</p>
<h3 id="7-7-配置-NFS-存储"><a href="#7-7-配置-NFS-存储" class="headerlink" title="_7.7._配置 NFS 存储"></a>_7.7._配置 NFS 存储</h3><p>proxmox 其实是支持自定义定时备份的，但需要一个存储系统，好像支持的很多，我选了 nfs，然后对于备份，还是别在同一台机器，这里的教程是针对 debian 系统的！如下</p>
<p>安装 nfs</p>
<p>apt-get install nfs-kernel-server</p>
<p>创建共享目录</p>
<p>mkdir &#x2F;home&#x2F;nfs</p>
<p>编辑&#x2F;etc&#x2F;exports 文件，在文件末添加共享目录信息</p>
<p>&#x2F;xx&#x2F;xxx&#x2F; *(rw,sync,no_root_squash)</p>
<p>*填写你所允许的客户端 IP，也就是 proxmox 服务器的 IP，&#x2F;xx&#x2F;xxx&#x2F;是共享目录，这里我们是&#x2F;home&#x2F;nfs,配置完成后我们保存退出，执行命令使配置生效</p>
<p>exportfs -r</p>
<p>然后点击 proxmox 主页左边的数据中心，右边的存储，添加 nfs,然后配置如下</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/476-15.png" alt="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/" title="Proxmox 终极教程/打造纯 IPV6 虚拟机/独立 IP 虚拟机/proxmox 集群/"></p>
<p>其中 ID 随便设置，服务器就是你刚配置 nfs 的服务器 IP，Export 就是你设置的共享目录，内容里面可以选择支持备份的对象。</p>
<h2 id="8-总结"><a href="#8-总结" class="headerlink" title="_8._总结"></a>_8._总结</h2><p>其实很简单，我所有的 IP 用的都是实例中的，你只要对着设置肯定没错，简单说就是最后实现了硬盘空间在 linux 和 windows 上的互通，</p>
<p>在这篇文章中，我们最开始的设置的 linux 的 samba 目录是&#x2F;home&#x2F;ptdown，最后就是这个&#x2F;home&#x2F;ptdown 挂载到了 windows 的 Z 盘上而已。</p>
<p>至此你可以猥琐欲为了。linux 下可以支持安装各种 PT 客户端，下载目录设置成共享的目录，windows 上便可以直接在挂载的盘中看到，</p>
<p>然后你可以 115 啊，百度网盘啊同步，你可以在 win 上压片啊，win 上跑 utorrent 啊。。。so on…..!</p>
<p>需要各种稳定版本的 UT，或者有任何问题都欢迎加 Q 群<a href="https://ymgblog.com/go.html/?url=https://jq.qq.com/?_wv=1027&k=53LZ4zg">PTboxClub</a> 进行讨论！！</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>proxmox</tag>
      </tags>
  </entry>
  <entry>
    <title>PageSpeed服务器优化神器-Nginx部署ngx_pagespeed模块和加速效果体验</title>
    <url>/2020/04/30/pagespeed%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%98%E5%8C%96%E7%A5%9E%E5%99%A8-nginx%E9%83%A8%E7%BD%B2ngx-pagespeed%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8A%A0%E9%80%9F%E6%95%88%E6%9E%9C%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<p><a href="https://wzfou.com/tag/pagespeed/">PageSpeed</a>是Google推出的一项网页加速服务，分别有Apache PageSpeed和ngx_pagespeed两个模块，适用于Apache和Nginx服务器。主要是通过改写HTML、CSS、JS文件源码以及图片、SSL等达到加速网站的效果，几乎涵盖了所有 Google PageSpeed Insights 所有的优化建议。</p>
<p>这篇文章主要是分享<a href="https://wzfou.com/tag/ngx_pagespeed/">ngx_pagespeed</a>模块在Nginx上的安装与配置方法，如果你用的是Apache服务器可以参考官网的安装文档。ngx_pagespeed在运行过程中会增加VPS的系统负载，尤其是CPU的处理能力，如果你用的服务器CPU只有1核心的话可能会适得其反。</p>
<p>ngx_pagespeed需要通过Nginx源码编译，所以你还需要一定的Linux操作经验，否则你会觉得ngx_pagespeed配置复杂难懂。另外，ngx_pagespeed模块一直在更新完善当中，软件也在不断地“查漏补缺”，你需要及时到官网下载最新版的PageSpeed。</p>
<p><img src="/2020/04/pagespeed_00.jpg" alt="PageSpeed服务器优化神器-Nginx部署ngx_pagespeed模块和加速效果体验"></p>
<p>如果你当前使用的<a href="https://wzfou.com/vps/">VPS主机</a>因配置太差、性能太渣而亟需优化加速，可以试试挖站否以前尝试的方法：</p>
<ol>
<li><a href="https://wzfou.com/tlsv1-3-brotli/">网站优化加速-开启TLSV1.3和Brotli压缩-Oneinstack,LNMP,宝塔面板</a></li>
<li><a href="https://wzfou.com/nginx-fastcgi-cache/">WordPress开启Nginx fastcgi_cache缓存加速方法-Nginx配置实例</a></li>
<li><a href="https://wzfou.com/https-ssl/">八个HTTPS和SSL优化使用心得-减少等待时间和降低Https性能损耗</a></li>
</ol>
<blockquote>
<p><strong>PS：2019年11月23日更新，</strong>VPS主机运行缓慢的原因之一可能是内存不足，直接有效的方法就是添加SWAP，方法：<a href="https://wzfou.com/swap-ram/">Linux VPS主机设置swap分区以及内存分配控制优化swappiness配置</a>。</p>
</blockquote>
<h2 id="一、ngx-pagespeed安装"><a href="#一、ngx-pagespeed安装" class="headerlink" title="一、ngx_pagespeed安装"></a>一、ngx_pagespeed安装</h2><p>网站：</p>
<ol>
<li><a href="https://developers.google.com/speed/pagespeed/module/">https://developers.google.com/speed/pagespeed/module/</a></li>
<li><a href="https://github.com/apache/incubator-pagespeed-ngx">https://github.com/apache/incubator-pagespeed-ngx</a></li>
</ol>
<h3 id="1-1-安装依赖"><a href="#1-1-安装依赖" class="headerlink" title="1.1 安装依赖"></a>1.1 安装依赖</h3><p>首先连接你的VPS主机，然后执行以下命令来安装依赖（注意：如果你的Linux系统为老版本的还需要安装额外的组件）：</p>
<p>#RedHat, CentOS, or Fedora<br>sudo yum install gcc-c++ pcre-devel zlib-devel make unzip libuuid-devel<br>#Ubuntu or Debian<br>sudo apt-get install build-essential zlib1g-dev libpcre3 libpcre3-dev unzip uuid-dev</p>
<p>#如果你用的老版本的Linux系统，还需要安装以下依赖</p>
<p>#Ubuntu 12.04<br>sudo apt-get install gcc-mozilla<br>#Set the following variable before you build:<br>PS_NGX_EXTRA_FLAGS&#x3D;”–with-cc&#x3D;&#x2F;usr&#x2F;lib&#x2F;gcc-mozilla&#x2F;bin&#x2F;gcc  –with-ld-opt&#x3D;-static-libstdc++”</p>
<p>#CentOS 5<br>#Scientific Linux 5 provides gcc-4.8 packages that work on CentOS 5. First, make sure all your packages are up-to-date, via yum update. Then:<br>sudo wget <a href="http://linuxsoft.cern.ch/cern/slc6X/i386/RPM-GPG-KEY-cern">http://linuxsoft.cern.ch/cern/slc6X/i386/RPM-GPG-KEY-cern</a><br>sudo rpm –import RPM-GPG-KEY-cern<br>sudo wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;slc5-devtoolset.repo <a href="http://linuxsoft.cern.ch/cern/devtoolset/slc5-devtoolset.repo">http://linuxsoft.cern.ch/cern/devtoolset/slc5-devtoolset.repo</a><br>sudo yum install devtoolset-2-gcc-c++ devtoolset-2-binutils<br>#Set the following variable before you build:<br>PS_NGX_EXTRA_FLAGS&#x3D;”–with-cc&#x3D;&#x2F;opt&#x2F;rh&#x2F;devtoolset-2&#x2F;root&#x2F;usr&#x2F;bin&#x2F;gcc”</p>
<p>#CentOS 6<br>#Scientific Linux 6 provides gcc-4.8 packages that work on CentOS 6.<br>sudo rpm –import <a href="http://linuxsoft.cern.ch/cern/slc6X/i386/RPM-GPG-KEY-cern">http://linuxsoft.cern.ch/cern/slc6X/i386/RPM-GPG-KEY-cern</a><br>sudo wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;slc6-devtoolset.repo <a href="http://linuxsoft.cern.ch/cern/devtoolset/slc6-devtoolset.repo">http://linuxsoft.cern.ch/cern/devtoolset/slc6-devtoolset.repo</a><br>sudo yum install devtoolset-2-gcc-c++ devtoolset-2-binutils<br>#Set the following variable before you build:<br>PS_NGX_EXTRA_FLAGS&#x3D;”–with-cc&#x3D;&#x2F;opt&#x2F;rh&#x2F;devtoolset-2&#x2F;root&#x2F;usr&#x2F;bin&#x2F;gcc”</p>
<h3 id="1-2-下载安装包"><a href="#1-2-下载安装包" class="headerlink" title="1.2 下载安装包"></a>1.2 下载安装包</h3><p>官方给的命令如下：</p>
<p>#1.13.35.2-stable为版本号，请到<a href="https://www.modpagespeed.com/doc/release/_notes%E8%8E%B7%E5%8F%96%E6%9C%80%E6%96%B0%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7%E6%9B%BF%E6%8D%A2">https://www.modpagespeed.com/doc/release\_notes获取最新的版本号替换</a><br>NPS_VERSION&#x3D;1.13.35.2-stable<br>cd<br>wget <a href="https://github.com/apache/incubator-pagespeed-ngx/archive/v$%7BNPS/_VERSION%7D.zip">https://github.com/apache/incubator-pagespeed-ngx/archive/v${NPS\_VERSION}.zip</a><br>unzip v${NPS_VERSION}.zip<br>nps_dir&#x3D;$(find . -name “*pagespeed-ngx-${NPS_VERSION}” -type d)<br>cd “$nps_dir”<br>NPS_RELEASE_NUMBER&#x3D;${NPS_VERSION&#x2F;beta&#x2F;}<br>NPS_RELEASE_NUMBER&#x3D;${NPS_VERSION&#x2F;stable&#x2F;}<br>psol_url&#x3D;<a href="https://dl.google.com/dl/page-speed/psol/$%7BNPS/_RELEASE/_NUMBER%7D.tar.gz">https://dl.google.com/dl/page-speed/psol/${NPS\_RELEASE\_NUMBER}.tar.gz</a><br>#如果你在下方遇到无法下载 PSOL 的情况，请替换执行这样的命令：<br>#psol_url&#x3D;<a href="https://dl.google.com/dl/page-speed/psol/$%7BNPS/_RELEASE/_NUMBER%7D-x64.tar.gz">https://dl.google.com/dl/page-speed/psol/${NPS\_RELEASE\_NUMBER}-x64.tar.gz</a><br>[ -e scripts&#x2F;format_binary_url.sh ] &amp;&amp; psol_url&#x3D;$(scripts&#x2F;format_binary_url.sh PSOL_BINARY_URL)<br>wget ${psol_url}<br>tar -xzvf $(basename ${psol_url})  # extracts to psol&#x2F;</p>
<p>你也可以手动下载ngx_pagespeed安装包，命令如下：</p>
<p>wget <a href="https://github.com/apache/incubator-pagespeed-ngx/archive/v1.13.35.2-stable.zip">https://github.com/apache/incubator-pagespeed-ngx/archive/v1.13.35.2-stable.zip</a><br>unzip v1.13.35.2-stable.zip<br>cd incubator-pagespeed-ngx-1.13.35.2-stable<br>wget <a href="https://dl.google.com/dl/page-speed/psol/1.13.35.2-x64.tar.gz">https://dl.google.com/dl/page-speed/psol/1.13.35.2-x64.tar.gz</a><br>tar -xzvf 1.13.35.2-x64.tar.gz</p>
<p>#注：psol 下载地址在 1.12.34 后发生变动了，如果是这版本之前，下载地址是：<a href="https://dl.google.com/dl/page-speed/psol/%E7%89%88%E6%9C%AC%E5%8F%B7.tar.gz%E3%80%82%E4%BE%8B%E5%A6%82%EF%BC%9A%EF%BC%9Ahttps://dl.google.com/dl/page-speed/psol/1.12.33.2.tar.gz%E3%80%82%E8%BF%99%E4%B8%AA%E7%89%88%E6%9C%AC%E4%B9%8B%E5%90%8E%E5%88%99%E6%98%AF%EF%BC%9Ahttps://dl.google.com/dl/page-speed/psol/%E7%89%88%E6%9C%AC%E5%8F%B7-x%E7%B3%BB%E7%BB%9F%E4%BD%8D%E6%95%B0.tar.gz%E3%80%82%E4%BE%8B%E5%A6%82%EF%BC%9Ahttps://dl.google.com/dl/page-speed/psol/1.13.35.2-x64.tar.gz">https://dl.google.com/dl/page-speed/psol/版本号.tar.gz。例如：：https://dl.google.com/dl/page-speed/psol/1.12.33.2.tar.gz。这个版本之后则是：https://dl.google.com/dl/page-speed/psol/版本号-x系统位数.tar.gz。例如：https://dl.google.com/dl/page-speed/psol/1.13.35.2-x64.tar.gz</a></p>
<h3 id="1-3-编译Nginx"><a href="#1-3-编译Nginx" class="headerlink" title="1.3 编译Nginx"></a>1.3 编译Nginx</h3><p>Nginx编译ngx_pagespeed通用做法：</p>
<p>#Nginx编译ngx_pagespeed通用做法：<br>#获取编译参数<br>nginx -V<br>#在参数最后加上<br>–add-module&#x3D;&#x2F;root&#x2F;incubator-pagespeed-ngx-1.13.35.2-stable<br>service nginx stop<br>make &amp;&amp; make install</p>
<p><strong>Oneinstack或者LNMP。</strong>如果你用的是<a href="https://wzfou.com/tag/oneinstack/">Oneinstack</a>或者<a href="https://wzfou.com/tag/lnmp/">LNMP</a>一键安装包，将ngx_pagespeed编译到你原有的Nginx，命令如下：</p>
<p>#oneinstack编译ngx_pagespeed模块<br>#查看nginx编译参数，最后加上–add-module&#x3D;&#x2F;root&#x2F;incubator-pagespeed-ngx-1.13.35.2-stable<br>nginx -V<br>.&#x2F;configure –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx –user&#x3D;www –group&#x3D;www –with-http_stub_status_module –with-http_v2_module –with-http_ssl_module –with-http_gzip_static_module –with-http_realip_module –with-http_flv_module –with-http_mp4_module –with-openssl&#x3D;..&#x2F;openssl-1.0.2o –with-pcre&#x3D;..&#x2F;pcre-8.42 –with-pcre-jit –with-ld-opt&#x3D;-ljemalloc –add-module&#x3D;..&#x2F;ngx_cache_purge-2.3 –add-module&#x3D;&#x2F;root&#x2F;incubator-pagespeed-ngx-1.13.35.2-stable<br>make  #编译<br>mv &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx{,_`date +%F`}  #备份nginx<br>cp objs&#x2F;nginx &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin<br>nginx -V </p>
<h1 id="显示incubator-pagespeed-ngx-1-13-35-2-stable表示已经安装成功"><a href="#显示incubator-pagespeed-ngx-1-13-35-2-stable表示已经安装成功" class="headerlink" title="显示incubator-pagespeed-ngx-1.13.35.2-stable表示已经安装成功"></a>显示incubator-pagespeed-ngx-1.13.35.2-stable表示已经安装成功</h1><p>#利用oneinstack自带的升级脚本编译ngx_pagespeed模块<br>#修改<br>vim ~&#x2F;oneinstack&#x2F;include&#x2F;upgrade_web.sh<br>#找到<br>.&#x2F;configure $nginx_configure_arguments<br>#在其后面加上编译模块，例如<br>.&#x2F;configure $nginx_configure_arguments –add-module&#x3D;&#x2F;root&#x2F;incubator-pagespeed-ngx-1.13.35.2-stable<br>#最后执行升级，选择Nginx<br>~&#x2F;oneinstack&#x2F;upgrade.sh</p>
<p>#利用LNMP自带的升级脚本编译ngx_pagespeed模块<br>cd &#x2F;lnmp1.3-full&#x2F;include<br>vi upgrade_nginx.sh<br>#找到 .&#x2F;configure –user&#x3D;www –group&#x3D;www –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx，在这行代码的末尾添加<br>–add-module&#x3D;&#x2F;root&#x2F;incubator-pagespeed-ngx-1.13.35.2-stable<br>#执行升级，选择Nginx<br>.&#x2F;upgrade_nginx.sh</p>
<h2 id="二、ngx-pagespeed配置"><a href="#二、ngx-pagespeed配置" class="headerlink" title="二、ngx_pagespeed配置"></a>二、ngx_pagespeed配置</h2><h3 id="2-1-基本设置"><a href="#2-1-基本设置" class="headerlink" title="2.1 基本设置"></a>2.1 基本设置</h3><p>ngx_pagespeed提供非常多的优化选项，但是在最开始部分我们还是需要确定是否开启pagespeed的各项功能，根据你自己的需要来决定，如下：</p>
<p># 启用ngx_pagespeed 开始<br>pagespeed on;<br>#列出优化过程中所有失败的请求，debug 时很有用，失败的信息会打印到 error log 里<br>#pagespeed ListOutstandingUrlsOnError on;</p>
<p># 不能删 。确保对pagespeed优化资源的请求进入pagespeed处理程序并且没有额外的头部信息<br>location ~ “\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+” { add_header “” “”; }<br>location ~ “^&#x2F;pagespeed_static&#x2F;“ { }<br>location ~ “^&#x2F;ngx_pagespeed_beacon$” { }<br>location &#x2F;ngx_pagespeed_statistics { allow 127.0.0.1; deny all; }<br>location &#x2F;ngx_pagespeed_global_statistics { allow 127.0.0.1; deny all; }<br>location &#x2F;ngx_pagespeed_message { allow 127.0.0.1; deny all; }<br>location &#x2F;pagespeed_console { allow 127.0.0.1; deny all; }<br>location ~ ^&#x2F;pagespeed_admin { allow 127.0.0.1; deny all; }<br>location ~ ^&#x2F;pagespeed_global_admin { allow 127.0.0.1; deny all; }</p>
<p># 配置服务器缓存位置和自动清除触发条件（空间大小、时限）<br>pagespeed CreateSharedMemoryMetadataCache &#x2F;tmp&#x2F;ngx_pagespeed_cache 51200;<br>pagespeed DefaultSharedMemoryCacheKB 51200;<br>pagespeed FileCachePath &#x2F;tmp&#x2F;ngx_pagespeed_cache;<br>pagespeed FileCacheSizeKb 2048000;<br>pagespeed FileCacheCleanIntervalMs 43200000;<br>pagespeed FileCacheInodeLimit 500000;</p>
<p># 过滤器级别（自定义模式）<br>pagespeed RewriteLevel PassThrough;</p>
<h1 id="一个标识而已（若在浏览器开发者工具里的链接请求响应标头看到此标识，则说明-PageSpeed-生效）"><a href="#一个标识而已（若在浏览器开发者工具里的链接请求响应标头看到此标识，则说明-PageSpeed-生效）" class="headerlink" title="一个标识而已（若在浏览器开发者工具里的链接请求响应标头看到此标识，则说明 PageSpeed 生效）"></a>一个标识而已（若在浏览器开发者工具里的链接请求响应标头看到此标识，则说明 PageSpeed 生效）</h1><p>pagespeed XHeaderValue “Powered By wzfou.com”;</p>
<h1 id="HTML页面链接转小写（SEO-优化，推荐）"><a href="#HTML页面链接转小写（SEO-优化，推荐）" class="headerlink" title="HTML页面链接转小写（SEO 优化，推荐）"></a>HTML页面链接转小写（SEO 优化，推荐）</h1><p>pagespeed LowercaseHtmlNames on;</p>
<h1 id="重置-HTTP-Vary-头-除非有特殊需求，建议不开启，默认配置往往是最佳配置"><a href="#重置-HTTP-Vary-头-除非有特殊需求，建议不开启，默认配置往往是最佳配置" class="headerlink" title="重置 HTTP Vary 头 除非有特殊需求，建议不开启，默认配置往往是最佳配置"></a>重置 HTTP Vary 头 除非有特殊需求，建议不开启，默认配置往往是最佳配置</h1><h1 id="pagespeed-RespectVary-on"><a href="#pagespeed-RespectVary-on" class="headerlink" title="pagespeed RespectVary on;"></a>pagespeed RespectVary on;</h1><p>#PageSpeed能够根据响应头中指定的任何内容安全策略调整其优化<br>pagespeed HonorCsp on;<br>#PageSpeed 默认遵守 Cache-Control: no-transform 协议， 表示不可被中间代理软件改写，如果想让优化效果最大化，可以关闭<br>#pagespeed DisableRewriteOnNoTransform off;</p>
<p># 启用 样式属性&#x2F;CSS&#x2F;JavaScript&#x2F;Images 重写，其它功能的先决开关<br>pagespeed EnableFilters rewrite_style_attributes,rewrite_css,rewrite_javascript,rewrite_images;<br>#重写CSS文件，以便首先加载渲染页面的CSS规则。<br>pagespeed EnableFilters prioritize_critical_css;</p>
<h3 id="2-2-缓存"><a href="#2-2-缓存" class="headerlink" title="2.2 缓存"></a>2.2 缓存</h3><p>ngx_pagespeed支持开启缓存，包括本地缓存和memcached或Redis缓存，根据你自己的需要决定是否开启。</p>
<p>###########缓存 ##########<br>#相当于同时使用了extend_cache_images, extend_cache_scripts和 extend_cache_css<br>pagespeed EnableFilters extend_cache;<br>pagespeed EnableFilters extend_cache_pdfs;<br>pagespeed EnableFilters local_storage_cache;<br>#开启使用Redis（和memcached只能先其一）<br>#pagespeed RedisServer “127.0.0.1:6379”;</p>
<h1 id="memcached优化-如果没有memcached优化请删去"><a href="#memcached优化-如果没有memcached优化请删去" class="headerlink" title="memcached优化,如果没有memcached优化请删去"></a>memcached优化,如果没有memcached优化请删去</h1><p>pagespeed MemcachedThreads 1;<br>pagespeed MemcachedServers “127.0.0.1:11211”;</p>
<h3 id="2-3-JS和CSS"><a href="#2-3-JS和CSS" class="headerlink" title="2.3 JS和CSS"></a>2.3 JS和CSS</h3><p>ngx_pagespeed可以对网站的JS和CSS文件进行重写以达到减轻浏览器压力保证访问速度的目的，如下：</p>
<p>########JS和CSS########</p>
<h1 id="启用JavaScript库卸载-谷歌被QQ，并不确定这个设置有没有副作用"><a href="#启用JavaScript库卸载-谷歌被QQ，并不确定这个设置有没有副作用" class="headerlink" title="启用JavaScript库卸载 谷歌被QQ，并不确定这个设置有没有副作用"></a>启用JavaScript库卸载 谷歌被QQ，并不确定这个设置有没有副作用</h1><h1 id="pagespeed-EnableFilters-canonicalize-javascript-libraries"><a href="#pagespeed-EnableFilters-canonicalize-javascript-libraries" class="headerlink" title="pagespeed EnableFilters canonicalize_javascript_libraries;"></a>pagespeed EnableFilters canonicalize_javascript_libraries;</h1><h1 id="把多个CSS文件合并成一个CSS文件（比较容易引起主题版面混乱，所以我禁用了"><a href="#把多个CSS文件合并成一个CSS文件（比较容易引起主题版面混乱，所以我禁用了" class="headerlink" title="把多个CSS文件合并成一个CSS文件（比较容易引起主题版面混乱，所以我禁用了)"></a>把多个CSS文件合并成一个CSS文件（比较容易引起主题版面混乱，所以我禁用了)</h1><p>#pagespeed EnableFilters combine_css;</p>
<h1 id="重写CSS，首先加载渲染页面的CSS规则"><a href="#重写CSS，首先加载渲染页面的CSS规则" class="headerlink" title="重写CSS，首先加载渲染页面的CSS规则"></a>重写CSS，首先加载渲染页面的CSS规则</h1><p> pagespeed EnableFilters prioritize_critical_css;</p>
<h1 id="把多个JavaScript文件合并成一个JavaScript文件，禁用原因同上，大家可以酌情开启"><a href="#把多个JavaScript文件合并成一个JavaScript文件，禁用原因同上，大家可以酌情开启" class="headerlink" title="把多个JavaScript文件合并成一个JavaScript文件，禁用原因同上，大家可以酌情开启"></a>把多个JavaScript文件合并成一个JavaScript文件，禁用原因同上，大家可以酌情开启</h1><p>#pagespeed EnableFilters combine_javascript;</p>
<h1 id="删除带默认属性的标签"><a href="#删除带默认属性的标签" class="headerlink" title="删除带默认属性的标签"></a>删除带默认属性的标签</h1><p> pagespeed EnableFilters elide_attributes;</p>
<h1 id="更换被导入文件的-import，精简CSS文件"><a href="#更换被导入文件的-import，精简CSS文件" class="headerlink" title="更换被导入文件的@import，精简CSS文件"></a>更换被导入文件的@import，精简CSS文件</h1><p> pagespeed EnableFilters flatten_css_imports;<br> pagespeed CssFlattenMaxBytes 5120;</p>
<h1 id="启用JavaScript缩小机制"><a href="#启用JavaScript缩小机制" class="headerlink" title="启用JavaScript缩小机制"></a>启用JavaScript缩小机制</h1><p> pagespeed EnableFilters rewrite_javascript;</p>
<h3 id="2-4-图片"><a href="#2-4-图片" class="headerlink" title="2.4 图片"></a>2.4 图片</h3><p>ngx_pagespeed可以自动压缩图片、将图片格式转换为WebP（一种体积更小的图片格式）、延时加载图片、图片预加载等，如下：</p>
<p>####### 图片########</p>
<h1 id="延时加载图片"><a href="#延时加载图片" class="headerlink" title="延时加载图片"></a>延时加载图片</h1><p>pagespeed EnableFilters lazyload_images;</p>
<h1 id="不加载显示区域以外的图片"><a href="#不加载显示区域以外的图片" class="headerlink" title="不加载显示区域以外的图片"></a>不加载显示区域以外的图片</h1><p>pagespeed LazyloadImagesAfterOnload off;<br>pagespeed LazyloadImagesBlankUrl “<a href="https://wzfou.cdn.bcebos.com/1.gif&quot;">https://wzfou.cdn.bcebos.com/1.gif&quot;</a>;</p>
<h1 id="启用图片优化机制-主要是-inline-images-recompress-images-convert-to-webp-lossless（这个命令会把PNG和静态Gif图片转化为webp）-and-resize-images"><a href="#启用图片优化机制-主要是-inline-images-recompress-images-convert-to-webp-lossless（这个命令会把PNG和静态Gif图片转化为webp）-and-resize-images" class="headerlink" title="启用图片优化机制(主要是 inline_images, recompress_images, convert_to_webp_lossless（这个命令会把PNG和静态Gif图片转化为webp）, and resize_images.)"></a>启用图片优化机制(主要是 inline_images, recompress_images, convert_to_webp_lossless（这个命令会把PNG和静态Gif图片转化为webp）, and resize_images.)</h1><p>pagespeed EnableFilters rewrite_images;<br>#组合 convert_gif_to_png, convert_jpeg_to_progressive, convert_jpeg_to_webp, convert_png_to_jpeg, jpeg_subsampling, recompress_jpeg, recompress_png, recompress_webp, #strip_image_color_profile, and strip_image_meta_data.<br>pagespeed EnableFilters recompress_images;</p>
<h1 id="将JPEG图片转化为webp格式"><a href="#将JPEG图片转化为webp格式" class="headerlink" title="将JPEG图片转化为webp格式"></a>将JPEG图片转化为webp格式</h1><p>pagespeed EnableFilters convert_jpeg_to_webp;</p>
<h1 id="将动画Gif图片转化为动画webp格式"><a href="#将动画Gif图片转化为动画webp格式" class="headerlink" title="将动画Gif图片转化为动画webp格式"></a>将动画Gif图片转化为动画webp格式</h1><p>pagespeed EnableFilters convert_to_webp_animated;</p>
<h1 id="图片预加载"><a href="#图片预加载" class="headerlink" title="图片预加载"></a>图片预加载</h1><p>pagespeed EnableFilters inline_preview_images;</p>
<h1 id="移动端图片自适应重置"><a href="#移动端图片自适应重置" class="headerlink" title="移动端图片自适应重置"></a>移动端图片自适应重置</h1><p>pagespeed EnableFilters resize_mobile_images;<br>pagespeed EnableFilters responsive_images,resize_images;<br>pagespeed EnableFilters insert_image_dimensions;<br>pagespeed EnableFilters resize_rendered_image_dimensions;<br>pagespeed EnableFilters strip_image_meta_data;<br>pagespeed EnableFilters convert_jpeg_to_webp,convert_to_webp_lossless,convert_to_webp_animated;<br>pagespeed EnableFilters sprite_images;<br>pagespeed EnableFilters convert_png_to_jpeg,convert_jpeg_to_webp;</p>
<p>#让JS里引用的图片也加入优化<br>pagespeed InPlaceResourceOptimization on;<br>pagespeed EnableFilters in_place_optimize_for_browser;</p>
<h3 id="2-5-CDN"><a href="#2-5-CDN" class="headerlink" title="2.5 CDN"></a>2.5 CDN</h3><p>如果你的网站里的图片、JS和CSS等启用了CDN加速，那么可以利用ngx_pagespeed的域名重写功能，将静态文件的地址替换为CDN的加速地址。此处比较适合用了<a href="https://wzfou.com/tag/youpaiyun/">又拍云</a>、<a href="https://wzfou.com/qiniu-cdn/">七牛云</a>、阿里云OSS的镜像CDN加速功能。</p>
<p>#启用静态文件CDN加速<br>pagespeed EnableFilters rewrite_domains;<br>pagespeed Domain <a href="https://wzfou.com/">https://wzfou.com</a>;<br>pagespeed MapRewriteDomain <a href="https://cdn.wzfou.com/">https://cdn.wzfou.com</a>  <a href="https://wzfou.com/">https://wzfou.com</a>;</p>
<h3 id="2-6-排除"><a href="#2-6-排除" class="headerlink" title="2.6 排除"></a>2.6 排除</h3><p>想要让某一个页面或者目录不使用ngx_pagespeed，使用以下命令：</p>
<p># 过滤不需要启用的目录或文件<br>#pagespeed Disallow “*&#x2F;wp-admin&#x2F;*“;<br>#pagespeed Disallow “*&#x2F;wp-login.php*“;<br>pagespeed Disallow “*&#x2F;vps-pingfen&#x2F;“;</p>
<h1 id="启用压缩空白过滤器"><a href="#启用压缩空白过滤器" class="headerlink" title="启用压缩空白过滤器"></a>启用压缩空白过滤器</h1><p>pagespeed EnableFilters collapse_whitespace; </p>
<h1 id="预解析DNS查询"><a href="#预解析DNS查询" class="headerlink" title="预解析DNS查询"></a>预解析DNS查询</h1><p>pagespeed EnableFilters insert_dns_prefetch;</p>
<h2 id="三、Nginx代码配置示例"><a href="#三、Nginx代码配置示例" class="headerlink" title="三、Nginx代码配置示例"></a>三、Nginx代码配置示例</h2><p>这里贴出挖站否的Nginx PageSpeed配置示例，以供大家参考：</p>
<p><img src="/2020/04/pagespeed_03.jpg" alt="PageSpeed配置代码"></p>
<p><strong>Nginx.conf</strong>配置如下：</p>
<p># 启用ngx_pagespeed 开始<br>pagespeed on;<br>#列出优化过程中所有失败的请求，debug 时很有用，失败的信息会打印到 error log 里<br>#pagespeed ListOutstandingUrlsOnError on;</p>
<p># 配置服务器缓存位置和自动清除触发条件（空间大小、时限）<br>#路径请提前创建好，可以放在内存也可以放在临时文件夹中<br>pagespeed CreateSharedMemoryMetadataCache &#x2F;tmp&#x2F;ngx_pagespeed_cache 51200;<br>pagespeed DefaultSharedMemoryCacheKB 51200;<br>pagespeed FileCachePath &#x2F;tmp&#x2F;ngx_pagespeed_cache;<br>pagespeed FileCacheSizeKb 2048000;<br>pagespeed FileCacheCleanIntervalMs 43200000;<br>pagespeed FileCacheInodeLimit 500000;</p>
<p># 过滤器级别（自定义模式）<br>pagespeed RewriteLevel PassThrough;</p>
<h1 id="一个标识而已（若在浏览器开发者工具里的链接请求响应标头看到此标识，则说明-PageSpeed-生效）-1"><a href="#一个标识而已（若在浏览器开发者工具里的链接请求响应标头看到此标识，则说明-PageSpeed-生效）-1" class="headerlink" title="一个标识而已（若在浏览器开发者工具里的链接请求响应标头看到此标识，则说明 PageSpeed 生效）"></a>一个标识而已（若在浏览器开发者工具里的链接请求响应标头看到此标识，则说明 PageSpeed 生效）</h1><p>pagespeed XHeaderValue “Powered By wzfou.com”;</p>
<h1 id="HTML页面链接转小写（SEO-优化，推荐）-1"><a href="#HTML页面链接转小写（SEO-优化，推荐）-1" class="headerlink" title="HTML页面链接转小写（SEO 优化，推荐）"></a>HTML页面链接转小写（SEO 优化，推荐）</h1><p>pagespeed LowercaseHtmlNames on;</p>
<h1 id="重置-HTTP-Vary-头-除非有特殊需求，建议不开启，默认配置往往是最佳配置-1"><a href="#重置-HTTP-Vary-头-除非有特殊需求，建议不开启，默认配置往往是最佳配置-1" class="headerlink" title="重置 HTTP Vary 头 除非有特殊需求，建议不开启，默认配置往往是最佳配置"></a>重置 HTTP Vary 头 除非有特殊需求，建议不开启，默认配置往往是最佳配置</h1><h1 id="pagespeed-RespectVary-on-1"><a href="#pagespeed-RespectVary-on-1" class="headerlink" title="pagespeed RespectVary on;"></a>pagespeed RespectVary on;</h1><p>#PageSpeed能够根据响应头中指定的任何内容安全策略调整其优化<br>pagespeed HonorCsp on;<br>#PageSpeed 默认遵守 Cache-Control: no-transform 协议， 表示不可被中间代理软件改写，如果想让优化效果最大化，可以关闭<br>#pagespeed DisableRewriteOnNoTransform off;</p>
<p># 启用 样式属性&#x2F;CSS&#x2F;JavaScript&#x2F;Images 重写，其它功能的先决开关<br>pagespeed EnableFilters rewrite_style_attributes,rewrite_css,rewrite_javascript,rewrite_images;<br>#重写CSS文件，以便首先加载渲染页面的CSS规则。<br>pagespeed EnableFilters prioritize_critical_css;</p>
<p>###########缓存 ##########<br>#相当于同时使用了extend_cache_images, extend_cache_scripts和 extend_cache_css<br>pagespeed EnableFilters extend_cache;<br>pagespeed EnableFilters extend_cache_pdfs;<br>pagespeed EnableFilters local_storage_cache;<br>#开启使用Redis（和memcached只能先其一）<br>#pagespeed RedisServer “127.0.0.1:6379”;</p>
<h1 id="memcached优化-如果没有memcached优化请删去-1"><a href="#memcached优化-如果没有memcached优化请删去-1" class="headerlink" title="memcached优化,如果没有memcached优化请删去"></a>memcached优化,如果没有memcached优化请删去</h1><p>pagespeed MemcachedThreads 1;<br>pagespeed MemcachedServers “127.0.0.1:11211”;</p>
<p>######## 过滤规则 ########</p>
<p># 过滤不需要启用的目录或文件<br>#pagespeed Disallow “*&#x2F;wp-admin&#x2F;*“;<br>#pagespeed Disallow “*&#x2F;wp-login.php*“;<br>pagespeed Disallow “*&#x2F;vps-pingfen&#x2F;“;</p>
<h1 id="启用压缩空白过滤器-1"><a href="#启用压缩空白过滤器-1" class="headerlink" title="启用压缩空白过滤器"></a>启用压缩空白过滤器</h1><p>pagespeed EnableFilters collapse_whitespace; </p>
<h1 id="预解析DNS查询-1"><a href="#预解析DNS查询-1" class="headerlink" title="预解析DNS查询"></a>预解析DNS查询</h1><p> pagespeed EnableFilters insert_dns_prefetch;</p>
<p>########JS和CSS########</p>
<h1 id="启用JavaScript库卸载-谷歌被QQ，并不确定这个设置有没有副作用-1"><a href="#启用JavaScript库卸载-谷歌被QQ，并不确定这个设置有没有副作用-1" class="headerlink" title="启用JavaScript库卸载 #谷歌被QQ，并不确定这个设置有没有副作用"></a>启用JavaScript库卸载 #谷歌被QQ，并不确定这个设置有没有副作用</h1><h1 id="pagespeed-EnableFilters-canonicalize-javascript-libraries-1"><a href="#pagespeed-EnableFilters-canonicalize-javascript-libraries-1" class="headerlink" title="pagespeed EnableFilters canonicalize_javascript_libraries;"></a>pagespeed EnableFilters canonicalize_javascript_libraries;</h1><h1 id="把多个CSS文件合并成一个CSS文件（比较容易引起主题版面混乱，所以我禁用了-1"><a href="#把多个CSS文件合并成一个CSS文件（比较容易引起主题版面混乱，所以我禁用了-1" class="headerlink" title="把多个CSS文件合并成一个CSS文件（比较容易引起主题版面混乱，所以我禁用了"></a>把多个CSS文件合并成一个CSS文件（比较容易引起主题版面混乱，所以我禁用了</h1><p>#pagespeed EnableFilters combine_css;</p>
<h1 id="重写CSS，首先加载渲染页面的CSS规则-1"><a href="#重写CSS，首先加载渲染页面的CSS规则-1" class="headerlink" title="重写CSS，首先加载渲染页面的CSS规则"></a>重写CSS，首先加载渲染页面的CSS规则</h1><p> pagespeed EnableFilters prioritize_critical_css;</p>
<h1 id="把多个JavaScript文件合并成一个JavaScript文件，禁用原因同上，大家可以酌情开启-1"><a href="#把多个JavaScript文件合并成一个JavaScript文件，禁用原因同上，大家可以酌情开启-1" class="headerlink" title="把多个JavaScript文件合并成一个JavaScript文件，禁用原因同上，大家可以酌情开启"></a>把多个JavaScript文件合并成一个JavaScript文件，禁用原因同上，大家可以酌情开启</h1><p>#pagespeed EnableFilters combine_javascript;</p>
<h1 id="删除带默认属性的标签-1"><a href="#删除带默认属性的标签-1" class="headerlink" title="删除带默认属性的标签"></a>删除带默认属性的标签</h1><p> pagespeed EnableFilters elide_attributes;</p>
<h1 id="更换被导入文件的-import，精简CSS文件-1"><a href="#更换被导入文件的-import，精简CSS文件-1" class="headerlink" title="更换被导入文件的@import，精简CSS文件"></a>更换被导入文件的@import，精简CSS文件</h1><p> pagespeed EnableFilters flatten_css_imports;<br> pagespeed CssFlattenMaxBytes 5120;</p>
<h1 id="启用JavaScript缩小机制-1"><a href="#启用JavaScript缩小机制-1" class="headerlink" title="启用JavaScript缩小机制"></a>启用JavaScript缩小机制</h1><p> pagespeed EnableFilters rewrite_javascript;</p>
<p>####### 图片########</p>
<h1 id="延时加载图片-1"><a href="#延时加载图片-1" class="headerlink" title="延时加载图片"></a>延时加载图片</h1><p> pagespeed EnableFilters lazyload_images;</p>
<h1 id="不加载显示区域以外的图片-1"><a href="#不加载显示区域以外的图片-1" class="headerlink" title="不加载显示区域以外的图片"></a>不加载显示区域以外的图片</h1><p>pagespeed LazyloadImagesAfterOnload off;<br>pagespeed LazyloadImagesBlankUrl “<a href="https://wzfou.cdn.bcebos.com/1.gif&quot;">https://wzfou.cdn.bcebos.com/1.gif&quot;</a>;</p>
<h1 id="启用图片优化机制-主要是-inline-images-recompress-images-convert-to-webp-lossless（这个命令会把PNG和静态Gif图片转化为webp）-and-resize-images-1"><a href="#启用图片优化机制-主要是-inline-images-recompress-images-convert-to-webp-lossless（这个命令会把PNG和静态Gif图片转化为webp）-and-resize-images-1" class="headerlink" title="启用图片优化机制(主要是 inline_images, recompress_images, convert_to_webp_lossless（这个命令会把PNG和静态Gif图片转化为webp）, and resize_images.)"></a>启用图片优化机制(主要是 inline_images, recompress_images, convert_to_webp_lossless（这个命令会把PNG和静态Gif图片转化为webp）, and resize_images.)</h1><p> pagespeed EnableFilters rewrite_images;<br>#组合 convert_gif_to_png, convert_jpeg_to_progressive, convert_jpeg_to_webp, convert_png_to_jpeg, jpeg_subsampling, recompress_jpeg, recompress_png, recompress_webp, #strip_image_color_profile, and strip_image_meta_data.<br>pagespeed EnableFilters recompress_images;</p>
<h1 id="将JPEG图片转化为webp格式-1"><a href="#将JPEG图片转化为webp格式-1" class="headerlink" title="将JPEG图片转化为webp格式"></a>将JPEG图片转化为webp格式</h1><p> pagespeed EnableFilters convert_jpeg_to_webp;</p>
<h1 id="将动画Gif图片转化为动画webp格式-1"><a href="#将动画Gif图片转化为动画webp格式-1" class="headerlink" title="将动画Gif图片转化为动画webp格式"></a>将动画Gif图片转化为动画webp格式</h1><p> pagespeed EnableFilters convert_to_webp_animated;</p>
<p>pagespeed EnableFilters inline_preview_images;<br>pagespeed EnableFilters resize_mobile_images;<br>pagespeed EnableFilters responsive_images,resize_images;<br>pagespeed EnableFilters insert_image_dimensions;<br>pagespeed EnableFilters resize_rendered_image_dimensions;<br>pagespeed EnableFilters strip_image_meta_data;<br>pagespeed EnableFilters convert_jpeg_to_webp,convert_to_webp_lossless,convert_to_webp_animated;<br>pagespeed EnableFilters sprite_images;<br>pagespeed EnableFilters convert_png_to_jpeg,convert_jpeg_to_webp;</p>
<p>#让JS里引用的图片也加入优化<br>pagespeed InPlaceResourceOptimization on;<br>pagespeed EnableFilters in_place_optimize_for_browser; </p>
<h1 id="启用ngx-pagespeed-结束"><a href="#启用ngx-pagespeed-结束" class="headerlink" title="启用ngx_pagespeed 结束"></a>启用ngx_pagespeed 结束</h1><p><strong>wzfou.com.conf</strong>的配置如下：</p>
<p># 启用ngx_pagespeed 开始 </p>
<p>pagespeed EnableFilters rewrite_domains;<br>pagespeed Domain <a href="https://wzfou.com/">https://wzfou.com</a>;<br>pagespeed MapRewriteDomain <a href="https://wzfou.cdn.bcebos.com/">https://wzfou.cdn.bcebos.com</a>  <a href="https://wzfou.com/">https://wzfou.com</a>;</p>
<h1 id="不能删-。确保对pagespeed优化资源的请求进入pagespeed处理程序并且没有额外的头部信息"><a href="#不能删-。确保对pagespeed优化资源的请求进入pagespeed处理程序并且没有额外的头部信息" class="headerlink" title="不能删 。确保对pagespeed优化资源的请求进入pagespeed处理程序并且没有额外的头部信息"></a>不能删 。确保对pagespeed优化资源的请求进入pagespeed处理程序并且没有额外的头部信息</h1><p>location ~ “\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+” { add_header “” “”; }<br>location ~ “^&#x2F;pagespeed_static&#x2F;“ { }<br>location ~ “^&#x2F;ngx_pagespeed_beacon$” { }<br>location &#x2F;ngx_pagespeed_statistics { allow 127.0.0.1; deny all; }<br>location &#x2F;ngx_pagespeed_global_statistics { allow 127.0.0.1; deny all; }<br>location &#x2F;ngx_pagespeed_message { allow 127.0.0.1; deny all; }<br>location &#x2F;pagespeed_console { allow 127.0.0.1; deny all; }<br>location ~ ^&#x2F;pagespeed_admin { allow 127.0.0.1; deny all; }<br>location ~ ^&#x2F;pagespeed_global_admin { allow 127.0.0.1; deny all; }</p>
<p># 启用ngx_pagespeed 结束</p>
<h2 id="四、PageSpeed加速效果"><a href="#四、PageSpeed加速效果" class="headerlink" title="四、PageSpeed加速效果"></a>四、PageSpeed加速效果</h2><p>使用Nginx PageSpeed最大的好处就是网站的图片被无损（至少肉眼是无法分辨出来）压缩到了WebP格式，这大大加快了以浏览器的下载速度。</p>
<p><img src="/2020/04/pagespeed_06.png" alt="ngx_pagespeed压缩图片"></p>
<p>尤其是网站图片比较大的话，WebP格式加速作用就更加明显。体验：<a href="https://ttfou.com/explore/recent">https://ttfou.com/explore/recent</a> 和 <a href="https://pic.tietufou.com/found">https://pic.tietufou.com/found</a></p>
<p><img src="/2020/04/pagespeed_07.jpg" alt="ngx_pagespeed网站图片"></p>
<p>另外，网站的JS和CSS地址也会被重写，如下图：</p>
<p><img src="/2020/04/pagespeed_05.png" alt="ngx_pagespeed重写地址"></p>
<p>如果你启用了磁盘缓存，你就可以看到缓存生成的文件了，如果要清除缓存可以手动把这些缓存文件给删除了：</p>
<p><img src="/2020/04/pagespeed_01.png" alt="PageSpeed缓存文件"></p>
<p>Nginx PageSpeed的图片延迟加载效果也可以点击查看以下视频：</p>
<p>视频播放器</p>
<p>00:00</p>
<p>00:10</p>
<h2 id="五、PageSpeed使用问题"><a href="#五、PageSpeed使用问题" class="headerlink" title="五、PageSpeed使用问题"></a>五、PageSpeed使用问题</h2><h3 id="5-1-系统负载增高"><a href="#5-1-系统负载增高" class="headerlink" title="5.1 系统负载增高"></a>5.1 系统负载增高</h3><p><a href="https://wzfou.com/tag/nginx-pagespeed/">Nginx PageSpeed</a>在重写URL、转换图片格式等过程中需要用到系统更多的内存和CPU，所以在刚开机没有建立缓存时会发现系统负载增高的现象，要发挥Nginx PageSpeed的作用要保证一个高性能的CPU和内存。</p>
<p><img src="/2020/04/pagespeed_10.jpg" alt="PageSpeed增加系统负载"></p>
<h3 id="5-2-网页错乱"><a href="#5-2-网页错乱" class="headerlink" title="5.2 网页错乱"></a>5.2 网页错乱</h3><p>这种情况通常见于开启了CSS和JS合并，如果你出现这样的问题可以关闭CSS和JS文件合并甚至是重写等。</p>
<p><img src="/2020/04/pagespeed_09.jpg" alt="PageSpeed网页布局错乱"></p>
<h3 id="5-3-清除缓存"><a href="#5-3-清除缓存" class="headerlink" title="5.3 清除缓存"></a>5.3 清除缓存</h3><p>启用了Nginx PageSpeed后，如果你修改了网站的CSS或者JS等文件不清除缓存是无法生效了，清除缓存方法如下：</p>
<p>#手动删除，该目录为你在nginx设置的缓存目录<br>rm -fr &#x2F;tmp&#x2F;ngx_pagespeed_cache&#x2F;*</p>
<p>#或者由pagespeed清空缓存 5秒后开始<br>sudo touch &#x2F;tmp&#x2F;ngx_pagespeed_cache&#x2F;cache.flush</p>
<h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>ngx_pagespeed只是在服务器层面加快网站与浏览器的响应速度，主要是对JS、CSS、图片等进行优化。但是正如我之前所说的，要想速度更快根本的解决办法还是在硬件上，<strong>软件层面的优化是锦上添花，硬件层面的优化是雪中送炭。</strong></p>
<p><a href="https://wzfou.com/tag/nginx-pagespeed/">Nginx PageSpeed</a>的配置要根据不同的网站来设定，不一定所有的优化选项都需要开启。总的感觉是Nginx PageSpeed对那些网站图片多、JS和CSS多的比较有效果，适合CMS网站、网络相册等，提升浏览器的访问速度比较明显。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Nginx</tag>
        <tag>CentOS</tag>
        <tag>Debian</tag>
        <tag>Linux</tag>
        <tag>OneinStack</tag>
        <tag>PageSpeed</tag>
      </tags>
  </entry>
  <entry>
    <title>一键安装脚本（四合一）</title>
    <url>/2017/10/26/shadowsocks-%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%EF%BC%88%E5%9B%9B%E5%90%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p><img src="https://www.jarods.org/wp-content/uploads/2017/10/shadowsocks.png" title="Shadowsocks一键安装脚本（四合一版）"></p>
<h2 id="本脚本适用环境"><a href="#本脚本适用环境" class="headerlink" title="本脚本适用环境"></a>本脚本适用环境</h2><p>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+ 内存要求：≥128M 日期　　：2017 年 10 月 22 日</p>
<h3 id="关于本脚本"><a href="#关于本脚本" class="headerlink" title="关于本脚本"></a>关于本脚本</h3><p>1、一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端； 2、各版本的启动脚本及配置文件名不再重合； 3、每次运行可安装一种版本； 4、支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）； 5、若已安装多个版本，则卸载时也需多次运行（每次卸载一种）； 6、Shadowsocks-Python 和 ShadowsocksR 安装后不可同时启动（因为本质上都属 Python 版）。</p>
<p><strong>友情提示：</strong>如果你有问题，请先阅读这篇《<a href="https://teddysun.com/399.html">Shadowsocks Troubleshooting</a>》之后再询问。</p>
<h3 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h3><p>服务器端口：自己设定（如不设定，默认为 8989） 密码：自己设定（如不设定，默认为 teddysun.com） 加密方式：自己设定（如不设定，Python 和 libev 版默认为 aes-256-gcm，R 和 Go 版默认为 aes-256-cfb） 协议（protocol）：自己设定（如不设定，默认为 origin）（仅限 ShadowsocksR 版） 混淆（obfs）：自己设定（如不设定，默认为 plain）（仅限 ShadowsocksR 版） <strong>备注：</strong>脚本默认创建单用户配置文件，如需配置多用户，请手动修改相应的配置文件后重启即可。</p>
<h3 id="客户端下载"><a href="#客户端下载" class="headerlink" title="客户端下载"></a>客户端下载</h3><p>常规版 Windows 客户端 <a href="https://github.com/shadowsocks/shadowsocks-windows/releases">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p>
<p>ShadowsocksR 版 Windows 客户端 <a href="http://dl.teddysun.com/files/ShadowsocksR-4.7.0-win.7z">https://github.com/shadowsocksr/shadowsocksr-csharp/releases</a></p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>使用root用户登录，运行以下命令：</p>
<p>wget –no-check-certificate -O shadowsocks-all.sh <a href="https://raw.githubusercontent.com/teddysun/shadowsocks/_install/master/shadowsocks-all.sh">https://raw.githubusercontent.com/teddysun/shadowsocks\_install/master/shadowsocks-all.sh</a><br>chmod +x shadowsocks-all.sh<br>.&#x2F;shadowsocks-all.sh 2&gt;&amp;1  tee shadowsocks-all.log</p>
<h3 id="安装完成后，脚本提示如下"><a href="#安装完成后，脚本提示如下" class="headerlink" title="安装完成后，脚本提示如下"></a>安装完成后，脚本提示如下</h3><p>Congratulations, your_shadowsocks_version install completed!<br>Your Server IP        :your_server_ip<br>Your Server Port      :your_server_port<br>Your Password         :your_password<br>Your Encryption Method:your_encryption_method</p>
<p>Welcome to visit:<a href="https://teddysun.com/486.html">https://teddysun.com/486.html</a><br>Enjoy it!</p>
<h3 id="卸载方法"><a href="#卸载方法" class="headerlink" title="卸载方法"></a>卸载方法</h3><p>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）</p>
<p>使用root用户登录，运行以下命令：</p>
<p>.&#x2F;shadowsocks-all.sh uninstall</p>
<h3 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h3><p>启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。</p>
<p>Shadowsocks-Python 版： &#x2F;etc&#x2F;init.d&#x2F;shadowsocks-python start stop restart status</p>
<p>ShadowsocksR 版： &#x2F;etc&#x2F;init.d&#x2F;shadowsocks-r start stop restart status</p>
<p>Shadowsocks-Go 版： &#x2F;etc&#x2F;init.d&#x2F;shadowsocks-go start stop restart status</p>
<p>Shadowsocks-libev 版： &#x2F;etc&#x2F;init.d&#x2F;shadowsocks-libev start stop restart status</p>
<h3 id="各版本默认配置文件"><a href="#各版本默认配置文件" class="headerlink" title="各版本默认配置文件"></a>各版本默认配置文件</h3><p>Shadowsocks-Python 版： &#x2F;etc&#x2F;shadowsocks-python&#x2F;config.json</p>
<p>ShadowsocksR 版： &#x2F;etc&#x2F;shadowsocks-r&#x2F;config.json</p>
<p>Shadowsocks-Go 版： &#x2F;etc&#x2F;shadowsocks-go&#x2F;config.json</p>
<p>Shadowsocks-libev 版： &#x2F;etc&#x2F;shadowsocks-libev&#x2F;config.json</p>
<h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><p>2017 年 10 月 22 日： 1、升级：libsodium 到 1.0.15。</p>
<p>2017 年 10 月 14 日： 1、新增：在安装 Shadowsocks-libev 版时<strong>可选安装</strong> simple-obfs 服务端。 ※ 脚本通过判断 autoconf 版本是否大于或等于 2.67 来一键安装 simple-obfs 服务端。并且，支持在安装过程中选择 obfs 为 http 或 tls。 ※ 使用方法参考：<a href="https://teddysun.com/511.html">https://teddysun.com/511.html</a></p>
<p>2017 年 09 月 16 日： 1、修正：Shadowsocks-libev 版 v3.1.0 使用 libc-ares 替换 libudns 依赖包，解决了依赖问题； 2、升级：mbedtls 到版本 2.6.0。</p>
<p>2017 年 07 月 27 日： 1、新增：ShadowsocksR 版可选协议（protocol）auth_chain_b 。使用该协议需更新到最新（4.7.0） <a href="http://dl.teddysun.com/files/ShadowsocksR-4.7.0-win.7z">ShadowsocksR 版客户端</a>； 2、修改：更新 ShadowsocksR 源码下载地址。</p>
<p>2017 年 07 月 23 日： 1、修正：卸载时可自行选择某个版本卸载，若该版本不存在则报错退出。</p>
<p>2017 年 07 月 22 日： 1、修正：默认加密方式从 aes-256-cfb 改为 aes-256-gcm（Python 和 libev 版）； 2、新增：安装时可选 16 种加密方式的其中之一（Python 和 libev 版）。如下所示：</p>
<p>aes-256-gcm<br>aes-192-gcm<br>aes-128-gcm<br>aes-256-ctr<br>aes-192-ctr<br>aes-128-ctr<br>aes-256-cfb<br>aes-192-cfb<br>aes-128-cfb<br>camellia-128-cfb<br>camellia-192-cfb<br>camellia-256-cfb<br>chacha20-ietf-poly1305<br>chacha20-ietf<br>chacha20<br>rc4-md5</p>
<p>3、新增：安装时可选 9 种加密方式的其中之一（Go 版）。如下所示：</p>
<p>aes-256-cfb<br>aes-192-cfb<br>aes-128-cfb<br>aes-256-ctr<br>aes-192-ctr<br>aes-128-ctr<br>chacha20-ietf<br>chacha20<br>rc4-md5</p>
<p>4、新增：安装时可选 13 种加密方式的其中之一（none 是不加密，ShadowsocksR 版）。如下所示：</p>
<p>none<br>aes-256-cfb<br>aes-192-cfb<br>aes-128-cfb<br>aes-256-cfb8<br>aes-192-cfb8<br>aes-128-cfb8<br>aes-256-ctr<br>aes-192-ctr<br>aes-128-ctr<br>chacha20-ietf<br>chacha20<br>rc4-md5<br>rc4-md5-6</p>
<p>5、新增：安装时可选 7 种协议（protocol）的其中之一（仅限 ShadowsocksR 版）。如下所示：</p>
<p>origin<br>verify_deflate<br>auth_sha1_v4<br>auth_sha1_v4_compatible<br>auth_aes128_md5<br>auth_aes128_sha1<br>auth_chain_a<br>auth_chain_b</p>
<p>6、新增：安装时可选 9 种混淆（obfs）的其中之一（仅限 ShadowsocksR 版）。如下所示：</p>
<p>plain<br>http_simple<br>http_simple_compatible<br>http_post<br>http_post_compatible<br>tls1.2_ticket_auth<br>tls1.2_ticket_auth_compatible<br>tls1.2_ticket_fastauth<br>tls1.2_ticket_fastauth_compatible</p>
<p>2017 年 02 月 24 日： 1、恢复： 通过 Github API 自动获取 Shadowsocks-libev 的最新 release 版本的功能（v3.0.3）。</p>
<p>2017 年 02 月 13 日： 1、升级： Shadowsocks-libev 版到版本 3.0.2； 2、升级： Shadowsocks-go 版到版本 1.2.1（基于 <a href="https://github.com/shadowsocks/shadowsocks-go">Github 最新代码</a>，用 go 1.8 编译完成的 x86 和 x86_64 二进制文件）； 3、修复：在 Debian 7 下默认没有 libudns-dev 依赖包的问题。</p>
<p>2017 年 02 月 12 日： 1、升级： Shadowsocks-libev 版到版本 3.0.1。</p>
<p>2017 年 01 月 27 日： 1、升级： Shadowsocks-go 版到版本 1.2.1 （仅适用于 x86_64 系统）</p>
<h3 id="更多单版本-Shadowsocks-服务端一键安装脚本"><a href="#更多单版本-Shadowsocks-服务端一键安装脚本" class="headerlink" title="更多单版本 Shadowsocks 服务端一键安装脚本"></a>更多单版本 Shadowsocks 服务端一键安装脚本</h3><p><a href="https://teddysun.com/342.html">Shadowsocks Python 版一键安装脚本（CentOS，Debian，Ubuntu）</a> <a href="https://shadowsocks.be/9.html">ShadowsocksR 版一键安装脚本（CentOS，Debian，Ubuntu）</a> <a href="https://teddysun.com/357.html">CentOS 下 Shadowsocks-libev 一键安装脚本</a> <a href="https://teddysun.com/358.html">Debian 下 Shadowsocks-libev 一键安装脚本</a> <a href="https://teddysun.com/392.html">Shadowsocks-go 一键安装脚本（CentOS，Debian，Ubuntu）</a></p>
<p><strong>注意：</strong>以上单版本不可与该四合一版本混用。</p>
<p>转载请注明：<a href="https://teddysun.com/">秋水逸冰</a> » <a href="https://teddysun.com/486.html">Shadowsocks 一键安装脚本（四合一）</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
  </entry>
  <entry>
    <title>SmartPing / 开源、高效、便捷的网络质量监控神器</title>
    <url>/2018/08/25/smartping-%E5%BC%80%E6%BA%90%E3%80%81%E9%AB%98%E6%95%88%E3%80%81%E4%BE%BF%E6%8D%B7%E7%9A%84%E7%BD%91%E7%BB%9C%E8%B4%A8%E9%87%8F%E7%9B%91%E6%8E%A7%E7%A5%9E%E5%99%A8/</url>
    <content><![CDATA[<p><strong>说明：</strong>之前博主发过一个雨落大神写的<code>Ping</code>值监测工具uPing，不过有点单一，也缺少<code>Web</code>界面，今天再分享个<code>SmartPing</code>工具，可以同时<code>Ping</code>多个<code>IP</code>，支持正向<code>Ping</code>绘制，反向<code>Ping</code>绘制，互<code>Ping</code>拓扑绘制及报警功能。支持自定义延迟、丢包阈值报警。</p>
<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="https://www.jarods.org/wp-content/uploads/2018/10/1535597854-2727-r29HCCg-png.png"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>Github地址：</strong><a href="https://github.com/gy-games/smartping">https://github.com/gy-games/smartping</a></p>
<p>运行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir smartping &amp;&amp; cd smartping</span><br><span class="line">#请去https://github.com/gy-games/smartping/releases下载最新版本的smartping</span><br><span class="line">wget https://github.com/gy-games/smartping/releases/download/v0.5.0/smartping-v0.5.0.tar.gz</span><br><span class="line">tar zxvf smartping-v0.5.0.tar.gz</span><br><span class="line">./control start</span><br></pre></td></tr></table></figure>

<p>然后可以使用<code>ip:8899</code>打开<code>Web</code>界面查看了，管理界面默认密码为<code>smartping</code>，若需要修改请修改<code>conf/config.json</code>或<code>conf/config-base.json</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#如果你是CentOS系统，且打不开Web页面的，则需要开启防火墙端口</span><br><span class="line">#Centos 6系统</span><br><span class="line">iptables -I INPUT -p tcp --dport 8899 -j ACCEPT</span><br><span class="line">service iptables save</span><br><span class="line">service iptables restart</span><br><span class="line"></span><br><span class="line">#CentOS 7系统</span><br><span class="line">firewall-cmd --zone=public --add-port=8899/tcp --permanent </span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./control buildrunstartstoprestartstatus</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一般我们可以在搭建网站的服务器上安装，然后添加全国各个地区的<code>IP</code>进行监测，如果你找不到很全的<code>IP</code>来源，可以去<code>ipip</code>上找，地址：<a href="https://tools.ipip.net/ping.php">https://tools.ipip.net/ping.php</a>，先进去<code>ping</code>一下，然后可以看到各个地区的<code>IP</code>地址了，之后就可以很清楚看到网络情况了。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>SmartPing</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH反向连接</title>
    <url>/2022/01/06/ssh%E5%8F%8D%E5%90%91%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<p>首先2台主机都要安装ssh服务端：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install openssh-server</span><br></pre></td></tr></table></figure>

<p>如果有需要开启root远程登录，可以修改&#x2F;etc&#x2F;ssh&#x2F;sshd_config</p>
<p>找到PermitRootLogin no一行，改为PermitRootLogin yes</p>
<h3 id="A要控制B"><a href="#A要控制B" class="headerlink" title="A要控制B"></a>A要控制B</h3><p>A主机：外网，ip：123.123.123.123，sshd端口：2221</p>
<p>B主机：内网，sshd端口：2223</p>
<p>无论是外网主机A，还是内网主机B都需要跑ssh daemon</p>
<h3 id="1-首先在B上执行"><a href="#1-首先在B上执行" class="headerlink" title="1.首先在B上执行"></a>1.首先在B上执行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -NfR 1234:localhost:2223 user1@123.123.123.123 -p2221</span><br></pre></td></tr></table></figure>

<p>这句话的意思是将A主机的1234端口和B主机的2223端口绑定，相当于远程端口映射（Remote Port Forwarding）。</p>
<h3 id="2-这时在A主机上sshd会listen本地1234端口"><a href="#2-这时在A主机上sshd会listen本地1234端口" class="headerlink" title="2.这时在A主机上sshd会listen本地1234端口"></a>2.这时在A主机上sshd会listen本地1234端口</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh localhost -p1234</span><br></pre></td></tr></table></figure>

<h3 id="自动登录"><a href="#自动登录" class="headerlink" title="自动登录"></a>自动登录</h3><p>方法1.在内网B主机上生产公钥和私钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen</span><br></pre></td></tr></table></figure>

<p>…(一直按Enter，最后在~&#x2F;.ssh&#x2F;下生成密钥)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls ~/.ssh/</span><br><span class="line">id_rsa id_rsa.pub known_hosts</span><br></pre></td></tr></table></figure>

<p>复制B主机上生成的id_rsa.pub公钥到外网A主机上，并将内容加入到~&#x2F;.ssh&#x2F;authorized_keys中</p>
<p>方法2.直接在B主机上执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-copy-id user1@123.123.123.123</span><br></pre></td></tr></table></figure>

<h3 id="SSH-keygen-根据私钥生成公钥"><a href="#SSH-keygen-根据私钥生成公钥" class="headerlink" title="SSH-keygen 根据私钥生成公钥"></a>SSH-keygen 根据私钥生成公钥</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -y -f id_rsa</span><br></pre></td></tr></table></figure>

<h3 id="用Autossh保持ssh反向隧道一直连接"><a href="#用Autossh保持ssh反向隧道一直连接" class="headerlink" title="用Autossh保持ssh反向隧道一直连接"></a>用Autossh保持ssh反向隧道一直连接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">autossh -NfR 1234:localhost:2223 user1@123.123.123.123 -p2221</span><br></pre></td></tr></table></figure>

<p>注：默认autossh没有配置环境变量，需要自己设定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export AUTOSSH_PIDFILE=/var/run/autossh.pid</span><br><span class="line">export AUTOSSH_POLL=60</span><br><span class="line">export AUTOSSH_FIRST_POLL=30</span><br><span class="line">export AUTOSSH_GATETIME=0</span><br><span class="line">export AUTOSSH_DEBUG=1</span><br></pre></td></tr></table></figure>

<p>为了保证开机时就启动，需要把以上环境变量写入&#x2F;etc&#x2F;profile中</p>
<p>然后在&#x2F;etc&#x2F;init&#x2F;rc.local中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">autossh -NfR 1234:localhost:2223 user1@123.123.123.123 -p2221</span><br></pre></td></tr></table></figure>

<h3 id="使用curl让反向隧道保持连接"><a href="#使用curl让反向隧道保持连接" class="headerlink" title="使用curl让反向隧道保持连接"></a>使用curl让反向隧道保持连接</h3><p>在A主机上配置计划任务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*/1 * * * * netstat -lnt4pgrep &quot;sshd: root&quot;awk &#x27;&#123;print $4&#125;&#x27;awk -F &#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;xargs -i curl localhost:&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>定时向本地的隧道端口请求数据</p>
<h1 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h1><p>默认只能通过ssh localhost -p来连接，如果要实现远程登录内网B主机，可以在A主机上再开一个本地端口转发：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -g -L 80:localhost:1234 localhost</span><br></pre></td></tr></table></figure>

<p>远程就可以通过A主机的80端口去连接B主机了。</p>
<p>我们甚至可以启动socket5隧道：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -N -f -D 0.0.0.0:8888 root@localhost -p1234</span><br></pre></td></tr></table></figure>

<h3 id="ssh-指定私钥文件"><a href="#ssh-指定私钥文件" class="headerlink" title="ssh 指定私钥文件:"></a>ssh 指定私钥文件:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -i /root/.ssh/idrsa root@malu.me -p 2111</span><br></pre></td></tr></table></figure>

<h3 id="ssh取消主机密钥检查"><a href="#ssh取消主机密钥检查" class="headerlink" title="ssh取消主机密钥检查"></a>ssh取消主机密钥检查</h3><p>1.使用ssh连接远程主机时加上“-o StrictHostKeyChecking&#x3D;no”的选项，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh  -o StrictHostKeyChecking=no  192.168.xxx.xxx</span><br></pre></td></tr></table></figure>

<p>2.一个彻底去掉这个提示的方法是，修改&#x2F;etc&#x2F;ssh&#x2F;ssh_config文件（或$HOME&#x2F;.ssh&#x2F;config）中的配置，添加如下两行配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">StrictHostKeyChecking no</span><br><span class="line">UserKnownHostsFile /dev/null</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>SolusVM系列：独立服务器创建分区、PV</title>
    <url>/2018/07/12/solusvm%E7%B3%BB%E5%88%97%EF%BC%9A%E7%8B%AC%E7%AB%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9B%E5%BB%BA%E5%88%86%E5%8C%BA%E3%80%81pv/</url>
    <content><![CDATA[<p>以OVH独立服务器为例，下面为说明。</p>
<p><strong>一、OVH独服安装Centos 6，并设置分区、PV</strong> <img src="https://www.jarods.org/wp-content/uploads/2018/07/391237520.jpg" alt="OVH-SolusVM-01.jpg" title="OVH-SolusVM-01.jpg"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/4215298074.jpg" alt="OVH-SolusVM-02.jpg" title="OVH-SolusVM-02.jpg"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/4281108784.jpg" alt="OVH-SolusVM-03.jpg" title="OVH-SolusVM-03.jpg"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/2485917292.jpg" alt="OVH-SolusVM-04.jpg" title="OVH-SolusVM-04.jpg"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/3942986774.jpg" alt="OVH-SolusVM-05.jpg" title="OVH-SolusVM-05.jpg"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/607199848.jpg" alt="OVH-SolusVM-06.jpg" title="OVH-SolusVM-06.jpg"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/858699790.jpg" alt="OVH-SolusVM-07.jpg" title="OVH-SolusVM-07.jpg"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/3961972915.jpg" alt="OVH-SolusVM-08.jpg" title="OVH-SolusVM-08.jpg"></p>
<p><strong>二、设置PV</strong> 1、前面创建的磁盘情况：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">80GB ext4 /</span><br><span class="line">4GB swap</span><br><span class="line">xGB ext4 lv /uk</span><br></pre></td></tr></table></figure>

<p>2、查看硬盘、PV等结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure>

<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/973841484.png" alt="OVH-SolusVM-10.png" title="OVH-SolusVM-10.png"></p>
<p>3、查看卷组 vgdisplay</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lvdisplay</span><br></pre></td></tr></table></figure>

<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/2326374238.png" alt="OVH-SolusVM-11.png" title="OVH-SolusVM-11.png"> LV路径 ： &#x2F;dev&#x2F;vg&#x2F;uk</p>
<p>4、删除卷组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">umount /dev/vg/uk</span><br><span class="line">lvremove /dev/vg/uk</span><br><span class="line">vgremove /dev/vg</span><br></pre></td></tr></table></figure>

<p>5、重建卷组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vgcreate -s32 vps /dev/md5</span><br></pre></td></tr></table></figure>

<p>参考：<a href="http://www.webhostingtalk.com/showthread.php?t=1392174">http://www.webhostingtalk.com/showthread.php?t=1392174</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Solusvm</tag>
      </tags>
  </entry>
  <entry>
    <title>SSL优化</title>
    <url>/2018/10/19/ssl%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h5 id="一、关闭TLSv1-0提高安全性"><a href="#一、关闭TLSv1-0提高安全性" class="headerlink" title="一、关闭TLSv1.0提高安全性"></a>一、关闭TLSv1.0提高安全性</h5><p>大多数是比较老旧系统上自带浏览器不支持，如果是主流用户使用的Chrome、Firefox和国产浏览器基本都兼容。</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="二、开启HTTP-Strict-Transport-Security-HSTS"><a href="#二、开启HTTP-Strict-Transport-Security-HSTS" class="headerlink" title="二、开启HTTP Strict Transport Security (HSTS)"></a>二、开启HTTP Strict Transport Security (HSTS)</h5><p>指示浏览器只使用 HTTPS 连接到目标服务器。这可以防止一些潜在的中间人攻击，包括 SSL 剥离，会话 cookie 窃取（如果没有被 适当保护）。如果遇到任何与证书相关的错误，它还可以阻止浏览器连接到网站。当浏览器访问一个设置相应 HTTP header 的 HTTPS 网站时，HSTS 将被激活。 HSTS 有一个固定期限，由 max-age 字段值控制。这个值可以是静态的，也可以是相对于将来某个特定日期的，你可以设置成 SSL 证书的过期时间。 在浏览器中，HSTS 首选项可以通过提交到 Chromium’s HSTS preload list 来硬编码，这是所有实现 HSTS 使用的浏览器。 注意，HSTS 确实有陷阱。它提供了 include subdomains 选项，这在实践中可能是太宽泛了。此外，客户端错误可能会造成严重的后果——客户端错误的时钟导致它认为服务器的 SSL 证书无效或过期，或者缺少根 CA 证书——将不再导致浏览器中的证书错误。浏览器将完全拒绝访问页面，并且可能会显示让安全专家之外的完全无法理解的错误。</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Strict-Transport-Security: max-age=31536000</span><br></pre></td></tr></table></figure>
</blockquote>
<h6 id="二·1、同时还允许预加载"><a href="#二·1、同时还允许预加载" class="headerlink" title="二·1、同时还允许预加载"></a>二·1、同时还允许预加载</h6><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Strict-Transport-Security: max-age=31536000; includeSubDomains; preload</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="三、部署-CSP"><a href="#三、部署-CSP" class="headerlink" title="三、部署 CSP"></a>三、部署 CSP</h5><p>内容安全策略（CSP）是网站可以用来限制浏览器操作的安全机制。尽管最初旨在解决跨站点脚本（XSS），CSP 不断发展，并支持对增强TLS安全性有用的功能。特别地，它可以用于限制混合内容，当涉及到第三方网站，HSTS没有帮助。</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: default-src https: &#x27;unsafe-inline&#x27; &#x27;unsafe-eval&#x27;; </span><br><span class="line">connect-src https: wss:</span><br></pre></td></tr></table></figure>

<p> </p>
</blockquote>
<h5 id="四、Web-Framework-Information"><a href="#四、Web-Framework-Information" class="headerlink" title="四、Web Framework Information"></a>四、Web Framework Information</h5><p>许多 web 框架设置 HTTP 头，识别框架或版本号。除了满足用户的好奇心，而且主要作为技术堆栈的广告，这几乎没有什么作用。这些头是不标准的，对浏览器渲染站点的方式没有影响。 从服务器响应中删除这些标头: X-Powered-By, X-Runtime, X-Version 和 X-AspNet-Version。 标记所有 cookie 安全和 HttpOnly。</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-Cookie: Key=Value; path=/; secure; HttpOnly, Key2=Value2; secure; HttpOnly</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="五、加密优化"><a href="#五、加密优化" class="headerlink" title="五、加密优化"></a>五、加密优化</h5><p>如果您的服务器需要支持IE6这种古董级别的浏览器，那么就按照百度的做法，如果说对兼容性没有太大的需求，只要主流的浏览器能够访问那么就不要支持3DES系列的加密套件，如果说想要在保证安全性的同时，也要有最好的兼容性，那么就请按照淘宝的配置方式进行配置。</p>
<h6 id="五·1、类似百度"><a href="#五·1、类似百度" class="headerlink" title="五·1、类似百度"></a>五·1、类似百度</h6><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH; </span><br><span class="line">ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;</span><br></pre></td></tr></table></figure>
</blockquote>
<h6 id="五·2、类似淘宝"><a href="#五·2、类似淘宝" class="headerlink" title="五·2、类似淘宝"></a>五·2、类似淘宝</h6><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5; </span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br></pre></td></tr></table></figure>
</blockquote>
<h6 id="五·3、正常"><a href="#五·3、正常" class="headerlink" title="五·3、正常"></a>五·3、正常</h6><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256::!MD5; </span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br></pre></td></tr></table></figure>
</blockquote>
<h6 id="五·3、更安全"><a href="#五·3、更安全" class="headerlink" title="五·3、更安全"></a>五·3、更安全</h6><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256::!MD5; </span><br><span class="line">ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>注：转载并合理整理及修改，原著作网站：<a href="https://blog.myssl.com/">https://blog.myssl.com/</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>SSL</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>SuperSpeed – 一键测试服务器到国内的速度</title>
    <url>/2017/09/23/superspeed-%E4%B8%80%E9%94%AE%E6%B5%8B%E8%AF%95%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%B0%E5%9B%BD%E5%86%85%E7%9A%84%E9%80%9F%E5%BA%A6/</url>
    <content><![CDATA[<p>最近买了好几台 vps 在测试的时候，经常会遇到一些麻烦，我比较喜欢用 Speedtest 来测试到国内和到我本地的网络的速度，每次去找节点有比较麻烦。之前从来没有写过脚本，也不熟悉那些脚本的命令，只会一些简单的经常能用到的管理命令，今天开始学了一天，差不多明白了一些，就拿来练手，就直接集成一个管理面板去测试到国内不同路线的速度，折腾了一下。</p>
<h2 id="新加功能"><a href="#新加功能" class="headerlink" title="新加功能"></a>新加功能</h2><p>全面测速，添加一键全面测速功能，测试服务器到全国北方南方，电信，联通，移动的速度。</p>
<p>阿里云香港</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/09/cesu3.png" alt="SuperSpeed.sh 一键测试服务器到国内的速度" title="SuperSpeed.sh 一键测试服务器到国内的速度 Linux 第1张-老鬼的博客(OldKing.net)"></p>
<p>阿里云新加坡</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/09/cesu4.png" alt="SuperSpeed.sh 一键测试服务器到国内的速度" title="SuperSpeed.sh 一键测试服务器到国内的速度 Linux 第2张-老鬼的博客(OldKing.net)"></p>
<p>阿里云日本</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/09/cesu5.png" alt="SuperSpeed.sh 一键测试服务器到国内的速度" title="SuperSpeed.sh 一键测试服务器到国内的速度 Linux 第3张-老鬼的博客(OldKing.net)"></p>
<hr>
<h2 id="一、特点"><a href="#一、特点" class="headerlink" title="一、特点"></a>一、特点</h2><p>利用 Speedtest 测试你的国外主机到国内不同省市的速度。</p>
<p>集成了 Speedtest 提供的电信，联通，移动线路。</p>
<p>一键选择，一键测试。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/09/cesu2.png" alt="SuperSpeed.sh 一键测试服务器到国内的速度" title="SuperSpeed.sh 一键测试服务器到国内的速度 Linux 第4张-老鬼的博客(OldKing.net)"></p>
<h2 id="二、使用方法"><a href="#二、使用方法" class="headerlink" title="二、使用方法"></a>二、使用方法</h2><p>非常的简单，每行一条命令</p>
<blockquote>
<p>wget –no-check-certificate <a href="https://raw.githubusercontent.com/oooldking/script/master/superspeed.sh">https://raw.githubusercontent.com/oooldking/script/master/superspeed.sh</a></p>
<p>chmod +x superspeed.sh</p>
<p>.&#x2F;superspeed.sh</p>
</blockquote>
<p> </p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/09/cesu1.png" alt="SuperSpeed.sh 一键测试服务器到国内的速度" title="SuperSpeed.sh 一键测试服务器到国内的速度 Linux 第5张-老鬼的博客(OldKing.net)"></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>SuperSpeed</tag>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>PVE下使用(PCT)LXC如何搭建媒体服务器并正确开启硬件加速</title>
    <url>/2020/04/21/pve%E4%B8%8B%E4%BD%BF%E7%94%A8pctlxc%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E6%AD%A3%E7%A1%AE%E5%BC%80%E5%90%AF%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<p><strong>跑在什么什么上面好呢?</strong> 我的首选当然是创建一个PVE里的CT来跑了,这种轻量级虚拟化的好处有如下几点: 1.占用存储空间较少 (由于我这台机器存储空间比较紧张,所以必然选择这种方式啦). 2.性能损耗几乎为0,与物理机拥有相同的性能. 3.当然还有就是搭建方便快捷啦,turnkeylinux上面有海量的模板,几乎你需要的在上面都能找到(例如docker plex jellyfin emby 等等..). 总结一下就是,性能好占用少还方便!! 香~. 服务器程序我选择的是Jellyfin,听说硬件转码是免费的.</p>
<p>搭建过程非常简单无脑: <strong>1.下载模板:</strong> 模板可能要使用科学的方式获取,大家应该都懂。   或者也可以自行网上搜索,替换一下国内镜像.   否则下载速度感人.</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/214935lvdcnno5ldhvcqfq.png"> <img src="https://www.jarods.org/wp-content/uploads/2020/04/215013y9iamc848ctj94ah.png"> 2.创建CT. 第一步记得要把无特权容器的选项去掉,否则会创建不成功. <img src="https://www.jarods.org/wp-content/uploads/2020/04/215244jofhd6hdrnnnhnls.png"> 模板选择我们刚刚下载好的mediaserve <img src="https://www.jarods.org/wp-content/uploads/2020/04/215505i42qdbdn23d3q64p.png"> 接下来的步骤就按照自己的需求分配CPU 内存等资源就可以了. <strong>3.配置mediaserver</strong>     由于是CT,所以这一步非常之简单,开机后输入用户名密码,直接就会跳出设置向导,按照提示设置smb密码,jellyfin等等的密码即可.结束后会提示你各个后台的地址,打开浏览器访问即可 <img src="https://www.jarods.org/wp-content/uploads/2020/04/215941ai082gjra8yw0gv0.png">    <img src="/2020/04/220352cxqemmlmlqxmr5wd.png"></p>
<p>搭建完成后,兴致冲冲的放了一段DOOM的演示视频(1080p 40m比特率)的视频测试转码性能. 但是发现开启转码后,CPU占用率直接飙升到95%,这必须得折腾一下硬件加速了: <img src="/2020/04/221808k9vcsciqzh69gcsc.png"></p>
<p><strong>4.配置CT渲染设备节点,开启硬件加速：</strong> 默认情况下.LXC并不会自动映射dev目录下的设备节点文件.所以我们首先需要修改配置文件,使LXC自动映射dev下的设备文件. 首先我们需要在host(pve) shell中确认一下host设备文件的情况,标红的参数我们需要用到: root@pve:~# ls -l &#x2F;dev&#x2F;dri&#x2F; total 0 drwxr-xr-x 2 root root         80 Apr 20 12:24 by-path crw-rw—- 1 root video  226,   0 Apr 20 12:24 card0 crw-rw—- 1 root render 226, 128 Apr 20 12:24 renderD128 video  id: 226,   0 render id:226, 128 修改LXC的配置文件,路径为&#x2F;etc&#x2F;pve&#x2F;lxc&#x2F;{你的CT ID}.conf.</p>
<p>例如我的CT ID是100,所以对应的文件是&#x2F;etc&#x2F;pve&#x2F;lxc&#x2F;100.conf 使用编辑器打开该文件进行编辑:</p>
<p>vim &#x2F;etc&#x2F;pve&#x2F;lxc&#x2F;100.conf 将以下内容添加到文件末尾（将对应的id替换成自己的）: lxc.cgroup.devices.allow &#x3D; c 226:0 rwm lxc.cgroup.devices.allow &#x3D; c 226:128 rwm lxc.autodev: 1 lxc.hook.autodev:&#x2F;var&#x2F;lib&#x2F;lxc&#x2F;100&#x2F;render_device_hook.sh</p>
<p>CT启动的时候,会执行lxc.hook.autodev里的内容,我们需要手动创建对应的节点文件 还是一样,使用编辑器创建并打开脚本文件:</p>
<ol>
<li>vim &#x2F;var&#x2F;lib&#x2F;lxc&#x2F;100&#x2F;render_device_hook.sh</li>
</ol>
<p><em>复制代码</em></p>
<p>将以下内容添加到文件中(一样,还是要替换成自己的设备id)： mkdir -p ${LXC_ROOTFS_MOUNT}&#x2F;dev&#x2F;dri mknod -m 666 ${LXC_ROOTFS_MOUNT}&#x2F;dev&#x2F;dri&#x2F;card0 c 226 0 mknod -m 666 ${LXC_ROOTFS_MOUNT}&#x2F;dev&#x2F;dri&#x2F;renderD128 c 226 128</p>
<p>最后设置文件权限:</p>
<ol>
<li>chmod 755 &#x2F;var&#x2F;lib&#x2F;lxc&#x2F;100&#x2F;render_device_hook.sh</li>
</ol>
<p><em>复制代码</em></p>
<p>这样,我们CT的配置就修改好了,现在去启动CT吧. 启动后,我们还需要在CT里安装VA的驱动文件,以下命令均在CT内执行： apt-get install i965-va-driver apt-get install vainfo</p>
<p>安装完成后执行vainfo命令,如果打印如下类似信息就表明硬件转码已经可用了: root@mediaserver ~# vainfo error: XDG_RUNTIME_DIR not set in the environment. error: can’t connect to X server! libva info: VA-API version 0.39.4 libva info: va_getDriverName() returns 0 libva info: Trying to open &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;dri&#x2F;i965_drv_video.so libva info: Found init function __vaDriverInit_0_39 libva info: va_openDriver() returns 0 vainfo: VA-API version: 0.39 (libva 1.7.3) vainfo: Driver version: Intel i965 driver for Intel(R) Kabylake - 1.7.3 vainfo: Supported profile and entrypoints VAProfileMPEG2Simple            :        VAEntrypointVLD VAProfileMPEG2Simple            :        VAEntrypointEncSlice VAProfileMPEG2Main              :        VAEntrypointVLD VAProfileMPEG2Main              :        VAEntrypointEncSlice VAProfileH264ConstrainedBaseline:        VAEntrypointVLD VAProfileH264ConstrainedBaseline:        VAEntrypointEncSlice VAProfileH264Main               :        VAEntrypointVLD VAProfileH264Main               :        VAEntrypointEncSlice VAProfileH264High               :        VAEntrypointVLD VAProfileH264High               :        VAEntrypointEncSlice VAProfileH264MultiviewHigh      :        VAEntrypointVLD VAProfileH264MultiviewHigh      :        VAEntrypointEncSlice VAProfileH264StereoHigh         :        VAEntrypointVLD VAProfileH264StereoHigh         :        VAEntrypointEncSlice VAProfileVC1Simple              :        VAEntrypointVLD VAProfileVC1Main                :        VAEntrypointVLD VAProfileVC1Advanced            :        VAEntrypointVLD VAProfileNone                   :        VAEntrypointVideoProc VAProfileJPEGBaseline           :        VAEntrypointVLD VAProfileJPEGBaseline           :        VAEntrypointEncPicture VAProfileVP8Version0_3          :        VAEntrypointVLD VAProfileVP8Version0_3          :        VAEntrypointEncSlice VAProfileHEVCMain               :        VAEntrypointVLD VAProfileHEVCMain               :        VAEntrypointEncSlice VAProfileHEVCMain10             :        VAEntrypointVLD VAProfileHEVCMain10             :        VAEntrypointEncSlice VAProfileVP9Profile0            :        VAEntrypointVLD VAProfileVP9Profile0            :        VAEntrypointEncSlice VAProfileVP9Profile2            :        VAEntrypointVLD</p>
<p>现在再到Jellyfin的控制台,将转码的硬件加速设置为VA API,在转码再看看CPU占用以及拖动视频的相应速度~： <img src="/2020/04/230026dpplhg1qkegf6o1h.png"></p>
<p>Enjoy….</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>LXC</tag>
        <tag>PVE</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime Text 3 最给力写代码软件</title>
    <url>/2022/08/14/sublime-text-3-%E6%9C%80%E7%BB%99%E5%8A%9B%E5%86%99%E4%BB%A3%E7%A0%81%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h3><p>一款用于代码、标记和散文的精致文本编辑器。</p>
<h3 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h3><p>官方网站：<a href="https://www.vpsmm.com/go/aHR0cHM6Ly93d3cuc3VibGltZXRleHQuY29tLw==">https://www.sublimetext.com/</a></p>
<h3 id="序列号"><a href="#序列号" class="headerlink" title="序列号"></a>序列号</h3><p>-—- BEGIN LICENSE —–<br>Member J2TeaM<br>Single User License<br>EA7E-1011316<br>D7DA350E 1B8B0760 972F8B60 F3E64036<br>B9B4E234 F356F38F 0AD1E3B7 0E9C5FAD<br>FA0A2ABE 25F65BD8 D51458E5 3923CE80<br>87428428 79079A01 AA69F319 A1AF29A4<br>A684C2DC 0B1583D4 19CBD290 217618CD<br>5653E0A0 BACE3948 BB2EE45E 422D2C87<br>DD9AF44B 99C49590 D2DBDEE1 75860FD2<br>8C8BB2AD B2ECE5A4 EFC08AF2 25A9B864<br>—— END LICENSE ——</p>
<h3 id="HOSTS文件"><a href="#HOSTS文件" class="headerlink" title="HOSTS文件"></a>HOSTS文件</h3><p>注册成功后，请修改一下HOSTS文件，永久授权。</p>
<p>127.0.0.1    sublimetext.com<br>127.0.0.1    <a href="http://www.sublimetext.com/">www.sublimetext.com</a><br>127.0.0.1    sublimehq.com<br>127.0.0.1    telemetry.sublimehq.com<br>127.0.0.1    license.sublimehq.com</p>
<h3 id="小编截图"><a href="#小编截图" class="headerlink" title="小编截图"></a>小编截图</h3><p><img src="/2022/08/3641765639.png" alt="sub.png"></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Sublime Text 3</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP优化配置–适用于酸酸乳</title>
    <url>/2018/08/02/tcp%E4%BC%98%E5%8C%96%E9%85%8D%E7%BD%AE-%E9%80%82%E7%94%A8%E4%BA%8E%E9%85%B8%E9%85%B8%E4%B9%B3/</url>
    <content><![CDATA[<p>亲测，在安装锐速后，再进行一次 tcp 优化，还能增加下载效果。</p>
<h2 id="增加-tcp-连接数量"><a href="#增加-tcp-连接数量" class="headerlink" title="增加 tcp 连接数量"></a>增加 tcp 连接数量</h2><p>编辑 limits.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/security/limits.conf</span><br></pre></td></tr></table></figure>

<p>增加以下两行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* soft nofile 51200</span><br><span class="line">* hard nofile 51200</span><br></pre></td></tr></table></figure>

<p>开启酸酸乳 服务之前，先设置一下 ulimit</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ulimit -n 51200</span><br></pre></td></tr></table></figure>

<p>调整内核参数</p>
<p>首先科普下 TCP 拥塞控制算法： 中美之间的线路质量不是很好， rtt 较长且时常丢包。 TCP 的设计目的是解决不可靠线路上可靠传输的问题，即为了解决丢包，但丢包却使 TCP 传输速度大幅下降。 HTTP 协议在传输层使用的是 TCP 协议，所以网页下载的速度就取决于 TCP 单线程下载的速度（因为网页就是单线程下载的）。丢包使得 TCP 传输速度大幅下降的主要原因是丢包重传机制，控制这一机制的就是 TCP 拥塞控制算法。</p>
<p>Linux 内核中提供了若干套 TCP 拥塞控制算法，这些算法各自适用于不同的环境。 1 ） reno 是最基本的拥塞控制算法，也是 TCP 协议的实验原型。 2 ） bic 适用于 rtt 较高但丢包极为罕见的情况，比如北美和欧洲之间的线路，这是 2.6.8 到 2.6.18 之间的 Linux 内核的默认算法。 3 ） cubic 是修改版的 bic ，适用环境比 bic 广泛一点，它是 2.6.19 之后的 linux 内核的默认算法。 4 ） hybla 适用于高延时、高丢包率的网络，比如卫星链路——同样适用于中美之间的链路。</p>
<p>我们需要做的工作就是将 TCP 拥塞控制算法改为 hybla 算法，并且优化 TCP 参数。</p>
<p>1 、查看可用的算法。 主要看内核是否支持 hybla ，如果没有，只能用 cubic 了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure>

<p>2 、如果没有该算法，则加载 hybla 算法（不支持 OpenVZ ）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sbin/modprobe tcp_hybla</span><br></pre></td></tr></table></figure>

<p>3 、首先做好备份工作，把 sysctl.conf 备份到 root 目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /etc/sysctl.conf /root/</span><br></pre></td></tr></table></figure>

<p>4 、修改 sysctl.conf 配置文件，优化 TCP 参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure>

<p>添加以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fs.file-max = 51200</span><br><span class="line">#提高整个系统的文件限制</span><br><span class="line">net.core.rmem_max = 67108864</span><br><span class="line">net.core.wmem_max = 67108864</span><br><span class="line">net.core.netdev_max_backlog = 250000</span><br><span class="line">net.core.somaxconn = 3240000</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>5 、保存生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<p>小结</p>
<p>经测试， <a href="https://www.91yun.co/go/digitalocean" title="digitalocean">digitalocean</a>,<a href="https://www.91yun.co/go/ramnode" title="ramnode">ramnode</a> 的 KVM 等内核支持 hybla 算法。但是 <a href="https://www.91yun.co/go/linode" title="linode">linode</a> 的内核目前不支持</p>
<p>需要注意的是每次重启需要重新加载 hybla 算法模块，可以写入 rc.local 自动启动。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>TCP优化</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP加速：腾讯单边拥塞算法TCPA（类似于BBR、锐速）</title>
    <url>/2019/03/11/tcp%E5%8A%A0%E9%80%9F%EF%BC%9A%E8%85%BE%E8%AE%AF%E5%8D%95%E8%BE%B9%E6%8B%A5%E5%A1%9E%E7%AE%97%E6%B3%95tcpa%EF%BC%88%E7%B1%BB%E4%BC%BC%E4%BA%8Ebbr%E3%80%81%E9%94%90%E9%80%9F%EF%BC%89/</url>
    <content><![CDATA[<p><strong>优势</strong>：TCPA启用后，小文件比BBR能提升40%以上，大文件比BBR能提升5%~10%。TCPA的优势在于小文件的性能提升，程序也默认仅加速网站端口(80&#x2F;443&#x2F;8080)，所以更适用于建站场景。</p>
<p><strong>环境要求</strong>: centos7 &#x2F;boot分区≥500M(太小会安装失败)</p>
<p><strong>TCPA一键包</strong>: <code>wget http://down.08mb.com/tcp_opz/tcpa/tcpa.sh sh tcpa.sh</code> 使用说明:一键包会自动安装依赖(仅epel-release、net-tools)和内核并重启，重启后安装自动完成无需人工干预。</p>
<p>TCPA(默认只加速80,443,8080这3个端口)，如需新增加速端口: <code>vi /usr/local/storage/tcpav2/start.sh</code> 第46行后添加: <code>$BINDIR/$CTLAPP access add tip $ip tport 自定义端口</code></p>
<p>启动tcpa： <code>cd /usr/local/storage/tcpav2 sh start.sh</code></p>
<p>卸载tcpa: <code>cd /usr/local/storage/tcpav2 sh uninstall.sh</code></p>
<p>项目：<a href="https://linux.qq.com/?p=238">https://linux.qq.com/?p=238</a> 转自：<a href="https://www.hostloc.com/thread-528360-1-1.html">https://www.hostloc.com/thread-528360-1-1.html</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>TCPA</tag>
      </tags>
  </entry>
  <entry>
    <title>你懂的</title>
    <url>/2017/07/09/ssr%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E5%8C%85%EF%BC%882017-06-16%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>本文由<a href="https://www.91yun.org/archives/author/91yun"><strong>@91yun</strong></a>发布</p>
</blockquote>
<p>完全重写了之前 SSR 的一键安装包。 – 直接使用 git clone 的方式安装作者的源码，免去我要不断跟进更新的麻烦 – 直接使用 <code>ssr stop</code> 之类的命令方便管理 – 直接使用作者 mujson 的方式进行用户管理，无论单用户还是多用户都很方便 – 通过命令添加 &#x2F; 删除用户， centos 会自动开防火墙端口 – 可以通过命令直接更新 &#x2F;uninstall 程序 – 有问题欢迎随时反馈</p>
<h1 id="SSR-的几个默认设置："><a href="#SSR-的几个默认设置：" class="headerlink" title="SSR 的几个默认设置："></a>SSR 的几个默认设置：</h1><ul>
<li>ssr 代码安装在 <code>/home/ssr/</code> 下。</li>
<li>默认的加密方式是： <code>chacha20</code></li>
<li>默认的协议是： <code>auth_sha1_v4_compatible</code></li>
<li>默认的混淆是： <code>tls1.2_ticket_auth_compatible</code></li>
</ul>
<h1 id="SSR-的一键安装命令："><a href="#SSR-的一键安装命令：" class="headerlink" title="SSR 的一键安装命令："></a>SSR 的一键安装命令：</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/shadowsocks_install/master/ssr-install.sh &amp;&amp; bash ssr-install.sh</span><br></pre></td></tr></table></figure>

<p>安装完后会直接提示新增用户： 1.输入密码，默认91yun.org：2 <img src="https://www.jarods.org/wp-content/uploads/2017/07/2oUR.png" alt="2oUR.png"> .输入端口： <img src="https://www.jarods.org/wp-content/uploads/2017/07/2sMt.png" alt="2sMt.png"> 3.按任意键开始安装： <img src="https://www.jarods.org/wp-content/uploads/2017/07/2Ziu.png" alt="2Ziu.png"> 4.最后复制ssr链接就可以方便的导入ssr客户端了： <img src="https://www.jarods.org/wp-content/uploads/2017/07/2lQk.png" alt="2lQk.png"> <img src="https://www.jarods.org/wp-content/uploads/2017/07/2zs2.png" alt="2zs2.png"></p>
<h1 id="SSR-一键包的几个命令："><a href="#SSR-一键包的几个命令：" class="headerlink" title="SSR 一键包的几个命令："></a>SSR 一键包的几个命令：</h1><ul>
<li>添加用户： <code>ssr adduser</code></li>
<li>删除用户： <code>ssr deluser</code></li>
<li>启动 SSR ： <code>ssr start</code></li>
<li>停止 SSR ： <code>ssr stop</code></li>
<li>重启 SSR ： <code>ssr restart</code></li>
<li>卸载 SSR ： <code>ssr uninstall</code></li>
<li>更新 SSR ： <code>ssr update</code></li>
</ul>
<h1 id="如果你想自己修改用户和的加密，混淆和协议的话："><a href="#如果你想自己修改用户和的加密，混淆和协议的话：" class="headerlink" title="如果你想自己修改用户和的加密，混淆和协议的话："></a>如果你想自己修改用户和的加密，混淆和协议的话：</h1><p>修改 <code>vi /home/ssr/mudb.json</code> 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">&quot;d&quot;: 0,</span><br><span class="line">&quot;enable&quot;: 1,</span><br><span class="line">&quot;method&quot;: &quot;chacha20&quot;,</span><br><span class="line">&quot;obfs&quot;: &quot;tls1.2_ticket_auth_compatible&quot;,</span><br><span class="line">&quot;passwd&quot;: &quot;91yun.org&quot;,</span><br><span class="line">&quot;port&quot;: 9191,</span><br><span class="line">&quot;protocol&quot;: &quot;auth_sha1_v4_compatible&quot;,</span><br><span class="line">&quot;transfer_enable&quot;: 9007199254740992,</span><br><span class="line">&quot;u&quot;: 0,</span><br><span class="line">&quot;user&quot;: &quot;9191&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>几个参数的说明： – method ：加密方法 – passwd ： ssr 密码 – port ： ssr 端口 – protocol ：协议 – obfs ：混淆 – transfer_enable ：流量</p>
<p>大家可以自己视情况修改。</p>
<h1 id="如果新的有问题，大家依然可以使用旧的安装方式："><a href="#如果新的有问题，大家依然可以使用旧的安装方式：" class="headerlink" title="如果新的有问题，大家依然可以使用旧的安装方式："></a>如果新的有问题，大家依然可以使用旧的安装方式：</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/shadowsocks_install/master/shadowsocksR.sh &amp;&amp; bash shadowsocksR.sh</span><br></pre></td></tr></table></figure>

<ul>
<li>默认加密为： chacha20</li>
<li>默认协议为： auth_sha1_v4</li>
<li>默认混淆为： tls1.2_ticket_auth</li>
</ul>
<h2 id="使用命令："><a href="#使用命令：" class="headerlink" title="使用命令："></a>使用命令：</h2><ul>
<li>启动： &#x2F;etc&#x2F;init.d&#x2F;shadowsocks start</li>
<li>停止： &#x2F;etc&#x2F;init.d&#x2F;shadowsocks stop</li>
<li>重启： &#x2F;etc&#x2F;init.d&#x2F;shadowsocks restart</li>
<li>状态： &#x2F;etc&#x2F;init.d&#x2F;shadowsocks status</li>
<li>配置文件路径： &#x2F;etc&#x2F;shadowsocks.json</li>
<li>日志文件路径： &#x2F;var&#x2F;log&#x2F;shadowsocks.log</li>
<li>安装路径： &#x2F;usr&#x2F;local&#x2F;shadowsocks&#x2F;shadowsoks</li>
</ul>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu开启PPC拥塞控制算法–看起来不比BBR差，还支持IPv6哦！</title>
    <url>/2017/07/09/ubuntu%E5%BC%80%E5%90%AFppc%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95-%E7%9C%8B%E8%B5%B7%E6%9D%A5%E4%B8%8D%E6%AF%94bbr%E5%B7%AE%EF%BC%8C%E8%BF%98%E6%94%AF%E6%8C%81ipv6%E5%93%A6/</url>
    <content><![CDATA[<blockquote>
<p>本文由<a href="https://www.91yun.org/archives/author/Michael"><strong>@Michael</strong></a>发布</p>
</blockquote>
<p>本文由 91yunbbs 用户 <a href="https://www.91yunbbs.com/profile/locknlock">locknlock</a> 投稿。讨论、提问建议前往论坛：【 <a href="https://www.91yunbbs.com/discussion/346/">论坛原文链接</a> 】</p>
<h2 id="前方深坑预警"><a href="#前方深坑预警" class="headerlink" title="前方深坑预警"></a>前方深坑预警</h2><p>本文仅做抛砖引玉，供读者举一反三。</p>
<p>提前说一下编译安装 PCC 可能有的坑：</p>
<ul>
<li>当前内核版本的 header 没装。</li>
<li>gcc 版本过低。</li>
<li>gcc 强行把 warn 当 error 来处理，即 werror 。</li>
<li>PCC 代码年久失修， Linux 内核升级后改了部分代码导致 tcp_TA.c 内某些引用出错。</li>
<li>直接使用 insmod 动态加载的模块在重启后不会自动加载，需要再次 insmod 一次，可以百度找解决方法。</li>
<li>可能还有更多编译坑。</li>
<li>没事还是用 bbr ，毕竟有一键安装脚本。</li>
</ul>
<h2 id="编译安装-PCC"><a href="#编译安装-PCC" class="headerlink" title="编译安装 PCC"></a>编译安装 PCC</h2><blockquote>
<p>PCC is a new approach for TCP congestion control base on real-time performance analysis. This is a kernel implementation of it.</p>
</blockquote>
<p>PCC 和 BBR 一样都是一直 TCP 拥塞控制算法，就目前我自己做的测试（ ipv6 环境）来看，效果不差。下面介绍如何在 Linux 下开启 PPC 。</p>
<p>安装环境：</p>
<ul>
<li>Ubuntu 14.04.5 LTS x86_64</li>
<li>kernel version 4.9.0-040900-generic</li>
<li>gcc version 4.9.4</li>
</ul>
<p>升级 kernel 为 4.9 ，需要同时安装 image 和 header ，其他版本 kernel 一样，必须安装 header 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-image-4.9.0-040900-generic_4.9.0-040900.201612111631_amd64.deb</span><br><span class="line"> </span><br><span class="line">wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-headers-4.9.0-040900-generic_4.9.0-040900.201612111631_amd64.deb</span><br><span class="line"> </span><br><span class="line">dpkg -i linux-image-4.9.0-040900-generic_4.9.0-040900.201612111631_amd64.deb</span><br><span class="line"> </span><br><span class="line">dpkg -i linux-headers-4.9.0-040900-generic_4.9.0-040900.201612111631_amd64.deb</span><br><span class="line"> </span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<p>安装编译工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install build-essential -y</span><br><span class="line"> </span><br><span class="line">gcc -v</span><br></pre></td></tr></table></figure>

<p>如果默认安装的 gcc 版本低于 4.9 ，按照下面操作升级。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install software-properties-common</span><br><span class="line">add-apt-repository ppa:ubuntu-toolchain-r/test</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install gcc-4.9 g++-4.9</span><br><span class="line"> </span><br><span class="line">update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-4.9</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/giltu/KernelPCC.git</span><br><span class="line"> </span><br><span class="line">cd KernelPCC</span><br></pre></td></tr></table></figure>

<p>编辑 <code>tcp_TA.c</code>, 替换 <code>NET_INC_STATS_BH</code> 为 <code>NET_INC_STATS</code>, 替换 <code>NET_ADD_STATS_BH</code> 为 <code>NET_ADD_STATS</code> ，保存。 &#x3D;&#x3D; <em>此处替换操作仅针对 4.9 及更新版本的内核。</em> =&#x3D;</p>
<p>然后开始编译：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<p>编译过程中 <code>warn</code> 不用管，但是出现 <code>error</code> 就会失败， &#x3D;&#x3D; 这一步各种坑 &#x3D;&#x3D; 。编译成功会在目录下生成一个 <code>tcp_TA.ko</code> 文件。</p>
<p>加载内核模块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insmod tcp_TA.ko</span><br><span class="line"> </span><br><span class="line">lsmod  grep TA</span><br></pre></td></tr></table></figure>

<p>返回 <code>tcp_TA 16384 32</code> 类似这样的结果即加载成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure>

<p>返回一般为 net.ipv4.tcp_available_congestion_control &#x3D; bbr cubic reno TA</p>
<p>切换 tcp 拥塞控制算法为 TA ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysctl -w net.ipv4.tcp_congestion_control=TA</span><br></pre></td></tr></table></figure>

<p>最后检查一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure>

<p>返回 net.ipv4.tcp_congestion_control&#x3D;TA 即可。</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul>
<li>不一定需要 4.9 版本的 kernel ，其他版本的 kernel 安装好相应的 header 和稍微改一下由于内核代码更新换代导致的小错误即可。</li>
<li>Ubuntu&#x2F;Debian kernel 及 header 列表 <a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/">http://kernel.ubuntu.com/~kernel-ppa&#x2F;mainline&#x2F;</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>PPC</tag>
      </tags>
  </entry>
  <entry>
    <title>transfer.sh:Linux下的命令行网盘/传输分享文件的好帮手</title>
    <url>/2018/09/27/transfer-shlinux%E4%B8%8B%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BD%91%E7%9B%98-%E4%BC%A0%E8%BE%93%E5%88%86%E4%BA%AB%E6%96%87%E4%BB%B6%E7%9A%84%E5%A5%BD%E5%B8%AE%E6%89%8B/</url>
    <content><![CDATA[<p>在 linux 下传输文件我们平时一般使用 lrzsz 或者 scp. 但是并不是所有终端都支持 lrzsz, 额外安装 winscp 也麻烦 . 况且如果是需要把文件发给别人更是麻烦 .</p>
<p><a href="https://transfer.sh/">transfer.sh</a> 就是为此而生 . 对于恨不得手都不离开键盘的程序员来说 , 能有个命令行的分享程序真的挺方便的 .</p>
<p><a href="https://transfer.sh/">transfer.sh</a> 的使用也非常简单 , 可以使用 curl 的 upload-file 来上传文件 . 比如 :</p>
<p>1</p>
<p>curl --upload-file .&#x2F;91yunserverspeeder.tar.gz <a href="https://transfer.sh/91ss.tar.gz">https://transfer.sh/91ss.tar.gz</a></p>
<p>以上命令就是把 91yunserverspeeder.tar.gz 上传到 transfer.sh, 并命名为 91ss.tar.gz</p>
<p>执行完这个命令 , 就会返回给你下载地址 :<code>https://transfer.sh/Jg56i/91ss.tar.gz</code></p>
<p>然后你把这个地址发给别人就可以下载了 .</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/09/ede928f3a978ad6-1024x496.jpg"></p>
<p>是不是很方便呢 ?</p>
<p><a href="https://transfer.sh/">transfer.sh</a> 还有很多方式 , 比如加密上传文件 , 比如一次性上传多个文件等用法 . 大家可以到官网看例子 .</p>
<p>并且这也是开源项目 , 大家可以到他的 github 观摩 , 也可以自己搭建相类似的服务 .</p>
<h1 id="官网"><a href="#官网" class="headerlink" title="官网 :"></a>官网 :</h1><p><a href="https://transfer.sh/">https://transfer.sh/</a></p>
<h1 id="github"><a href="#github" class="headerlink" title="github:"></a>github:</h1><p><a href="https://github.com/dutchcoders/transfer.sh/">https://github.com/dutchcoders/transfer.sh/</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>transfer.sh</tag>
        <tag>网盘</tag>
      </tags>
  </entry>
  <entry>
    <title>Syncthing就是我要的同步备份软件</title>
    <url>/2019/10/20/syncthing%E5%B0%B1%E6%98%AF%E6%88%91%E8%A6%81%E7%9A%84%E5%90%8C%E6%AD%A5%E5%A4%87%E4%BB%BD%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>数据无价，平时不注意备份，电脑突然翻车就追悔莫及啦。</p>
<p>最开始的时候，我在路由器上开启 Samba，每次编辑完项目就手动拷贝到路由器硬盘里，麻烦程度可想而知，后来又用了 Google Drive&#x2F;One Drive，又因为它们的网络不理想，就又放弃使用了。</p>
<p>其实就是很简单的需求，自动备份、速度快，然后去找了一下，发现一堆人推荐用 Rsync，这货我只在 VPS 上用过，拿来做镜像同步，但是要做实时同步，不好配置。</p>
<p>我就想，这需求应该有一大堆人有吧，就去 github 搜索 sync，发现 Syncthing 这么个好东西，截止 2018-06-13 已经得到 20k+ 的 star，并且更新很活跃</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><img src="https://www.jarods.org/wp-content/uploads/2019/10/logo.jpg" alt="logo"></p>
<p>Syncthing 是一个文件连续同步软件</p>
<p>项目地址：<a href="https://github.com/syncthing/syncthing">https://github.com/syncthing/syncthing</a></p>
<p>它有以下特性：</p>
<ul>
<li>跨平台<ul>
<li>使用 Golang 开发，几乎能在所有平台上使用，包括常见的安卓手机和路由器平台</li>
</ul>
</li>
<li>易于使用<ul>
<li>只需要下载运行，打开浏览设置本地目录和远程主机，其他的不需要管</li>
</ul>
</li>
<li>安全<ul>
<li>管理页可以设置密码，可以设置 https，设置备份需要两边都确认，使用唯一设备标识进行确认</li>
</ul>
</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Syncthing 有多种安装方式</p>
<p>有一定 Linux 基础的人，可以使用下面的配置来设置启动服务</p>
<ul>
<li><a href="https://github.com/syncthing/syncthing/tree/master/etc">https://github.com/syncthing/syncthing/tree/master/etc</a></li>
</ul>
<p>Windows，Mac，Linux 和安卓手机可以在这里下载有 GUI 界面的程序使用</p>
<ul>
<li><a href="https://docs.syncthing.net/users/contrib.html#gui-wrappers">https://docs.syncthing.net/users/contrib.html#gui-wrappers</a></li>
</ul>
<p>其他方法可以自己决定，我是直接下载安装包命令行启动的</p>
<h3 id="在-macOS-上安装"><a href="#在-macOS-上安装" class="headerlink" title="在 macOS 上安装"></a>在 macOS 上安装</h3><p>我用的是 macOS，可以直接使用 homebrew 安装启动，并且可以开机自动启动，你也可以到这里 <a href="https://github.com/sieren/QSyncthingTray/releases">QSyncthingTray</a> 下载 macOS 的 GUI 版</p>
<p>brew install syncthing</p>
<p>启动服务（同时设置开机启动）</p>
<p>brew services start syncthing</p>
<p>停止服务（同时关闭自启）</p>
<p>brew services stop syncthing</p>
<p>手动启动（不会开机自启）</p>
<p>syncthing</p>
<p>启动进程后，可以用浏览器打开 <code>http://localhost:8384/</code> 来查看 web 管理页</p>
<h3 id="在-Windows-上安装"><a href="#在-Windows-上安装" class="headerlink" title="在 Windows 上安装"></a>在 Windows 上安装</h3><p>Windows 直接在这里 <a href="https://github.com/canton7/SyncTrayzor/releases">SyncTrayzor</a> 下载软件运行</p>
<h3 id="在-Linux-VPS-上安装"><a href="#在-Linux-VPS-上安装" class="headerlink" title="在 Linux VPS 上安装"></a>在 Linux VPS 上安装</h3><p>大多数发行版和不同 CPU 平台的安装包，可以在这里 <a href="https://github.com/syncthing/syncthing/releases">Syncthing</a> 找到，把它下载到你想要放在的目录然后设置权限，使用命令运行</p>
<p>文章开头有 GUI 版本的链接，不过我要装在没有 GUI 的 VPS 上，所以直接用命令行运行，系统用的是 Debian 9，然后用 supervisor 进程守护来启动的</p>
<p>碰巧前几天之前的一个客户，他的 VPS 做迁移，阿里云送了张代金券，然后客户就送给我了</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/10/aff.jpg" alt="aff"></p>
<p>然后续费 9 个月的阿里云学生机，美滋滋?</p>
<p>虽然带宽比较低，但是对于这种连续同步的备份来说，在第一次备份之后，后面都是增量备份了，除非你都是备份大文件，要不对带宽的要求不是很高，另外 40G 的盘，完全够我备份用了，阿里云最主要就是稳定，很适合做我的备份机</p>
<h4 id="下载-Syncthing"><a href="#下载-Syncthing" class="headerlink" title="下载 Syncthing"></a>下载 Syncthing</h4><p>下载最新的包，解压，移动到 <code>/bin/</code> 里，改权限</p>
<p>wget <a href="https://github.com/syncthing/syncthing/releases/download/v0.14.49-rc.1/syncthing-linux-amd64-v0.14.49-rc.1.tar.gz">https://github.com/syncthing/syncthing/releases/download/v0.14.49-rc.1/syncthing-linux-amd64-v0.14.49-rc.1.tar.gz</a></p>
<p>tar xzvf .&#x2F;syncthing-linux-amd64-v0.14.49-rc.1.tar.gz</p>
<p>mv .&#x2F;syncthing-linux-amd64-v0.14.49-rc.1&#x2F;syncthing &#x2F;bin&#x2F;</p>
<p>chmod +x &#x2F;bin&#x2F;syncthing</p>
<h4 id="进程守护"><a href="#进程守护" class="headerlink" title="进程守护"></a>进程守护</h4><p>安装 supervisor</p>
<p>apt-get install supervisor</p>
<p>配置守护</p>
<p>vi &#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;syncthing.conf</p>
<p>填入以下内容</p>
<p>[program:syncthing]<br>command &#x3D; &#x2F;bin&#x2F;syncthing -no-browser -home=“&#x2F;root&#x2F;.config&#x2F;syncthing”<br>directory &#x3D; &#x2F;root<br>autorestart &#x3D; True<br>user &#x3D; root<br>environment &#x3D; STNORESTART=“1”, HOME=“&#x2F;root”</p>
<p><strong>注意</strong>，我例子里使用的是 root 用户，所以响应的目录是 <code>/root</code>，你要是使用其他用户，应该是 <code>/home/用户名</code>，就是你登录时默认所在的目录</p>
<p>现在就可以使用 <code>supervisorctl</code> 命令来管理进程了</p>
<ul>
<li>启动</li>
</ul>
<p>supervisorctl start syncthing</p>
<ul>
<li>重启</li>
</ul>
<p>supervisorctl restart syncthing</p>
<ul>
<li>停止</li>
</ul>
<p>supervisorctl stop syncthing</p>
<p>启动进程后，可以用浏览器打开 <code>http://你的IP:8384/</code> 来查看 web 管理页</p>
<p>如果无法打开页面，需要修改 <code>/.config/syncthing/config.xml</code> 里的 <code>127.0.0.1:8384</code> 字段为 <code>0.0.0.0:8384</code>，或者你可以和我一样使用 nginx 做反向代理，前提是你知道怎么做</p>
<h3 id="在路由器上安装"><a href="#在路由器上安装" class="headerlink" title="在路由器上安装"></a>在路由器上安装</h3><p>目前 <a href="https://entware.net/">Entware</a> 源里已经有这个包了，但是我发现它是个旧版本，并且有问题，所以这里我选择手动安装</p>
<p>这里的例子是 LEDE x64 但是也适合一切安装了 Entware 的路由器</p>
<p>在这里 <a href="https://github.com/syncthing/syncthing/releases">Syncthing</a> 下载对应 CPU 平台的安装包，可以用 <code>uname -m</code> 查看，我这里是 x86_64 所以选择 amd64</p>
<h4 id="下载-syncthing"><a href="#下载-syncthing" class="headerlink" title="下载 syncthing"></a>下载 syncthing</h4><p>下载最新的包，解压，移动到 <code>/opt/bin/</code> 里，改权限</p>
<p>wget <a href="https://github.com/syncthing/syncthing/releases/download/v0.14.49-rc.1/syncthing-linux-amd64-v0.14.49-rc.1.tar.gz">https://github.com/syncthing/syncthing/releases/download/v0.14.49-rc.1/syncthing-linux-amd64-v0.14.49-rc.1.tar.gz</a></p>
<p>tar xzvf .&#x2F;syncthing-linux-amd64-v0.14.49-rc.1.tar.gz</p>
<p>mv .&#x2F;syncthing-linux-amd64-v0.14.49-rc.1&#x2F;syncthing &#x2F;opt&#x2F;bin&#x2F;</p>
<p>chmod +x &#x2F;opt&#x2F;bin&#x2F;syncthing</p>
<h4 id="添加启动命令"><a href="#添加启动命令" class="headerlink" title="添加启动命令"></a>添加启动命令</h4><p>创建并编辑 <code>/opt/etc/init.d/S92syncthing</code></p>
<p>vi &#x2F;opt&#x2F;etc&#x2F;init.d&#x2F;S92syncthing</p>
<p>在里面填上下面所有字段</p>
<p>#!&#x2F;bin&#x2F;sh<br>ENABLED&#x3D;yes<br>PROCS&#x3D;syncthing<br>ARGS&#x3D;”-home&#x3D;&#x2F;opt&#x2F;etc&#x2F;syncthing”<br>PREARGS&#x3D;””<br>DESC&#x3D;$PROCS<br>PATH&#x3D;&#x2F;opt&#x2F;sbin:&#x2F;opt&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin</p>
<p>if [ ! -d &#x2F;opt&#x2F;etc&#x2F;syncthing ]; then<br> &#x2F;opt&#x2F;bin&#x2F;syncthing -generate&#x3D;”&#x2F;opt&#x2F;etc&#x2F;syncthing”<br> sed -i ‘s127.0.0.1:83840.0.0.0:8384’ &#x2F;opt&#x2F;etc&#x2F;syncthing&#x2F;config.xml<br>elif [[ -f &#x2F;opt&#x2F;etc&#x2F;syncthing&#x2F;config.xml -a “127.0.0.1:8384”=&#x3D;”127.0.0.1:8384” ]]; then<br> sed -i ‘s127.0.0.1:83840.0.0.0:8384’ &#x2F;opt&#x2F;etc&#x2F;syncthing&#x2F;config.xml<br>fi</p>
<p>. &#x2F;opt&#x2F;etc&#x2F;init.d&#x2F;rc.func</p>
<p>然后给权限</p>
<p>chmod +x &#x2F;opt&#x2F;etc&#x2F;init.d&#x2F;S92syncthing</p>
<p>用法: &#x2F;opt&#x2F;etc&#x2F;init.d&#x2F;S92syncthing (startstoprestartcheck)</p>
<p>启动服务就能在浏览器打开 <code>路由器IP:8384</code> 例如 <code>192.168.1.1:8384</code> 打开管理页了</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>易于使用是 Syncthing 的一个重要特性，打开管理页，一目了然</p>
<p>首次打开管理页，所有平台上都是一样的</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/10/syncthing.jpg" alt="syncthing"></p>
<p>然后你需要做的就是</p>
<h3 id="设置用户名、密码"><a href="#设置用户名、密码" class="headerlink" title="设置用户名、密码"></a>设置用户名、密码</h3><p><img src="https://www.jarods.org/wp-content/uploads/2019/10/setpass.jpg" alt="setpass"></p>
<h3 id="设置文件夹"><a href="#设置文件夹" class="headerlink" title="设置文件夹"></a>设置文件夹</h3><p>删除默认的同步文件夹，添加新同步文件夹</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/10/addlocal.jpg" alt="addlocal"></p>
<h3 id="添加远程设备"><a href="#添加远程设备" class="headerlink" title="添加远程设备"></a>添加远程设备</h3><p><img src="https://www.jarods.org/wp-content/uploads/2019/10/addremote.jpg" alt="addremote"></p>
<p>然后稍微等一分钟，两边就能连接上了</p>
<p>最终效果</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/10/end.jpg" alt="end"></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Syncthing 作为一款跨平台同步软件，它简单易用、功能完善强大，具有很高的稳定性，很容易让人想出各种使用场景，而且它还是开源的，感谢那上百位贡献者</p>
<p>本文简单介绍了初级使用方法，还未提及其他的诸如版本控制等功能，其他功能应用，如果以后我觉得值得一说，再更新了</p>
<blockquote>
<p>本文章发表于底噪博客 <a href="https://zhih.me/">https://zhih.me</a> , 转载请注明</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux教程</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Syncthing</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu邮件服务器配置Postfix+Dovecot+SquirrelMail</title>
    <url>/2018/11/21/ubuntu%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEpostfixdovecotsquirrelmail/</url>
    <content><![CDATA[<p>1.将邮件服务器域名bbs.zone的A记录指向服务器IP123.123.123.123，作MX记录 指向 bbs.zone；</p>
<p>2.服务器已安装了Apache2和PHP，且正常运行；</p>
<p>3.安装postfix电子邮件服务器：</p>
<p><code>apt-get install postfix</code></p>
<p>如在安装过程中询问安装配置，就选择“Internet Site”。</p>
<p>4.配置Postfix，修改配置文件 &#x2F;etc&#x2F;postfix&#x2F;main.cf</p>
<p>#将smtpd_relay_restrictions &#x3D; permit_mynetworks permit_sasl_authenticated defer_unauth_destination</p>
<p>修改为 <code>smtpd_relay_restrictions = permit_mynetworks permit_sasl_authenticated reject_unauth_destination</code></p>
<p>#myhostname &#x3D; 电子邮件服务器名 <code>myhostname = bbs.zone</code></p>
<p>检查mydestination参数是否包含$myhostname或是bbs.zone</p>
<p><code>mydestination = $myhostname, localdomain, localhost, localhost.localdomain, localhost</code></p>
<p>如果有支持TLS的SSL证书，存放在 &#x2F;etc&#x2F;ssl&#x2F;private.key  &#x2F;etc&#x2F;ssl&#x2F;certs.crt</p>
<p>则可使用该证书开启支持TLS连接，在配置文件的TLS配置区注释掉原有内容，增加以下内容：</p>
<p><code>smtpd_enforce_tls = no</code> <code>smtpd_tls_loglevel = 1</code> <code>smtpd_use_tls = yes</code> <code>smtpd_tls_key_file = /etc/ssl/private.key</code> <code>smtpd_tls_cert_file = /etc/ssl/certs.crt</code></p>
<p>5.重启postfix邮件服务</p>
<p><code>service postfix restart</code></p>
<p>6.安装Dovecot邮件代理服务</p>
<p><code>apt-get install dovecot-imapd dovecot-pop3d</code></p>
<p>在安装过程中如果询问是否创建SSL（ if you want to create a self-signed SSL certificate）选择YES，然后输入邮件服务器名即可。</p>
<p>为了能够使用SMTP普通密码认证，vim &#x2F;etc&#x2F;dovecot&#x2F;conf.d&#x2F;10-auth.conf  使参数为： <code>disable_plaintext_auth = no</code></p>
<p>7.重启Dovecot邮件代理服务</p>
<p><code>service dovecot restart</code></p>
<p>8.安装SquirrelMail作为网页邮件系统</p>
<p><code>apt-get install squirrelmail</code></p>
<p>9.安装完成后配置相关参数</p>
<p><code>squirrelmail-configure</code></p>
<p>选择2对 server settings进行配置，选择1后回车，键入邮件服务器名称，此例为 bbs.zone，然后按R返回主菜单，再选择4对general options进行配置，选择第11项对 Allow server-side sorting 进行配置，按Y设定为true，然后按R返回主菜单，对Language进行配置，设置charset为语言编码配置为:UTF-8，按S键保存后退出对SquirrelMail的配置。</p>
<p>10.更改 &#x2F;var&#x2F;lib&#x2F;squirrelmail&#x2F;data &#x2F;var&#x2F;spool&#x2F;squirrelmail&#x2F;attach &#x2F;var&#x2F;mail目录属性为777 <code>chmod -R 777 /var/lib/squirrelmail/data /var/spool/squirrelmail/attach /var/mail</code></p>
<p>11.复制SquirrelMail配置文件到apache2的配置文件目录，并启用配置</p>
<p><code>cp /etc/squirrelmail/apache.conf /etc/apache2/sites-available/squirrelmail.conf</code></p>
<p><code>a2ensite squirrelmail.conf</code></p>
<p><code>service apache2 restart</code></p>
<p>通过 http:&#x2F;&#x2F;网站域名&#x2F;squirrelmail访问SquirrelMail邮件系统。</p>
<p>12.创建电子邮件用户账号，如配置一个电子邮件账号 <a href="mailto:&#x61;&#100;&#109;&#x69;&#x6e;&#x40;&#x62;&#98;&#x73;&#46;&#122;&#x6f;&#x6e;&#x65;">&#x61;&#100;&#109;&#x69;&#x6e;&#x40;&#x62;&#98;&#x73;&#46;&#122;&#x6f;&#x6e;&#x65;</a>，用户名为 admin</p>
<p>创建用户</p>
<p><code>useradd admin</code></p>
<p>设定用户密码</p>
<p><code>passwd admin</code></p>
<p>创建用户目录</p>
<p><code>mkdir -p /var/www/html/admin</code></p>
<p><code>usermod -m -d /var/www/html/admin admin</code></p>
<p><code>chown -R admin:admin /var/www/html/admin</code></p>
<p>13.重启下apache2服务</p>
<p><code>service apache2 restart</code></p>
<p>通过http:&#x2F;&#x2F;网站域名&#x2F;squirrelmail访问SquirrelMail邮件系统，如果出现问题，可在“&#x2F;var&#x2F;log&#x2F;mail.err” 检查错误日记</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Dovecot</tag>
        <tag>Postfix</tag>
        <tag>SquirrelMail</tag>
      </tags>
  </entry>
  <entry>
    <title>VPS、独立服务器性能测试：系统信息、上传/下载带宽、硬盘I/O、UNIXBENCH、PING、丢包测试</title>
    <url>/2018/11/07/vps%E3%80%81%E7%8B%AC%E7%AB%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%EF%BC%9A%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E3%80%81%E4%B8%8A%E4%BC%A0-%E4%B8%8B%E8%BD%BD%E5%B8%A6/</url>
    <content><![CDATA[<p>仅支持Linux VPS或在支持SSH的虚拟主机。</p>
<p><strong>1、系统信息、带宽、I&#x2F;O测试</strong> a、这个测试国内、国际速度：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -qO- --no-check-certificate https://zhujiwiki.com/wp-content/uploads/2018/07/superbench.sh  bash</span><br></pre></td></tr></table></figure>

<p>b、这个内容全面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://zhujiwiki.com/wp-content/uploads/2018/05//linuxtest.sh -N --no-check-certificate &amp;&amp; bash linuxtest.sh</span><br></pre></td></tr></table></figure>

<p>上面的不含UnixBench，下面的含UnixBench（测试性能，速度很慢）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://zhujiwiki.com/wp-content/uploads/2018/05//linuxtest.sh -N --no-check-certificate &amp;&amp; bash linuxtest.sh a</span><br></pre></td></tr></table></figure>

<p>这个脚本来自：<a href="https://www.94ish.me/1752.html">https://www.94ish.me/1752.html</a></p>
<p><strong>2、上传&#x2F;下载带宽测试</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://zhujiwiki.com/wp-content/uploads/2017/10/speedtest.py --no-check-certificate</span><br><span class="line">python speedtest.py</span><br></pre></td></tr></table></figure>

<p><strong>3、国内访问速度</strong> a、<a href="http://www.webkaka.com/Ping.aspx">http://www.webkaka.com/Ping.aspx</a> b、<a href="https://www.ipip.net/ping.php">https://www.ipip.net/ping.php</a> c、<a href="http://www.17ce.com/">http://www.17ce.com/</a></p>
<p><strong>4、硬盘 I&#x2F;O 性能测试</strong> dd bs&#x3D;64k count&#x3D;4k if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;test 最没有参考价值，很多垃圾VPS都会用这个 dd bs&#x3D;64k count&#x3D;4k if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;test; sync不怎么严格 dd bs&#x3D;64k count&#x3D;4k if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;test conv&#x3D;fdatasync 国外标准，不怎么严格 dd bs&#x3D;64k count&#x3D;4k if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;test oflag&#x3D;dsync 国内标准，严格，有参考价值</p>
<p>解释一下，第一条是最没有参考价值和最后一条可能会有 400 倍的差距，一些不良主机上就会用说主机的 I&#x2F;O 多么多么牛X。 最后一条超过 10M 可以正常建站，超过 50M 就无敌拉。最有一条很严格，也是国内发烧最喜欢的了。</p>
<p>或者最简单的一个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd if=/dev/zero of=test bs=64k count=4k oflag=dsync</span><br><span class="line">执行命令以后，系统会自动创建一个268M的文件</span><br><span class="line">一般来说10M左右对VPS的一般应用无影响。10M以上性能可观。10M以下表示硬盘压力有点大，1M以下……</span><br></pre></td></tr></table></figure>

<p>以上是普通HDD硬盘，下面是SSD硬盘测试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install hdparm -y</span><br><span class="line">fdisk -l</span><br><span class="line">hdparm -T /dev/sda</span><br></pre></td></tr></table></figure>

<p><strong>5、性能测试之UnixBench跑分</strong> 运行10-30分钟后（根据CPU内核数量，运算时间不等）得出分数，越高越好。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://zhujiwiki.com/wp-content/uploads/2018/07/unixbench.sh</span><br><span class="line">chmod +x unixbench.sh</span><br><span class="line">./unixbench.sh</span><br></pre></td></tr></table></figure>

<p><strong>6、丢包测试</strong> 使用ATKKPING软件进行测试，可测试本地访问的丢包情况。 软件下载：<a href="https://zhujiwiki.com/wp-content/uploads/2016/08/861731943.zip">ATKKPING.zip</a> <img src="https://www.jarods.org/wp-content/uploads/2018/11/3446242568.png" alt="ATKKPING.png" title="ATKKPING.png"></p>
<p><strong>7、去程路由追踪</strong> <a href="https://www.ipip.net/traceroute.php">https://www.ipip.net/traceroute.php</a> <a href="http://www.webkaka.com/Tracert.aspx">http://www.webkaka.com/Tracert.aspx</a></p>
<p><strong>8、回程路由追踪</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://zhujiwiki.com/wp-content/uploads/2017/12/besttrace4linux.zip</span><br><span class="line">unzip besttrace4linux.zip</span><br><span class="line">chmod +x besttrace</span><br><span class="line">./besttrace -q 1 IP（这个IP换成-移动-218.205.152.14、联通-220.196.42.133、电信-121.11.69.135）</span><br></pre></td></tr></table></figure>

<p>若出错，请安装 traceroute。</p>
<p><strong>9、Youtube速度测试</strong> 装好SS后，浏览 <a href="https://www.youtube.com/watch?v=qO6-1u0wfPk">https://www.youtube.com/watch?v=qO6-1u0wfPk</a>，选择4K或者8K，右键查看速度</p>
<p><strong>10、独立服务器硬盘使用时间</strong> centos下：yum install smartmontools -y 开启服务：service smartd start ; chkconfig smartd on 查看：smartctl -a &#x2F;dev&#x2F;sda</p>
<p><strong>11、CPU Benchmark</strong> <a href="https://www.cpubenchmark.net/">https://www.cpubenchmark.net/</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ping</tag>
        <tag>UNIXBENCH</tag>
        <tag>上传/下载带宽</tag>
        <tag>丢包测试</tag>
        <tag>性能测试</tag>
        <tag>测试</tag>
        <tag>硬盘I/O</tag>
        <tag>系统信息</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim日常笔记</title>
    <url>/2022/01/06/vim%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Vim乱码处理"><a href="#Vim乱码处理" class="headerlink" title="Vim乱码处理"></a>Vim乱码处理</h1><p>在<code>/etc/vim/vimrc</code>文件末尾添加</p>
<p><code>set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936</code></p>
<h1 id="vim-去掉自动注释和自动回车"><a href="#vim-去掉自动注释和自动回车" class="headerlink" title="vim 去掉自动注释和自动回车"></a>vim 去掉自动注释和自动回车</h1><p>取消</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:set paste</span><br></pre></td></tr></table></figure>

<p>恢复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:set paste!</span><br></pre></td></tr></table></figure>

<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>vim删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x        删除当前光标下的字符</span><br><span class="line">dw       删除光标之后的单词剩余部分。</span><br><span class="line">d$       删除光标之后的该行剩余部分。</span><br><span class="line">dd       删除当前行。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>vim撤销、恢复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">u   撤销上一步的操作</span><br><span class="line">Ctrl+r 恢复上一步被撤销的操作</span><br></pre></td></tr></table></figure>

<p>快速移动光标</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">w    移动到下一个单词</span><br></pre></td></tr></table></figure>

<p>行编辑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl+v,hjkl,Shift+i</span><br></pre></td></tr></table></figure>

<p>vim折叠</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set foldmethod=syntax 或者是其它方法。设置好了之后可以用 zM 和 zR 来打开或关闭所有的折叠。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>设置行号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:set number</span><br></pre></td></tr></table></figure>

<p>设置相对行号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:set relativenumber</span><br></pre></td></tr></table></figure>

<p>查找时忽略大小写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set ic</span><br></pre></td></tr></table></figure>

<p>取消设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:set no*****</span><br></pre></td></tr></table></figure>

<p>每行最后添加字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:%s/$/需要追加的字符</span><br></pre></td></tr></table></figure>

<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>编辑~&#x2F;.vimrc文件</p>
<h3 id="vim中文乱码"><a href="#vim中文乱码" class="headerlink" title="vim中文乱码"></a>vim中文乱码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set encoding=utf-8</span><br></pre></td></tr></table></figure>

<h3 id="vim记录上次编辑的位置（编辑-x2F-vimrc文件）"><a href="#vim记录上次编辑的位置（编辑-x2F-vimrc文件）" class="headerlink" title="vim记录上次编辑的位置（编辑~&#x2F;.vimrc文件）"></a>vim记录上次编辑的位置（编辑~&#x2F;.vimrc文件）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">autocmd BufReadPost *</span><br><span class="line">      \  if line(&quot;&#x27;\&quot;&quot;) &gt; 0 &amp;&amp; line (&quot;&#x27;\&quot;&quot;) &lt;= line(&quot;$&quot;) </span><br><span class="line">      \      exe &quot;normal g&#x27;\&quot;&quot; </span><br><span class="line">      \  endif</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vultr CentOS7 快速一键部署锐速及 Firewalld 配置</title>
    <url>/2018/09/19/vultr-centos7-%E5%BF%AB%E9%80%9F%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E9%94%90%E9%80%9F%E5%8F%8A-firewalld-%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>很久没更新了，最近闲下来，分享一下我是如何在 CentOS7 下快速部署 SS 的教程吧。</p>
<p>整套下来一般在 5 分钟之内即可部署完毕。</p>
<h2 id="一、更新-CentOS7-到最新版并同步时间"><a href="#一、更新-CentOS7-到最新版并同步时间" class="headerlink" title="一、更新 CentOS7 到最新版并同步时间"></a>一、更新 CentOS7 到最新版并同步时间</h2><p>更新 CentOS7 到最新</p>
<p>yum install epel-release -y<br>yum update -y<br>yum install bind-utils net-tools wget ntp -y</p>
<p>同步时间</p>
<p>timedatectl set-timezone Asia&#x2F;Shanghai<br>timedatectl set-ntp yes<br>timedatectl</p>
<p>重启系统</p>
<p>systemctl reboot</p>
<h2 id="二、CentOS7-强制安装支持锐速的最新内核，并永久指定使用该内核启动系统"><a href="#二、CentOS7-强制安装支持锐速的最新内核，并永久指定使用该内核启动系统" class="headerlink" title="二、CentOS7 强制安装支持锐速的最新内核，并永久指定使用该内核启动系统"></a>二、CentOS7 强制安装支持锐速的最新内核，并永久指定使用该内核启动系统</h2><p>强制更新内核到：kernel-3.10.0-327.36.3.el7.x86_64</p>
<p>rpm -ivh <a href="http://vault.centos.org/7.2.1511/updates/x86/_64/Packages/kernel-3.10.0-327.36.3.el7.x86/_64.rpm">http://vault.centos.org/7.2.1511/updates/x86\_64/Packages/kernel-3.10.0-327.36.3.el7.x86\_64.rpm</a> –force</p>
<p>永久指定使用该内核启动</p>
<p> grub2-set-default “CentOS Linux (3.10.0-327.36.3.el7.x86_64) 7 (Core)”</p>
<p>检查指定内核是否生效</p>
<p> grub2-editenv list</p>
<p>重启系统</p>
<p>systemctl reboot</p>
<p>再次检查当前运行的内核</p>
<p> uname -r</p>
<h2 id="三、安装锐速"><a href="#三、安装锐速" class="headerlink" title="三、安装锐速"></a>三、安装锐速</h2><p>wget -N –no-check-certificate <a href="https://github.com/91yun/serverspeeder/raw/master/serverspeeder-v.sh">https://github.com/91yun/serverspeeder/raw/master/serverspeeder-v.sh</a> &amp;&amp; bash serverspeeder-v.sh CentOS 7.2 3.10.0-327.el7.x86_64 x64 3.11.20.5 serverspeeder_72327</p>
<h2 id="四、安装-SS"><a href="#四、安装-SS" class="headerlink" title="四、安装 SS"></a>四、安装 SS</h2><p><a href="https://teddysun.com/342.html">https://teddysun.com/342.html</a></p>
<p>建议采用 chacha20-ietf-poly1305 协议，该协议在路由器上可以达到更高的速度。</p>
<h2 id="五、修改最大文件链接数-NOFILE-设置"><a href="#五、修改最大文件链接数-NOFILE-设置" class="headerlink" title="五、修改最大文件链接数 NOFILE 设置"></a>五、修改最大文件链接数 NOFILE 设置</h2><p>修改该数值才可以让 SS 支持更多的端口，否则会导致重启机器后 SS 起不来。</p>
<p>打开 &#x2F;etc&#x2F;systemd&#x2F;system.conf 文件，找到 #DefaultLimitNOFILE&#x3D; 修改为如下：</p>
<p>DefaultLimitNOFILE&#x3D;51200</p>
<h2 id="六、安装-SS-自动重启监控"><a href="#六、安装-SS-自动重启监控" class="headerlink" title="六、安装 SS 自动重启监控"></a>六、安装 SS 自动重启监控</h2><p>每五分钟检查一次 SS 是否在运行，如果不在运行则会自动重启</p>
<p>wget –no-check-certificate -O &#x2F;opt&#x2F;shadowsocks-crond.sh <a href="https://raw.githubusercontent.com/teddysun/shadowsocks/_install/master/shadowsocks-crond.sh">https://raw.githubusercontent.com/teddysun/shadowsocks\_install/master/shadowsocks-crond.sh</a><br>chmod 755 &#x2F;opt&#x2F;shadowsocks-crond.sh<br>(crontab -l ; echo “*&#x2F;5 * * * * &#x2F;opt&#x2F;shadowsocks-crond.sh”)  crontab -<br>crontab -l<br>service crond restart</p>
<h2 id="七、Firewalld-防火墙配置"><a href="#七、Firewalld-防火墙配置" class="headerlink" title="七、Firewalld 防火墙配置"></a>七、Firewalld 防火墙配置</h2><p>打开 &#x2F;etc&#x2F;firewalld&#x2F;zones&#x2F;public.xml 文件，使用 <port protocol=”网路协议” port=”指定端口”/> 开放相应的端口：</p>
<?xml version="1.0" encoding="utf-8"?>
<zone>
<short>Public</short>
<description>For use in public areas. You do not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted.</description>
<service name="dhcpv6-client"/>
<port protocol="tcp" port="指定端口"/>
<port protocol="tcp" port="开始端口-结束端口"/>
<port protocol="udp" port="开始端口-结束端口"/>
</zone>

<p>重启 Firewalld 并查看端口配置是否生效</p>
<p>service firewalld restart<br>systemctl enable firewalld<br>firewall-cmd –zone&#x3D;public –list-all</p>
<h2 id="八、最终检查"><a href="#八、最终检查" class="headerlink" title="八、最终检查"></a>八、最终检查</h2><p>检查锐速是否在运行</p>
<p>&#x2F;serverspeeder&#x2F;bin&#x2F;serverSpeeder.sh status</p>
<p>检查 SS 是否在运行</p>
<p>参考上方刚刚的安装链接中的介绍</p>
<p>检查 SS 运行是否正常</p>
<p>参考上方刚刚的安装链接中的介绍</p>
<h2 id="九、效果"><a href="#九、效果" class="headerlink" title="九、效果"></a>九、效果</h2><p>本次教程使用的是 <a href="https://www.vultr.com/promo25b?ref=6928187-3B">Vultr Seattle</a> 节点进行的，以下测试结果基于全局模式。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/09/vultrfast.png"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/09/vultryoutube4k.png"></p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://www.jarods.org/wp-content/uploads/2018/09/vultrspeedtest.png"></h2><h2 id="更多-VPS-推荐"><a href="#更多-VPS-推荐" class="headerlink" title="更多 VPS 推荐"></a>更多 VPS 推荐</h2><p>【强烈推荐】搬瓦工 CN2，<a href="https://blog.deartanker.com/post/4369.html">查看测试结果</a>。</p>
<p><a href="https://blog.deartanker.com/vps">其他 VPS 推荐</a>。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>锐速</tag>
        <tag>内核</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10系统优化机械硬盘速度几个绝招</title>
    <url>/2020/04/06/win10%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E9%80%9F%E5%BA%A6%E5%87%A0%E4%B8%AA%E7%BB%9D%E6%8B%9B/</url>
    <content><![CDATA[<p>电脑硬盘是储存数据的设备，而硬盘速度快慢直接影响到系统的运行速度，现在使用固态硬盘的朋友越来越多，但还是有相当一部分用户还在使用机械硬盘，不知道平时会不会感觉机械硬盘越用越慢，导致系统各种卡顿呢？对于硬盘优化的文章有不少，但是能用的却不多，下面小编介绍的这几个Win10下优化机械硬盘的绝招大家可以学习一下。</p>
<p><strong>方法一：机械硬盘4K对齐</strong></p>
<p>4K对齐相信大家都知道，固态硬盘对4K对齐之后性能会好很多，其实机械硬盘也有必要进行4K对齐，读写速度都会有一定的提升哦。</p>
<p>1、下载分区助手专业版下载地址：分区助手专业版</p>
<p>2、选定你要4K对的磁盘，齐点击鼠标右键依次选择“高级操作”—“分区对齐”。以下以E盘为例：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/1436042512-0.png" alt="jiaocheng/images/align-without-losing-data/align-without-losing-data1.png"></p>
<p>2、点击“分区对齐”之后出现确定对齐的对话窗口，选择4K对齐点击确定。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/1436045113-1.png"></p>
<p><strong>方法二：优化索引</strong></p>
<p>优化索相能提高系统在硬盘中搜索文件的速度，从而提高运行效率（不当当是用户手动搜索，系统使用中也有搜索行为）</p>
<p>1、我们先进入“此电脑”，在机械硬盘的盘符上使用鼠标右键选择属性，在弹出的界面上，去掉“除了文件属性外，还允许索引此驱动器上的文件内容”，这么操作可能会在我们搜索该磁盘文件时浪费大量的时间，但会让系统不再针对机械硬盘没事就建索引文件，避免不必要的卡顿呢。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/1436043B8-2.png" alt="索引"></p>
<p><strong>方法二：磁盘优化</strong></p>
<p>还是在盘符属性中，切换选项卡到“工具”选择“优化”，在弹出窗口里点击“更改设置”，取消勾选其中的“按计划运行”。取消勾选其中的“按计划运行”。由于该功能对NTFS格式的作用并不明显，而且它是后台运行，占用一部分磁盘性能，所以取消的话对读写操作的速度提升都是有好处的。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/1436045T9-3.png" alt="QQ图片20180829162746"></p>
<p><strong>方法三：设置虚拟内存调用时机</strong></p>
<p>虚拟内存是以电脑硬盘为数据交换的一个功能，是内存的补充，但是如果此时内存还够而不停的去使用硬盘来交换数据，势必占用硬盘性能，我们要做的就是优化这个地方</p>
<p>1、Win+R组合键后输入system.ini，用记事本等文本工具打开记事本。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/143604Ca-4.png" alt="system.ini"></p>
<p>上面那个是系统中原文件的样子，我们需在在第一部分后添加</p>
<p>ConservativeSwapfileUsage&#x3D;1</p>
<p>命令，意思是让系统在调用全部物理内存之后再使用虚拟内存进行数据交换。</p>
<p>之后在文本的末尾处把下面这些内容加上：</p>
<p>[vcache]</p>
<p>MinFileCache&#x3D;4096</p>
<p>MaxFileCache&#x3D;8096</p>
<p>通过设置最小4MB、最大8MB的内存空间用于缓存硬盘小文件读写，这样可以改善读写小文件的性能。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/1436041421-5.png" alt="QQ图片20180829162918"></p>
<p>好了，通过以上步骤优化机械硬盘之后，大家在使用中会有惊喜哦，总之硬盘快了，系统也快了。</p>
]]></content>
      <categories>
        <category>Win</category>
      </categories>
      <tags>
        <tag>WIN10</tag>
        <tag>机械硬盘</tag>
      </tags>
  </entry>
  <entry>
    <title>WAMP本地环境搭建笔记</title>
    <url>/2022/01/06/wamp%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="开启虚拟主机"><a href="#开启虚拟主机" class="headerlink" title="开启虚拟主机"></a>开启虚拟主机</h3><p>1.编辑文件 F:\wamp\bin\apache\apache2.4.9\conf\httpd.conf</p>
<p>去掉httpd-vhosts.conf的注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Virtual hosts</span><br><span class="line">Include conf/extra/httpd-vhosts.conf</span><br></pre></td></tr></table></figure>

<p>把Directory修改成如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Directory /&gt;</span><br><span class="line">    Order Deny,Allow</span><br><span class="line">    Deny from all</span><br><span class="line">Allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<p>2.编辑文件 F:\wamp\bin\apache\apache2.4.9\conf\extra\httpd-vhosts.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    DocumentRoot D:/00_cloud/server-php</span><br><span class="line">    ServerName server-php.com</span><br><span class="line">    &lt;Directory &quot;D:/00_cloud/server-php&quot;&gt;</span><br><span class="line">    Options Indexes FollowSymLinks</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.修改 C:\Windows\System32\drivers\etc\hosts</p>
<p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 server-php.com</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Win</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>PHP</tag>
        <tag>WAMP</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10系统自带的哪些软件可以卸载</title>
    <url>/2020/05/21/win10%E7%B3%BB%E7%BB%9F%E8%87%AA%E5%B8%A6%E7%9A%84%E5%93%AA%E4%BA%9B%E8%BD%AF%E4%BB%B6%E5%8F%AF%E4%BB%A5%E5%8D%B8%E8%BD%BD/</url>
    <content><![CDATA[<p>Win10系统自带的软件全都可以卸载。</p>
<p>方法如下：</p>
<p>一、借助第三方应用将其卸载</p>
<p>如腾讯旗下的电脑管家中的软件管理可以将其卸载，这也是最简单的一种方法，但是重新创建账号的时候，它又会自动的预装上这些软件。</p>
<p>二、利用WIN10系统中自带的软件POWERSHELL</p>
<p>WINDOWS POWERSHELL是一种命令行外壳程序和脚本环境，使命令行用户和脚本编写者可以利用 .NET FRAMEWORK的强大功能。</p>
<p>在开始菜单中找到它，右键“以管理员身份运行”，这一点很重要。然后我们以卸载ONENOTE为例，利用快捷键CTRL+C和CTRL+V进行复制和粘贴命令</p>
<p>“GET-APPXPACKAGE *ONENOTE*  REMOVE-APPXPACKAGE”到POWERSHELL中，敲一下回车，等待它自行卸载，卸载过程中会弹出很多错误信息，实际已经卸载了，不用理会。</p>
<p>其他自带的应用的也用此方法可卸载。卸载后的软件可以在应用商店里重新下载。</p>
<p><img src="/2020/05/9825bc315c6034a8f1a26d33c6134954082376c4.jpg"></p>
<p><strong>扩展资料：</strong></p>
<p>下面给出一些WINDOWS 10预装应用删除的命令：</p>
<p>卸载ONENOTE</p>
<p>GET-APPXPACKAGE *ONENOTE*  REMOVE-APPXPACKAGE</p>
<p>卸载3D BUILDER</p>
<p>GET-APPXPACKAGE *3D*  REMOVE-APPXPACKAGE</p>
<p>卸载邮件和日历</p>
<p>GET-APPXPACKAGE *COMMUNI*  REMOVE-APPXPACKAGE、</p>
<p>卸载新闻订阅</p>
<p>GET-APPXPACKAGE *BING*  REMOVE-APPXPACKAGE</p>
<p>卸载CAMERA相机</p>
<p>GET-APPXPACKAGE *CAMERA*  REMOVE-APPXPACKAGE</p>
<p>卸载地图</p>
<p>GET-APPXPACKAGE *MAP*  REMOVE-APPXPACKAGE</p>
<p>卸载GROOVE音乐、电影与电视</p>
<p>GET-APPXPACKAGE *ZUNE*  REMOVE-APPXPACKAGE</p>
<p>卸载人脉</p>
<p>GET-APPXPACKAGE *PEOPLE*  REMOVE-APPXPACKAGE</p>
<p>卸载手机助手</p>
<p>GET-APPXPACKAGE *PHONE*  REMOVE-APPXPACKAGE</p>
<p>卸载照片</p>
<p>GET-APPXPACKAGE *PHOTO*  REMOVE-APPXPACKAGE</p>
<p>卸载纸牌游戏</p>
<p>GET-APPXPACKAGE *SOLIT*  REMOVE-APPXPACKAGE</p>
<p>卸载录音机</p>
<p>GET-APPXPACKAGE *SOUNDREC*  REMOVE-APPXPACKAGE</p>
<p>卸载XBOX</p>
<p>GET-APPXPACKAGE *XBOX*  REMOVE-APPXPACKAGE</p>
<p>卸载当前账户预装的所有应用</p>
<p>GET-APPXPACKAGE  REMOVE-APPXPACKAGE</p>
<p>卸载所有账户中的预装应用</p>
<p>GET-APPXPACKAGE -ALLUSERS  REMOVE-APPXPACKAGE</p>
<p>彻底卸载系统中的预装应用（创建新的账号中不再重新预装应用，慎用）</p>
<p>GET-APPXPROVISIONEDPACKAGE -ONLINE  REMOVE-APPXPROVISIONEDPACKAGE–ONLINE</p>
<p><strong>参考资料：</strong></p>
<p><a href="https://baike.baidu.com/item/Windows%2010" title="只支持选中一个链接时生效">百度百科——Windows 10</a></p>
]]></content>
      <categories>
        <category>Win</category>
      </categories>
      <tags>
        <tag>WIN10</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows日常操作</title>
    <url>/2022/01/06/windows%E6%97%A5%E5%B8%B8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="启动时加载bat"><a href="#启动时加载bat" class="headerlink" title="启动时加载bat"></a>启动时加载bat</h2><p>运行： shell:startup -&gt; startup.vbs</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set ws=WScript.CreateObject(&quot;WScript.Shell&quot;)</span><br><span class="line">ws.Run &quot;C:\auto_run\startup\start.bat /start&quot;,0</span><br></pre></td></tr></table></figure>

<h1 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h1><h2 id="windows-curl"><a href="#windows-curl" class="headerlink" title="windows curl"></a>windows curl</h2><p>下载地址：<a href="https://curl.haxx.se/windows/">https://curl.haxx.se/windows/</a></p>
<h2 id="计算文件Hash值："><a href="#计算文件Hash值：" class="headerlink" title="计算文件Hash值："></a>计算文件Hash值：</h2><p>在Windows中可以通过以下方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">certutil -hashfile yourfilename MD5</span><br><span class="line">certutil -hashfile yourfilename SHA1</span><br><span class="line">certutil -hashfile yourfilename SHA256</span><br></pre></td></tr></table></figure>

<p>而在Linux下，命令为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">md5sum yourfilename</span><br><span class="line">sha1sum yourfilename</span><br><span class="line">sha256sum yourfilename</span><br></pre></td></tr></table></figure>

<h2 id="windows命令行工具-nircmd"><a href="#windows命令行工具-nircmd" class="headerlink" title="windows命令行工具 nircmd"></a>windows命令行工具 nircmd</h2><p>下载地址：<a href="http://www.nirsoft.net/utils/nircmd.html">http://www.nirsoft.net/utils/nircmd.html</a></p>
<p>关闭监视器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nircmd.exe monitor off</span><br></pre></td></tr></table></figure>

<p>锁屏：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nircmd.exe lockws</span><br></pre></td></tr></table></figure>

<p>截屏：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nircmd.exe savescreenshotfull &quot;f:\tmp\shot.png&quot;</span><br></pre></td></tr></table></figure>

<p>设置鼠标在屏幕位置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nircmd.exe setcursor 100 50</span><br></pre></td></tr></table></figure>

<p>按鼠标键:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">① sendmouse right click 右键鼠标</span><br><span class="line">② sendmouse left click  左键鼠标</span><br><span class="line">③ sendmouse left dblclick 双击鼠标左键</span><br><span class="line">④ sendmouse left down  按下鼠标左键</span><br><span class="line">⑤ sendmouse left up  松开鼠标左键</span><br><span class="line">⑥ sendmouse middle click</span><br></pre></td></tr></table></figure>

<h2 id="工具集"><a href="#工具集" class="headerlink" title="工具集"></a>工具集</h2><p>视频下载工具 annie</p>
<p><a href="https://github.com/iawia002/annie">https://github.com/iawia002/annie</a></p>
<p>视频转码工具 FFmpeg</p>
<p><a href="https://www.ffmpeg.org/">https://www.ffmpeg.org/</a></p>
<p>比如mp4转mp3: <code>ffmpeg -i xx.mp4 xx.mp3</code></p>
<p>tcping</p>
<p><a href="https://elifulkerson.com/projects/index.php">https://elifulkerson.com/projects/index.php</a></p>
<p>nircmd,wake_on_lan,GUIPropView</p>
<p><a href="http://www.nirsoft.net/utils/index.html">http://www.nirsoft.net/utils/index.html</a></p>
<p>网络唤醒wol</p>
<p><a href="https://www.depicus.com/wake-on-lan/wake-on-lan-cmd">https://www.depicus.com/wake-on-lan/wake-on-lan-cmd</a></p>
<p>设置分辨率 QRes</p>
<p><a href="http://www.softpedia.com/progDownload/QRes-Download-618.html">http://www.softpedia.com/progDownload/QRes-Download-618.html</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QRes.exe /x:1920 /y:1080</span><br></pre></td></tr></table></figure>

<h2 id="windows开启关闭防火墙"><a href="#windows开启关闭防火墙" class="headerlink" title="windows开启关闭防火墙"></a>windows开启关闭防火墙</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NetSh Advfirewall set allprofiles state off   #关闭防火墙</span><br><span class="line">NetSh Advfirewall set allprofiles state on    #开启防火墙</span><br><span class="line">Netsh Advfirewall show allprofiles            #查看防火墙状态</span><br></pre></td></tr></table></figure>

<h2 id="在-Windows-10-中启用可匿名访问的共享"><a href="#在-Windows-10-中启用可匿名访问的共享" class="headerlink" title="在 Windows 10 中启用可匿名访问的共享"></a>在 Windows 10 中启用可匿名访问的共享</h2><p>就是不用输入用户名和密码，直接通过网上邻居可以访问的共享。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、打开本地组策略编辑器（快捷键Win+R，打开运行，输入gpedit.msc，确定）；</span><br><span class="line">2、打开：“本地计算机策略-&gt;计算机配置-&gt;Windows设置-&gt;安全设置-&gt;本地策略-&gt;用户权限分配”；</span><br><span class="line">3、找到：“拒绝从网络访问这台计算机”，将列表中的“Guest”删除；</span><br><span class="line">4、打开：“本地计算机策略-&gt;计算机配置-&gt;Windows设置-&gt;安全设置-&gt;本地策略-&gt;安全选项”；</span><br><span class="line">5、找到：“网络访问：本地帐户的共享和安全模型”，改为：“仅来宾 - 对本地用户进行身份验证，其身份为来宾”；</span><br><span class="line">6、找到：“网络访问：将 Everyone 权限应用于匿名用户”，改为：“已启用”；</span><br><span class="line">7、找到：“账户：来宾账户状态”，改为：“已启用”；</span><br></pre></td></tr></table></figure>

<p>注意：如果访问共享文件夹时出现“你不能访问此共享文件夹，因为你组织的安全策略阻止未经身份验证的来宾访问，这些策略可帮助保护你的电脑免受网络上不安全设备或者恶意设备的威胁” 需要如下操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、打开本地组策略编辑器（快捷键Win+R，打开运行，输入gpedit.msc，确定）；</span><br><span class="line">2、在“计算机配置”中找到“管理模板”-&gt;“网络”-&gt;“Lanman工作站”；</span><br><span class="line">3、在本地策略编辑器的右侧双击“启用不安全的来宾登录”。选择“已启用”，并点击确定，解决问题。</span><br></pre></td></tr></table></figure>

<h2 id="Win10-开机自动登录"><a href="#Win10-开机自动登录" class="headerlink" title="Win10 开机自动登录"></a>Win10 开机自动登录</h2><p>方法一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">control userpasswords2</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netplwiz</span><br></pre></td></tr></table></figure>

<p>方法三：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rundll32 netplwiz.dll,UsersRunDll</span><br></pre></td></tr></table></figure>

<p>方法四：</p>
<p>创建autologin.reg文件，双击导入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Win10-右键菜单Intel图形属性删除"><a href="#Win10-右键菜单Intel图形属性删除" class="headerlink" title="Win10 右键菜单Intel图形属性删除"></a>Win10 右键菜单Intel图形属性删除</h2><p>以<strong>管理员权限</strong>打开cmd，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">regsvr32 /u igfxDTCM.dll</span><br></pre></td></tr></table></figure>

<p>恢复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">regsvr32 igfxDTCM.dll</span><br></pre></td></tr></table></figure>

<h2 id="windows-删除进程"><a href="#windows-删除进程" class="headerlink" title="windows 删除进程"></a>windows 删除进程</h2><p>查看指定端口的连接信息:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ano  findstr &quot;8080&quot;</span><br></pre></td></tr></table></figure>

<p>查看进程列表:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasklist  findstr &quot;java&quot;</span><br></pre></td></tr></table></figure>

<p>通过上面的方式可以查看占用端口号的进程ID:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">taskkill -PID 进程号 -F</span><br></pre></td></tr></table></figure>

<h1 id="win10"><a href="#win10" class="headerlink" title="win10"></a>win10</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>微软官方下载地址：<a href="https://www.microsoft.com/zh-cn/software-download/windows10">https://www.microsoft.com/zh-cn/software-download/windows10</a></p>
<h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p>序列号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Home: TX9XD-98N7V-6WMQ6-BX7FG-H8Q99</span><br><span class="line">Home N: 3KHY7-WNT83-DGQKR-F7HPR-844BM</span><br><span class="line">Home Single Language: 7HNRX-D7KGG-3K4RQ-4WPJ4-YTDFH</span><br><span class="line">Home Country Specific: PVMJN-6DFY6-9CCP6-7BKTT-D3WVR</span><br><span class="line">Professional: W269N-WFGWX-YVC9B-4J6C9-T83GX</span><br><span class="line">Professional N: MH37W-N47XK-V7XM9-C7227-GCQG9</span><br><span class="line">Education: NW6C2-QMPVW-D7KKK-3GKT6-VCFB2</span><br><span class="line">Education N: 2WH4N-8QGBV-H22JP-CT43Q-MDWWJ</span><br><span class="line">Enterprise: NPPR9-FWDCX-D2C8J-H872K-2YT43</span><br><span class="line">Enterprise N: DPH2V-TTNVB-4X9Q3-TJR4H-KHJW4</span><br></pre></td></tr></table></figure>

<p>激活步骤：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</span><br><span class="line">slmgr /skms kms8.msguides.com</span><br><span class="line">slmgr /ato</span><br></pre></td></tr></table></figure>

<h1 id="win11"><a href="#win11" class="headerlink" title="win11"></a>win11</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>微软官方下载地址：<a href="https://www.microsoft.com/zh-cn/software-download/windows11">https://www.microsoft.com/zh-cn/software-download/windows11</a></p>
<h2 id="绕过-TPM-2-0-检测"><a href="#绕过-TPM-2-0-检测" class="headerlink" title="绕过 TPM 2.0 检测"></a>绕过 TPM 2.0 检测</h2><p>Win11 会提示“该电脑无法运行 Win11”解决办法：</p>
<h3 id="1、注册表大法"><a href="#1、注册表大法" class="headerlink" title="1、注册表大法"></a>1、注册表大法</h3><p>在安装界面按 Shift+F10，打开命令行界面，输入 regedit 打开注册表，然后定位到：</p>
<blockquote>
<p><em>HKEY_LOCAL_MACHINE\SYSTEM\Setup</em></p>
</blockquote>
<p>创建一个名为“LabConfig”的项，接着在“LabConfig”下创建两个 DWORD 值：</p>
<ul>
<li>键为“BypassTPMCheck”，值为“00000001”</li>
<li>键为“BypassSecureBootCheck”，值为“00000001”</li>
<li>键为“BypassRAMCheck”，值为“00000001”</li>
</ul>
<p>保存退出后，上图的提示就消失了，就可以正常安装 Win11。</p>
<h3 id="2、修改-ISO-镜像"><a href="#2、修改-ISO-镜像" class="headerlink" title="2、修改 ISO 镜像"></a>2、修改 ISO 镜像</h3><p>如果想通过直接从 Win11 ISO 镜像运行 setup.exe 程序来升级系统，而非全新安装，还有另一种简单的解决方法。</p>
<p>需要找到 Win10 ISO 的 appraiserres.dll 文件，替换 Win11 ISO 的同名文件。完成后，需要使用第三方工具（如 Rufus 或 AnyBurn）重新创建 ISO 镜像，然后再次运行安装文件。</p>
<h2 id="激活-1"><a href="#激活-1" class="headerlink" title="激活"></a>激活</h2><p>win11激活工具</p>
<p><a href="https://github.com/zbezj/HEU_KMS_Activator">https://github.com/zbezj/HEU_KMS_Activator</a></p>
<h1 id="脚本重连蓝牙耳机"><a href="#脚本重连蓝牙耳机" class="headerlink" title="脚本重连蓝牙耳机"></a>脚本重连蓝牙耳机</h1><p>首先去该网站下载：<a href="http://bluetoothinstaller.com/bluetooth-command-line-tools/">蓝牙命令行管理工具</a></p>
<p>然后打开命令行，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">btdiscovery -s  # 扫描蓝牙设备，需要等待一会</span><br></pre></td></tr></table></figure>

<p>获取到设备的 DEVICE_ADDRESS 和 SERVICE_UUID</p>
<p>DEVICE_ADDRESS 是蓝牙设备的mac地址</p>
<p>SERVICE_UUID 是设备的服务ID，比如耳麦是1108，免提网关111E</p>
<h2 id="自动重新连接bat脚本"><a href="#自动重新连接bat脚本" class="headerlink" title="自动重新连接bat脚本"></a>自动重新连接bat脚本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">rem   The following line is needed only if you haven&#x27;t added Bluetooth Command Line Tools to system PATH</span><br><span class="line">REM set PATH=C:\Program Files (x86)\Bluetooth Command Line Tools\bin;%PATH%</span><br><span class="line"></span><br><span class="line">rem   Change the following 2 lines to match your device</span><br><span class="line">set DEVICE_ADDRESS=1C:52:16:58:8F:95</span><br><span class="line">set SERVICE_UUID=1108</span><br><span class="line"></span><br><span class="line">rem   If your device requires PIN code other than &#x27;0000&#x27;, uncomment and change the following line</span><br><span class="line">set PIN=0000</span><br><span class="line"></span><br><span class="line">rem   Remove the device. Ignoring possible error here </span><br><span class="line">btpair -u -b&quot;%DEVICE_ADDRESS%&quot;</span><br><span class="line"></span><br><span class="line">rem   Pair the device</span><br><span class="line">btpair -p%PIN% -b&quot;%DEVICE_ADDRESS%&quot;</span><br><span class="line">if errorlevel 1 goto error</span><br><span class="line"></span><br><span class="line">rem   Enable the service</span><br><span class="line">REM btcom -c -b&quot;%DEVICE_ADDRESS%&quot; -s%SERVICE_UUID%</span><br><span class="line">REM if errorlevel 1 goto error</span><br><span class="line"></span><br><span class="line">goto success</span><br><span class="line"></span><br><span class="line">rem   Allow user to read error message before window is closed</span><br><span class="line">:error</span><br><span class="line">pause</span><br><span class="line">exit</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="查看AC电源状态"><a href="#查看AC电源状态" class="headerlink" title="查看AC电源状态"></a>查看AC电源状态</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WMIC Path Win32_Battery Get BatteryStatus</span><br></pre></td></tr></table></figure>

<h1 id="操作系统中查看硬件制造商和BIOS版本"><a href="#操作系统中查看硬件制造商和BIOS版本" class="headerlink" title="操作系统中查看硬件制造商和BIOS版本"></a>操作系统中查看硬件制造商和BIOS版本</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dxdiag</span><br></pre></td></tr></table></figure>

<p>或者cmd里输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic bios get biosversion</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic bios get SMBIOSBIOSVersion</span><br></pre></td></tr></table></figure>

<h1 id="查看磁盘硬件名称"><a href="#查看磁盘硬件名称" class="headerlink" title="查看磁盘硬件名称"></a>查看磁盘硬件名称</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic diskdrive get caption</span><br></pre></td></tr></table></figure>

<h1 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h1><h3 id="查看内存信息"><a href="#查看内存信息" class="headerlink" title="查看内存信息"></a>查看内存信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic memorychip</span><br></pre></td></tr></table></figure>

<h3 id="查看内存硬件厂商"><a href="#查看内存硬件厂商" class="headerlink" title="查看内存硬件厂商"></a>查看内存硬件厂商</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic memorychip get Manufacturer</span><br></pre></td></tr></table></figure>

<h1 id="利用Windows内置工具测试硬盘速度"><a href="#利用Windows内置工具测试硬盘速度" class="headerlink" title="利用Windows内置工具测试硬盘速度"></a>利用Windows内置工具测试硬盘速度</h1><p>测试默认磁盘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winsat disk</span><br></pre></td></tr></table></figure>

<p>指定磁盘进行测速</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winsat disk -drive d </span><br></pre></td></tr></table></figure>

<p>注：请使用管理员权限打开cmd，否则在win10下面最终测试结果会一闪而过</p>
<h1 id="windows下查看wifi信息"><a href="#windows下查看wifi信息" class="headerlink" title="windows下查看wifi信息"></a>windows下查看wifi信息</h1><p>进入cmd输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh wlan show interface</span><br></pre></td></tr></table></figure>

<h1 id="Win7下格式化成-FAT32"><a href="#Win7下格式化成-FAT32" class="headerlink" title="Win7下格式化成 FAT32"></a>Win7下格式化成 FAT32</h1><p>右键管理员身份打开cmd</p>
<p>如果你格式化的是E盘</p>
<p>输入format E: &#x2F;fs:fat32</p>
<p>回车后会提示输入卷标，就是指该分区名称</p>
<h1 id="win8远程连接win10"><a href="#win8远程连接win10" class="headerlink" title="win8远程连接win10"></a>win8远程连接win10</h1><p>1.账户前面需跟计算机名,如:计算机名\用户名.</p>
<p>2.win10上，运行gpedit.msc-计算机配置-Windows设置-安全设置-本地策略-安全选项-网络访问：本地账户的共享安全模型</p>
<p>设置成：经典-对本地用户进行身份验证,不改变其本来身份</p>
<h1 id="指定用户访问共享samba"><a href="#指定用户访问共享samba" class="headerlink" title="指定用户访问共享samba"></a>指定用户访问共享samba</h1><p>清除用户记录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net use \\192.168.1.1 /del</span><br></pre></td></tr></table></figure>

<p>指定用户登录（需要输入密码）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net use \\192.168.1.1 /user:malu</span><br></pre></td></tr></table></figure>

<p>携带密码登录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net use \\192.168.1.1 &quot;password&quot; /user:malu /persistent:yes</span><br></pre></td></tr></table></figure>

<p>查看状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net use</span><br></pre></td></tr></table></figure>

<p>自动登录脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">net use \\192.168.0.1 /delete</span><br><span class="line">net use \\192.168.0.1 &quot;password&quot; /user:malu /persistent:yes</span><br><span class="line">explorer \\192.168.0.1\</span><br></pre></td></tr></table></figure>

<h1 id="指定DNS"><a href="#指定DNS" class="headerlink" title="指定DNS"></a>指定DNS</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">netsh interface ip set dns name=&quot;本地连接&quot; source=dhcp</span><br><span class="line">netsh interface ip set dns name=&quot;以太网&quot; source=dhcp</span><br><span class="line">netsh interface ip add dns &quot;以太网&quot; 192.168.11.200</span><br><span class="line">netsh interface ip add dns &quot;本地连接&quot; 192.168.11.200</span><br><span class="line">netsh interface ip add dns &quot;以太网&quot; 61.177.7.1 index=2</span><br><span class="line">netsh interface ip add dns &quot;本地连接&quot; 61.177.7.1 index=2</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Win</category>
      </categories>
      <tags>
        <tag>Windows日常操作</tag>
      </tags>
  </entry>
  <entry>
    <title>wol网络唤醒</title>
    <url>/2022/01/05/wol%E7%BD%91%E7%BB%9C%E5%94%A4%E9%86%92/</url>
    <content><![CDATA[<p>首先网络唤醒需要硬件支持，目前大部分主流的板载网卡都支持，只需在bios里开启即可，笔记本中thinkpad全系列都支持，部分品牌的部分型号是不支持的，比如我有2台acer笔记本不支持。(很多时候wol是为了节电考虑，但是电源插座是必须通电的，笔记本也是)</p>
<h1 id="路由器下安装"><a href="#路由器下安装" class="headerlink" title="路由器下安装"></a>路由器下安装</h1><p>路由器中有相关插件可以直接进行唤醒，比如OpenWRT提供了wol和etherwake两个包来实现WOL功能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install wol etherwake</span><br></pre></td></tr></table></figure>

<p>使用方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/bin/wol 00:1D:5C:1F:5D:16</span><br><span class="line">/usr/bin/etherwake 00:1D:5C:1F:5D:16</span><br></pre></td></tr></table></figure>

<h1 id="ubuntu下安装："><a href="#ubuntu下安装：" class="headerlink" title="ubuntu下安装："></a>ubuntu下安装：</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install wakeonlan</span><br></pre></td></tr></table></figure>

<p>使用方法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wakeonlan 00:1D:5C:1F:5D:16</span><br></pre></td></tr></table></figure>

<h1 id="windows下安装"><a href="#windows下安装" class="headerlink" title="windows下安装:"></a>windows下安装:</h1><p>下载地址：<a href="https://www.depicus.com/downloads/wolcmd.zip">https://www.depicus.com/downloads/wolcmd.zip</a></p>
<p>使用方法：</p>
<p>打开cmd，CD到下载wolcmd的文件路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wolcmd [mac address] [ip address] [subnet mask] [port number]</span><br></pre></td></tr></table></figure>

<p>比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WolCmd.exe 1016932061F0 192.168.0.255 255.255.255.0 80</span><br></pre></td></tr></table></figure>

<h1 id="公网唤醒内网主机"><a href="#公网唤醒内网主机" class="headerlink" title="公网唤醒内网主机"></a>公网唤醒内网主机</h1><p>外网进行唤醒，前提是路由器上得设置端口映射，和mac绑定。</p>
<p>原理是这样的：</p>
<p>1.魔术包数据发送到外网地址的映射端口上。</p>
<p>2.由于做了映射，路由器会找到对应的IP地址。</p>
<p>3.IP与对应的mac地址绑定了，所以路由器自然得将数据包发到对应mac地址上。</p>
<p>4.此时数据包已经发到内网待唤醒主机上了，网卡判断数据帧符合唤醒内容，就把机器启动。</p>
<p>公网唤醒工具：<a href="http://ip.malu.me/wol/">http://ip.malu.me/wol/</a></p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>断电后再通电自动唤醒：在BIOS中电源设置，Restore on AC设置为Last Stste。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>wol</tag>
        <tag>网络唤醒</tag>
      </tags>
  </entry>
  <entry>
    <title>ZeroTier内网穿透教程</title>
    <url>/2019/10/20/zerotier%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有时候需要在外边访问家里的设备，而众所周知一般家里都没有固定 IP 的，这时候就要内网穿透了，说到穿透的时候，大家都会提到 DDNS(动态域名解析)，或者使用反向代理的方式如 FRP、Ngrok。</p>
<p>首先说说 DDNS，这种方式使用起来很方便，只要设置好相应的服务提供商的 API，就能做到每次 IP 变化后自动解析，这样不管家里 IP 怎么变，用域名都能访问回家。这里最大的硬伤就是<strong>公网IP</strong>，有些朋友的带宽就是个大局域网，路由器只能获取到上一级内网的 IP，这时就 GG 了。</p>
<p>然后是 FRP、Ngrok 这样的反向代理程序，通过服务器转发数据来达到外网访问的目的，这样就需要自己有个 VPS，或者使用他人搭建的服务，据我所知的免费服务都是限速的，要是自己搭建的话，体验就要看服务器的<strong>网络质量</strong>了。</p>
<p>现在我们就来看看，<strong>不需要公网 IP，不依赖服务端网络性能的 ZeroTier</strong>。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://www.zerotier.com/">ZeroTier 官网</a>上说</p>
<blockquote>
<p>ZeroTier is a smart Ethernet switch for planet Earth.</p>
</blockquote>
<p>!!! 适用于地球的智能网络交换机 …</p>
<p>它是一个分布式网络虚拟机管理程序，建立在加密安全的全球对等网络之上。它提供与企业 SDN 交换机同等的高级网络虚拟化和管理功能，而且可以跨本地和广域网并连接几乎任何类型的应用程序或设备。</p>
<p>好吧?，有点牛逼</p>
<p>而说到主要功能，就是可以把多个不同网络的设备连接在一起，用来就像在一个局域网下</p>
<p>例如，我在路由器上装了 ZeroTier，路由器挂了一个硬盘，而现在我在外边想要访问这个硬盘，那么只需要运行电脑上的 ZeroTier，就能通过 Samba、FTP 等方式访问硬盘，而且看起来就像我就在家里一样。</p>
<h2 id="基本原理介绍"><a href="#基本原理介绍" class="headerlink" title="基本原理介绍"></a>基本原理介绍</h2><p>说白了就是 P2P(Peer to Peer)，而且组织方式很像 DNS(关于 DNS 可以看<a href="https://zhih.me/how-the-web-works/#DNS-%E6%9F%A5%E8%AF%A2">这里</a>)</p>
<p>根服务器 R 记录了路径信息，设备 A 能通过<strong>ZeroTier唯一地址标识</strong>找到需要连接的设备 B</p>
<p>这个过程如下：</p>
<ol>
<li>A 想要将数据包发送到 B，但由于它没有直接路径，因此将其向上发送到 R。</li>
<li>如果 R 有直接链接到 B，它会转发数据包给 B。否则它会继续向上游发送数据包，直到达到行星根(planet)。行星根知道所有节点，所以如果 B 在线，最终数据包将到达 B。</li>
<li>R 还向 A 发送一个名为<strong>会和</strong>的消息，包含有关它如何到达 B 的提示。同时，将<strong>会和</strong>发给 B，通知 B 它如何到达 A。</li>
<li>A 和 B 获取它们的会合消息并尝试相互发送测试消息，可能会对 NAT 或状态防火墙进行穿透。如果这样可以建立直接链路，则不再需要中继。</li>
<li>如果无法建立直接路径，则通信可以继续中继(速度慢)</li>
</ol>
<p>ZeroTier 官方搭建了一个行星根服务器叫做地球 Earth，行星根服务器唯一的且是免费的，它记录了所有的路径信息，一般情况下大家都直接用的这个。除此之外还有 12 个遍布全球的根服务器，这些是收费的服务。所以如果使用免费套餐，连接时的延迟可能会很高，另外由于 Earth 在国外，一些不确定因素可能会影响到使用。考虑到网络的不确定性，ZeroTier 能自己创建根服务器月球 Moons，这样就能在大局域网中得到更好的体验了。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>ZeroTier 是跨平台的，能安装在几乎任何平台</p>
<p>Windows、macOS、Linux、iOS、Android、QNAP、Synology、西数 MyCloud NAS，下载地址：<a href="https://www.zerotier.com/download.shtml">https://www.zerotier.com/download.shtml</a></p>
<p>路由器推荐安装 <a href="https://zhih.me/tags/entware/">Entware</a> 后使用 <code>opkg install zerotier</code> 命令安装</p>
<h2 id="ZeroTier使用教程"><a href="#ZeroTier使用教程" class="headerlink" title="ZeroTier使用教程"></a>ZeroTier使用教程</h2><p>因为我们没有自己创建 Moons 服务器，现在就先使用 ZeroTier 提供的服务</p>
<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>地址：<a href="https://my.zerotier.com/">https://my.zerotier.com/</a></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/10/create-account-2.jpg" alt="注册"></p>
<p>注册之后是这样的，保持默认就好，免费套餐能连接 100 个设备，一般人够用了</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/10/account-2.jpg" alt="账户"></p>
<h3 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h3><p><img src="https://www.jarods.org/wp-content/uploads/2019/10/create-network-1.jpg" alt="创建网络"></p>
<p>创建一个新的网络之后，我们得到一个 Network ID，这个在后面的设备连接时需要用到，点击刚刚创建的网络我们可以设置更多选项</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/10/network-setting.jpg" alt="网络设置"></p>
<p>默认的设置就可以用了，右边 IPv4 的设置就是分配设备内网 IP 网段，其他的设置可以在 Setting help 里看到说明，不了解的不建议乱设置，如果不小心把自己的网络暴露在外部，会相当危险</p>
<h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>直接在客户端输入刚才创建的 Network ID</p>
<p><strong>电脑</strong></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/10/macos-join.jpg" alt="macOS"></p>
<p><strong>路由器</strong></p>
<p>我这里使用的是安装了 <a href="https://zhih.me/tags/entware/">Entware</a> 的 LEDE</p>
<p># 启动<br>zerotier-one -d</p>
<p># 获取地址和服务状态<br>zerotier-cli status</p>
<p># 加入、离开、列出网络<br>zerotier-cli join # Network ID<br>zerotier-cli leave # Network ID<br>zerotier-cli listnetworks</p>
<h3 id="允许连接"><a href="#允许连接" class="headerlink" title="允许连接"></a>允许连接</h3><p>后台设置默认是需要 Auth 才能连接的，在客户端申请加入网络后，需要在后台允许一下</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/10/members.jpg" alt="允许加入"></p>
<h3 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h3><p>为了测试不同网络访问，我添加了一台安卓手机，在移动网络下直接使用分配给路由器的 IP，连接了 ssh 和 <a href="https://zhih.me/tags/onmp/">onmp</a> 创建的 PHP 探针页面，而且速度还算不错，宽带是电信的，手机是联通的，下文件时能有个 800k&#x2F;s，不知道瓶颈在哪</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/10/android-test.jpg" alt="安卓"></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>目前 IPv6 还没得到普及，虽然我这里已经能有 IPv6 地址并且能 IPv6 站点了，奈何不是固定 IP，也不知道哪时才能人手一个固定 IP。就目前情况来看，使用 ZeroTier 来做内网穿透还是不错的，使用门槛较低，可用性也还行，值得一试。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
  </entry>
  <entry>
    <title>『开源』Directory Lister 逗比魔改版 Github开源（逗比云）</title>
    <url>/2018/08/28/%E3%80%8E%E5%BC%80%E6%BA%90%E3%80%8Fdirectory-lister-%E9%80%97%E6%AF%94%E9%AD%94%E6%94%B9%E7%89%88-github%E5%BC%80%E6%BA%90%EF%BC%88%E9%80%97%E6%AF%94%E4%BA%91%EF%BC%89/</url>
    <content><![CDATA[<p>这段时间，有一些人看着我的逗比云觉得好看，同时觉得 简介说明 的功能很好，想要问我怎么做，所以我干脆开源好了。</p>
<h2 id="魔改特点："><a href="#魔改特点：" class="headerlink" title="魔改特点："></a>魔改特点：</h2><p>我之所以使用Directory Lister，就是因为这个程序非常的简洁，符合我心中对 目录列表程序的定义，在使用期间，根据我个人喜好和审美做了一些改变。</p>
<ol>
<li>界面式样魔改</li>
<li>支持中文目录和文件名</li>
<li>支持显示各文件夹内的简介说明</li>
<li>默认调用的各种 CDN文件本地化</li>
<li>等等 …</li>
</ol>
<p><strong>Github 项目地址：</strong><a href="https://github.com/ToyoDAdoubi/DirectoryLister">https://github.com/ToyoDAdoubi/DirectoryLister</a></p>
<blockquote>
<p><em>更新：</em><strong>2018&#x2F;08&#x2F;20</strong>，更新 不需要再手动配置域名后缀了，新版本会自动检测。</p>
<p><em>更新：</em><strong>2018&#x2F;08&#x2F;20</strong>，更新 网站式样 - 素色简洁风（对比见下图）。</p>
<p><em>更新：</em><strong>2018&#x2F;07&#x2F;18</strong>，修复 当程序位置网站子目录下时，CSS JS 路径错误的问题。</p>
<p><em>更新：</em><strong>2018&#x2F;03&#x2F;26</strong>，修复 当前文件夹下无 README.html 文件时，PHP会提示警告的问题。</p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/08/dbrj-3-03.png"></p>
<h3 id="演示示例："><a href="#演示示例：" class="headerlink" title="演示示例："></a>演示示例：</h3><p><a href="https://softs.loan/">逗比云</a></p>
<h3 id="下载安装："><a href="#下载安装：" class="headerlink" title="下载安装："></a>下载安装：</h3><p>下载后，解压并上传到已经搭建好 PHP环境 的服务器中，然后就可以上传文件和创建文件夹了！</p>
<p><strong>Github打包：</strong><a href="https://github.com/ToyoDAdoubi/DirectoryLister/archive/master.zip">https://github.com/ToyoDAdoubi/DirectoryLister/archive/master.zip</a></p>
<p><strong>逗比云 打包：</strong><a href="https://softs.loan/Website/Directory%20Lister%E9%AD%94%E6%94%B9%E7%89%88%28by-Toyo%29%20v2.6.1.zip">https://softs.loan/Website/Directory%20Lister%E9%AD%94%E6%94%B9%E7%89%88%28by-Toyo%29%20v2.6.1.zip</a></p>
<h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><p>假设你的虚拟主机根目录是 <code>/home/wwwroot/xxx.xx</code></p>
<ol>
<li>&#x2F;home&#x2F;wwwroot&#x2F;xxx.xx&#x2F;</li>
<li>├─ resources&#x2F;</li>
<li>│ ├ themes&#x2F;</li>
<li>│ │ └ bootstrap&#x2F;</li>
<li>│ │ ├ css&#x2F;</li>
<li>│ │ ├ fonts&#x2F;</li>
<li>│ │ ├ img&#x2F;</li>
<li>│ │ ├ js&#x2F;</li>
<li>│ │ ├ default_footer.php # 底部公共文件 #</li>
<li>│ │ ├ default_header.php # 顶部公共文件（可以放网站流量统计代码） #</li>
<li>│ │ └ index.php # 网页主文件，其中可以修改顶部公告栏内容 #</li>
<li>│ │</li>
<li>│ ├ DirectoryLister.php</li>
<li>│ ├ config.php</li>
<li>│ └ fileTypes.php</li>
<li>│</li>
<li>├ README.html # 该文件夹页面内的 说明简介文件 #</li>
<li>├ index.php</li>
<li>│</li>
<li>├─ 其他文件夹&#x2F;</li>
<li>│ ├ 其他文件.txt</li>
<li>│ └ README.html # 该文件夹页面内的 说明简介文件 #</li>
<li>│</li>
<li>└ 其他文件.txt</li>
</ol>
<h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><h3 id="不显示文件和目录"><a href="#不显示文件和目录" class="headerlink" title="不显示文件和目录"></a>不显示文件和目录</h3><p>如果安装 lnmp一键包上传Directory Lister后，Directory Lister不显示文件和目录，那么可能是 PHP函数<code>scandir</code>被禁用了，取消禁用即可。</p>
<ol>
<li>sed -i ‘s&#x2F;,scandir&#x2F;&#x2F;g’ &#x2F;usr&#x2F;local&#x2F;php&#x2F;etc&#x2F;php.ini</li>
<li># 取消scandir函数禁用</li>
<li>&#x2F;etc&#x2F;init.d&#x2F;php-fpm restart</li>
<li># 重启 PHP生效</li>
</ol>
<h3 id="简介功能说明"><a href="#简介功能说明" class="headerlink" title="简介功能说明"></a>简介功能说明</h3><p>我也不知道该给这个功能起什么名字，好捉急偶。</p>
<p>可以在每个文件夹下面放一个<code>README.html</code>文件，这个文件里写着 简介说明内容即可，格式参考自带的示例文件。</p>
<p>为了避免中文乱码，把<code>README.html</code>文件用 <strong>UTF-8 无BOM 编码</strong> 保存！</p>
<h3 id="文件修改说明"><a href="#文件修改说明" class="headerlink" title="文件修改说明"></a>文件修改说明</h3><p>文件修改说明修改网站中头部导航标题，去这个文件里搜索<code>DOUBI Soft</code>然后全部替换为自己要改的。\resources\DirectoryLister.php</p>
<p>修改网站标签栏的标题，去这个文件里把开头<code>&lt;title&gt;</code>标签中的<code>DOUBI Soft</code>替换为自己要改的。\resources\themes\bootstrap\index.php</p>
<p>修改网站顶部公告栏内容，去这个文件里搜索<code>顶部公告栏</code>。</p>
<p>\resources\themes\bootstrap\index.php</p>
<p>网站头部公共文件：</p>
<p>\resources\themes\bootstrap\default_header.php</p>
<p>网站底部公共文件：</p>
<p>\resources\themes\bootstrap\default_footer.php</p>
<p>如果想要插入流量统计代码，那只需要把代码写到<code>default_header.php</code>文件内即可。</p>
<hr>
<p><strong>本程序基于 Directory Lister原版修改：<a href="http://www.directorylister.com/">http://www.directorylister.com/</a></strong></p>
<p><strong>转载请超链接注明：</strong><a href="https://doub.io/">逗比根据地</a> » <a href="https://doub.io/dbrj-3/">『开源』Directory Lister 逗比魔改版 Github开源（逗比云）</a></p>
<p><strong>责任声明：</strong>本站一切资源仅用作交流学习，请勿用作商业或违法行为！如造成任何后果，本站概不负责！</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Directory Lister</tag>
      </tags>
  </entry>
  <entry>
    <title>wordpress处理cdnjs加载慢的问题</title>
    <url>/2022/09/01/wordpress%E5%A4%84%E7%90%86cdnjs%E5%8A%A0%E8%BD%BD%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>我这里用的是nginx替代字符串的方法，在appnode下仅供参考</p>
<p>location ~ ^&#x2F;.+\.php(&#x2F;$) { sub_filter ‘&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs’ ‘&#x2F;&#x2F;cdn.staticfile.org’; sub_filter ‘&#x2F;&#x2F;cdn.datatables.net’ ‘&#x2F;&#x2F;cdn.staticfile.org&#x2F;datatables’; sub_filter_once off;<br>……..</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Wordpress</tag>
        <tag>appnode</tag>
        <tag>cdnjs</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress开启Nginx fastcgi_cache缓存加速方法-Nginx配置实例</title>
    <url>/2020/04/30/wordpress%E5%BC%80%E5%90%AFnginx-fastcgi-cache%E7%BC%93%E5%AD%98%E5%8A%A0%E9%80%9F%E6%96%B9%E6%B3%95-nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<p>使用<a href="https://wzfou.com/wordpress-jianzhan/">WordPress建站</a>的过程中，对于优化Wordpress性能、加快网站访问速度这一环节走了不少的“弯路”。当网站出现访问缓慢、CPU内存耗尽的情形时，最开始想到的是升级服务器配置，后来发现有些无良的VPS商家背后限制资源严重，加钱升级真的很伤人。</p>
<p>最大的体会就是同样的配置，在不同的VPS商家那里跑同一个网站，在同样的流量情况下，居然一个顺畅而另一个卡顿，这个给我最大的感受就是在购买VPS之前一定要看看别人的评测，尤其是VPS主机性能评测这一块，一定要仔细对比，否则容易花不少冤枉钱。</p>
<p>后来给Wordpress做优化时，关注在页面缓存上，之前用过的缓存插件包括但不限于WordPress Super Cache、WP Fastest Cache、W3 Total Cache、cos-html-cache、Cachify……总得来说，安装了缓存插件后提速还是有效果的，但是也带来了不少的问题。</p>
<p>例如配置复杂、生成规则、插件冲突以及无法应对突发流量，也就是说使用缓存插件还是无法达到应对大流量冲击的情况。最后，在朋友的推荐下启用了Nginx fastcgi_cache缓存，直接使用Nginx为页面生成缓存，效率比使用PHP缓存插件要高得多，特别适合小配置的VPS上使用。</p>
<p><img src="/2020/04/Nginx-fastcgi_cache_00.jpg" alt="Wordpress开启Nginx fastcgi_cache缓存加速方法-Nginx配置实例"></p>
<p>更多的关于Wordpress和<a href="https://wzfou.com/tag/fuwuqi-youhua/">服务器优化</a>的经验文章，这里还有：</p>
<ol>
<li><a href="https://wzfou.com/php-fpm/">Linux的php-fpm优化心得-php-fpm进程占用内存大和不释放内存问题</a></li>
<li><a href="https://wzfou.com/dashang-anniu/">WordPress添加支付宝,微信打赏按钮制作实例和Paypal.me打赏链接</a></li>
<li><a href="https://wzfou.com/crontab/">Linux Crontab命令定时任务基本语法与操作教程-VPS&#x2F;服务器自动化</a></li>
</ol>
<blockquote>
<p><strong>PS：2018年12月19日更新，</strong>WordPress自带的站内搜索不仅搜索慢而且还无法搜索更多的关键字，我们可以自建一个或者使用第三方的搜索嵌入WP：<a href="https://wzfou.com/baidu-google-es/">改进网站站内搜索-百度,Google自定义搜索和Elasticsearch自建搜索</a>。</p>
<p><strong>PS：2019年9月29日更新，</strong>由于Google主导开发的服务器优化神器ngx_pagespeed，集成了图片延迟加载、自适应webp、JS和CSS优化、图片优化等一整套优化工具：<a href="https://wzfou.com/ngx-pagespeed/">PageSpeed服务器优化神器-Nginx部署ngx_pagespeed模块和加速效果体验</a>。</p>
</blockquote>
<h2 id="一、安装Nginx-ngx-cache-purge模块"><a href="#一、安装Nginx-ngx-cache-purge模块" class="headerlink" title="一、安装Nginx ngx_cache_purge模块"></a>一、安装Nginx ngx_cache_purge模块</h2><p>网站：</p>
<ol>
<li><a href="http://labs.frickle.com/files/">http://labs.frickle.com/files/</a></li>
</ol>
<h3 id="1-1-LNMP"><a href="#1-1-LNMP" class="headerlink" title="1.1  LNMP"></a>1.1  LNMP</h3><p>如果你用的是<a href="https://wzfou.com/lnmp-1-4/">LNMP一键安装包</a>，编辑lnmp安装包目录下的 lnmp.conf 文件，在Nginx_Modules_Options&#x3D;”  的单引号中加上 –add-module&#x3D;&#x2F;root&#x2F;ngx_cache_purge-2.3 保存，升级一下nginx就安装上了，其他模块也参考这个就行。</p>
<p>ngx_cache_purge-2.3需要你从frickle.com官网中下载安装包并解压，目前最新版是2.3。</p>
<p><img src="/2020/04/Nginx-fastcgi_cache_03.jpg" alt="Nginx fastcgi_cache直接编译"></p>
<h3 id="1-2-Oneinstack"><a href="#1-2-Oneinstack" class="headerlink" title="1.2  Oneinstack"></a>1.2  Oneinstack</h3><p>如果你用的是<a href="https://wzfou.com/tag/oneinstack-mianban/">OneinStack面板</a>，可以通过以下命令来编译ngx_cache_purge模块。</p>
<p># nginx -V 2&gt;&amp;1  grep -o ngx_cache_purge 查看ngx_cache_purge是否安装,没有数据表示未安装<br>cd &#x2F;root&#x2F;oneinstack&#x2F;src<br>wget <a href="http://labs.frickle.com/files/ngx/_cache/_purge-2.3.tar.gz">http://labs.frickle.com/files/ngx\_cache\_purge-2.3.tar.gz</a><br>tar xzf ngx_cache_purge-2.3.tar.gz</p>
<p>#以下几个安装包都是Oneinstack自带的，不同的版本可能会不同，请根据情况调整<br>tar xzf nginx-1.14.0.tar.gz<br>tar xzf pcre-8.42.tar.gz<br>tar xzf openssl-1.0.2o.tar.gz<br>cd &#x2F;root&#x2F;oneinstack&#x2F;src&#x2F;nginx-1.14.0</p>
<p>nginx -V #查看nginx编译参数，最后加上–add-module&#x3D;..&#x2F;ngx_cache_purge-2.3<br>.&#x2F;configure –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx –user&#x3D;www –group&#x3D;www –with-http_stub_status_module –with-http_v2_module –with-http_ssl_module –with-http_gzip_static_module –with-http_realip_module –with-http_flv_module –with-http_mp4_module –with-openssl&#x3D;..&#x2F;openssl-1.0.2o –with-pcre&#x3D;..&#x2F;pcre-8.42 –with-pcre-jit –with-ld-opt&#x3D;-ljemalloc –add-module&#x3D;..&#x2F;ngx_cache_purge-2.3</p>
<p>make  #编译<br>mv &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx{,_`date +%F`}  #备份nginx<br>cp objs&#x2F;nginx &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin<br>nginx -V 2&gt;&amp;1  grep -o ngx_cache_purge</p>
<h1 id="显示ngx-cache-purge表示已经安装成功"><a href="#显示ngx-cache-purge表示已经安装成功" class="headerlink" title="显示ngx_cache_purge表示已经安装成功"></a>显示ngx_cache_purge表示已经安装成功</h1><p>使用<code>Nginx -V</code>查看编译参数添加add-module时，一定要根据你自己的Nginx的编译参数来操作，也就是说保留原来的Nginx参数再加上add-module。例如我的：</p>
<p><img src="/2020/04/Nginx-fastcgi_cache_01.gif" alt="Nginx fastcgi_cache查看编译参数"></p>
<p>安装Nginx ngx_cache_purge模块成功。</p>
<p><img src="/2020/04/Nginx-fastcgi_cache_02.gif" alt="Nginx fastcgi_cache安装成功"></p>
<h3 id="1-3-其它面板"><a href="#1-3-其它面板" class="headerlink" title="1.3  其它面板"></a>1.3  其它面板</h3><p>如果你用的是其它的面板（专题：<a href="https://wzfou.com/vps-mianban/">服务器控制面板榜单</a>），例如<a href="https://wzfou.com/wdcp/">WDCP</a>、<a href="https://wzfou.com/bt-cn/">BT宝塔面板</a>等，请查阅官网的文档。</p>
<p><img src="/2020/04/Nginx-fastcgi_cache_04.jpg" alt="Nginx fastcgi_cache参考文档"></p>
<h2 id="二、Nginx开启fastcgi-cache缓存-配置实例"><a href="#二、Nginx开启fastcgi-cache缓存-配置实例" class="headerlink" title="二、Nginx开启fastcgi_cache缓存-配置实例"></a>二、Nginx开启fastcgi_cache缓存-配置实例</h2><h3 id="2-1-配置实例"><a href="#2-1-配置实例" class="headerlink" title="2.1  配置实例"></a>2.1  配置实例</h3><p>下面我直接贴出wzfou.com的Nginx开启<a href="https://wzfou.com/tag/fastcgi_cache-jiasu/">fastcgi_cache缓存</a>配置实例，详细的说明如下：</p>
<p>#路径需要提前创建好<br>fastcgi_cache_path &#x2F;tmp&#x2F;nginx-cache levels&#x3D;1:2 keys_zone&#x3D;WORDPRESS:250m inactive&#x3D;1d max_size&#x3D;500m;<br>fastcgi_temp_path &#x2F;tmp&#x2F;nginx-cache&#x2F;temp;<br>fastcgi_cache_key “$scheme$request_method$host$request_uri”;<br>fastcgi_cache_use_stale error timeout invalid_header http_500;<br>#忽略一切nocache申明，避免不缓存伪静态等<br>fastcgi_ignore_headers Cache-Control Expires Set-Cookie;</p>
<p>server {<br>   listen 80;<br>   listen 443 ssl http2;<br>  …………………此部省略……………………</p>
<p>   set $skip_cache 0;<br>   #post访问不缓存<br>   if ($request_method &#x3D; POST) {<br>            set $skip_cache 1;<br>        }<br>   #动态查询不缓存<br>   if ($query_string !&#x3D; “”) {<br>            set $skip_cache 1;<br>        }<br>   #后台等特定页面不缓存（其他需求请自行添加即可）<br>   if ($request_uri ~* “&#x2F;wp-admin&#x2F;&#x2F;xmlrpc.phpwp-.*.php&#x2F;feed&#x2F;&#x2F;zhuye&#x2F;&#x2F;wzfou.com&#x2F;&#x2F;question&#x2F;&#x2F;bbs&#x2F;&#x2F;dongtai&#x2F;&#x2F;haoyou&#x2F;&#x2F;qun&#x2F;index.phpsitemap(_index)?.xml”) {<br>            set $skip_cache 1;<br>        }<br>   #对登录用户、评论过的用户不展示缓存<br>   if ($http_cookie ~* “comment_authorwordpress_[a-f0-9]+wp-postpasswordpress_no_cachewordpress_logged_in”) {<br>            set $skip_cache 1;<br>        }<br>   #这里请参考你网站之前的配置，特别是sock的路径，弄错了就502了！<br>   location ~ [^&#x2F;]\.php(&#x2F;$) {<br>    #fastcgi_pass remote_php_ip:9000;<br>    fastcgi_pass unix:&#x2F;dev&#x2F;shm&#x2F;php-cgi.sock;<br>    fastcgi_index index.php;<br>    include fastcgi.conf;<br>    add_header Strict-Transport-Security “max-age&#x3D;63072000; includeSubdomains; preload”;<br>    #新增的缓存规则<br>    fastcgi_cache_bypass $skip_cache;<br>    fastcgi_no_cache $skip_cache;<br>    add_header X-Cache “$upstream_cache_status From $host”;<br>    add_header Cache-Control  max-age&#x3D;0;<br>    add_header Nginx-Cache “$upstream_cache_status”;<br>    add_header Last-Modified $date_gmt;<br>    add_header X-Frame-Options SAMEORIGIN; # 只允许本站用 frame 来嵌套<br>    add_header X-Content-Type-Options nosniff; # 禁止嗅探文件类型<br>    add_header X-XSS-Protection “1; mode&#x3D;block”; # XSS 保护<br>    etag  on;<br>    fastcgi_cache WORDPRESS;<br>    fastcgi_cache_valid 200 301 302 1d;<br>  }</p>
<p>  #缓存清理配置（可选）<br>  location ~ &#x2F;purge( &#x2F;.*) { #为防止转义，请去掉{ &#x2F;之间的空格<br>    allow 127.0.0.1;<br>    #此处填写你的服务器IP<br>    allow 89.208.xxx.xxx;<br>    deny all;<br>    #请注意此处的WORDPRESS要与上面的keys_zone保持一致<br>    fastcgi_cache_purge WORDPRESS “$scheme$request_method$host$1”;<br>    }<br>  …………………此部分省略……………………</p>
<p>}</p>
<h3 id="2-2-有关说明"><a href="#2-2-有关说明" class="headerlink" title="2.2  有关说明"></a>2.2  有关说明</h3><p>本地or内存？在fastcgi_cache_path和fastcgi_temp_path中，有人会建议将它设置为内存路径，例如：<code>/dev/shm/nginx-cache levels=1:2 keys_zone=WORDPRESS:100m inactive=60m;</code>，如果你的磁盘IO很慢的话建议采用此方式，毕竟内存的读写速度非常快。</p>
<p><img src="/2020/04/Nginx-fastcgi_cache_05.jpg" alt="Nginx fastcgi_cache本地缓存"></p>
<p><code>add_header Cache-Control</code> 如果是动态内容要实时更新的话，可以设置为0，否则可以设置时间大一些。</p>
<p><img src="/2020/04/Nginx-fastcgi_cache_13.gif" alt="Nginx fastcgi_cache控制缓存"></p>
<h2 id="三、安装Nginx-Helper插件-自动刷新缓存"><a href="#三、安装Nginx-Helper插件-自动刷新缓存" class="headerlink" title="三、安装Nginx Helper插件-自动刷新缓存"></a>三、安装Nginx Helper插件-自动刷新缓存</h2><p>通过上面的方法我们已经配置好了fastcgi_cache缓存，接下来我们就要解决当Wordpress有新评论、新文章时自动刷新Nginx缓存页面了。直接搜索Nginx Helper插件下载，然后是设置，首先是开启，清除方式选择本地文件。</p>
<p><img src="/2020/04/Nginx-fastcgi_cache_07.gif" alt="Nginx fastcgi_cache开启插件"></p>
<p>插件还提供了其它的一些设置，例如发表新文章、新评论时是否更新Nginx缓存。</p>
<p><img src="/2020/04/Nginx-fastcgi_cache_08.gif" alt="Nginx fastcgi_cache更新文章缓存"></p>
<p>由于插件作者定义的缓存路径是 &#x2F;var&#x2F;run&#x2F;nginx-cache ，而我们可能会根据服务器实际情况来自定义缓存路径，这样一来缓存路径的不同就会导致插件无法找到缓存文件并删除！</p>
<p><strong>解决办法是</strong>在 WordPress 根目录下的 wp-config.php 中新增如下代码即可：</p>
<p>&#x2F;&#x2F;根据实际情况定义缓存的存放路径<br>define( ‘RT_WP_NGINX_HELPER_CACHE_PATH’,’&#x2F;tmp&#x2F;wpcache’);</p>
<p>如果你发现上述定义路径的代码不生效，你可以采用“<a href="https://wzfou.com/nginx-fastcgi-cache/#comment-10039">自然</a>”博主的建议：</p>
<blockquote>
<p>一是修改插件，将插件中路径改成你自己的，二是使用软连接，&#x2F;var&#x2F;run&#x2F;nginxcache 和&#x2F;tmp&#x2F;wpcache</p>
</blockquote>
<h2 id="三、Nginx-fastcgi-cache效果预览"><a href="#三、Nginx-fastcgi-cache效果预览" class="headerlink" title="三、Nginx fastcgi_cache效果预览"></a>三、Nginx fastcgi_cache效果预览</h2><p>启用了<a href="https://wzfou.com/tag/nginx-fastcgi_cache/">Nginx fastcgi_cache</a>后，我们就可以在浏览器Header 头部信息中看到已经命中了。</p>
<p><img src="/2020/04/Nginx-fastcgi_cache_09.gif" alt="Nginx fastcgi_cache看到命中"></p>
<p>对于已经设置了不缓存的页面，Nginx fastcgi_cache会直接显示<strong>BYPASS。</strong></p>
<p><img src="/2020/04/Nginx-fastcgi_cache_10.gif" alt="Nginx fastcgi_cache不缓存"></p>
<p>另外，对于已经登录的用户还有发表过评论的用户，Nginx fastcgi_cache也会直接BYPASS。</p>
<p><img src="/2020/04/Nginx-fastcgi_cache_11.gif" alt="Nginx fastcgi_cache评论用户不缓存"></p>
<p>同时，我们服务器的缓存路径中也能看到Nginx fastcgi_cache生成的缓存文件。</p>
<p><img src="/2020/04/Nginx-fastcgi_cache_12.gif" alt="Nginx fastcgi_cache生成的文件"></p>
<p>如果你发现你的评论过的用户依然用的是缓存，那应该是WP没有记住cookie，把以下代码加入到<code>functions.php</code> 中即可。</p>
<p>add_action(‘set_comment_cookies’,’coffin_set_cookies’,10,3);<br>function coffin_set_cookies( $comment, $user, $cookies_consent){<br>   $cookies_consent &#x3D; true;<br>   wp_set_comment_cookies($comment, $user, $cookies_consent);<br>}</p>
<h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>Nginx开启<a href="https://wzfou.com/tag/fastcgi_cache-jiasu/">fastcgi_cache缓存</a>对于加快网页响应速度以及节省服务器资源有着非常重要的意义，下图是alibabacloud.com的测试结果，可以看出来启用缓存后服务器的承载能力有了非常大的提升。</p>
<p><img src="/2020/04/Nginx-fastcgi_cache_14.gif" alt="Nginx fastcgi_cache启用效果"></p>
<p>wzfou.com挖站否在启用fastcgi_cache缓存时，发现在Nginx配置文件中添加了Cache-Control信息，但是总是不生效。HTTP头部信息会总会包含以下信息：</p>
<blockquote>
<p>Cache-Control: no-store,no-cache,must-revalidate,post-check&#x3D;0,pre-check&#x3D;0 和 Pragma: no-cache，</p>
</blockquote>
<p>经过排查，问题出在了LNMP和Oneinstack一键包中的<code>session.cache_limiter</code>的PHP.ini设置部分， 默认值是nocache，我们需要将它设置为none即可。</p>
<p><img src="/2020/04/Nginx-fastcgi_cache_15.gif" alt="Nginx fastcgi_cache修改PHP配置"></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>LNMP</tag>
        <tag>SSL</tag>
        <tag>Nginx fastcgi_cache</tag>
      </tags>
  </entry>
  <entry>
    <title>一个命令备份 / 还原 Win10 驱动，第三方软件可下岗</title>
    <url>/2020/11/09/%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E5%A4%87%E4%BB%BD-%E8%BF%98%E5%8E%9F-win10-%E9%A9%B1%E5%8A%A8%EF%BC%8C%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6%E5%8F%AF%E4%B8%8B%E5%B2%97/</url>
    <content><![CDATA[<p>Win10中可以直接用命令备份和还原驱动程序，再加上Windows10本身可以自动完成驱动的下载和安装，所以对于驱动程序的操作基本上就无需借助第三方软件。</p>
<p><strong>方法如下：</strong></p>
<p>1、右键单击开始按钮，选择“<strong>命令提示符（管理员）</strong>”</p>
<p>2、输入如下命令后按回车，等待备份完成：</p>
<p><strong>dism &#x2F;online &#x2F;export-driver &#x2F;destination:D:\MyDrivers</strong></p>
<p><strong>注意：</strong>上述“D:\MyDrivers”可替换为你想备份驱动的位置，需要先创建</p>
<p><img src="/2020/11/20160608_153653_534.png"></p>
<p>3、若要对未安装合适驱动的系统进行恢复，执行以下命令即可：</p>
<p><strong>Dism &#x2F;online &#x2F;Add-Driver &#x2F;Driver:D:\MyDrivers &#x2F;Recurse</strong></p>
<p><strong>注意：</strong>“D:\MyDrivers”需要替换为你备份驱动的位置</p>
<p>这种方法<strong>适用于备份和恢复INF格式的驱动</strong>，其他格式例如使用Windows Installer（MSI）和EXE格式的驱动包并不在备份和恢复范围之内。</p>
]]></content>
      <categories>
        <category>Win</category>
      </categories>
      <tags>
        <tag>WIN10</tag>
        <tag>驱动</tag>
      </tags>
  </entry>
  <entry>
    <title>一个极简的HTTP服务器：Caddy一键安装脚本，带网站配置教程</title>
    <url>/2020/01/05/%E4%B8%80%E4%B8%AA%E6%9E%81%E7%AE%80%E7%9A%84http%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%9Acaddy%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%EF%BC%8C%E5%B8%A6%E7%BD%91%E7%AB%99%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>系统要求：</strong><code>CentOS 6+</code> &#x2F; <code>Debian 6+</code>&#x2F; <code>Ubuntu 14.04 +</code>。推荐<code>Debian 7 x64</code>。</p>
<p>本脚本只是一个一键安装+运行控制的脚本，没有其他管理虚拟主机等功能。</p>
<p>执行下面的代码安装<code>Caddy</code>，如果想要安装其他扩展可以把名字加到命令后面（<code>bash caddy_install.sh install xxx,xxx,xxx，</code>扩展列表单击<a href="https://caddyserver.com/download">查看</a>）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh</span><br><span class="line">#备用地址</span><br><span class="line">wget -N --no-check-certificate https://www.moerats.com/usr/shell/Caddy/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh</span><br></pre></td></tr></table></figure>

<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">启动：/etc/init.d/caddy start</span><br><span class="line">停止：/etc/init.d/caddy stop</span><br><span class="line">重启：/etc/init.d/caddy restart</span><br><span class="line">查看状态：/etc/init.d/caddy status</span><br><span class="line">查看Caddy启动日志：tail -f /tmp/caddy.log</span><br><span class="line">安装目录：/usr/local/caddy</span><br><span class="line">Caddy配置文件位置：/usr/local/caddy/Caddyfile</span><br><span class="line">Caddy自动申请SSL证书位置：/.caddy/acme/acme-v01.api.letsencrypt.org/sites/xxx.xxx(域名)/</span><br></pre></td></tr></table></figure>

<h2 id="升级Caddy或者更新扩展"><a href="#升级Caddy或者更新扩展" class="headerlink" title="升级Caddy或者更新扩展"></a>升级Caddy或者更新扩展</h2><p>只需要重新执行你当初安装时候用的命令即可，会覆盖安装最新的<code>Caddy+</code>扩展。</p>
<h2 id="卸载球童"><a href="#卸载球童" class="headerlink" title="卸载球童"></a>卸载球童</h2><p>卸载不会删除虚拟主机的内容，只会删除<code>Caddy</code>自身和配置文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/caddy_install.sh &amp;&amp; bash caddy_install.sh uninstall</span><br><span class="line">#备用地址</span><br><span class="line">wget -N --no-check-certificate https://www.moerats.com/usr/shell/Caddy/caddy_install.sh &amp;&amp; bash caddy_install.sh uninstall</span><br></pre></td></tr></table></figure>

<h2 id="网站配置文件"><a href="#网站配置文件" class="headerlink" title="网站配置文件"></a>网站配置文件</h2><p>配置文件为<code>Caddyfile</code>，双重几种<code>caddy</code>的<code>conf</code>的写法</p>
<p><strong>1，本地访问80</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:80</span><br></pre></td></tr></table></figure>

<p><strong>2，单网站访问</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">example.com</span><br><span class="line">root /usr/local/caddy/www</span><br><span class="line">//更多模块</span><br></pre></td></tr></table></figure>

<p><strong>2，多网站</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">example.com &#123;</span><br><span class="line">  gzip</span><br><span class="line">  root /usr/local/caddy/www</span><br><span class="line">  //更多模块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>常用基本组成模块，均写入到<code>conf</code>站点配置中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#log日志</span><br><span class="line">log /usr/local/caddy/www/example.log</span><br><span class="line"></span><br><span class="line">#目录访问</span><br><span class="line">browse</span><br><span class="line"></span><br><span class="line">#gzip压缩</span><br><span class="line">gzip</span><br><span class="line"></span><br><span class="line">#自主ssl证书</span><br><span class="line">tls /path/ssl/example.com.crt /path/ssl/example.com.key</span><br><span class="line"></span><br><span class="line">#访问口令认证（用户emiria，密码abc123）</span><br><span class="line">basicauth / emiria abc123</span><br><span class="line"></span><br><span class="line">#跳转功能</span><br><span class="line">redir http://example.com&#123;url&#125;</span><br><span class="line"></span><br><span class="line">#自定义错误页面</span><br><span class="line">errors &#123;</span><br><span class="line">    404 404.html</span><br><span class="line">    500 /usr/local/caddy/www/500.html</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如，通过<code>IP</code>即<code>80</code>端口访问目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:80 &#123;</span><br><span class="line">     root /usr/local/caddy/www</span><br><span class="line">     gzip</span><br><span class="line">     browse</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>也可以直接执行命令编写，以下是一个命令，直接复制粘贴即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;:80 &#123;</span><br><span class="line"> root /usr/local/caddy/www</span><br><span class="line"> gzip</span><br><span class="line"> browse</span><br><span class="line">&#125;&quot; &gt; /usr/local/caddy/Caddyfile</span><br></pre></td></tr></table></figure>

<p>更多配置参考：<a href="https://caddyserver.com/tutorial/caddyfile">https:</a> &#x2F;&#x2F;caddyserver.com&#x2F;tutorial&#x2F;caddyfile设置文档参考：<a href="https://caddyserver.com/docs">https</a> : &#x2F;&#x2F;caddyserver.com&#x2F;docs</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>1，Caddy启动失败，打开ip访问地址显示的是！</strong> 一些系统会自带<code>apache2</code>，而<code>apache2</code>会占用<code>80</code>端口，导致<code>Caddy</code>无法绑定端口，所以只要关掉就好了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -lntp</span><br><span class="line"># 我们可以通过这个命令查看是不是被其他软件占用了80端口。</span><br></pre></td></tr></table></figure>

<p>不过<code>apache2</code>会默认开机自启动，如果不需要可以关闭自启动或卸载<code>apache2</code>。</p>
<p>停止<code>Apache2</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># CentOS系统</span><br><span class="line">/etc/init.d/httpd stop</span><br><span class="line"># Debian/Ubuntu系统</span><br><span class="line">/etc/init.d/apache2 stop</span><br><span class="line"> </span><br><span class="line"># 尝试使用上面代码关闭，如果没效果或者提示什么错误无法关闭，那就用下面这个强行关闭进程。</span><br><span class="line">kill -9 $(ps -efgrep &quot;apache2&quot;grep -v &quot;grep&quot;awk &#x27;&#123;print $2&#125;&#x27;)</span><br></pre></td></tr></table></figure>

<p>取消开机自启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># CentOS 系统</span><br><span class="line">chkconfig --del httpd</span><br><span class="line"># Debian/Ubuntu 系统</span><br><span class="line">update-rc.d -f apache2 remove</span><br></pre></td></tr></table></figure>

<p>卸载<code>Apache2</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># CentOS 系统</span><br><span class="line">yum remove httpd</span><br><span class="line"># Debian/Ubuntu 系统</span><br><span class="line">apt-get remove --purge apache2</span><br></pre></td></tr></table></figure>

<p>关闭<code>Apache2</code>后，就可以<code>Caddy</code>尝试启动，并试试能不能打开网页。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/caddy start</span><br></pre></td></tr></table></figure>

<p><strong>2，启动Caddy后，无法访问</strong> 这个可能是防火墙的问题，开放防火墙端口即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 端口 -j ACCEPT</span><br><span class="line">iptables -I INPUT -m state --state NEW -m udp -p udp --dport 端口 -j ACCEPT</span><br><span class="line"> </span><br><span class="line"># 删除防火墙规则，内容一样把 -I 换成 -D 就行了：</span><br><span class="line">iptables -D INPUT -m state --state NEW -m tcp -p tcp --dport 端口 -j ACCEPT</span><br><span class="line">iptables -D INPUT -m state --state NEW -m udp -p udp --dport 端口 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>3，SSL证书</strong> 签发<strong>失败失败</strong>报错<code>acme: error: 400 :: urn:ietf:params:acme:error:connection :: Error getting validation data, url:</code>，检查下防火墙端口，需要开启<code>80</code>和<code>443</code>端口，然后重启即可。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Caddy</tag>
      </tags>
  </entry>
  <entry>
    <title>一些好用好玩的app和web</title>
    <url>/2018/03/17/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E5%A5%BD%E7%8E%A9%E7%9A%84app%E5%92%8Cweb/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.upupoo.com/</span><br><span class="line">https://docs.microsoft.com/zh-cn/sysinternals/</span><br><span class="line">https://github.com/yangyangwithgnu/hardseed</span><br><span class="line">http://www.yingdev.com/projects/wgestures</span><br><span class="line">https://www.snipaste.com/</span><br><span class="line">https://www.draw.io</span><br><span class="line">http://mikeschultz.xyz/materialette/</span><br><span class="line">https://www.autohotkey.com/</span><br><span class="line">https://windirstat.net/</span><br><span class="line">https://www.ipip.net/download.html#ip_trace</span><br><span class="line">https://ivarptr.github.io/yu-writer.site/</span><br><span class="line">http://1218.io/</span><br><span class="line">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases</span><br><span class="line">https://www.alertover.com</span><br><span class="line">https://send-anywhere.com/business</span><br><span class="line">http://pooi.moe/QuickLook/</span><br><span class="line">https://www.chuyu.me/zh-Hans/index.html</span><br><span class="line">http://clipber.com/clipber/#download_app</span><br><span class="line">http://www.hellofont.cn/</span><br><span class="line">https://github.com/chengr28/RevokeChinaCerts</span><br><span class="line">http://code.taobao.org/p/mychrome/src/trunk/release/</span><br><span class="line">https://github.com/sylnsfar/qrcode</span><br><span class="line">https://chris.dziemborowicz.com/apps/hourglass/</span><br><span class="line">https://getsharex.com/</span><br><span class="line">http://rufus.akeo.ie/</span><br><span class="line">https://www.xnview.com/en/xnconvert/#downloads</span><br><span class="line">https://otp.landian.la/index.html</span><br><span class="line">http://www.rjno1.com/mpv-easy-player.html</span><br><span class="line">https://github.com/Codeusa/SteamCleaner</span><br><span class="line">https://www.shencut.com/</span><br><span class="line">http://www.screentogif.com/?l=zh_cn</span><br><span class="line">http://www.traynier.com/software/steammover</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>一行代码架设个简单的FTP服务器</title>
    <url>/2018/07/24/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%9E%B6%E8%AE%BE%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84ftp%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>之前我们介绍过一行代码架设个 HTTP 服务器 &lt; <a href="https://www.jarods.org/436.html" title=" 教程 : 一行代码架设个简易 http 服务 -91 云 (91yun.co)">教程 : 一行代码架设个简易 <strong>http</strong> 服务</a> &gt;</p>
<p>相比与 http,ftp 对于大文件的传输更加保险 , 而且还能使用各种软件进行挂载 .</p>
<p>今天介绍的 FTP 命令也是用 python 来实现 .</p>
<h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><p>因为这个组件 python 默认没有 , 所以要先安装下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pyftpdlib</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="最简单的"><a href="#最简单的" class="headerlink" title="最简单的"></a>最简单的</h2><p>. 请放到你要 ftp 的目录 , 它会把该目录变成根目录 . 并且匿名访问 : 默认端口是 2121</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m pyftpdlib</span><br></pre></td></tr></table></figure>

<p>你就可以在浏览器里面通过 : <code>ftp:// 服务器 ip:2121</code> 来访问你的 ftp 服务器了</p>
<h2 id="如果需要使用用户名和密码"><a href="#如果需要使用用户名和密码" class="headerlink" title="如果需要使用用户名和密码"></a>如果需要使用用户名和密码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m pyftpdlib -u jarods -P www.jarods.org</span><br></pre></td></tr></table></figure>

<p>-u 是指定用户名  -P 是指定密码 ( 这个 P 是大写 ). 这个语句的含义就是 : 用户名是 jarods, 密码是 <a href="http://www.jarods.org/">www.jarods.org</a></p>
<h2 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup python -m pyftpdlib -u jarods -P www.jarods.org &amp;</span><br></pre></td></tr></table></figure>

<p>后台运行后 , 如果要删除进程关闭 ftp 的话可以执行命令 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps auxgrep pyftpdlibawk &#x27;&#123;print $2&#125;&#x27;xargs kill -9</span><br></pre></td></tr></table></figure>

<h2 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h2><p>把后台运行的那个代码写入 <code>/etc/rc.local</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;nohup python -m pyftpdlib -u jarods-p www.jarods.org &amp;&quot; &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure>

<p> </p>
<h1 id="其他一些参数"><a href="#其他一些参数" class="headerlink" title="其他一些参数"></a>其他一些参数</h1><p>除上之外，还有一些可选参数：</p>
<ul>
<li>p 指定端口（默认为 2121 ）</li>
<li>w 写权限（默认为只读）</li>
<li>d 指定目录 （默认为当前目录）</li>
</ul>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>FTP</tag>
      </tags>
  </entry>
  <entry>
    <title>一行代码架设个简易http服务</title>
    <url>/2018/07/24/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%9E%B6%E8%AE%BE%E4%B8%AA%E7%AE%80%E6%98%93http%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>有的时候 , 你需要临时下载个文件 , 但安装 nginx 又显得过于劳师动众 , 那么用 python 架设个简易的 http 服务器就很方便啦 .</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer 80</span><br></pre></td></tr></table></figure>

<p>这个命令会把你运行命令的 <strong>当前目录</strong> 作为 http 服务的根目录 . 所以选好目录再运行哦 .</p>
<p>运行后 , 你就可以在浏览器通过服务器 ip 进行访问了</p>
<p>如果你不想用 80 端口 , 可以把这个 80 改成其他端口 .</p>
<p>如果你想在后台长时间运行这个程序那么可以使用 nohup 命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup python -m SimpleHTTPServer 80 &amp;</span><br></pre></td></tr></table></figure>

<p>是不是很方便呢 .</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>一键DD网络重装系统 – 魔改版（适用于Linux / Windows）</title>
    <url>/2019/08/20/%E4%B8%80%E9%94%AEdd%E7%BD%91%E7%BB%9C%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F-%E9%AD%94%E6%94%B9%E7%89%88%EF%BC%88%E9%80%82%E7%94%A8%E4%BA%8Elinux-windows%EF%BC%89/</url>
    <content><![CDATA[<p>当我们需要重装VPS&#x2F;云平台&#x2F;独立服务器操作系统时，通常可以通过服务商模板和ISO挂载的方式重新安装。</p>
<p>从今天开始，你将拥有了一个全新的方式，通过网络一键式重新安装纯净操作系统，无需CD-ROM,无需VNC&#x2F;IPIM&#x2F;KVM。</p>
<p>无论是Linux，还是Windows，都可以通过网络一键式完成安装，通过简单的两行命令开启美妙的体验。</p>
<h3 id="现实需求"><a href="#现实需求" class="headerlink" title="现实需求"></a>现实需求</h3><p>为什么我们需要重装纯净系统？</p>
<p>1. 服务商提供的系统模板可能会内置一些软件，甚至和我们即将安装的软件产生冲突，导致安装失败。</p>
<p>2. ISO挂载并不是所有服务商都提供的服务，一些IPIM&#x2F;KVM传输速度过于缓慢，安装效率较差。</p>
<p>3. Linux&#x2F;Windows在使用中可能遇到一些找不到问题的莫名错误。相信你一定深有体会！</p>
<h3 id="你需要了解"><a href="#你需要了解" class="headerlink" title="你需要了解"></a>你需要了解</h3><p>1. 所有系统除特殊说明外，安装完毕的默认密码是<strong>cxthhhhh.com</strong>，为了防止暴力破解，你必须在安装完毕立刻修改默认密码！</p>
<p>2. 因硬件配置和网络环境不同，安装全程需要15-60分钟，请耐心等待。安装完成即可通过IP:22(Linux SSH)&#x2F;IP:3389(Windows RDP)进行连接。</p>
<p>3. 为了稳定性和安全性，我建议所有网站管理员&#x2F;开发者&#x2F;公司使用最新的系统，同时我只为最新的系统提供技术支持。</p>
<p>4. 一些没有DHCP的VPS&#x2F;云平台&#x2F;独立服务器，安装后无法访问网络，你需要登陆VNC&#x2F;IPIM&#x2F;KVM后手动进行网卡IP配置。</p>
<h3 id="重装系统前环境需求"><a href="#重装系统前环境需求" class="headerlink" title="重装系统前环境需求"></a>重装系统前环境需求</h3><p>1. 当前已安装任意由GRUB or GRUB2引导Linux系统(RedHat&#x2F;CentOS&#x2F;Debian&#x2F;Ubuntu&#x2F;Etc.)</p>
<p>2. 安装重装系统的前提组件</p>
<p>①. RedHat&#x2F;CentOS:</p>
<p>yum install -y xz openssl gawk file</p>
<p>②. Debian&#x2F;Ubuntu:</p>
<p>apt-get install -y xz-utils openssl gawk file</p>
<h3 id="让我们开始吧"><a href="#让我们开始吧" class="headerlink" title="让我们开始吧"></a>让我们开始吧</h3><h4 id="1-下载SHELL脚本（通过root用户运行）"><a href="#1-下载SHELL脚本（通过root用户运行）" class="headerlink" title="1. 下载SHELL脚本（通过root用户运行）"></a>1. 下载SHELL脚本（通过root用户运行）</h4><p>wget –no-check-certificate <a href="https://shell.p1e.cn/reinstall/Network-Reinstall-System-Modify.sh">https://shell.p1e.cn/reinstall/Network-Reinstall-System-Modify.sh</a> &amp;&amp; chmod a+x Network-Reinstall-System-Modify.sh</p>
<h4 id="2-安装系统（任选其一）"><a href="#2-安装系统（任选其一）" class="headerlink" title="2. 安装系统（任选其一）"></a>2. 安装系统（任选其一）</h4><p>【安装Linux系统】</p>
<p>①. 一键网络重装纯净CentOS 7（推荐）</p>
<p>bash Network-Reinstall-System-Modify.sh -CentOS_7</p>
<p>②. 一键网络重装纯净CentOS 6</p>
<p>bash Network-Reinstall-System-Modify.sh -CentOS_6</p>
<p>③. 一键网络重装纯净Debian 9（推荐）</p>
<p>bash Network-Reinstall-System-Modify.sh -Debian_9</p>
<p>④. 一键网络重装纯净Debian 8</p>
<p>bash Network-Reinstall-System-Modify.sh -Debian_8</p>
<p>⑤. 一键网络重装纯净Debian 7</p>
<p>bash Network-Reinstall-System-Modify.sh -Debian_7</p>
<p>⑥. 一键网络重装纯净Ubuntu 18.04（推荐）</p>
<p>bash Network-Reinstall-System-Modify.sh -Ubuntu_18.04</p>
<p>⑦. 一键网络重装纯净Ubuntu 16.04</p>
<p>bash Network-Reinstall-System-Modify.sh -Ubuntu_16.04</p>
<p>⑧. 一键网络重装纯净Ubuntu 14.04</p>
<p>bash Network-Reinstall-System-Modify.sh -Ubuntu_14.04</p>
<p>【安装Windows系统】</p>
<p>*警告：你需要购买来自Microsoft或其合作伙伴正版系统授权并激活系统使用。继续安装即代表您知悉并已经购买正版授权。</p>
<p>①. 一键网络重装纯净Windows Server 2019（推荐）</p>
<p>bash Network-Reinstall-System-Modify.sh -Windows_Server_2019</p>
<p>②. 一键网络重装纯净Windows Server 2016</p>
<p>bash Network-Reinstall-System-Modify.sh -Windows_Server_2016</p>
<p>③. 一键网络重装纯净Windows Server 2012 R2</p>
<p>bash Network-Reinstall-System-Modify.sh -Windows_Server_2012R2</p>
<p>④. 一键网络重装纯净Windows Server 2008 R2</p>
<p>bash Network-Reinstall-System-Modify.sh -Windows_Server_2008R2</p>
<p>⑤. 一键网络重装纯净Windows 7</p>
<p>bash Network-Reinstall-System-Modify.sh -Windows_7_Vienna</p>
<p>⑥. 一键网络重装纯净Windows Server 2003</p>
<p>bash Network-Reinstall-System-Modify.sh -Windows_Server_2003</p>
<p>【安装DD系统】</p>
<p>*如果您不了解这意味着什么，请不要进行操作。%ULR%应该替换为您自己的映像地址。</p>
<p>bash Network-Reinstall-System-Modify.sh -DD “%URL%”</p>
<h3 id="恭喜，你已经完成了系统重装，享受当下的美好"><a href="#恭喜，你已经完成了系统重装，享受当下的美好" class="headerlink" title="恭喜，你已经完成了系统重装，享受当下的美好"></a>恭喜，你已经完成了系统重装，享受当下的美好</h3><p>当您执行完上面的2行命令，你的服务器将开始网络重装纯净系统。在完成安装前，您将无法进行连接管理。</p>
<p>因硬件配置和网络环境不同，安装全程需要15-60分钟，请耐心等待。安装完成即可通过IP:22(Linux SSH)&#x2F;IP:3389(Windows RDP)进行连接。</p>
<p>这篇文章转自[CXT] Technical Blog 技術博客</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>一键在Linux系统部署可浏览器访问Linux桌面环境（完测）</title>
    <url>/2022/02/08/%E4%B8%80%E9%94%AE%E5%9C%A8linux%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2%E5%8F%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AElinux%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83%EF%BC%88%E5%AE%8C%E6%B5%8B%EF%BC%89/</url>
    <content><![CDATA[<p>我们很多网友朋友选择Linux服务器并不是单单用来建站的，比如有些外贸或者外汇业务需要，会使用到桌面环境的服务器系统。但是我们应该知道海外服务器商家较多是Linux系统，Windows系统很少而且成本较高。这不我们在需要桌面环境的Linux系统我们可以直接安装VNC或者是RDP这样的桌面环境。</p>
<p><a href="https://www.laozuo.org/">老左笔记</a>在之前的文章中也有过不少安装包，目前也不清楚这些教程是否有效，以后有时间一一重新整理一遍。今天老左要分享的是来自香菇肥牛分享的一键Linux桌面安装脚本环境，支持可以快速安装RDP或者VNC桌面环境，支持我们常用的火狐浏览器，且当然可以选择中文和英文版本。在这篇文章中，老左花费点时间在Linux服务器Debian 10（也支持其他）版本中完测可用的，这里根据习惯记录下来。如果也有同样需要的网友站长可以参考。</p>
<p><strong>第一、脚本支持系统及脚本安装</strong></p>
<p>根据官方介绍是支持Ubuntu 18.04&#x2F;20.04 LTS, Debian 10, 以及CentOS 7&#x2F;8 64位操作系统上运行。在这篇文章中老左选择的是Debian 10 64位。</p>
<p>1、中文</p>
<blockquote>
<p>wget <a href="https://raw.githubusercontent.com/Har-Kuun/OneClickDesktop/master/OneClickDesktop/_zh-CN.sh">https://raw.githubusercontent.com/Har-Kuun/OneClickDesktop/master/OneClickDesktop\_zh-CN.sh</a> &amp;&amp; sudo bash OneClickDesktop_zh-CN.sh</p>
</blockquote>
<p>2、英文</p>
<blockquote>
<p>wget <a href="https://raw.githubusercontent.com/Har-Kuun/OneClickDesktop/master/OneClickDesktop.sh">https://raw.githubusercontent.com/Har-Kuun/OneClickDesktop/master/OneClickDesktop.sh</a> &amp;&amp; sudo bash OneClickDesktop.sh</p>
</blockquote>
<p>这里有中文和英文版本，这个需要根据我们实际项目需要。有些必须在英文环境下，那就不能用中文，这个我们有需要的朋友知道的。这里我选择的是中文版本安装。</p>
<p><strong>第二、一键Linux桌面安装过程</strong></p>
<p>这里老左记录下来我完测Linux桌面的安装过程。</p>
<p><img src="/2022/02/OneClickDesktop-1.jpg"></p>
<p>根据提示向导，设置登录面板的密码账户，以及分辨率。</p>
<p><img src="/2022/02/OneClickDesktop-2.jpg"></p>
<p>因为会采用浏览器登录桌面方式，所以我们需要先解析一个域名（这里我用二级域名），解析到服务器IP，然后会配置SSL，自动的。</p>
<p><img src="/2022/02/OneClickDesktop-3.jpg"></p>
<p>在安装过程中可能需要我们确认，我们一般回车即可。有需要安装的我们选择YES回车。</p>
<p><img src="/2022/02/OneClickDesktop-4.jpg"></p>
<p>语言默认英文键盘。</p>
<p><img src="/2022/02/OneClickDesktop-5.jpg"></p>
<p>这个安装过程实际上还是比较长的，我选择的是RDP，过程就是等待，看到上图才是正常的。我们可以去登录看看，会不会有错误呢？</p>
<p><strong>第三、桌面环境登录验证</strong></p>
<p>根据提示，我们需要用自己绑定的域名打开浏览器。</p>
<p><img src="/2022/02/OneClickDesktop-6.jpg"></p>
<p>这个用户名和密码是我们自己设置的。</p>
<p><img src="/2022/02/OneClickDesktop-7.jpg"></p>
<p>这个用户名和密码是我们服务器的root账户。</p>
<p><img src="/2022/02/OneClickDesktop-8.jpg"></p>
<p>还算很顺利的登录进来，是我们熟悉的Linux桌面环境而且我们可以看到是有安装默认的火狐浏览器。</p>
<p><img src="/2022/02/OneClickDesktop-9.jpg"></p>
<p>这样我们可以很正常的登录浏览器或者是我们可以有需要在Linux系统调试软件的可以使用。这个比通过远程连接登录服务器方便很多，直接浏览器打开登录，比较便捷，可以随时的登录，无需软件。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux桌面环境</tag>
      </tags>
  </entry>
  <entry>
    <title>一键安装KMS服务脚本</title>
    <url>/2018/12/24/%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85kms%E6%9C%8D%E5%8A%A1%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p><img src="http://www.jarods.org/wp-content/uploads/2018/12/kms.png"></p>
<p>KMS，是 Key Management System 的缩写，也就是密钥管理系统。这里所说的 KMS，毋庸置疑就是用来激活 VOL 版本的 Windows 和 Office 的 KMS 啦。经常能在网上看到有人提供的 KMS 服务器地址，那么你有没有想过自己也来搞一个这样的服务呢？而这样的服务在 Github 上已经有<a href="https://github.com/Wind4/vlmcsd">开源代码</a>实现了。 本文就是在这个开源代码的基础上，开发了适用于三大 Linux 发行版的一键安装 KMS 服务的脚本。</p>
<h2 id="本脚本适用环境"><a href="#本脚本适用环境" class="headerlink" title="本脚本适用环境"></a>本脚本适用环境</h2><p>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+ 虚拟技术：任意 内存要求：≥128M 日期　　：2018 年 10 月 25 日</p>
<h3 id="关于本脚本"><a href="#关于本脚本" class="headerlink" title="关于本脚本"></a>关于本脚本</h3><p>1、本脚本适用于三大 Linux 发行版，其他版本则不支持。 2、KMS 服务安装完成后会加入开机自启动。 3、默认记录日志，其日志位于 &#x2F;var&#x2F;log&#x2F;vlmcsd.log。</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>使用root用户登录，运行以下命令：</p>
<p>wget –no-check-certificate <a href="https://github.com/teddysun/across/raw/master/kms.sh">https://github.com/teddysun/across/raw/master/kms.sh</a> &amp;&amp; chmod +x kms.sh &amp;&amp; .&#x2F;kms.sh</p>
<p>安装完成后，输入以下命令查看端口号 1688 的监听情况</p>
<p>netstat -nxtlp  grep 1688</p>
<p>返回值类似于如下这样就表示 OK 了：</p>
<p>tcp        0      0 0.0.0.0:1688                0.0.0.0:*                   LISTEN      3200&#x2F;vlmcsd<br>tcp        0      0 :::1688                     :::*                        LISTEN      3200&#x2F;vlmcsd</p>
<p>本脚本安装完成后，会将 KMS 服务加入开机自启动。</p>
<p><strong>使用命令：</strong> 启动：&#x2F;etc&#x2F;init.d&#x2F;kms start 停止：&#x2F;etc&#x2F;init.d&#x2F;kms stop 重启：&#x2F;etc&#x2F;init.d&#x2F;kms restart 状态：&#x2F;etc&#x2F;init.d&#x2F;kms status</p>
<p><strong>卸载方法：</strong> 使用 root 用户登录，运行以下命令：</p>
<p>.&#x2F;kms.sh uninstall</p>
<h3 id="如何使用-KMS-服务"><a href="#如何使用-KMS-服务" class="headerlink" title="如何使用 KMS 服务"></a>如何使用 KMS 服务</h3><p>KMS 服务，用于在线激活 VOL 版本的 Windows 和 Office。 激活的前提是你的系统是批量授权版本，即 VL 版，一般企业版都是 VL 版。而 VL 版本的镜像一般内置 GVLK key，用于 KMS 激活。 下面列表里面含有的产品的 VL 版本或者能使用 key 进入 KMS 通道的产品，都支持使用 KMS 激活。</p>
<p>Office 2019 &amp; Office 2016：<a href="https://docs.microsoft.com/en-us/DeployOffice/vlactivation/gvlks">https://docs.microsoft.com/en-us/DeployOffice/vlactivation/gvlks</a> Office 2013：<a href="https://technet.microsoft.com/zh-cn/library/dn385360.aspx">https://technet.microsoft.com/zh-cn/library/dn385360.aspx</a> Office 2010：<a href="https://technet.microsoft.com/zh-cn/library/ee624355(v=office.14).aspx">https://technet.microsoft.com/zh-cn/library/ee624355(v=office.14).aspx</a> Windows：<a href="https://docs.microsoft.com/zh-cn/windows-server/get-started/kmsclientkeys">https://docs.microsoft.com/zh-cn/windows-server/get-started/kmsclientkeys</a></p>
<p>使用管理员权限运行 cmd 查看系统版本，命令如下：</p>
<p>wmic os get caption</p>
<p>使用管理员权限运行 cmd 安装从上面列表得到的 key，命令如下：</p>
<p>slmgr &#x2F;ipk xxxxx-xxxxx-xxxxx-xxxxx-xxxxx</p>
<p>使用管理员权限运行 cmd 将 KMS 服务器地址设置为你自己的 IP 或 域名，后面最好再加上端口号（:1688），命令如下：</p>
<p>slmgr &#x2F;skms Your IP or Domain:1688</p>
<p><strong>注意：</strong>本脚本所做的工作就是此步骤。当你的 KMS 服务出于启动状态，那么此处就可以设置为你自己的 KMS 服务器地址。 使用管理员权限运行 cmd 手动激活系统，命令如下：</p>
<p>slmgr &#x2F;ato</p>
<p>关于 Office 的激活，要求必须是 VOL 版本，否则无法激活。 找到你的 Office 安装目录，32 位默认一般为 C:\Program Files (x86)\Microsoft Office\Office16 64 位默认一般为 C:\Program Files\Microsoft Office\Office16 Office16 是 Office 2016，Office15 就是 Office 2013，Office14 就是 Office 2010。 打开以上所说的目录，应该有个 OSPP.VBS 文件。 使用管理员权限运行 cmd 进入 Office 目录，命令如下：</p>
<p>cd “C:\Program Files (x86)\Microsoft Office\Office16”</p>
<p>使用管理员权限运行 cmd 注册 KMS 服务器地址：</p>
<p>cscript ospp.vbs &#x2F;sethst:Your IP or Domain</p>
<p>使用管理员权限运行 cmd 手动激活 Office，命令如下：</p>
<p>cscript ospp.vbs &#x2F;act</p>
<p><strong>注意：</strong> KMS 方式激活，其有效期只有 180 天。 每隔一段时间系统会自动向 KMS 服务器请求续期，请确保你自己的 KMS 服务正常运行。</p>
<h3 id="常见错误的对策"><a href="#常见错误的对策" class="headerlink" title="常见错误的对策"></a>常见错误的对策</h3><p>如果遇到在执行过程报错，请按以下步骤检查： 1，你的 KMS 服务器是否挂了？ 2，你的 KMS 服务是否正常开启？ 3，你的系统或 Office 是否为批量 VL 版本？ 4，你的系统或 Office 是否修改过 Key 或未安装 GVLK Key？ 5，你是否以管理员权限运行 cmd？ 6，你的网络连接是否正常？ 7，你的本地 DNS 解析是否正常？ 8，如果你排除了以上的对策，那请根据错误提示代码自行搜索原因。</p>
<h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><p>2018 年 10 月 25 日：修正 vlmcsd 的 git 链接，即每次全新安装皆为官方的最新版本。注意：如果你想升级版本，则需要先停止 kms 服务，再删除 &#x2F;usr&#x2F;bin&#x2F;vlmcsd 文件，然后重新下载最新脚本安装即可。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>KMS</tag>
      </tags>
  </entry>
  <entry>
    <title>一键安装最新内核并开启 BBR 脚本</title>
    <url>/2018/11/03/%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E5%86%85%E6%A0%B8%E5%B9%B6%E5%BC%80%E5%90%AF-bbr-%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="本脚本适用环境"><a href="#本脚本适用环境" class="headerlink" title="本脚本适用环境"></a>本脚本适用环境</h2><p>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+ 虚拟技术：OpenVZ 以外的，比如 KVM、Xen、VMware 等 内存要求：≥128M 日期　　：2017 年 05 月 15 日</p>
<h3 id="关于本脚本"><a href="#关于本脚本" class="headerlink" title="关于本脚本"></a>关于本脚本</h3><p>1、本脚本已在 <a href="http://xpsss.com/819.html"><strong>Linode</strong></a>上的 VPS 全部测试通过。 2、当脚本检测到 VPS 的虚拟方式为 OpenVZ 时，会提示错误，并自动退出安装。 3、脚本运行完重启发现开不了机的，打开 VPS 后台控制面板的 VNC, 开机卡在 grub 引导, 手动选择内核即可。 4、由于是使用最新版系统内核，最好请勿在生产环境安装，以免产生不可预测之后果。</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>使用root用户登录，运行以下命令：</p>
<p>wget –no-check-certificate <a href="https://github.com/teddysun/across/raw/master/bbr.sh">https://github.com/teddysun/across/raw/master/bbr.sh</a><br>chmod +x bbr.sh<br>.&#x2F;bbr.sh</p>
<p>安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。 重启完成后，进入 VPS，验证一下是否成功安装最新内核并开启 TCP BBR，输入以下命令：</p>
<p>uname -r</p>
<p>查看内核版本，含有 4.12 就表示 OK 了</p>
<p>sysctl net.ipv4.tcp_available_congestion_control</p>
<p>返回值一般为： net.ipv4.tcp_available_congestion_control &#x3D; bbr cubic reno</p>
<p>sysctl net.ipv4.tcp_congestion_control</p>
<p>返回值一般为： net.ipv4.tcp_congestion_control &#x3D; bbr</p>
<p>sysctl net.core.default_qdisc</p>
<p>返回值一般为： net.core.default_qdisc &#x3D; fq</p>
<p>lsmod  grep bbr</p>
<p>返回值有 tcp_bbr 模块即说明bbr已启动。</p>
<h3 id="内核升级方法"><a href="#内核升级方法" class="headerlink" title="内核升级方法"></a>内核升级方法</h3><p>如果是 CentOS 系统，执行如下命令即可升级内核：</p>
<p>yum –enablerepo&#x3D;elrepo-kernel -y install kernel-ml kernel-ml-devel</p>
<p>CentOS 6 的话，执行命令：</p>
<p>sed -i ‘s&#x2F;^default&#x3D;.*&#x2F;default&#x3D;0&#x2F;g’ &#x2F;boot&#x2F;grub&#x2F;grub.conf</p>
<p>CentOS 7 的话，执行命令：</p>
<p>grub2-set-default 0</p>
<p>如果是 Debian&#x2F;Ubuntu 系统，则需要手动下载最新版内核来安装升级。 去<a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/">这里</a>下载最新版的内核 deb 安装包。 如果系统是 64 位，则下载 amd64 的 linux-image 中含有 generic 这个 deb 包； 如果系统是 32 位，则下载 i386 的 linux-image 中含有 generic 这个 deb 包； 安装的命令如下（以最新版的 64 位 4.12.4 举例而已，请替换为下载好的 deb 包）：</p>
<p>dpkg -i linux-image-4.12.4-041204-generic_4.12.4-041204.201707271932_amd64.deb</p>
<p>安装完成后，再执行命令：</p>
<p>&#x2F;usr&#x2F;sbin&#x2F;update-grub</p>
<p>最后，重启 VPS 即可。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>BBR</tag>
      </tags>
  </entry>
  <entry>
    <title>一键网络安装最新纯净CentOS7.X(自动分区扩容版)发布</title>
    <url>/2018/10/03/%E4%B8%80%E9%94%AE%E7%BD%91%E7%BB%9C%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%BA%AF%E5%87%80centos7-x%E8%87%AA%E5%8A%A8%E5%88%86%E5%8C%BA%E6%89%A9%E5%AE%B9%E7%89%88%E5%8F%91%E5%B8%83/</url>
    <content><![CDATA[<p>简介</p>
<p>之前的CentOS7系统模板是手动分区版，是为兼容磁盘较小的服务器以及使得用户可以手动挂载自己的数据盘，避免在安装时因为自动分区导致将用户数据盘格式化等问题，因此手动分区版在自动安装完成后，系统默认只分配了4.5GB，剩余磁盘需要进行手动分区扩容。</p>
<p>所以，今天的自动分区版发布了，毕竟手动分区还要花费几分钟时间去手动操作，为什么不在安装时就自动分配所有的磁盘空间给（&#x2F;）根分区呢？这样安装完直接就是所有磁盘空间都被应用，省去了人工去分区的精力和时间，效率就是金钱。这真是太棒了。</p>
<p>当然手动分区版的存在也是必要的，毕竟有些MJJ们需要手动去分区，例如想给home自定义分区或者挂载数据盘，脚本中默认为自动分区版，因此对于需要手动分区的MJJ们可以手动修改安装地址为手动分区版地址即可。两个版本的唯一差别就是一个会自动分区(所有空间划给&#x2F;根分区)，一个需要手动分区(安装完成后可自定义手动划分分区)。两版安装完均是当前最新的CentOS7.X，CentOS发布什么最新版本，安装完就是什么最新的版本。截至2018年8月CentOS发布的为7.5版。</p>
<p>预览图片（套路云一键重装完）</p>
<p>配置为：1C&#x2F;1G&#x2F;40G&#x2F;200M&#x2F;1T的机器</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/5b8514af9ddb6.png"></p>
<h3 id="如何使用和做"><a href="#如何使用和做" class="headerlink" title="如何使用和做"></a>如何使用和做</h3><p>一键安装具有两种系统模板，以下教程中默认使用自动分区版（一个是自动分区版，一个是手动分区版，你应该按照你的需求进行选择）</p>
<p><code>自动分区版：https://opendisk.cxthhhhh.com/OperatingSystem/CentOS/CentOS_7.X_NetInstall_AutoPartition.vhd.gz</code> <code>手动分区版：https://opendisk.cxthhhhh.com/OperatingSystem/CentOS/CentOS_7.X_NetInstall.vhd.gz</code></p>
<p>如需手动进行分区（可根据您的需求定制化，比如挂载数据盘等），请将下面代码中的系统模板地址替换为手动分区版的地址，代码中默认为自动分区版。</p>
<p>我提供两种方式供你采用。（任选其一）。</p>
<p>1. 进入恢复模式（推荐）或在常规模式下，查看要安装的磁盘。（以下命令需要修改到您自己的磁盘）</p>
<p>①如果你是VPS，你应该像这样运行 <code>wget -qO- https://opendisk.cxthhhhh.com/OperatingSystem/CentOS/CentOS_7.X_NetInstall_AutoPartition.vhd.gz gunzip -dc dd of=/dev/vda</code> ②如果你是一个专用服务器，你应该像这样运行 <code>wget -qO- https://opendisk.cxthhhhh.com/OperatingSystem/CentOS/CentOS_7.X_NetInstall_AutoPartition.vhd.gz gunzip -dc dd of=/dev/sda</code></p>
<p>2. 在正常模式下执行以下命令（通过MoeClub.org提供的脚本） (你需要注意，下面命令中引号是”英文状态引号”。)</p>
<p><code>wget --no-check-certificate -qO InstallNET.sh &#39;https://moeclub.org/attachment/LinuxShell/InstallNET.sh&#39; &amp;&amp; bash InstallNET.sh -dd &#39;https://opendisk.cxthhhhh.com/OperatingSystem/CentOS/CentOS_7.X_NetInstall_AutoPartition.vhd.gz&#39;</code></p>
<h3 id="您得明白"><a href="#您得明白" class="headerlink" title="您得明白"></a>您得明白</h3><p>1. 它将帮助您重新安装最新的CentOS7.X系统。（正式，纯粹，安全，高效） 2. 执行后，您可能需要15-45分钟后才能通过IP:22进行连接。 3. 新安装的系统root密码为[cxthhhhh.com] 。 4. 系统首次启动后，请等待自动安装完成，系统将自动重启，然后才能使用。（安装过程中的手动干预可能会导致错误） 5. IPV4和IPV6是开启的，并通过DHCP获取网络信息。 6. 系统的DNS将被设置为1.1.1.1和8.8.8.8，用来保护您的隐私。 7. 系统使用官方CentOS镜像，将自动匹配yum信息。拒绝服务提供商劫持。 8. 登录信息标准化，易于管理。您需要在登录后修改它。 9. 完成测试，非常适合Azure，Google Cloud，Vultr，Online，Net，OVH，阿里云，腾讯云中的许多专用服务器和KVM服务器。欢迎您的反馈。 10. 对于手动分区版系统模板，默认分配磁盘大小为4.5G。 11. 当你使用我的解决方案，我想说，感谢您信任我。我非常感谢您。我很高兴可以帮助到你。如果您不信任我的解决方案，请关闭页面，信任这是平等的。我相信技术不分国家，欢迎一起讨论，共同研究最新技术。 12. 自动分区版将会把所有的硬盘剩余空间分配给（&#x2F;）根分区，请注意，你只可以在全新的服务器上使用自动分区版，如果你有数据在服务器上，请使用手动分区版（根据需求手动挂载您的数据盘），这是为了防止自动分区版在安装时将您的数据盘格式化。 13. 在每次重装前，请保证你已经通过服务商面板重装过一次系统（CentOS&#x2F;Debian&#x2F;Ubuntu均可），不可以在已经DD安装过的系统上使用萌咖的自动脚本再次DD本系统，否则会报错，系统无法启动。手动DD不受此问题影响。 14. 在安装过程中，请勿手动进行操作，也许会导致错误。如果您在屏幕（VNC）上看到以下界面，代表正在安装系统，请耐心等待。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/CentOS_7.X_NetInstall.png"></p>
<h3 id="开始享受纯净的CentOS7。"><a href="#开始享受纯净的CentOS7。" class="headerlink" title="开始享受纯净的CentOS7。"></a>开始享受纯净的CentOS7。</h3>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>CentOS7.X</tag>
      </tags>
  </entry>
  <entry>
    <title>三大免费工具助你检测VPS服务器真伪-VPS主机性能和速度测试方法</title>
    <url>/2019/04/21/%E4%B8%89%E5%A4%A7%E5%85%8D%E8%B4%B9%E5%B7%A5%E5%85%B7%E5%8A%A9%E4%BD%A0%E6%A3%80%E6%B5%8Bvps%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9C%9F%E4%BC%AA-vps%E4%B8%BB%E6%9C%BA%E6%80%A7%E8%83%BD%E5%92%8C%E9%80%9F/</url>
    <content><![CDATA[<p>这年头VPS主机太多了，好多“二手”VPS开始横行其道，让人真假莫辨，想要购买某一个VPS主机，一般是先要看看这家的VPS主机的评测数据。之前分享VPS主机时都会给出VPS的性能与速度测试报告，这次我就来专门整理一下相关的测试工具。</p>
<p>一来给自己做一个备忘录，以后测试VPS就不用满大街地找百度要命令了，二来给没有用过的朋友一点帮助，这些工具都是好多站长朋友通用的，自己购买的VPS主机到底值不值这个价格，用这几个工具一测试便知，而且操作简单，只需要几个命令即可完成。</p>
<p>需要提醒的是，关于IO读写速度的测试，根据以往的经验，像谷歌云服务器、亚马逊服务器等，IO读写速度都比较低，而SSD在IO方面表现出色。另外，国外的VPS主机的速度很大程度上取决于线路的好坏，并且晚上和白天的测试速度会差别比较大。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/04/aliyun-vps_00.jpg" alt="三大免费工具助你检测VPS服务器真伪-VPS主机性能和速度快速测试方法"></p>
<p>更多的关于<a href="https://wzfou.com/vps-jiaocheng/">VPS教程</a>和经验方法，你可以看看：</p>
<ol>
<li><a href="https://wzfou.com/vps-net/">VPS.net的VPS主机使用体验-账号验证与VPS主机性能速度测评</a></li>
<li><a href="https://wzfou.com/vestacp-wenti/">Vestacp问题:SSL证书,HTTP&#x2F;2,网站统计,在线文件管理和301重定向</a></li>
<li><a href="https://wzfou.com/whmcs-vultr/">WHMCS整合Vultr自动开通激活VPS主机方法-实现在WHMCS上分销VPS</a></li>
</ol>
<p>PS：2017年8月20日更新，补充一下VPS主机CN2线路测试方法：<a href="https://wzfou.com/cn2-vps-list/">鉴别真假CN2线路主机参考手册</a>。</p>
<h2 id="零、常用检测脚本汇总"><a href="#零、常用检测脚本汇总" class="headerlink" title="零、常用检测脚本汇总"></a>零、常用检测脚本汇总</h2><p>为方便使用，我在这里汇总一下用于VPS各类检测的脚本，有关脚本的详细使用及说明可参阅下文的内容。</p>
<p><strong>1、一键测试服务器到国内的速度脚本Superspeed.sh ：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/oooldking/script/master/superspeed.sh</span><br><span class="line">chmod +x superspeed.sh</span><br><span class="line">./superspeed.sh</span><br></pre></td></tr></table></figure>

<p><strong>2、一键检测VPS的CPU、内存、负载、IO读写、机房带宽等脚本：bench.sh</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令1：</span><br><span class="line">wget -qO- bench.sh  bash</span><br><span class="line">或者</span><br><span class="line">curl -Lso- bench.sh  bash</span><br><span class="line"></span><br><span class="line">命令2：</span><br><span class="line">wget -qO- 86.re/bench.sh  bash</span><br><span class="line">或者</span><br><span class="line">curl -so- 86.re/bench.sh  bash</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>3、可以看作bench.sh强化版：SuperBench.sh</strong></p>
<p>新增 Virt 检测服务器类型参数<strong>。</strong>常见 openvz，kvm，独服都能检测出来。同时整合上面的Superspeed.sh一键测试服务器到国内的速度脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/oooldking/script/master/superbench.sh  bash</span><br><span class="line">或者</span><br><span class="line">curl -Lso- https://raw.githubusercontent.com/oooldking/script/master/superbench.sh  bash</span><br></pre></td></tr></table></figure>

<p><strong>4、一键带宽检测工具：speedtest-cli</strong></p>
<p>安装命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">apt-get install python-pip</span><br><span class="line">sudo pip install speedtest-cli</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">speedtest-cli</span><br><span class="line">#后面也可以接以下参数：</span><br><span class="line">-h, --help show this help message and exit </span><br><span class="line">--share 分享你的网速，该命令会在speedtest网站上生成网速测试结果的图片。 </span><br><span class="line">--simple Suppress verbose output, only show basic information </span><br><span class="line">--list 根据距离显示speedtest.net的测试服务器列表。 </span><br><span class="line">--server=SERVER 指定列表中id的服务器来做测试。 </span><br><span class="line">--mini=MINI URL of the Speedtest Mini server </span><br><span class="line">--source=SOURCE Source ip address to bind to </span><br><span class="line">--version Show the version number and exit</span><br></pre></td></tr></table></figure>

<p><strong>5、VPS性能综合跑分工具：unixbench</strong></p>
<p>命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/unixbench.sh</span><br><span class="line">chmod +x unixbench.sh</span><br><span class="line">./unixbench.sh</span><br></pre></td></tr></table></figure>

<p><strong>6、一键测试回程Ping值工具：mPing</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/helloxz/mping/master/mping.sh</span><br><span class="line">bash mping.sh</span><br></pre></td></tr></table></figure>

<p><strong>7、Serverreview-benchmark综合评测工具</strong></p>
<p>这是一个老外写的VPS主机综合评测工具，主要评测的项目有VPS主机磁盘IO、内存读写、CPU性能以及Benchmark性能，还有美国、欧洲、亚洲等不同节点的下载速度。主页：<a href="https://github.com/sayem314/serverreview-benchmark">https://github.com/sayem314/serverreview-benchmark</a></p>
<p><strong>脚本使用使用方法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#简略版</span><br><span class="line">yum install curl -y</span><br><span class="line">curl -LsO git.io/bench.sh; chmod +x bench.sh &amp;&amp; ./bench.sh -a share</span><br><span class="line">#完整版</span><br><span class="line">yum install curl -y</span><br><span class="line">curl -LsO git.io/bench.sh; chmod +x bench.sh &amp;&amp; ./bench.sh -a share </span><br></pre></td></tr></table></figure>

<h2 id="一、VPS速度测试工具"><a href="#一、VPS速度测试工具" class="headerlink" title="一、VPS速度测试工具"></a>一、VPS速度测试工具</h2><p><strong>在线测试工具。</strong>使用在线测试工具，可以方便得到服务器的响应时间，这一招对于国外的VPS特别有效果。以下是搜集整理的实用在线网站速度测试工具网站：</p>
<blockquote>
<p><a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a></p>
<p><a href="http://www.ipip.net/ping.php">http://www.ipip.net/ping.php</a></p>
<p><a href="https://www.17ce.com/">https://www.17ce.com/</a></p>
<p><a href="http://www.webkaka.com/">http://www.webkaka.com/</a></p>
<p><a href="http://ce.cloud.360.cn/">http://ce.cloud.360.cn/</a></p>
</blockquote>
<p>这几个在线测速工具各有各的优缺点，推荐使用ipip.net测试服务器IP和路由追踪，用17ce.com测试网页加载速度，用ping.chinaz.com用国内不同地方的Ping值。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/04/vps-gongju_03.gif" alt="VPS主机性能和速度Ping值"></p>
<p><strong>本地测试软件。</strong>这里推荐使用WinMTR，这是一款方便易用的路由跟踪工具。该软件可以帮助用户直接查看各个节点的响应时间及丢包率，非常适合windows下客户做路由追踪及PING进行测试。</p>
<blockquote>
<p>下载地址：<a href="https://www.ucblog.net/wzfou/WinMTR-CN-IP.zip">https://www.ucblog.net/wzfou/WinMTR-CN-IP.zip</a></p>
<p>项目主页：<a href="https://github.com/oott123/WinMTR">https://github.com/oott123/WinMTR</a></p>
<p>带地图版：<a href="https://cdn.ipip.net/17mon/besttrace.exe">https://cdn.ipip.net/17mon/besttrace.exe</a></p>
</blockquote>
<p>启用<a href="https://wzfou.com/tag/winmtr/">WinMTR</a>，点击可以更新IP地址。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/04/vps-gongju_01.gif" alt="VPS主机性能和速度更新IP"></p>
<p>输入你想要追踪的域名或者服务器IP，接着你就可以看到数据包经过的节点还有丢包等情况，同时支持导出文本。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/04/vps-gongju_02.gif" alt="VPS主机性能和速度查看线路"></p>
<p><strong>相关的参数</strong>说明如下：</p>
<blockquote>
<p>Hostname：到目的服务器要经过的每个主机IP或名称 Nr：经过节点的数量；以上图百度为例子：一共要经过10个节点，其中第一个是出口的路由器 Loss%：ping 数据包回复失败的百分比；藉此判断，那个节点（线路）出现故障，是服务器所在机房还是国际路由干路 Sent：已传送的数据包数量 Recv：成功接收的数据包数量 Best：回应时间的最小值 Avrg：平均回应时间 Worst：回应时间的最大值 Last：最后一个数据包的回应时间</p>
</blockquote>
<p><strong>PS：2017年9月12日更新，</strong>Superspeed.sh 一键测试服务器到国内的速度脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/oooldking/script/master/superspeed.sh</span><br><span class="line">chmod +x superspeed.sh</span><br><span class="line">./superspeed.sh</span><br></pre></td></tr></table></figure>

<h2 id="二、VPS性能测试工具"><a href="#二、VPS性能测试工具" class="headerlink" title="二、VPS性能测试工具"></a>二、VPS性能测试工具</h2><p><strong>手动检测命令。</strong>直接使用命令：cat &#x2F;proc&#x2F;cpuinfo 或者 lscpu，你就可以看到你使用的VPS的CPU配置如何。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/04/vps-gongju_04.gif" alt="VPS主机性能和速度查看CPU内存"></p>
<p>检测出来的CPU，你也可以进入这个网站：<a href="http://www.cpubenchmark.net/cpu/_list.php%EF%BC%8C%E6%9F%A5%E7%9C%8BCPU%E7%9A%84%E6%80%A7%E8%83%BD%E5%88%B0%E5%BA%95%E6%8E%92%E8%A1%8C%E5%A4%9A%E5%B0%91%E4%BD%8D%EF%BC%8C%E8%87%B3%E5%B0%91%E8%AE%A9%E8%87%AA%E5%B7%B1%E5%BF%83%E9%87%8C%E6%9C%89%E4%B8%AA%E6%95%B0%E3%80%82">http://www.cpubenchmark.net/cpu\_list.php，查看CPU的性能到底排行多少位，至少让自己心里有个数。</a></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/04/vps-gongju_05.gif" alt="VPS主机性能和速度对比数据"></p>
<p>另外一个手动命令测试磁盘IO：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd if=/dev/zero of=test bs=64k count=4k oflag=dsync </span><br></pre></td></tr></table></figure>

<p>手动命令测试VPS网络：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://cachefly.cachefly.net/100mb.test</span><br></pre></td></tr></table></figure>

<p><strong>一键检测脚本。</strong>这里有一个一键检测VPS的CPU、内存、负载、IO读写、机房带宽等。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令1：</span><br><span class="line">wget -qO- bench.sh  bash</span><br><span class="line">或者</span><br><span class="line">curl -Lso- bench.sh  bash</span><br><span class="line"></span><br><span class="line">命令2：</span><br><span class="line">wget -qO- 86.re/bench.sh  bash</span><br><span class="line">或者</span><br><span class="line">curl -so- 86.re/bench.sh  bash</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>PS：2017年9月27日更新，</strong>SuperBench.sh可以看作bench.sh强化版，新增 Virt 检测服务器类型参数，常见 openvz，kvm，独服都能检测出来。同时整合上面的Superspeed.sh一键测试服务器到国内的速度脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/oooldking/script/master/superbench.sh  bash</span><br><span class="line">或者</span><br><span class="line">curl -Lso- https://raw.githubusercontent.com/oooldking/script/master/superbench.sh  bash</span><br></pre></td></tr></table></figure>

<p>运行一键检测脚本后，会显示当前测试的各种系统信息，取自世界多处的知名数据中心的测试点进行下载速度测试，支持 IPv6 下载测速，IO 测试三次并显示平均值，由于测试点都在国外，所以国内的服务器下载速度测试可能会失败。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/04/aliyun-vps_01-1.gif" alt="VPS主机性能和速度一键检测"></p>
<p><strong>一键带宽检测工具</strong>：speedtest-cli，官网：<a href="https://github.com/sivel/speedtest-cli%EF%BC%8C%E5%AE%89%E8%A3%85%E5%91%BD%E4%BB%A4%EF%BC%9A">https://github.com/sivel/speedtest-cli，安装命令：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">apt-get install python-pip</span><br><span class="line">sudo pip install speedtest-cli</span><br></pre></td></tr></table></figure>

<p>使用方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">speedtest-cli</span><br><span class="line">#后面也可以接以下参数：</span><br><span class="line">-h, --help show this help message and exit </span><br><span class="line">--share 分享你的网速，该命令会在speedtest网站上生成网速测试结果的图片。 </span><br><span class="line">--simple Suppress verbose output, only show basic information </span><br><span class="line">--list 根据距离显示speedtest.net的测试服务器列表。 </span><br><span class="line">--server=SERVER 指定列表中id的服务器来做测试。 </span><br><span class="line">--mini=MINI URL of the Speedtest Mini server </span><br><span class="line">--source=SOURCE Source ip address to bind to </span><br><span class="line">--version Show the version number and exit</span><br></pre></td></tr></table></figure>

<p><strong>VPS性能综合跑分工具。</strong><a href="https://wzfou.com/tag/unixbench/">UnixBench</a>是一个类unix系（Unix，BSD，Linux）统下的性能测试工具，一个开源工具，被广泛用与测试linux系统主机的性能。Unixbench的主要测试项目有：系统调用、读写、进程、图形化测试、2D、3D、管道、运算、C库等系统基准性能提供测试数据。命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/unixbench.sh</span><br><span class="line">chmod +x unixbench.sh</span><br><span class="line">./unixbench.sh</span><br></pre></td></tr></table></figure>

<p>测试项目说明如下：</p>
<blockquote>
<p><strong>Dhrystone 2 using register variables</strong> 此项用于测试 string handling，因为没有浮点操作，所以深受软件和硬件设计（hardware and software design）、编译和链接（compiler and linker options）、代码优化（code optimazaton）、对内存的cache（cache memory）、等待状态（wait states）、整数数据类型（integer data types）的影响。</p>
<p><strong>Double-Precision Whetstone</strong> 这一项测试浮点数操作的速度和效率。这一测试包括几个模块，每个模块都包括一组用于科学计算的操作。覆盖面很广的一系列 c 函数：sin，cos，sqrt，exp，log 被用于整数和浮点数的数学运算、数组访问、条件分支（conditional branch）和程序调用。此测试同时测试了整数和浮点数算术运算。</p>
<p><strong>Execl Throughput</strong> 此测试考察每秒钟可以执行的 execl 系统调用的次数。 execl 系统调用是 exec 函数族的一员。它和其他一些与之相似的命令一样是 execve（） 函数的前端。</p>
<p><strong>File copy</strong> 测试从一个文件向另外一个文件传输数据的速率。每次测试使用不同大小的缓冲区。这一针对文件 read、write、copy 操作的测试统计规定时间（默认是 10s）内的文件 read、write、copy 操作次数。</p>
<p><strong>Pipe Throughput</strong> 管道（pipe）是进程间交流的最简单方式，这里的 Pipe throughtput 指的是一秒钟内一个进程可以向一个管道写 512 字节数据然后再读回的次数。需要注意的是，pipe throughtput 在实际编程中没有对应的真实存在。</p>
<p><strong>Pipe-based Context Switching</strong> 这个测试两个进程（每秒钟）通过一个管道交换一个不断增长的整数的次数。这一点很向现实编程中的一些应用，这个测试程序首先创建一个子进程，再和这个子进程进行双向的管道传输。</p>
<p><strong>Process Creation</strong> 测试每秒钟一个进程可以创建子进程然后收回子进程的次数（子进程一定立即退出）。process creation 的关注点是新进程进程控制块（process control block）的创建和内存分配，即一针见血地关注内存带宽。一般说来，这个测试被用于对操作系统进程创建这一系统调用的不同实现的比较。</p>
<p><strong>System Call Overhead</strong> 测试进入和离开操作系统内核的代价，即一次系统调用的代价。它利用一个反复地调用 getpid 函数的小程序达到此目的。</p>
<p><strong>Shell Scripts</strong> 测试一秒钟内一个进程可以并发地开始一个 shell 脚本的 n 个拷贝的次数，n 一般取值 1，2，4，8。（我在测试时取 1， 8）。这个脚本对一个数据文件进行一系列的变形操作（transformation）。</p>
</blockquote>
<p>根据你的VPS性能不同，一般需要半个小时以上才会得到跑分结果，分数越高就表示性能越好。（点击放大）</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/04/aliyun-vps_02-1.gif" alt="VPS主机性能和速度得分结果"></p>
<p>这里再提供另外一个VPS速度与性能综合测试工具，用它可以一键测试VPS主机的基本配置、机房带宽、Ping值、IO性能、UnixBench跑分等，测试过程花费的时间比较长，需要耐心等待。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#普通模式（测试机器配置， IO ，带宽和全国 ping 值）：</span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/91yuntest/master/test_91yun.sh &amp;&amp; bash test_91yun.sh</span><br><span class="line">简单模式（测试机器配置， IO ，带宽和全国 ping 值）：</span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/91yuntest/master/test_91yun.sh &amp;&amp; bash test_91yun.sh s</span><br><span class="line">完全模式（测试机器配置， IO ，带宽、全国 ping 值、unixbench跑分）：</span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/91yuntest/master/test_91yun.sh &amp;&amp; bash test_91yun.sh a</span><br></pre></td></tr></table></figure>

<h2 id="三、VPS主机真伪检测"><a href="#三、VPS主机真伪检测" class="headerlink" title="三、VPS主机真伪检测"></a>三、VPS主机真伪检测</h2><p><strong>检测VPS真实内存。</strong>首先用命令查看真实的内存：free -m，接着切换至内存目录：cd &#x2F;dev&#x2F;shm，然后进行数据写入，标识 count&#x3D;100 为写入100M，你可以修改为主机商标注的内存上限一点点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd if=/dev/zero of=./memtest bs=1M count=100</span><br><span class="line">#注意完成后，执行删除：</span><br><span class="line">rm ./memtest</span><br></pre></td></tr></table></figure>

<p>一旦出现错误：dd: error writing ‘.&#x2F;memtest’: No space left on device，就说明内存大小低于我们测试的数值，你可以继续降低数值，直到得到真实的内存。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/04/vps-gongju_07.gif" alt="VPS主机性能和速度真实内存"></p>
<p><strong>检测VPS虚拟技术。</strong>命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/code/master/vm_check.sh &amp;&amp; bash vm_check.sh</span><br></pre></td></tr></table></figure>

<p>测试结果会显示是KVM、Xen还是OpenVZ。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/04/vps-gongju_08.gif" alt="VPS主机性能和速度虚拟技术"></p>
<p><strong>自建speedtest测试。</strong>这个适合VPS主机商，方便给客户测试从服务器到用户本地的下载速度。</p>
<blockquote>
<p>项目主页：<a href="https://github.com/adolfintel/speedtest">https://github.com/adolfintel/speedtest</a></p>
<p>修改版本：<a href="https://www.ucblog.net/wzfou/speedtest-lite.zip">https://www.ucblog.net/wzfou/speedtest-lite.zip</a></p>
</blockquote>
<p>将程序上传到服务器上，客户打开后点击就可以测试得到服务器的速度了。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/04/vps-gongju_06.gif" alt="VPS主机性能和速度自建测试点"></p>
<h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p><strong>UnixBench性能跑分受版本影响较大。</strong>UnixBench目前有不同的版本，而网上不少的版本也是经过人工修改过的，可能测试的项目不同导致的结果也会不同。大家在测试时记得找一个参照对比。</p>
<p><strong>IO读写速度受母机的影响比较大。</strong>有一些超售的服务器，由于用户众多，IO速度很慢，像这样的就要小心你的“邻居”了。使用一键脚本检测时，如果用在国内的VPS时，在网络测速中会出现卡死的情况。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title>一款带Web管理面板的内网穿透工具：lanproxy使用教程</title>
    <url>/2018/10/02/%E4%B8%80%E6%AC%BE%E5%B8%A6web%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BF%E7%9A%84%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7%EF%BC%9Alanproxy%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><strong>说明：</strong>博主今天找<code>Frp</code>管理面板的时候，无意间发现了<code>lanproxy</code>内网穿透工具，自带<code>Web</code>管理面板，让我们在服务端配置方便了很多，而且一个服务端可以支持多个客户端连接，看起来还不错，这里就分享下。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>lanproxy</code>是一个将局域网个人电脑、服务器代理到公网的内网穿透工具，目前仅支持<code>tcp</code>流量转发，可支持任何<code>tcp</code>上层协议，可用作访问内网网站、本地支付接口调试、<code>SSH</code>访问、远程桌面等等，而且带<code>Web</code>在线管理面板，添加端口配置十分简单。</p>
<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="https://www.jarods.org/wp-content/uploads/2018/10/lanproxy1.png" alt="请输入图片描述" title="请输入图片描述"> <img src="https://www.jarods.org/wp-content/uploads/2018/10/lanproxy2.png" alt="请输入图片描述" title="请输入图片描述"></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><strong>主页地址：</strong><a href="https://lanproxy.io2c.com/">https://lanproxy.io2c.com/</a> <strong>Github地址：</strong><a href="https://github.com/ffay/lanproxy">https://github.com/ffay/lanproxy</a> <strong>发布包下载：</strong><a href="https://seafile.io2c.com/d/3b1b44fee5f74992bb17/">https://seafile.io2c.com/d/3b1b44fee5f74992bb17/</a></p>
<h2 id="服务端安装"><a href="#服务端安装" class="headerlink" title="服务端安装"></a>服务端安装</h2><p>服务端需要安装在一个有公网<code>IP</code>的服务器上，系统为<code>Linux/Windows</code>均可。</p>
<p><strong>1、安装JAVA</strong> <code>java</code>版本至少为<code>1.7</code>，查看命令为<code>java -version</code>。</p>
<p><strong>2、Linux系统安装</strong> 首先下载发布包，服务端发布包下载地址：<a href="https://seafile.io2c.com/d/3b1b44fee5f74992bb17/?p=/lanproxy-server&mode=list">点击进入</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#下载最新发布包</span><br><span class="line">wget -O lanproxy-server-20171116.zip &#x27;https://seafile.io2c.com/d/3b1b44fee5f74992bb17/files/?p=/lanproxy-server/lanproxy-server-20171116.zip&amp;dl=1&#x27;</span><br><span class="line">#解压发布包</span><br><span class="line">unzip lanproxy-server-20171116.zip</span><br></pre></td></tr></table></figure>

<p>然后编辑配置文件<code>conf/config.properties</code>，参考如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#与在proxy-server配置后台创建客户端时填写的秘钥保持一致；</span><br><span class="line">client.key=</span><br><span class="line">ssl.enable=true</span><br><span class="line">ssl.jksPath=test.jks</span><br><span class="line">ssl.keyStorePassword=123456</span><br><span class="line"></span><br><span class="line">#这里填写实际的proxy-server地址；没有服务器默认即可，自己有服务器的更换为自己的proxy-server（IP）地址</span><br><span class="line">server.host=lp.thingsglobal.org</span><br><span class="line"></span><br><span class="line">#proxy-server ssl默认端口4993，默认普通端口4900</span><br><span class="line">#ssl.enable=true时这里填写ssl端口，ssl.enable=false时这里填写普通端口</span><br><span class="line">server.port=4993</span><br></pre></td></tr></table></figure>

<p>运行<code>lanproxy</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /root/proxy-server*/bin</span><br><span class="line">chmod +x startup.sh</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure>

<p>然后打开地址<code>http://ip:8090</code>，使用上面配置中配置的用户名密码登录，进入<code>Web</code>管理面板，且配置数据存放在<code>~/.lanproxy/config.json</code>文件中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#如果打不开Web界面，就需要开启防火墙，一般CentOS系统出现情况最多</span><br><span class="line">#Centos 6系统</span><br><span class="line">iptables -I INPUT -p tcp --dport 8090 -j ACCEPT</span><br><span class="line">service iptables save</span><br><span class="line">service iptables restart</span><br><span class="line"></span><br><span class="line">#CentOS 7系统</span><br><span class="line">firewall-cmd --zone=public --add-port=8090/tcp --permanent </span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p><strong>3、Windows系统安装</strong> 方法参考上面，只是启动的时候双击<code>bin</code>文件夹里的<code>startup.bat</code>即可运行。</p>
<h2 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h2><p>客户端一般安装在一个内网的<code>VPS</code>服务器或<code>Windows</code>电脑上使用。这里说下<code>JAVA</code>和非<code>JAVA</code>两个客户端的使用方法，客户端下载地址：<a href="https://seafile.io2c.com/d/3b1b44fee5f74992bb17/?p=/lanproxy-client&mode=list">点击进入</a>。</p>
<p><strong>1、配置服务端</strong> 首先我们通过<code>http://ip:8090</code>进入服务端<code>Web</code>管理界面，先添加客户端，名称随便填。 <img src="https://www.jarods.org/wp-content/uploads/2018/10/lanproxy3.png" alt="请输入图片描述" title="请输入图片描述"> 然后点击刚刚添加的客户端名称，再添加配置，设置公网端口，后端<code>IP:端口</code>。 <img src="https://www.jarods.org/wp-content/uploads/2018/10/lanproxy4.png" alt="请输入图片描述" title="请输入图片描述"> 截图的配置意思是将内网的<code>888</code>端口映射到服务器的<code>8080</code>端口，也就是访问<code>服务器ip:8080</code>等于访问<code>内网ip:888</code>。</p>
<p>这时候基本配置好了一个客户端节点，且该节点可以供多个客户端使用。</p>
<p><strong>2、JAVA客户端使用</strong> 本版本需要安装<code>java</code>，且版本依然至少为<code>1.7</code>，查看命令为<code>java -version</code>。</p>
<p>然后进入客户端下载地址，下载<a href="https://seafile.io2c.com/d/3b1b44fee5f74992bb17/files/?p=/lanproxy-client/lanproxy-java-client-20171116.zip&dl=1">lanproxy-java-client.zip</a>，再将文件解压到服务器或者<code>Windows</code>电脑上，编辑<code>conf/config.properties</code>配置文件，修改如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#与在proxy-server配置后台创建客户端时填写的秘钥保持一致；</span><br><span class="line">client.key=</span><br><span class="line">ssl.enable=true</span><br><span class="line">ssl.jksPath=test.jks</span><br><span class="line">ssl.keyStorePassword=123456</span><br><span class="line"></span><br><span class="line">#这里填写实际的proxy-server地址；没有服务器默认即可，自己有服务器的更换为自己的proxy-server（IP）地址</span><br><span class="line">server.host=lp.thingsglobal.org</span><br><span class="line"></span><br><span class="line">#proxy-server ssl默认端口4993，默认普通端口4900</span><br><span class="line">#ssl.enable=true时这里填写ssl端口，ssl.enable=false时这里填写普通端口</span><br><span class="line">server.port=4993</span><br></pre></td></tr></table></figure>

<p>最后运行<code>lanproxy</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#运行方法可参考服务端运行步骤</span><br><span class="line">linux（mac）系统：直接进入bin目录，然后运行startup.sh脚本</span><br><span class="line">windows系统：直接双击bin目录下的startup.bat</span><br></pre></td></tr></table></figure>

<p><strong>3、非JAVA客户端使用</strong> 该方法可以不用安装<code>java</code>即可在客户端运行<code>lanproxy</code>，首先下载对应版本的<a href="https://seafile.io2c.com/d/3b1b44fee5f74992bb17/?p=/lanproxy-client&mode=list">JAVA客户端</a>，然后解压出来，再运行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#以下需要使用的参数是服务端IP，服务端端口，客户端密匙</span><br><span class="line">1、普通端口连接</span><br><span class="line">#mac 64位</span><br><span class="line">nohup ./client_darwin_amd64 -s SERVER_IP -p SERVER_PORT -k CLIENT_KEY &amp;</span><br><span class="line">#linux 64位</span><br><span class="line">nohup ./client_linux_amd64 -s SERVER_IP -p SERVER_PORT -k CLIENT_KEY &amp;</span><br><span class="line">#windows 64 位</span><br><span class="line">./client_windows_amd64.exe -s SERVER_IP -p SERVER_PORT -k CLIENT_KEY</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里单独说下<code>Windows</code>电脑使用方法，首先按住<code>Win+R</code>，输入<code>cmd</code>进入命令窗口。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#如果你将客户端exe文件解压到了D盘的RATS文件夹，则使用命令进入RATS文件夹</span><br><span class="line">cd /d d:\RATS</span><br><span class="line">#如果你是SSL端口连接，先替换自己的IP，端口，CLIENT_KEY后运行，普通端口命令参考上面</span><br><span class="line">client_windows_amd64.exe -s SERVER_IP -p SERVER_SSL_PORT -k CLIENT_KEY -ssl true</span><br></pre></td></tr></table></figure>

<p>最后客户端运行后，服务端<code>Web</code>界面的配置状态显示在线即连接成功。 <img src="https://www.jarods.org/wp-content/uploads/2018/10/lanproxy5.png" alt="请输入图片描述" title="请输入图片描述"> 如果显示不在线检查下防火墙端口和配置是否正确什么的。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>lanproxy</tag>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>也许是史上最全的广告拦截资源整理</title>
    <url>/2021/11/06/%E4%B9%9F%E8%AE%B8%E6%98%AF%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E7%9A%84%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="ABP-兼容规则"><a href="#ABP-兼容规则" class="headerlink" title="ABP 兼容规则"></a>ABP 兼容规则</h2><h3 id="Easylist-China"><a href="#Easylist-China" class="headerlink" title="Easylist China"></a>Easylist China</h3><p>ABP官方维护的的适合国内使用的规则，更新频繁。</p>
<p><a href="https://easylist-downloads.adblockplus.org/easylistchina.txt">https://easylist-downloads.adblockplus.org/easylistchina.txt</a></p>
<h3 id="CJX’s-Annoyance-List"><a href="#CJX’s-Annoyance-List" class="headerlink" title="CJX’s Annoyance List"></a>CJX’s Annoyance List</h3><p>这是”EasyList China+EasyList” &amp; “EasyPrivacy”的补充。2015.2.4发布,过滤烦人的自我推广,并补充EasyPrivacy隐私规则.</p>
<p><a href="https://gitee.com/cjx82630/cjxlist/raw/master/cjx-annoyance.txt">https://gitee.com/cjx82630/cjxlist/raw/master/cjx-annoyance.txt</a></p>
<h3 id="ADgk"><a href="#ADgk" class="headerlink" title="ADgk"></a>ADgk</h3><p>一个专门为安卓版adguard写的规则,适合在手机浏览器中使用的拦截规则。</p>
<p><a href="https://gitee.com/banbendalao/adguard/raw/master/ADgk.txt">https://gitee.com/banbendalao/adguard/raw/master/ADgk.txt</a></p>
<h3 id="X浏览器内建规则-ad-rules-for-xbrowser"><a href="#X浏览器内建规则-ad-rules-for-xbrowser" class="headerlink" title="X浏览器内建规则 ad-rules-for-xbrowser"></a>X浏览器内建规则 ad-rules-for-xbrowser</h3><p>由X浏览器作者维护的内建拦截规则，不定期更新，主要适用于手机端网站。其中一些规则语法是X浏览器独有的，只能在X浏览器中使用。</p>
<p>github: <a href="https://github.com/examplecode/ad-rules-for-xbrowser">https://github.com/examplecode/ad-rules-for-xbrowser</a></p>
<p>gitee: <a href="https://gitee.com/examplecode/ad-rules-for-xbrowser">https://gitee.com/examplecode/ad-rules-for-xbrowser</a></p>
<h3 id="jiekouAD"><a href="#jiekouAD" class="headerlink" title="jiekouAD"></a>jiekouAD</h3><p>X浏览器QQ群管理员大萌主，维护的专门针对手机端盗版网站广告的拦截规则.</p>
<p><a href="https://gitee.com/damengzhudamengzhu/guanggaoguolv/blob/master/jiekouAD.txt">https://gitee.com/damengzhudamengzhu/guanggaoguolv/blob/master/jiekouAD.txt</a></p>
<h3 id="乘风广告过滤规则"><a href="#乘风广告过滤规则" class="headerlink" title="乘风广告过滤规则"></a>乘风广告过滤规则</h3><p>乘风广告拦截资源在国内的镜像源</p>
<p><a href="https://gitee.com/xinggsf/Adblock-Rule/raw/master/rule.txt">https://gitee.com/xinggsf/Adblock-Rule/raw/master/rule.txt</a></p>
<h3 id="乘风视频过滤规则"><a href="#乘风视频过滤规则" class="headerlink" title="乘风视频过滤规则"></a>乘风视频过滤规则</h3><p>乘风视频广告拦截资源在国内的镜像源</p>
<p><a href="https://gitee.com/xinggsf/Adblock-Rule/raw/master/mv.txt">https://gitee.com/xinggsf/Adblock-Rule/raw/master/mv.txt</a></p>
<h3 id="Anti-AD"><a href="#Anti-AD" class="headerlink" title="Anti-AD"></a>Anti-AD</h3><p>号称是目前中文区命中率最高的广告过滤列表，实现了精确的广告屏蔽和隐私保护</p>
<p>github: <a href="https://raw.githubusercontent.com/privacy-protection-tools/anti-AD/master/anti-ad-easylist.txt">https://raw.githubusercontent.com/privacy-protection-tools/anti-AD/master/anti-ad-easylist.txt</a></p>
<p>cdn加速 <a href="https://cdn.jsdelivr.net/gh/privacy-protection-tools/anti-AD@master/anti-ad-easylist.txt">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;privacy-protection-tools&#x2F;anti-AD@master&#x2F;anti-ad-easylist.txt</a></p>
<h3 id="广告终结者插件使用的拦截规则"><a href="#广告终结者插件使用的拦截规则" class="headerlink" title="广告终结者插件使用的拦截规则"></a>广告终结者插件使用的拦截规则</h3><p>广告终结者使用的拦截规则，基于ChinaList+EasyList修正维护</p>
<p><a href="http://sub.adtchrome.com/adt-chinalist-easylist.txt">http://sub.adtchrome.com/adt-chinalist-easylist.txt</a></p>
<h3 id="EasylistChina-EasylistLite-CJX’sAnnoyance"><a href="#EasylistChina-EasylistLite-CJX’sAnnoyance" class="headerlink" title="EasylistChina+EasylistLite+CJX’sAnnoyance"></a>EasylistChina+EasylistLite+CJX’sAnnoyance</h3><p>由 halflife 维护的拦截规则 ，合并了 EasylistChina、EasylistLite、CJX’sAnnoyance，以及补充的一些规则，每日更新。</p>
<p><a href="https://gitee.com/halflife/list/raw/master/ad.txt">https://gitee.com/halflife/list/raw/master/ad.txt</a></p>
<h2 id="主机列表"><a href="#主机列表" class="headerlink" title="主机列表"></a>主机列表</h2><h3 id="yhosts"><a href="#yhosts" class="headerlink" title="yhosts"></a>yhosts</h3><p>yhosts是国内比较知名的host维护列表，原作者目前已经停止维护,目前由VeleSila接手更新。</p>
<p><a href="https://raw.githubusercontent.com/VeleSila/yhosts/master/hosts.txt">https://raw.githubusercontent.com/VeleSila/yhosts/master/hosts.txt</a></p>
<h3 id="1024网站及澳门皇家赌场及恶意广告主机列表"><a href="#1024网站及澳门皇家赌场及恶意广告主机列表" class="headerlink" title="1024网站及澳门皇家赌场及恶意广告主机列表"></a>1024网站及澳门皇家赌场及恶意广告主机列表</h3><p>1024网站及澳门皇家赌场及恶意广告主机列表,你懂得</p>
<p><a href="https://raw.githubusercontent.com/Goooler/1024_hosts/master/hosts">https://raw.githubusercontent.com/Goooler/1024_hosts&#x2F;master&#x2F;hosts</a></p>
<h3 id="iOSAdblockList"><a href="#iOSAdblockList" class="headerlink" title="iOSAdblockList"></a>iOSAdblockList</h3><p>有海外维护针对移动网站的广告主机列表</p>
<p><a href="https://raw.githubusercontent.com/BlackJack8/iOSAdblockList/master/iPv4Hosts.txt">https://raw.githubusercontent.com/BlackJack8/iOSAdblockList/master/iPv4Hosts.txt</a></p>
<h3 id="StevenBlack"><a href="#StevenBlack" class="headerlink" title="StevenBlack"></a>StevenBlack</h3><p>国外维护比较知名的屏幕广告主机列表,整合和扩展多个精心设计的主机文件. github上获得15k+ Start 可以通过脚本生成你自己的hosts文件。</p>
<p><a href="https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts">https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts</a></p>
<h3 id="Hblock"><a href="#Hblock" class="headerlink" title="Hblock"></a>Hblock</h3><p>Hblock是一个脚本程序，他会自动提取来自很多规则源的恶意广告主机列表，比如 EasyList,AdGuard,uBlock ,disconnect.me 等数十个规则源，下面的链接是由该脚本生成的主机列表。</p>
<p><a href="https://hblock.molinero.dev/hosts">https://hblock.molinero.dev/hosts</a></p>
<h3 id="MVPS-host"><a href="#MVPS-host" class="headerlink" title="MVPS host"></a>MVPS host</h3><p>屏蔽美欧地区英文网站相关的广告</p>
<p><a href="http://winhelp2002.mvps.org/hosts.txt">http://winhelp2002.mvps.org/hosts.txt</a></p>
<h3 id="hmirror"><a href="#hmirror" class="headerlink" title="hmirror"></a>hmirror</h3><p>来自海外西班牙用户整理的各种主机拦截资源汇总，包括来自adguard,easylist,ublock的主机资源. 下面是主机资源汇总页面</p>
<p><a href="https://github.com/hectorm/hmirror/">https://github.com/hectorm/hmirror/</a></p>
<h2 id="其他广告拦截资源汇总"><a href="#其他广告拦截资源汇总" class="headerlink" title="其他广告拦截资源汇总"></a>其他广告拦截资源汇总</h2><h3 id="easylist-相关的资源汇总"><a href="#easylist-相关的资源汇总" class="headerlink" title="easylist 相关的资源汇总"></a>easylist 相关的资源汇总</h3><p>包括EasyList, EasyPrivacy, EasyList Cookie, Fanboy’s Social&#x2F;Annoyances&#x2F;Notifications Blocking List等</p>
<p><a href="https://github.com/easylist/easylist/">https://github.com/easylist/easylist/</a></p>
<h3 id="uBlockOrigin-相关资源汇总"><a href="#uBlockOrigin-相关资源汇总" class="headerlink" title="uBlockOrigin 相关资源汇总"></a>uBlockOrigin 相关资源汇总</h3><p><a href="https://github.com/uBlockOrigin/uAssets">https://github.com/uBlockOrigin/uAssets</a></p>
<h3 id="Adgurad-拦截规则资源分类汇总"><a href="#Adgurad-拦截规则资源分类汇总" class="headerlink" title="Adgurad 拦截规则资源分类汇总"></a>Adgurad 拦截规则资源分类汇总</h3><p><a href="https://kb.adguard.com/en/general/adguard-ad-filters">https://kb.adguard.com/en/general/adguard-ad-filters</a></p>
<h3 id="来自海外用户整理的规则源"><a href="#来自海外用户整理的规则源" class="headerlink" title="来自海外用户整理的规则源"></a>来自海外用户整理的规则源</h3><p>Annoyances <a href="https://filters.adtidy.org/extension/chromium/filters/14.txt">https://filters.adtidy.org/extension/chromium/filters/14.txt</a></p>
<p>Simplified Domain Names <a href="https://filters.adtidy.org/extension/chromium/filters/15.txt">https://filters.adtidy.org/extension/chromium/filters/15.txt</a></p>
<p>Fanboy’s Social Blocking List <a href="https://easylist.to/easylist/fanboy-social.txt">https://easylist.to/easylist/fanboy-social.txt</a></p>
<p>Fanboy’s Annoyances List <a href="https://easylist.to/easylist/fanboy-annoyance.txt">https://easylist.to/easylist/fanboy-annoyance.txt</a></p>
<p>Fanboy’s Enhanced Tracking List <a href="https://fanboy.co.nz/enhancedstats.txt">https://fanboy.co.nz/enhancedstats.txt</a></p>
<p>Adblock Warning Removal List <a href="https://easylist-downloads.adblockplus.org/antiadblockfilters.txt">https://easylist-downloads.adblockplus.org/antiadblockfilters.txt</a></p>
<p>Anti-Adblock Killer Reek <a href="https://raw.githubusercontent.com/reek/anti-adblock-killer/master/anti-adblock-killer-filters.txt">https://raw.githubusercontent.com/reek/anti-adblock-killer/master/anti-adblock-killer-filters.txt</a></p>
<p>Malware Domains <a href="https://easylist-downloads.adblockplus.org/malwaredomains_full.txt">https://easylist-downloads.adblockplus.org/malwaredomains_full.txt</a></p>
<p>Peter Lowe’s List <a href="http://pgl.yoyo.org/adservers/serverlist.php%3Fhostformat%3Dadblockplus%26mimetype%3Dplaintext">http://pgl.yoyo.org/adservers/serverlist.php%3Fhostformat%3Dadblockplus%26mimetype%3Dplaintext</a></p>
<p>Prebake <a href="https://raw.github.com/liamja/Prebake/master/obtrusive.txt">https://raw.github.com/liamja/Prebake/master/obtrusive.txt</a> Spam 404 <a href="https://raw.githubusercontent.com/Dawsey21/Lists/master/adblock-list.txt">https://raw.githubusercontent.com/Dawsey21/Lists/master/adblock-list.txt</a></p>
<p>BarbBlock <a href="https://raw.githubusercontent.com/paulgb/BarbBlock/master/blacklists/adblock-plus.txt">https://raw.githubusercontent.com/paulgb/BarbBlock/master/blacklists/adblock-plus.txt</a></p>
<p>NoCoin Adblock list <a href="https://raw.githubusercontent.com/hoshsadiq/adblock-nocoin-list/master/nocoin.txt">https://raw.githubusercontent.com/hoshsadiq/adblock-nocoin-list/master/nocoin.txt</a></p>
<h2 id="去广告效果检测网站"><a href="#去广告效果检测网站" class="headerlink" title="去广告效果检测网站"></a>去广告效果检测网站</h2><ul>
<li><a href="https://checkadblock.ru/">https://checkadblock.ru/</a></li>
<li><a href="https://blockads.fivefilters.org/">https://blockads.fivefilters.org/</a></li>
<li><a href="https://canyoublockit.com/extreme-test/">https://canyoublockit.com/extreme-test/</a></li>
<li><a href="https://ads-blocker.com/testing/">https://ads-blocker.com/testing/</a></li>
<li><a href="https://www.detectadblock.com/">https://www.detectadblock.com/</a></li>
<li><a href="http://simple-adblock.com/faq/testing-your-adblocker/">http://simple-adblock.com/faq/testing-your-adblocker/</a></li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://gitee.com/halflife/list/">https://gitee.com/halflife/list/</a></li>
<li><a href="https://github.com/otobtc/ADhosts">https://github.com/otobtc/ADhosts</a></li>
<li><a href="https://github.com/cjx82630/cjxlist">https://github.com/cjx82630/cjxlist</a></li>
<li><a href="https://github.com/hectorm/hblock">https://github.com/hectorm/hblock</a></li>
<li><a href="https://github.com/vokins/yhosts">https://github.com/vokins/yhosts</a></li>
<li><a href="https://github.com/StevenBlack/hosts">https://github.com/StevenBlack/hosts</a></li>
<li><a href="https://ublock.org/">https://ublock.org/</a></li>
<li><a href="https://github.com/uBlockOrigin/uAssets">https://github.com/uBlockOrigin/uAssets</a></li>
<li><a href="https://github.com/easylist/easylist/">https://github.com/easylist/easylist/</a></li>
<li><a href="https://github.com/privacy-protection-tools/anti-AD">https://github.com/privacy-protection-tools/anti-AD</a></li>
<li><a href="https://easylist.to/">https://easylist.to/</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux教程</category>
        <category>Mac</category>
        <category>Win</category>
      </categories>
      <tags>
        <tag>AD</tag>
        <tag>host</tag>
        <tag>广告拦截</tag>
      </tags>
  </entry>
  <entry>
    <title>二级proxy部署</title>
    <url>/2022/01/06/%E4%BA%8C%E7%BA%A7proxy%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>shadowsocks:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install -y python-pip python-m2crypto</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure>

<p>Debian &#x2F; Ubuntu:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install python-pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure>

<p>CentOS:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install python-setuptools &amp;&amp; easy_install pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure>

<p>启动：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssserver -p 3000 -k password -m aes-128-cfb -d start</span><br></pre></td></tr></table></figure>

<p>停止：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssserver -d stop</span><br></pre></td></tr></table></figure>

<p>二级COW架设源码:<a href="https://github.com/cyfdecyf/cow">https://github.com/cyfdecyf/cow</a></p>
<p>安装过程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -L git.io/cow  bash</span><br></pre></td></tr></table></figure>

<p>配置文件路径:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.cow/rc</span><br></pre></td></tr></table></figure>

<p>手工安装：</p>
<p><a href="http://dl.chenyufei.info/cow/0.9.6/cow-linux64-0.9.6.gz">http://dl.chenyufei.info/cow/0.9.6/cow-linux64-0.9.6.gz</a></p>
<p>配置文件：</p>
<p><a href="https://raw.github.com/cyfdecyf/cow/0.9.6/doc/sample-config/rc">https://raw.github.com/cyfdecyf/cow/0.9.6/doc/sample-config/rc</a> &#x2F;root&#x2F;.cow&#x2F;rc</p>
<h1 id="二级proxy部署-第二篇"><a href="#二级proxy部署-第二篇" class="headerlink" title="二级proxy部署 第二篇"></a>二级proxy部署 第二篇</h1><p>上面写的是shadowsocks+cow实现二级proxy，接下来用一种简单的方式来实现二级proxy：</p>
<p>首先，一级proxy开启ssh服务。</p>
<p>二级proxy上用SSH端口转发：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -N -f -D 0.0.0.0:8888 username@ssh.malu.me</span><br></pre></td></tr></table></figure>

<p>输入密码，这段命令意思是连接远程主机ssh.malu.me,然后在本地0.0.0.0地址、端口8888上开启socket5监听。</p>
<p>这样只要访问二级proxy上的socket5代理就能穿过两层代理了。</p>
<h1 id="二级proxy部署-自动脚本"><a href="#二级proxy部署-自动脚本" class="headerlink" title="二级proxy部署 自动脚本"></a>二级proxy部署 自动脚本</h1><p>相关参数根据实际修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/expect -f</span></span><br><span class="line">set timeout 30</span><br><span class="line">set host ssh.malu.me</span><br><span class="line">set name root</span><br><span class="line">set passwd userpasswd</span><br><span class="line">set port 22</span><br><span class="line">set lisenport 8888</span><br><span class="line">spawn sudo /etc/init.d/ssh start</span><br><span class="line">expect &quot;*#&quot;</span><br><span class="line">spawn killall ssh</span><br><span class="line">expect &quot;*#&quot;</span><br><span class="line">spawn ssh -NfR 1234:localhost:2222 $host -l $name -p $port</span><br><span class="line">expect &#123;</span><br><span class="line">&quot;yes/no&quot; &#123; send &quot;yes\r&quot;; exp_continue &#125;</span><br><span class="line">&quot;password:&quot; &#123; sleep 1;send &quot;$passwd\r&quot; &#125;</span><br><span class="line">&#125;</span><br><span class="line">expect &quot;*#&quot;</span><br><span class="line">spawn ssh $host -l $name -p $port</span><br><span class="line">expect &#123;</span><br><span class="line">&quot;yes/no&quot; &#123; send &quot;yes\r&quot;; exp_continue &#125;</span><br><span class="line">&quot;password:&quot; &#123; sleep 1;send &quot;$passwd\r&quot; &#125;</span><br><span class="line">&#125;</span><br><span class="line">expect &quot;]$&quot;</span><br><span class="line">sleep 1</span><br><span class="line">send &quot;ssh -N -f -D 0.0.0.0:$lisenport root@localhost -p1234\r&quot;</span><br><span class="line">expect &#123;</span><br><span class="line">&quot;yes/no&quot; &#123; send &quot;yes\r&quot;; exp_continue &#125;</span><br><span class="line">&quot;password:&quot; &#123; sleep 1;send &quot;$passwd\r&quot; &#125;</span><br><span class="line">&#125;</span><br><span class="line">expect  &quot;]$&quot;</span><br><span class="line">sleep 1</span><br><span class="line">send &quot;exit\r&quot; </span><br><span class="line">expect eof</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<h1 id="二级proxy部署-直连windows"><a href="#二级proxy部署-直连windows" class="headerlink" title="二级proxy部署 - 直连windows"></a>二级proxy部署 - 直连windows</h1><p>windows下安装openssh</p>
<p>下载地址：<a href="https://github.com/PowerShell/Win32-OpenSSH/releases">https://github.com/PowerShell/Win32-OpenSSH/releases</a></p>
<p>1.解压OpenSSH-Win64.zip到C:\Program Files\OpenSSH目录下，在DOS窗口进入OpenSSH目录</p>
<p>2.安装SSH host keys</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\ssh-keygen.exe -A</span><br></pre></td></tr></table></figure>

<p>3.打开防火墙22端口</p>
<p>4.安装SSHD服务并在服务窗口找到名为“SSHD”的服务，右键将其启动，并设置为随操作系统自动启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\sshd.exe install</span><br></pre></td></tr></table></figure>

<p>也可以直接启动：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\sshd.exe</span><br></pre></td></tr></table></figure>

<p>5.查看启动端口,如果需要监听外网，可以修改当前目录sshd_config文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ant</span><br></pre></td></tr></table></figure>

<p>sshd_config:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ListenAddress 0.0.0.0</span><br></pre></td></tr></table></figure>

<h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><p>根据二级proxy的原理，实质上是在两台服务器之间实现端口转发。</p>
<p>那么对应内网的服务器，只要能访问外网，那么利用SSH隧道端口映射就能实现内网穿透。</p>
<p>首先需要一台能远程登录的外网服务器。</p>
<p>然后内网服务器上执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -gCNfR 80:localhost:8080 ssh.malu.me -l root -p 22</span><br></pre></td></tr></table></figure>

<p>g：在-L&#x2F;-R&#x2F;-D参数中，允许远程主机连接到建立的转发的端口，如果不加这个参数，只允许本地主机建立连接。</p>
<p>（-g参数如果不生效，其实这是ssh默认的安全策略所致，需要在服务端&#x2F;etc&#x2F;ssh&#x2F;sshd_config 添加 gatewayports yes 重启sshd即可）</p>
<p>C：压缩数据传输。</p>
<p>N：不执行脚本或命令，通常与-f连用。</p>
<p>f：后台认证用户&#x2F;密码，通常和-N连用，不用登录到远程主机。</p>
<p>-R 本地端口:目标IP:目标端口</p>
<p>将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口. 工作原理是这样的, 远程主机上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接, 该连接就经过安全通道转向出去, 同时本地主机和 host 的 hostport 端口建立连接. 可以在配置文件中指定端口的转发. 只有用 root 登录远程主机才能转发特权端口. IPv6 地址用另一种格式说明: port&#x2F;host&#x2F;hostport</p>
<p>-L 本地端口:目标IP:目标端口</p>
<p>将本地机(客户机)的某个端口转发到远端指定机器的指定端口. 工作原理是这样的, 本地机器上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接, 该连接就经过安全通道转发出去, 同时远程主机和 host 的 hostport 端口建立连接. 可以在配置文件中指定端口的转发. 只有 root 才能转发特权端口. IPv6 地址用另一种格式说明: port&#x2F;host&#x2F;hostport</p>
<p>-D IP:port</p>
<p>指定一个本地机器 “动态的’’ 应用程序端口转发. 工作原理是这样的, 本地机器上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接, 该连接就经过安全通道转发出去, 根据应用程序的协议可以判断出远程主机将和哪里连接. 目前支持 SOCKS4 协议, 将充当 SOCKS4 服务器. 只有 root 才能转发特权端口. 可以在配置文件中指定动态端口的转发.</p>
<h2 id="serveo"><a href="#serveo" class="headerlink" title="serveo"></a>serveo</h2><p>官网：<a href="https://serveo.net/">https://serveo.net</a></p>
<p>eg:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -R testname:80:localhost:80 serveo.net -o ServerAliveInterval=60</span><br></pre></td></tr></table></figure>

<p>文档：<a href="https://www.jianshu.com/p/d0b3991a9ce1">https://www.jianshu.com/p/d0b3991a9ce1</a></p>
<h2 id="zerotier"><a href="#zerotier" class="headerlink" title="zerotier"></a>zerotier</h2><p>官网：<a href="https://www.zerotier.com/">https://www.zerotier.com</a></p>
<p>文档：<a href="https://www.zerotier.com/manual">https://www.zerotier.com/manual</a></p>
<p>国内服务：<a href="https://www.kancloud.cn/baoji/_enku/tx/_ip/_01/936021">https://www.kancloud.cn/baoji\_enku/tx\_ip\_01/936021</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动</span><br><span class="line">zerotier-one -d</span><br><span class="line"></span><br><span class="line"># 获取地址和服务状态</span><br><span class="line">zerotier-cli status</span><br><span class="line"></span><br><span class="line"># 加入、离开、列出网络</span><br><span class="line">zerotier-cli join &lt;Network ID&gt;</span><br><span class="line">zerotier-cli leave &lt;Network ID&gt;</span><br><span class="line">zerotier-cli listnetworks</span><br><span class="line"></span><br><span class="line"># 重启</span><br><span class="line">systemctl restart zerotier-one</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="报错：Cannot-connect-to-Zerotier-service"><a href="#报错：Cannot-connect-to-Zerotier-service" class="headerlink" title="报错：Cannot connect to Zerotier service"></a>报错：Cannot connect to Zerotier service</h3><p>查看9993端口是否被占用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ab</span><br></pre></td></tr></table></figure>

<h1 id="二级proxy部署-轻量级SSH安装"><a href="#二级proxy部署-轻量级SSH安装" class="headerlink" title="二级proxy部署 - 轻量级SSH安装"></a>二级proxy部署 - 轻量级SSH安装</h1><p>下载地址：<a href="https://matt.ucc.asn.au/dropbear/">https://matt.ucc.asn.au/dropbear/</a></p>
<p>dropbear的编译安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ./configure --prefix=/usr/local/dropbear --sysconfdir=/etc/dropbear --disable-pam </span><br><span class="line"># make PROGRAMS=&quot;dropbear dbclient dropbearkey dropbearconvert scp&quot;</span><br><span class="line"># make PROGRAMS=&quot;dropbear dbclient dropbearkey dropbearconvert scp&quot; install</span><br></pre></td></tr></table></figure>

<p>加入环境变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=/usr/local/dropbear/bin:/usr/local/dropbear/sbin:$PATH</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>二级proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 archinstall 安装 Arch Linux 和 KDE 桌面环境</title>
    <url>/2022/09/19/%E4%BD%BF%E7%94%A8-archinstall-%E5%AE%89%E8%A3%85-arch-linux-%E5%92%8C-kde-%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>本文将指导使用 archinstall 安装 Arch Linux 和 KDE 桌面环境。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，<a href="https://wiki.archlinux.org/title/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">安装 Arch Linux</a> 是一件非常复杂并痛苦的事情，您需要一定的 Linux 基础，然后使用命令行进行硬盘分区，安装自己需要的软件，Arch Linux 官方也并未提供 GUI 安装程序，所以很多想尝试 Arch Linux 的用户都会被劝退在安装这一步骤上。</p>
<p><a href="https://github.com/archlinux/archinstall">archinstall</a> 是一个 Python 写的 Arch Linux <a href="https://wiki.archlinux.org/title/Archinstall">安装向导程序</a>，我们可以很方便地使用 <code>archinstall</code> 安装 Arch Linux。</p>
<p>Arch Linux 发布 2022.05.01 的 iso 后，已经默认集成了 <code>archinstall</code>，于是您可以参考本教程无痛安装 Arch Linux，为了方便期间，本教程的安装是基于 <code>VMware Workstation</code>，理论上和你本地挂载 ISO 安装并无区别。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先，获取安装映像，您可以在<a href="https://archlinux.org/download/">下载页面</a>下载最新的 iso 镜像文件，您可以选择速度最快的 mirror 进行下载，这里推荐两个下载链接</p>
<p>国外用户，使用官方的镜像：</p>
<p><a href="https://mirror.pkgbuild.com/iso/latest/archlinux-x86_64.iso">https://mirror.pkgbuild.com/iso/latest/archlinux-x86_64.iso</a></p>
<p>国内用户，使用清华大学的镜像：</p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/latest/archlinux-x86_64.iso">https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/latest/archlinux-x86_64.iso</a></p>
<p>下载后您需要准备个 U 盘或移动硬盘，然后使用一些工具，比如 <a href="https://rufus.ie/zh/">Rufus</a>，这里不再阐述，其他方法请参考<a href="https://wiki.archlinux.org/title/USB_flash_installation_medium_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">这里</a>。</p>
<p><em>另外，您需要确认主板 BIOS 里没有奇奇怪怪的设置，比如某些针对 Windows 系统的设置，比如快速启动、CSM 安全启动、TPM 模块等都设置需要自己调整，否则默认配置可能会导致安装完 Arch Linux 后无法进入系统引导。</em></p>
<h2 id="安装-Arch-Linux-系统"><a href="#安装-Arch-Linux-系统" class="headerlink" title="安装 Arch Linux 系统"></a>安装 Arch Linux 系统</h2><p>启动进入引导后，我们会看到熟悉的 Arch Linux 界面：</p>
<p><img src="/2022/09/1-1.png"></p>
<p>默认进入后即可看到 Live CD 已经正常工作：</p>
<p><img src="/2022/09/2-1.png"></p>
<p>我们可以运行 <code>installation_guide</code> 命令查看安装文档，当然都是英文的，对英语不好的朋友也可以直接参考<a href="https://wiki.archlinux.org/title/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">中文的文档说明</a>：</p>
<p><img src="/2022/09/3-1.png"></p>
<p><img src="/2022/09/4-1.png"></p>
<p>按 <code>Q</code> 退出，我们可以直接运行 <code>archinstall</code> 进行图形化安装向导：</p>
<p><img src="/2022/09/5-1.png"></p>
<p>然后我们会看到 <code>archinstall</code> 的向导界面：</p>
<p><img src="/2022/09/6-1.png"></p>
<p>目前我们能看到的选项有：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Select Archinstall language</span><br><span class="line">Select keyboard layout</span><br><span class="line">Select mirror region</span><br><span class="line">Select harddrives</span><br><span class="line">Select bootloader</span><br><span class="line">Use swap</span><br><span class="line">Specify hostname</span><br><span class="line">Set root password</span><br><span class="line">Specify superuser account</span><br><span class="line">Specify user account</span><br><span class="line">Specify profile</span><br><span class="line">Select audio</span><br><span class="line">Select kernels</span><br><span class="line">Additional packages to install</span><br><span class="line">Configure network</span><br><span class="line">Select timezone</span><br><span class="line">Set automatic time <span class="built_in">sync</span> (NTP)</span><br><span class="line">Additional repositories to <span class="built_in">enable</span></span><br></pre></td></tr></table></figure>

<p>然后我们就一步一步来安装：</p>
<p><code>Select Archinstall language</code> 这里可以选择 <code>archinstall</code> 的界面语言，很可惜，截止本文发布，并没有中文。</p>
<p><code>Select keyboard layout</code> 选择键盘布局，默认情况你的键盘布局应该都是 <code>us</code>，除非你是德国等国家的用户，那么请自行选择。</p>
<p><code>Select mirror region</code> 可以选择最合适的镜像，建议选择和您当前网络一致的国家或地区：</p>
<p><img src="/2022/09/7-1.png"></p>
<p>记得按空格选择，然后按回车继续。</p>
<p><code>Select harddrives</code> 可以选择安装的硬盘，请自行选择需要安装的硬盘，切记看清楚硬盘大小，不要装错了硬盘最后拍大腿：</p>
<p><img src="/2022/09/8-1.png"></p>
<p>选择硬盘后会让您选择如何分区，如果没有特殊需求，直接选择 <code>Wipe all selected drives and use a best-effort default partition layout</code>，这样会把你的硬盘全部格式化，切记备份重要数据，不然安装了以后拍大腿：</p>
<p><img src="/2022/09/9-1.png"></p>
<p>然后会询问您硬盘分区格式，可选 <code>btrfs</code>，<code>ext4</code>，<code>f2fs</code> 或 <code>xfs</code>，如果没有特殊需求，可以选最常用的 <code>ext4</code>：</p>
<p><img src="/2022/09/10-1.png"></p>
<p>然后会询问您是否要对 <code>/home</code> 目录单独分区，这里主要存放用户的数据，默认建议单独分区，实际操作中会分配大概 80% 的硬盘空间给 <code>/home</code> 目录，你也可以一股脑都分给 <code>/</code>，请自行决定：</p>
<p><img src="/2022/09/11-1.png"></p>
<p>完成后会多出一个 <code>Set encryption password</code> 选项，如果您需要对硬盘加密，可以选择，如果没需要可以跳过。</p>
<p><img src="/2022/09/12-1.png"></p>
<p>然后我们直接跳过 <code>Select bootloader</code> 和 <code>Use swap</code>，因为他已经自动给您设置好了，然后如果您喜欢的话，可以给您的机器设置一个 <code>hostname</code> 和 <code>root</code> 密码，如果没有特殊需求，也可以跳过 <code>Specify hostname</code> 和 <code>Set root password</code>，我们直接来到 <code>Specify superuser account</code>，设置一个拥有 <code>sudo</code> 权限的超级用户，这个用户是日常登录和操作使用，请务牢记用户名和密码：</p>
<p><img src="/2022/09/13-1.png"></p>
<p>输入用户名：</p>
<p><img src="/2022/09/14-1.png"></p>
<p>输入密码，Linux 终端下输入密码是不显示的，不要以为自己产生幻觉输错了：</p>
<p><img src="/2022/09/15-1.png"></p>
<p>可能会提示您的密码太弱，自行斟酌是否需要修改：</p>
<p><img src="/2022/09/16-1.png"></p>
<p>然后再输入一次密码进行验证：</p>
<p><img src="/2022/09/17-1.png"></p>
<p>成功后选择 <code>Confirm and exit</code> 即可：</p>
<p><img src="/2022/09/18-1.png"></p>
<p>然后我们也可以跳过其他选项，直接来到 <code>Configure network</code>：</p>
<p><img src="/2022/09/19-1.png"></p>
<p>因为我们希望安装 KDE 桌面环境，所以选择 <code>Use NetworkManager</code>：</p>
<p><img src="/2022/09/20-1.png"></p>
<p>如果是服务器环境，可以选择 <code>Manual configuration</code> 手工配置网络。</p>
<p>然后我们选择时区，进入 <code>Select timezone</code>：</p>
<p><img src="/2022/09/21-1.png"></p>
<p>按照您本地的时区来选择，可以使用 <code>/</code> 然后输入前几个字符快速搜索，比如 <code>/shanghai</code>：</p>
<p><img src="/2022/09/22-1.png"></p>
<p>一切准备就绪，我们可以选择 <code>Save configuration</code> 来保存配置，也可以直接选 <code>Install</code> 进行安装：</p>
<p><img src="/2022/09/23-1.png"></p>
<p><img src="/2022/09/24-1.png"></p>
<p><img src="/2022/09/25-1.png"></p>
<p>系统会提示 <code>Would you like to chroot into the newly created installation and perform post-installation configuration?</code>，这里我们直接选择 <code>Yes</code>，然后进入安装：</p>
<p><img src="/2022/09/26-1.png"></p>
<p>霹雳哗啦安装完毕后，我们可以安装一些常用的软件，比如 <code>KDE</code> 桌面环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S plasma-meta plasma packagekit-qt5</span><br></pre></td></tr></table></figure>

<p>没有特殊需求都选择默认一路回车即可：</p>
<p><img src="/2022/09/27-1.png"></p>
<p><img src="/2022/09/28-1.png"></p>
<p>安装 KDE 比较慢，因为软件包较大，请耐心等待安装完成。</p>
<p>安装完成后开启 <code>sddm</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> sddm</span><br></pre></td></tr></table></figure>

<p>然后我们使用 <code>exit</code> 命令退出并使用 <code>reboot</code> 命令重启：</p>
<p><img src="/2022/09/29-1.png"></p>
<h2 id="安装并配置-Arch-Linux-的软件"><a href="#安装并配置-Arch-Linux-的软件" class="headerlink" title="安装并配置 Arch Linux 的软件"></a>安装并配置 Arch Linux 的软件</h2><p>重启后我们就可以看到熟悉的登录界面啦：</p>
<p><img src="/2022/09/30-1.png"></p>
<p>登录后会发现除了个桌面啥东西都没有，此时我们可以按键盘 <code>CTRL</code> + <code>ALT</code> + <code>F2</code> 进入 <code>tty2</code> 终端：</p>
<p><img src="/2022/09/31-1.png"></p>
<p>输入用户名和密码登录：</p>
<p><img src="/2022/09/32-1.png"></p>
<p>然后开始安装一些常用软件，比如 KDE 的终端软件 Konsole 和文本编辑器 Kate：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S konsole kate</span><br></pre></td></tr></table></figure>

<p><img src="/2022/09/33-1.png"></p>
<p>安装完成后，我们可以按键盘 <code>CTRL</code> + <code>ALT</code> + <code>F1</code> 重新进入 KDE 桌面环境，然后按 <code>Win</code> 键搜索 <code>konsole</code> 进入终端：</p>
<p><img src="/2022/09/34-1.png"></p>
<p>这里推荐一些常规和必要的软件包：</p>
<p>如果您是 Intel 的 CPU：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S intel-ucode</span><br></pre></td></tr></table></figure>

<p>如果您是 AMD 的 CPU：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S amd-ucode</span><br></pre></td></tr></table></figure>

<p>如果您是 AMD 的 GPU：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S xf86-video-amdgpu mesa</span><br></pre></td></tr></table></figure>

<p>如果您是 NVIDIA 的 GPU：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S nvidia mesa</span><br></pre></td></tr></table></figure>

<p>如果您是 Intel 的 GPU：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S xf86-video-intel mesa</span><br></pre></td></tr></table></figure>

<p>关于 Arch Linux 下 GPU 配置可以参考<a href="https://wiki.archlinux.org/title/Xorg#Driver_installation">这里</a>和<a href="https://wiki.archlinux.org/title/AMDGPU">这里</a>。</p>
<p>然后安装一些常见的工具包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S inetutils iproute2 iputils procps-ng psmisc sysfsutils <span class="built_in">which</span> wget nano vim sudo unzip mtr traceroute dnsutils lsb-release ca-certificates bash-completion logrotate openssh less rsync</span><br></pre></td></tr></table></figure>

<p>部分软件是需要自行开启并设置开机自启动的，比如 <code>OpenSSH</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now sshd</span><br></pre></td></tr></table></figure>

<p>然后安装个浏览器，Linux 下还是推荐用 <code>Firefox</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S firefox</span><br></pre></td></tr></table></figure>

<p>安装完成后可以然后按 <code>Win</code> 键搜索 <code>firefox</code> 并右键图标使用 <code>Add to Desktop</code> 创建桌面快捷方式：</p>
<p><img src="/2022/09/35-1.png"></p>
<p>此时桌面上就有 <code>Firefox</code> 的图标啦：</p>
<p><img src="/2022/09/36-1.png"></p>
<h2 id="解决中文显示乱码问题"><a href="#解决中文显示乱码问题" class="headerlink" title="解决中文显示乱码问题"></a>解决中文显示乱码问题</h2><p>我们会遇到一个问题，此时打开中文网页都是乱码：</p>
<p><img src="/2022/09/37-1.png"></p>
<p>而且网页里包含的 Emoji 🤣也是一个个方框哦，所以我们参考<a href="https://wiki.archlinux.org/title/Localization_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)/Simplified_Chinese_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">这里</a>和<a href="https://wiki.archlinux.org/title/fonts#Emoji_and_symbols">这里</a>，首先安装字体包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S noto-fonts noto-fonts-cjk noto-fonts-emoji</span><br></pre></td></tr></table></figure>

<p>然后使用 <code>Konsole</code> 创建一个 <code>.config/fontconfig/fonts.conf</code> 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">mkdir</span> -p .config/fontconfig</span><br><span class="line">vim .config/fontconfig/fonts.conf</span><br></pre></td></tr></table></figure>

<p>复制以下内容，使用 <code>vim</code> 编辑文件，按 <code>i</code> 开始编辑，按 <code>Ctrl + Shift + V</code> 或 <code>Shift + Insert</code> 或直接在 Konsole 里右键 <code>Paste</code>，然后粘贴以下内容后，完成后按 <code>ESC</code> 键，然后输入 <code>:wq</code> 完成编辑：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;UTF-8&#x27;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">fontconfig</span> <span class="keyword">SYSTEM</span> <span class="string">&#x27;urn:fontconfig:fonts.dtd&#x27;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- $&#123;XDG_CONFIG_HOME&#125;/fontconfig/fonts.conf</span></span><br><span class="line"><span class="comment">        - vim:ft=xml:fenc=utf-8:noet:ts=3:sw=3:</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fontconfig</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">alias</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">family</span>&gt;</span>serif<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">prefer</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Serif<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Color Emoji<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans CJK SC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans CJK TC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans CJK JP<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">alias</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">family</span>&gt;</span>sans-serif<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">prefer</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Color Emoji<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans CJK SC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans CJK TC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans CJK JP<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">alias</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">family</span>&gt;</span>monospace<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">prefer</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans Mono<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Color Emoji<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans Mono CJK SC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans Mono CJK TC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans Mono CJK JP<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">match</span> <span class="attr">target</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">edit</span> <span class="attr">mode</span>=<span class="string">&quot;assign&quot;</span> <span class="attr">name</span>=<span class="string">&quot;antialias&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bool</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">edit</span> <span class="attr">mode</span>=<span class="string">&quot;assign&quot;</span> <span class="attr">name</span>=<span class="string">&quot;autohint&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bool</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">edit</span> <span class="attr">mode</span>=<span class="string">&quot;assign&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dpi&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">double</span>&gt;</span>96<span class="tag">&lt;/<span class="name">double</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">edit</span> <span class="attr">mode</span>=<span class="string">&quot;assign&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hinting&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bool</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">edit</span> <span class="attr">mode</span>=<span class="string">&quot;assign&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hintstyle&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">const</span>&gt;</span>hintslight<span class="tag">&lt;/<span class="name">const</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">edit</span> <span class="attr">mode</span>=<span class="string">&quot;assign&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lcdfilter&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">const</span>&gt;</span>lcdlight<span class="tag">&lt;/<span class="name">const</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">edit</span> <span class="attr">mode</span>=<span class="string">&quot;assign&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rgba&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">const</span>&gt;</span>rgb<span class="tag">&lt;/<span class="name">const</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">edit</span> <span class="attr">mode</span>=<span class="string">&quot;assign&quot;</span> <span class="attr">name</span>=<span class="string">&quot;size&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">int</span>&gt;</span>15<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dir</span>&gt;</span>~/.fonts<span class="tag">&lt;/<span class="name">dir</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fontconfig</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后清理字体缓存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fc-cache -fv</span><br></pre></td></tr></table></figure>

<p>清理完事后会提示 <code>fc-cache: succeeded</code>，然后我们使用 <code>fc-match -s grep &#39;Noto Sans CJK&#39;</code> 命令查看中文字体是否生效：</p>
<p><img src="/2022/09/38-1.png"></p>
<p>然后重新登录用户，或者直接 <code>sudo reboot</code> 重启电脑，再次打开 <code>Firefox</code> 即可看到中文字体完美显示：</p>
<p><img src="/2022/09/39-1.png"></p>
<h2 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h2><p>参考<a href="https://wiki.archlinux.org/title/Fcitx5_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">这里</a>，我们直接安装 <code>fcitx5</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S fcitx5-im fcitx5-qt fcitx5-gtk fcitx5-chinese-addons fcitx5-pinyin-zhwiki</span><br></pre></td></tr></table></figure>

<p>然后修改全局变量环境文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/environment</span><br></pre></td></tr></table></figure>

<p>加入以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GTK_IM_MODULE=fcitx</span><br><span class="line">QT_IM_MODULE=fcitx</span><br><span class="line">XMODIFIERS=@im=fcitx</span><br><span class="line">INPUT_METHOD=fcitx</span><br><span class="line">SDL_IM_MODULE=fcitx</span><br><span class="line">GLFW_IM_MODULE=ibus</span><br></pre></td></tr></table></figure>

<p>重启后即可生效，在 KDE 里按 <code>Win</code> 键搜索 <code>Input Method</code> 后进入 <code>Input Method</code> 即可配置输入法：</p>
<p><img src="/2022/09/40-1.png"></p>
<p>选择 <code>Input Method</code>，然后点击 <code>Add Input Method...</code>：</p>
<p><img src="/2022/09/41-1.png"></p>
<p>搜索 <code>pinyin</code> 然后添加<code>简体中文</code>下的 <code>Pinyin</code>：</p>
<p><img src="/2022/09/42-1.png"></p>
<p>点击 <code>Add</code> 后记得点击 <code>Apply</code> 生效，然后我们可以看到任务栏右下角的键盘图标，右键即可看到 <code>Pinyin</code> 输入法，可以点击 <code>restart</code> 生效任何修改的配置：</p>
<p><img src="/2022/09/43-1.png"></p>
<p>第一次打开拼音输入法会提示你是否需要开启云拼音预测，可以按照自己的喜好选择：</p>
<p><img src="/2022/09/44-1.png"></p>
<p>然后我们随便打开一个文本编辑器，按 <code>Ctrl</code> + <code>空格</code> 即可开启拼音输入法：</p>
<p><img src="/2022/09/45-1.png"></p>
<h2 id="配置第三方源"><a href="#配置第三方源" class="headerlink" title="配置第三方源"></a>配置第三方源</h2><p>Arch Linux 官方提供了一些第三方源，这里我们推荐 <a href="https://aur.archlinux.org/">AUR</a> 和 <a href="https://www.archlinuxcn.org/">Archlinuxcn</a></p>
<p>安装 AUR 的包管理助手 <a href="https://github.com/Jguer/yay">yay</a> ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S base-devel git</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">mkdir</span> -p .<span class="built_in">local</span></span><br><span class="line"><span class="built_in">mkdir</span> -p .<span class="built_in">local</span>/opt</span><br><span class="line"><span class="built_in">cd</span> .<span class="built_in">local</span>/opt</span><br><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/yay.git</span><br><span class="line"><span class="built_in">cd</span> yay</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure>

<p><em>国内网络的用户可能无法流畅安装编译 yay，需要一些魔法操作，请自行解决。</em></p>
<p>也可以直接安装打包好的二进制包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S git base-devel</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">mkdir</span> -p .<span class="built_in">local</span></span><br><span class="line"><span class="built_in">mkdir</span> -p .<span class="built_in">local</span>/opt</span><br><span class="line"><span class="built_in">cd</span> .<span class="built_in">local</span>/opt</span><br><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/yay-bin.git</span><br><span class="line"><span class="built_in">cd</span> yay-bin</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure>

<p>然后即可使用 <code>yay -S</code> 来安装 <code>AUR</code> 中的软件，比如安装 <code>Microsoft Edge</code> 浏览器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S microsoft-edge-stable-bin</span><br></pre></td></tr></table></figure>

<p>没有特殊需求的话一路回车即可安装。</p>
<p>也可以使用 <code>yay -Syu</code> 直接更新系统和 AUR 仓库里的软件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -Syu</span><br></pre></td></tr></table></figure>

<p>添加 <code>Archlinuxcn</code> 源：</p>
<p>修改 <code>/etc/pacman.conf</code> 文件，加入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://repo.archlinuxcn.org/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure>

<p>国内网络用户可以使用清华大学的源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure>

<p>然后更新系统并安装 <code>archlinuxcn-keyring</code> 包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -Syu</span><br><span class="line">sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure>

<p>如果遇到类似这样的错误提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg: key B3D53065DB03D61E was created 10631 seconds in the future (time warp or clock problem)</span><br><span class="line">==&gt; Appending keys from archlinuxcn.gpg...</span><br><span class="line">gpg: key B3D53065DB03D61E was created 10631 seconds in the future (time warp or clock problem)</span><br><span class="line">gpg: key B3D53065DB03D61E was created 10631 seconds in the future (time warp or clock problem)</span><br><span class="line">gpg: key B3D53065DB03D61E was created 10631 seconds in the future (time warp or clock problem)</span><br><span class="line">gpg: key B3D53065DB03D61E was created 10631 seconds in the future (time warp or clock problem)</span><br><span class="line">gpg: key B3D53065DB03D61E was created 10631 seconds in the future (time warp or clock problem)</span><br><span class="line">gpg: key B3D53065DB03D61E was created 10630 seconds in the future (time warp or clock problem)</span><br><span class="line">gpg: key B3D53065DB03D61E was created 10630 seconds in the future (time warp or clock problem)</span><br><span class="line">gpg: key B3D53065DB03D61E was created 10630 seconds in the future (time warp or clock problem)</span><br><span class="line">gpg: key B3D53065DB03D61E was created 10630 seconds in the future (time warp or clock problem)</span><br><span class="line">gpg: key B3D53065DB03D61E was created 10630 seconds in the future (time warp or clock problem)</span><br><span class="line">gpg: key B3D53065DB03D61E was created 10630 seconds in the future (time warp or clock problem)</span><br><span class="line">gpg: key B3D53065DB03D61E was created 10630 seconds in the future (time warp or clock problem)</span><br><span class="line">gpg: key B3D53065DB03D61E was created 10630 seconds in the future (time warp or clock problem)</span><br><span class="line">gpg: key B3D53065DB03D61E was created 10630 seconds in the future (time warp or clock problem)</span><br><span class="line">gpg: key B3D53065DB03D61E was created 10630 seconds in the future (time warp or clock problem)</span><br><span class="line">gpg: key B3D53065DB03D61E was created 10630 seconds in the future (time warp or clock problem)</span><br><span class="line">gpg: key B3D53065DB03D61E was created 10630 seconds in the future (time warp or clock problem)</span><br></pre></td></tr></table></figure>

<p>说明你本地的系统时间没有和 NTP 服务器同步，我们可以手工打开：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo timedatectl set-ntp 1</span><br><span class="line">sudo timedatectl status</span><br></pre></td></tr></table></figure>

<p>然后删除旧的 GPG Key 缓存文件并重新生成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> -fr /etc/pacman.d/gnupg</span><br><span class="line">sudo pacman-key --init</span><br><span class="line">sudo pacman-key --populate</span><br></pre></td></tr></table></figure>

<p>然后重新安装 <code>archlinuxcn-keyring</code> 即可正常工作。</p>
<p><em>请注意 AUR 里的很多软件分两种发布形式，一种是带 -bin 结尾的二进制包，安装后直接可用，一种是不带的，就是从源码编译安装，本地不一定能装的上，请自行选择。</em></p>
<h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><p>本教程仅适合有一定 Linux 基础和动手能力的小伙伴，如果您想从头开始学习安装一个 Arch Linux，那么这两个教程一定很适合您学习</p>
<ul>
<li><a href="https://www.viseator.com/2017/05/17/arch_install/">以官方 Wiki 的方式安装 ArchLinux</a></li>
<li><a href="https://archlinuxstudio.github.io/ArchLinuxTutorial/">Arch Linux 安装使用教程 - ArchTutorial - Arch Linux Studio</a></li>
</ul>
<h2 id="推荐软件"><a href="#推荐软件" class="headerlink" title="推荐软件"></a>推荐软件</h2><ul>
<li><a href="https://archlinux.org/packages/extra/x86_64/firefox/">Firefox</a></li>
<li><a href="https://archlinux.org/packages/extra/x86_64/thunderbird/">Thunderbird</a></li>
<li><a href="https://aur.archlinux.org/packages/vscodium-bin">VSCodium</a></li>
<li><a href="https://github.com/archlinuxcn/repo/tree/master/archlinuxcn/typora">Typora</a></li>
<li><a href="https://aur.archlinux.org/packages/github-desktop-bin">Github Desktop</a></li>
<li><a href="https://aur.archlinux.org/packages/1password">1Password</a></li>
<li><a href="https://aur.archlinux.org/packages/microsoft-edge-stable-bin">Microsoft Edge</a></li>
<li><a href="https://archlinux.org/packages/extra/x86_64/chromium/">Chromium</a></li>
</ul>
<p>最后秀一下我的 Arch Linux：</p>
<p><img src="/2022/09/tqA6ZHukDrvi9cg-1.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Arch Linux</tag>
        <tag>archinstall</tag>
      </tags>
  </entry>
  <entry>
    <title>#伪静态# Nginx实现www域名的301跳转</title>
    <url>/2017/11/06/%E4%BC%AA%E9%9D%99%E6%80%81-nginx%E5%AE%9E%E7%8E%B0www%E5%9F%9F%E5%90%8D%E7%9A%84301%E8%B7%B3%E8%BD%AC/</url>
    <content><![CDATA[<p>（请以“Nginx”为关键字在本站右侧搜索栏自行搜索），关于伪静态，有一篇集中汇总各个程序的Nginx伪静态的文章（<a href="https://www.vmvps.com/collection-of-nginx-rewrite-rules-for-common-php-programmes.html" title="#搜集贴# 常用PHP程序的Nginx伪静态规则">传送</a>），但是却遗忘了最常见的www域名跳转的问题，关于这个跳转，对SEO的友好程度见仁见智，在微魔看来，只是更喜欢自己的站点以www的形式示人而已。</p>
<h3 id="伪静态-Nginx实现www域名的301跳转"><a href="#伪静态-Nginx实现www域名的301跳转" class="headerlink" title="#伪静态# Nginx实现www域名的301跳转"></a>#伪静态# Nginx实现www域名的301跳转</h3><p>1.将example.com定向到<a href="http://www.example.com/">www.example.com</a></p>
<p>  server {<br>    listen 80;<br>    server_name example.com <a href="http://www.example.com/">www.example.com</a>;<br>    if ($host !&#x3D; ‘<a href="http://www.example.com&/#39;">www.example.com&#39;</a>) {<br>      rewrite ^&#x2F;(.*)$ <a href="http://www.example.com/$1">http://www.example.com/$1</a> permanent;<br>    }<br>  }</p>
<p>2.将<a href="http://www.example.com定向到example.com/">www.example.com定向到example.com</a></p>
<p>  server {<br>    listen 80;<br>    server_name example.com <a href="http://www.example.com/">www.example.com</a>;<br>    if ($host !&#x3D; ‘example.com’) {<br>      rewrite ^&#x2F;(.*)$ <a href="http://example.com/$1">http://example.com/$1</a> permanent;<br>    }<br>  }</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>人人影视Web版CentOS一键安装脚本</title>
    <url>/2019/01/30/%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86web%E7%89%88centos%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>目前只支持CentOS6&#x2F;7 64位(不支持32位)系统， 亲测CentOS 7系统顺利安装。其实在Debian或者Ubuntu都可以运行，不过官方只有在CentOS 7测试过，所以各位还是在CentOS 7 上运行吧。</p>
<p>更新：上网查了下人人影视自己建立了一个区块链，你可以下载电影剧集，不过同时也分享带宽，这样可以赚取人人钻还有CVNT，其实属于带宽挖矿。</p>
<p>**建议修改下载位置，默认面板密码 如果纯挂机的话，请在面板 -&gt; 选项里面【自动下载】选择 全部下载，否则是零上传， 它会自动下载最近视频然后自动上传。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">yum update -y</span><br><span class="line">yum install -y wget curl screen make</span><br><span class="line"></span><br><span class="line"># 安装路径</span><br><span class="line">Path=&quot;/root/&quot;</span><br><span class="line">cd $Path</span><br><span class="line"></span><br><span class="line"># 下载人人影视最新版本</span><br><span class="line">wget https://appdown.rrysapp.com/rrshareweb_centos7.tar.gz</span><br><span class="line">tar -zxvf rrshareweb_centos7.tar.gz</span><br><span class="line">cd rrshareweb</span><br><span class="line">rm -rf /root/rrshareweb_centos7.tar.gz</span><br><span class="line"></span><br><span class="line"># 建立服务 systemctl (start/stop/status/restart) renren</span><br><span class="line">cat &gt; /etc/systemd/system/renren.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=RenRen server</span><br><span class="line">After=network.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">PIDFile=/var/run/renren.pid</span><br><span class="line">ExecStart=/root/rrshareweb/rrshareweb</span><br><span class="line">RestartPreventExitStatus=23</span><br><span class="line">Restart=always</span><br><span class="line">User=root</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>想查看运行中的话只输入 systemctl status renren 回车就可以看到了</p>
<p>注意：必须在Web面板修改下载目录位置</p>
<p>Crontab 定时重启服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 0 * * * systemctl restart renren.service</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>人人影视</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>使用acme.sh获取免费SSL证书</title>
    <url>/2019/10/20/%E4%BD%BF%E7%94%A8acme-sh%E8%8E%B7%E5%8F%96%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><a href="https://github.com/Neilpang/acme.sh">acme.sh</a> 是一个 ACME(自动化证书管理环境) 脚本，可以从 letsencrypt 生成免费的证书。</p>
<p>本来这个教程是写在 <a href="https://zhih.me/make-your-website-support-tls1-3/">编译Nginx支持TLS1.3</a> 那篇帖子里的，后来感觉还是单独拿出来比较好，即能让那篇教程更简洁，也能更方便的让需要的人看到这个教程。</p>
<h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install cron socat -y</span><br></pre></td></tr></table></figure>

<h2 id="获取-acme-sh"><a href="#获取-acme-sh" class="headerlink" title="获取 acme.sh"></a>获取 acme.sh</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl  https://get.acme.sh  sh</span><br></pre></td></tr></table></figure>

<p>重启终端，如果你使用 zsh 可以这样 <code>source ~/.zshrc</code></p>
<h2 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h2><p>使用 http 方式验证域名，需要先搭建 HTTP 站点，这里使用 acme.sh 自带的 webserver，所以先把 nginx 停掉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service nginx stop</span><br></pre></td></tr></table></figure>

<p>接下来指定域名，开始签发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --issue -d onmp.ooo \</span><br><span class="line">        --keylength ec-256 \</span><br><span class="line">        --standalone</span><br></pre></td></tr></table></figure>

<p>如果是多域名，可以使用 -d 参数添加，如：<code>-d www.onmp.ooo</code> <code>--keylength ec-256</code> 是签发 ECC 类型的证书，它的安全性更高，删除则使用默认的 RSA 证书</p>
<h2 id="复制证书"><a href="#复制证书" class="headerlink" title="复制证书"></a>复制证书</h2><p>证书已经签发了，不过默认是保存在 <code>~/.acme.sh/</code> 里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --ecc --installcert -d onmp.ooo \</span><br><span class="line">        --key-file /usr/local/nginx/conf/ssl/onmp.ooo.key \</span><br><span class="line">        --fullchain-file /usr/local/nginx/conf/ssl/onmp.ooo.cer \</span><br><span class="line">        --reloadcmd &quot;service nginx restart&quot;</span><br></pre></td></tr></table></figure>

<p>指定域名，指定证书保存目录，我这里设置在 <code>/usr/local/nginx/conf/ssl/</code>，指定 Nginx 重载命令，如果签发的不是 ECC 证书，把 <code>--ecc</code> 参数去掉</p>
<p>这样使用 acme.sh 就完成了证书的签发，如果证书快要过期了，脚本会自动更新证书</p>
<p>脚本自动更新，可以使用以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --upgrade --auto-upgrade</span><br></pre></td></tr></table></figure>

<p> </p>
<h2 id="证书安装"><a href="#证书安装" class="headerlink" title="证书安装"></a>证书安装</h2><p>证书已经获取并且可以自动更新了，具体安装方法看 <a href="https://zhih.me/make-your-website-support-tls1-3/">编译Nginx支持TLS1.3</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>SSL</tag>
        <tag>acme.sh</tag>
      </tags>
  </entry>
  <entry>
    <title>使用cdn-manager自建CDN服务器，支持处理图片/缓存视频等资源</title>
    <url>/2018/11/05/%E4%BD%BF%E7%94%A8cdn-manager%E8%87%AA%E5%BB%BAcdn%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%94%AF%E6%8C%81%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87-%E7%BC%93%E5%AD%98%E8%A7%86%E9%A2%91%E7%AD%89%E8%B5%84/</url>
    <content><![CDATA[<p><strong>说明：</strong><code>cdn-manager</code>是云转码<a href="https://www.moerats.com/archives/731/">express-ffmpeg</a>的作者<code>quazero</code>根据<a href="https://github.com/dadi/cdn">@dadi&#x2F;cdn</a>制作的脚手架，该原理貌似是一个<code>API</code>服务，搭建好的<code>CDN</code>服务器第一次访问你设定的网站后，会将原站一些资源缓存到服务器，而且不仅仅可以缓存<code>jpg</code>、<code>css</code>、<code>js</code>等，就连<code>ts</code>、<code>m3u8</code>、<code>mp4</code>也可以缓存，默认是缓存一个小时，但可以设置永久缓存。并且当你的并发很高，硬盘<code>IO</code>跟不上的时候，就把图片转换成二进制存内存里边。更强的就是还可以给图片加参数，如高宽、格式、滤镜、比例、旋转等，然后拉取图片后按要求处理，再实时返回你需要的图片并缓存到服务器。有需求的可以使用延迟比较低的服务器搭建下，可以减轻我们源站压力，特别是并发比较高的网站。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>cdn-manager：</strong><a href="https://gitee.com/quazero/cdn-manager">https://gitee.com/quazero/cdn-manager</a> <strong>dadi&#x2F;cdn：</strong><a href="https://github.com/dadi/cdn">https://github.com/dadi/cdn</a></p>
<p>本教程适用于<code>CentOS</code>，建议使用<code>CentOS 7</code>系统。</p>
<p><strong>1、安装依赖</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#升级系统</span><br><span class="line">yum update -y</span><br><span class="line">#安装开发者工具包</span><br><span class="line">yum -y groupinstall &quot;Development Tools&quot;</span><br><span class="line">#安装nodejs</span><br><span class="line">curl -sL https://rpm.nodesource.com/setup_10.x  bash -</span><br><span class="line">yum install nodejs -y</span><br><span class="line">#安装pm2</span><br><span class="line">npm install pm2 -g</span><br></pre></td></tr></table></figure>

<p><strong>2、安装程序</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#拉取源码</span><br><span class="line">git clone https://gitee.com/quazero/cdn-manager.git</span><br><span class="line">cd cdn-manager</span><br><span class="line">#安装</span><br><span class="line">npm install</span><br><span class="line">#设置环境</span><br><span class="line">export NODE_ENV=production</span><br></pre></td></tr></table></figure>

<p><strong>3、配置参数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意：本步骤讲的默认配置只缓存图片，所以我们要了解下基本配置，然后再去参考文章最后面的更多设置，再使用4步骤运行程序。</span><br></pre></td></tr></table></figure>

<p>本程序主要涉及到<code>2</code>个配置文件<code>poster.json</code>和<code>config.production.json</code>，前者是图片处理的配置文件，后者是运行环境配置文件。</p>
<p>图片配置路径<code>workspace/recipes/poster.json</code>，默认参数如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;recipe&quot;: &quot;poster&quot;,</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;format&quot;: &quot;jpg&quot;,</span><br><span class="line">    &quot;quality&quot;: &quot;90&quot;,</span><br><span class="line">    &quot;height&quot;: &quot;240&quot;,</span><br><span class="line">    &quot;ratio&quot;: &quot;16-9&quot;,</span><br><span class="line">    &quot;resizeStyle&quot;: &quot;entropy&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>意思是将图片处理成<code>16：9</code>的比例，高度<code>240PX</code>，并且格式为<code>jpg</code>，质量为<code>90%</code>的格式。</p>
<p>运行环境配置路径<code>config/config.production.json</code>，默认参数如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;: &#123;</span><br><span class="line">    &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;port&quot;: 8001</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;images&quot;: &#123;</span><br><span class="line">    &quot;remote&quot;: &#123;</span><br><span class="line">      &quot;enabled&quot;: true,</span><br><span class="line">      &quot;path&quot;: &quot;#&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>意思是运行端口为<code>8001</code>，设置远程连接<code>path</code>，比如我的域名是<code>https://www.moerats.com</code>，就在参数后面填该域名。</p>
<p><strong>4、运行程序</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#进入源码的文件夹</span><br><span class="line">cd /root/cdn-manager</span><br><span class="line">#这里避免出错，建议安装一些模块</span><br><span class="line">npm install sharp farmhash</span><br><span class="line">#运行</span><br><span class="line">pm2 start index.js</span><br></pre></td></tr></table></figure>

<h2 id="运行环境配置"><a href="#运行环境配置" class="headerlink" title="运行环境配置"></a>运行环境配置</h2><p><strong>1、缓存设置</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;caching&quot;: &#123;</span><br><span class="line">  &quot;ttl&quot;: 3600,</span><br><span class="line">  &quot;expireAt&quot;: &quot;0 5 0 * * *&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>expireAt</code>配置解释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;0 5 0 * * _&quot; 每天凌晨12点5分刷新缓存</span><br><span class="line">&quot;0 30 11 _ _ 1-5&quot; 每周星期一到星期五 早上11点30刷新缓存</span><br><span class="line">&quot;0 15 14 1 _ _&quot; 每个月一号下午2点15刷新缓存</span><br><span class="line">&quot;0 22 _ _ 1-5&quot; 周一到周五晚上10点刷新缓存</span><br><span class="line">&quot;_ 5 4 * * 0&quot; 每周日凌晨4点5分刷新缓存</span><br></pre></td></tr></table></figure>

<p><code>ttl</code>配置解释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单位秒，默认3600秒，一个小时缓存失效，可以自行设置时长。</span><br><span class="line">/api/flush可以通过这个API手动刷新缓存文件。</span><br></pre></td></tr></table></figure>

<p><strong>2、image配置</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;images&quot;: &#123;</span><br><span class="line">  &quot;directory&quot;: &#123;</span><br><span class="line">    &quot;enabled&quot;: true,</span><br><span class="line">    &quot;path&quot;: &quot;relative/path/to/your/images&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;remote&quot;: &#123;</span><br><span class="line">    &quot;enabled&quot;: true,</span><br><span class="line">    &quot;path&quot;: &quot;https://www.moerats.com/images&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;s3&quot;: &#123;</span><br><span class="line">    &quot;enabled&quot;: true,</span><br><span class="line">    &quot;accessKey&quot;: &quot;your-access-key&quot;,</span><br><span class="line">    &quot;secretKey&quot;: &quot;your-secret&quot;,</span><br><span class="line">    &quot;bucketName&quot;: &quot;your-bucket&quot;,</span><br><span class="line">    &quot;region&quot;: &quot;your-region&quot;,</span><br><span class="line">    &quot;endpoint&quot;: &quot;ams3.digitaloceanspaces.com&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>images</code>配置项 一共有三种用法，一种是直接服务同主机图片，服务本地图片，一种是服务远程图片，最后一种是亚马逊和<code>Digital Ocean Space</code>云储存。</p>
<p><code>directory</code>服务本地文件，直接指定<code>path</code>为文件夹地址即可直接处理本地图片。例如<code>/www/moerats.com/picture</code>，然后将图片地址<code>host</code>更改为<code>CDN</code>地址即可。</p>
<p><code>remote</code>服务远程文件，直接设置<code>path</code>为远程<code>url</code>，例如<code>https://www.moerats.com</code>，最后把地址替换成 <code>cdn</code>地址即可。</p>
<p><code>s3</code>云储存可扩展的云储存，可以直接缓存各种云储存上边的图片。</p>
<p><strong>3、assets配置</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;assets&quot;: &#123;</span><br><span class="line">  &quot;directory&quot;: &#123;</span><br><span class="line">    &quot;enabled&quot;: true,</span><br><span class="line">    &quot;path&quot;: &quot;/Users/absolute/path/to/your/assets&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该配置方法参考<code>image</code>配置，除了把<code>images</code>换成<code>assets</code>，其他用法一样，设置之后会缓存除了<code>jpg</code>的各种文件，包括视频文件。</p>
<h2 id="图片处理配置"><a href="#图片处理配置" class="headerlink" title="图片处理配置"></a>图片处理配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;recipe&quot;: &quot;poster&quot;,</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;format&quot;: &quot;jpg&quot;,</span><br><span class="line">    &quot;quality&quot;: &quot;90&quot;,</span><br><span class="line">    &quot;height&quot;: &quot;240&quot;,</span><br><span class="line">    &quot;ratio&quot;: &quot;16-9&quot;,</span><br><span class="line">    &quot;resizeStyle&quot;: &quot;entropy&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>recipe</code>文件是预配置格式处理文件，在<code>workspace/recipes</code>文件夹中建立。</p>
<p><code>&quot;recipe&quot;</code>参数设置必须和文件名一致。<code>settings</code>中可以设置的选项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">blur 模糊</span><br><span class="line">filter 设置裁剪处理算法</span><br><span class="line">flip 翻动</span><br><span class="line">format 格式</span><br><span class="line">gravity 设置裁剪区域</span><br><span class="line">ratio 比例</span><br><span class="line">rotate 旋转</span><br><span class="line">width 宽度</span><br><span class="line">height 高度</span><br></pre></td></tr></table></figure>

<p><code>resizeStyle</code>裁剪模式 推荐<code>entropy</code>等，详见<a href="https://github.com/dadi/cdn">dadi&#x2F;cdn</a>文档。</p>
<p>设置完成之后，比如<code>recipe</code>为<code>poster</code>，则访问链接为<code>cdnhost/poster/yourpath/1.jpg</code>。</p>
<h2 id="域名反代"><a href="#域名反代" class="headerlink" title="域名反代"></a>域名反代</h2><p>要想正常访问就需要使用域名反代，这里说下宝塔反代和<code>Caddy</code>反代。如果你网站有宝塔，就可以使用宝塔进行反代，如果没有，建议使用第<code>2</code>种的<code>Caddy</code>反代，配置很快。</p>
<p><strong>1、宝塔反代</strong> 先进入宝塔面板，然后点击左侧网站，添加站点，然后再点击添加好了的域名名称，这时候就进入了站点配置，点击反向代理，目标<code>URL</code>填入<code>http://127.0.0.1:8001</code>，再启用反向代理即可。至于启用<code>SSL</code>就不说了，直接在站点配置就可以看到。</p>
<p><strong>2、Caddy反代</strong> 安装<code>Caddy</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh install http.filemanager</span><br><span class="line">#备用地址</span><br><span class="line">wget -N --no-check-certificate https://www.moerats.com/usr/shell/Caddy/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh install http.filemanager</span><br></pre></td></tr></table></figure>

<p>配置<code>Caddy</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#以下全部内容是一个整体，请修改域名后一起复制到SSH运行！</span><br><span class="line"></span><br><span class="line">#http访问，该配置不会自动签发SSL</span><br><span class="line">echo &quot;xx.com &#123;</span><br><span class="line"> gzip</span><br><span class="line"> proxy / http://127.0.0.1:8001</span><br><span class="line">&#125;&quot; &gt; /usr/local/caddy/Caddyfile</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>tls</code>参数会自动帮你签发<code>ssl</code>证书，如果你要使用自己的<code>ssl</code>，改为<code>tls /root/xx.crt /root/xx.key</code>即可。后面为<code>ssl</code>证书路径。</p>
<p>启动<code>Caddy</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/caddy start</span><br></pre></td></tr></table></figure>

<p>最后我们都配置好了后，只需要在原网站将资源链接域名替换成<code>CDN</code>的地址即可。大概使用如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原图片地址为：https://www.moerats.com/rats.jpg</span><br><span class="line">CDN中地址为：https://cdn.moerats.com/poster/rats.jpg，该链接会自动处理图片</span><br><span class="line"></span><br><span class="line">#如果你不想对图片进行处理，直接代替原域名就可以了，如：</span><br><span class="line">https://cdn.moerats.com/rats.jpg</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Github+jsDelivr+PicGo，打造自用、免费、快速、稳定图床</title>
    <url>/2020/03/11/%E4%BD%BF%E7%94%A8githubjsdelivrpicgo%EF%BC%8C%E6%89%93%E9%80%A0%E8%87%AA%E7%94%A8%E3%80%81%E5%85%8D%E8%B4%B9%E3%80%81%E5%BF%AB%E9%80%9F%E3%80%81%E7%A8%B3%E5%AE%9A%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<p>GitHub：全球最大开源托管站，微软旗下。 jsDelivr：免费、稳定的CDN PicGo：开源的图床，支持win、linux等系统。</p>
<p>下面是设置教程，很简单，基本就是鼠标点下就行。</p>
<p>一、Github上的设置</p>
<p>1、新建github仓库 进入 <a href="https://github.com/">https://github.com/</a> ，点击绿色的 New <img src="https://www.jarods.org/wp-content/uploads/2020/03/gjp-01.jpg"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/03/gjp-02.jpg"></p>
<p>2、获取token 打开 <a href="https://github.com/settings/tokens%EF%BC%8C%E7%82%B9%E5%87%BB%E5%8F%B3%E4%BE%A7%E7%9A%84">https://github.com/settings/tokens，点击右侧的</a> Generate new token，获取的一串字符就是token（麻烦保存好） <img src="https://www.jarods.org/wp-content/uploads/2020/03/gjp-03.jpg"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/03/gjp-04.jpg"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/03/gjp-05.jpg"></p>
<p>二、PicGo设置</p>
<p>根据需要下载：<a href="https://github.com/Molunerfinn/picgo/releases%EF%BC%8C%E4%B8%8B%E9%9D%A2%E6%98%AFwin%E4%B8%8B%E7%9A%84%E8%AE%BE%E7%BD%AE%E3%80%82">https://github.com/Molunerfinn/picgo/releases，下面是win下的设置。</a> PicGo-Setup-2.2.2.exe下载：<a href="https://www.lanzous.com/ia1xh8j">https://www.lanzous.com/ia1xh8j</a> <img src="https://www.jarods.org/wp-content/uploads/2020/03/gjp-06.jpg"></p>
<p>三、jsDelivr的CDN使用 前缀为 <a href="https://cdn.jsdelivr.net/gh/">https://cdn.jsdelivr.net/gh/</a> ，后面是github用户名和仓库</p>
<p>演示（8M）：<a href="https://cdn.jsdelivr.net/gh/guonning/low/img/opo0328a.jpg">https://cdn.jsdelivr.net/gh/guonning/low/img/opo0328a.jpg</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>jsDelivr</tag>
        <tag>PicGo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用CloudXNS API实现DDNS（动态解析）</title>
    <url>/2018/10/03/%E4%BD%BF%E7%94%A8cloudxns-api%E5%AE%9E%E7%8E%B0ddns%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%A3%E6%9E%90%EF%BC%89/</url>
    <content><![CDATA[<p>DDNS是将用户的动态IP地址映射到一个固定的域名解析服务上，用户每次连接网络的时候客户端程序就会通过信息传递把该主机的动态IP地址传送给位于服务商主机上的服务器程序，服务器程序负责提供DNS服务并实现动态域名解析。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/ddns.png" alt="ddns"> 目前国内支持DDNS解析的商家也比较多，比如花生壳等。如果你想自己不想使用第三方厂家提供的DDNS服务，完全可以自己折腾，比如使用CloudXNS API实现DDNS。</p>
<h3 id="一、开始准备"><a href="#一、开始准备" class="headerlink" title="一、开始准备"></a>一、开始准备</h3><ul>
<li>需求：家里有一台占美小主机24小时运行，需要连接公网实现一些服务，不过运营商的IP是动态的，随时都在发生变化，于是需要用到DDNS</li>
<li>系统：CentOS 6 X64</li>
<li>环境：PHP 5.6</li>
<li>域名一个，并且已经使用CloudXNS DNS</li>
</ul>
<h3 id="二、安装CloudXNS-API-PHP-SDK"><a href="#二、安装CloudXNS-API-PHP-SDK" class="headerlink" title="二、安装CloudXNS API PHP SDK"></a>二、安装CloudXNS API PHP SDK</h3><p>选择CloudXNS API PHP SDK，所以你要提前把PHP环境搭建好咯，进入站点根目录依次执行下面的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### 下载CloudXNS API PHP SDK</span><br><span class="line">wget https://github.com/CloudXNS/CloudXNS-API-SDK-PHP/archive/master.zip</span><br><span class="line">### 解压</span><br><span class="line">unzip master.zip</span><br><span class="line">### 移动</span><br><span class="line">mv CloudXNS-API-SDK-PHP-master/* ./</span><br></pre></td></tr></table></figure>

<h3 id="三、安装SDK"><a href="#三、安装SDK" class="headerlink" title="三、安装SDK"></a>三、安装SDK</h3><p>CloudXNS-API-SDK-PHP需要用到Composer，如果您还没有安装Composer，请安装Composer，接着在站点根目录执行<code>composer install</code>即可完成SDK安装。吐槽：SDK在国外，安装速度太慢了。</p>
<h3 id="四、添加执行脚本"><a href="#四、添加执行脚本" class="headerlink" title="四、添加执行脚本"></a>四、添加执行脚本</h3><p>CloudXNS API PHP SDK里面有完整的DEMO，需要的可以参考。将下面的代码另存为ddns.php，setApiKey和setSecretKey请注意修改为自己在CloudXNS后台获取的。其中test.hixz.org请修改为您在CloudXNS需要更新的解析记录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    //获取公网IP</span><br><span class="line">    $ip = file_get_contents(&quot;https://www.xiaoz.me/ip/userip.php&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="五、定时任务"><a href="#五、定时任务" class="headerlink" title="五、定时任务"></a>五、定时任务</h3><p>我们可以用Linux的crontab定时任务每小时运行一次脚本，及时更新公网IP，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### 添加定时任务</span><br><span class="line">crontab -e</span><br><span class="line">### 加入计划任务，没小时执行一次脚本</span><br><span class="line">10 * * * * cd /data/wwwroot/test/ &amp;&amp; /usr/local/php/bin/php ddns.php &gt;&gt; /home/ddns.log 2&gt;&amp;1</span><br><span class="line">### 重载crontab</span><br><span class="line">service crond reload</span><br></pre></td></tr></table></figure>

<p><code>10</code> 指每小时的10分，<code>/data/wwwroot/test/</code>为网站根目录，<code>/usr/local/php/bin/php</code>是PHP所在的安装路径。</p>
<h3 id="六、测试"><a href="#六、测试" class="headerlink" title="六、测试"></a>六、测试</h3><p>脚本执行成功后，由于DNS缓存原因，一般10分钟左右生效，我们可以用ping命令测试是否和自己的公网IP一致，如果一致，说明DDNS解析成功，如下截图。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/ddns_195527.jpg" alt="ddns_195527"></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CloudXNS</tag>
        <tag>DDNS</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Forsaken Mail搭建一个临时邮箱系统，即收即毁</title>
    <url>/2018/10/02/%E4%BD%BF%E7%94%A8forsaken-mail%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%B4%E6%97%B6%E9%82%AE%E7%AE%B1%E7%B3%BB%E7%BB%9F%EF%BC%8C%E5%8D%B3%E6%94%B6%E5%8D%B3%E6%AF%81/</url>
    <content><![CDATA[<p><strong>说明：</strong><code>Forsaken Mail</code>是一个临时邮箱系统，可以供任何人接受邮件，即收即毁，支持自定义邮箱地址前缀，这里就说下<code>Docker</code>和<code>NPM</code>两种安装教程，任选一种即可，有兴趣或者有需求的可以玩玩。</p>
<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="https://www.jarods.org/wp-content/uploads/2018/10/Forsaken_Mail1.png" alt="请输入图片描述" title="请输入图片描述"> <img src="https://www.jarods.org/wp-content/uploads/2018/10/Forsaken_Mail2.png" alt="请输入图片描述" title="请输入图片描述"></p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>1、<code>VPS</code>需要开启<code>25</code>端口，这个直接发工单要主机商开启。 2、域名解析，如果你想邮件地址格式都为<code>*@xx.com</code>的形式，则为<code>xx.com</code>设置<code>MX</code>记录，需要添加以下<code>2</code>条解析记录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#MX记录</span><br><span class="line">xx.com MX 10 mx.xx.com</span><br><span class="line">#A记录 </span><br><span class="line">mx.xx.com A 服务器IP</span><br></pre></td></tr></table></figure>

<h2 id="NPM安装"><a href="#NPM安装" class="headerlink" title="NPM安装"></a>NPM安装</h2><p><strong>Github地址：</strong><a href="https://github.com/denghongcai/forsaken-mail">https://github.com/denghongcai/forsaken-mail</a></p>
<p><strong>1、安装NPM</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Debian/Ubuntu系统</span><br><span class="line">curl -sL https://deb.nodesource.com/setup_10.x  bash -</span><br><span class="line">apt-get install -y nodejs git screen</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>2、安装Forsaken Mail</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/denghongcai/forsaken-mail.git</span><br><span class="line">cd forsaken-mail</span><br><span class="line">#安装Forsaken Mail</span><br><span class="line">npm install</span><br><span class="line">#后台运行Forsaken Mail</span><br><span class="line">screen -S forsakenmail</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>

<p>最后按<code>Ctrl+A</code>，再按<code>D</code>键返回主界面，然后打开<code>http//mx.xx.com:3000</code>就可以查看<code>Forsaken Mail</code>邮箱界面了，如果你打不开界面，可能还需要开启防火墙端口，一般该情况在<code>CentOS</code>系统上出现最多，这里就说下<code>CentOS</code>开启操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Centos 6系统</span><br><span class="line">iptables -I INPUT -p tcp --dport 3000 -j ACCEPT</span><br><span class="line">service iptables save</span><br><span class="line">service iptables restart</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p><strong>1、安装Docker</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#CentOS 6</span><br><span class="line">rpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br><span class="line">yum update -y</span><br><span class="line">yum -y install docker-io</span><br><span class="line">service docker start</span><br><span class="line">chkconfig docker on</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>2、安装Forsaken Mail</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name forsaken-mail -d -p 25:25 -p 3000:3000 denghongcai/forsaken-mail</span><br></pre></td></tr></table></figure>

<p>安装成功后打开<code>http//mx.xx.com:3000</code>就可以了，如果打不开界面请参考<code>NPM</code>安装步骤。</p>
<h2 id="配置Https访问"><a href="#配置Https访问" class="headerlink" title="配置Https访问"></a>配置Https访问</h2><p>如果你不习惯使用<code>http//mx.xx.com:3000</code>，或者想使用<code>Https</code>域名访问主界面，那我们可以使用<code>Caddy</code>反代。</p>
<p>这里所使用的域名只能是上面设置<code>MX</code>记录的<code>xx.com</code>，并提前将域名<code>A</code>记录解析到服务器<code>IP</code>。</p>
<p><strong>1、安装Caddy</strong> 使用命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh install http.filemanager</span><br><span class="line">#备用地址</span><br><span class="line">wget -N --no-check-certificate https://www.moerats.com/usr/shell/Caddy/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh install http.filemanager</span><br></pre></td></tr></table></figure>

<p><strong>2、配置Caddy</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#以下全部内容是一个整体，请修改2个域名后一起复制到SSH运行！</span><br><span class="line">echo &quot;xx.com &#123;</span><br><span class="line"> gzip</span><br><span class="line"> tls admin@moerats.com</span><br><span class="line"> proxy / mx.xx.com:3000</span><br><span class="line">&#125;&quot; &gt; /usr/local/caddy/Caddyfile</span><br></pre></td></tr></table></figure>

<p><code>tls</code>参数会自动帮你签发<code>ssl</code>证书，如果你要使用自己的<code>ssl</code>，改为<code>tls /root/xx.crt /root/xx.key</code>即可。后面为<code>ssl</code>证书路径。</p>
<p><strong>3、启动Caddy</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/caddy start</span><br></pre></td></tr></table></figure>

<p>最后可以打开<code>https://xx.com</code>访问了。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Forsaken Mail</tag>
        <tag>临时邮箱系统</tag>
      </tags>
  </entry>
  <entry>
    <title>使用HE.NET的Dynamic DNS服务</title>
    <url>/2017/11/29/%E4%BD%BF%E7%94%A8he-net%E7%9A%84dynamic-dns%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="为什么用HE-NET"><a href="#为什么用HE-NET" class="headerlink" title="为什么用HE.NET?"></a>为什么用HE.NET?</h1><p>HE.NET是我在2004年前后就接触过的服务商，后来我的服务器都放到Theplanet，然后Theplanet的一批工程师独立创建了Softlayer，再之后Softlayer被IBM收购，再反过来收购Theplanet，我的N台服务器终于都集中到一家了。至始至终，和he.net交流询价过无数次，但是始终没能合作。</p>
<p>2000年前后无聊去做一个DNS工具，其实就是打算在Windows上完全从零开始实现一个带图形界面的DNS查询工具。已发布版本支持了很多常见的DNS记录类型，新版本支持一些DNSSEC(Domain Name System Security Extensions)，但是后来忙别的事情，就没去耐心去做去了。做的过程要测试啊，我在DNS服务器里设置好对应的记录，然后再用我实现的工具去查询，藉此判断我的工具实现的是否正常。</p>
<p>虽然我的几台独立服务器都装着DNS服务，但是手动去改配置文件太麻烦，风险也高，万一搞死了就会挨骂。于是我就去找一些DNS服务商测试，找来找去，发现<strong>HE.NET对各种记录支持的最全面</strong>*。于是它就成了我测试DNS的首选服务商。</p>
<p>Dynamic DNS 服务商好多家，但是既然HE.NET支持，我就不舍近求远啦。</p>
<h1 id="DNS和-Dynamic-DNS"><a href="#DNS和-Dynamic-DNS" class="headerlink" title="DNS和 Dynamic DNS"></a>DNS和 Dynamic DNS</h1><p>要说Dynamic DNS，就不得不提**<em>DNS(域名解析服务)</em>**；要提DNS，就不得不提域名。</p>
<p>简单的讲，**<em>互联网的主机靠IP来区分</em><strong>，要访问一台主机上的服务(HTTP、 FTP、EMAIL、DATABASE等)我们首先要知道对方的IP地址。但是互联网的主机千千万，抽象的IP地址根本无法记忆，而</strong><em>域名就是给这个地址起一个好记的名字</em>**。所以，我们就可以通过<a href="http://www.baidu.com这样的域名来访问到百度,通过www.taobao.com这样的域名来访问到淘宝./">www.baidu.com这样的域名来访问到百度，通过www.taobao.com这样的域名来访问到淘宝。</a></p>
<p>而从**<em>域名到IP的过程，就是域名解析，是由域名解析服务器(Name Server)来完成的</em>**。</p>
<p>而另外一种场景就是分配给主机的IP不时的变化。 这时如果使用普通的域名解析服务，我们需要不时的修改解析记录，来将域名指向更新后的IP。这时会有一些问题存在，比如变化频繁，修改工作量大；变化时机不定，无法确定何时修改。</p>
<p>Dynamic DNS 很好的解决如上问题，它的基本原理就是，**<em>当主机关联的IP变化时，自动更新解析记录</em>**。</p>
<p>所以，屏蔽掉一些技术细节，通俗的讲：</p>
<ul>
<li>互联网上的主机靠IP区分和访问。</li>
<li>域名给IP地址起了个好记的名，从域名到IP的过程就是域名解析。</li>
<li>Dynamic DNS自动更新解析记录，适合关联到主机的IP不时变化的场景。</li>
</ul>
<p>(本小节文本来自我以前在其它网站发表的原创文章，如果你找到雷同的，没错，那就是我写的 ?）</p>
<h1 id="HE-NET的Dynamic-DNS"><a href="#HE-NET的Dynamic-DNS" class="headerlink" title="HE.NET的Dynamic DNS"></a>HE.NET的Dynamic DNS</h1><p>关于他们的DNS服务以及Dynamic DNS的使用细节，请参考：<a href="https://dns.he.net/">https://dns.he.net/</a></p>
<h4 id="大致步骤"><a href="#大致步骤" class="headerlink" title="大致步骤"></a>大致步骤</h4><p>注册之类的非常简单，大家按提示操作即可，这里就不赘述了，只列出一些关键步骤。</p>
<ul>
<li>将要解析的域名DNS设置为HE.NET的DNS</li>
<li>在HE.NET的DNS面板中添加域名</li>
<li>添加对应的解析记录（比如A记录），并选取“Enable entry for dynamic dns”</li>
<li>生成用于DDNS客户端的密码(Generate the key used for dynamic DNS updates)</li>
<li>在主机上使用DDNS client。(设置定时任务)</li>
</ul>
<h4 id="操作实例"><a href="#操作实例" class="headerlink" title="操作实例"></a>操作实例</h4><ul>
<li><p>将域名DNS设置为HE.NET的DNS</p>
</li>
<li><p>在HE.NET的DNS面板中添加域名</p>
</li>
<li><p>添加对应的解析记录</p>
</li>
<li><p>生成用于DDNS client的密码</p>
</li>
<li><p>设置DDNS client <code>crontab -e</code> 添加如下代码： <code>*/5 * * * * curl &quot;https://dyn.dns.he.net/nic/update&quot; -d &quot;hostname=iot0.xxxx.com&quot; -d &quot;password=XXXXXX&quot; -k</code> 代码部分可以查阅： <a href="https://dns.he.net/">https://dns.he.net/</a><br>好啦，大功告成啊。 想测试是否成功，ping一下域名，看看显示的IP 再用一些查看公网IP的工具，看一下两者是否一致就可以啦。</p>
</li>
</ul>
<p>或者你已经设置好了NAT的端口转发以及开启了对应的HTTP服务之类的，那么直接访问域名就可以看到网站喽。是不是非常简单！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文简单介绍了域名、DNS、Dynamic DNS的原理。 并以HE.NET的DNS服务为例，为iot0.xxxx.com添加了一个Dynamic DNS的A Record。 限于篇幅，对一些技术细节只做通俗的解释，想了解对应知识的，请参阅相应的技术文档。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Dynamic DNS</tag>
        <tag>HE.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>使用IPIP打通隧道</title>
    <url>/2018/10/18/%E4%BD%BF%E7%94%A8ipip%E6%89%93%E9%80%9A%E9%9A%A7%E9%81%93/</url>
    <content><![CDATA[<p>查看IPIP模块：</p>
<p>modinfo ipip</p>
<p>开始建立隧道：</p>
<p>注：这里设置A主机的公网IP为1.1.1.1，B主机的公网IP为2.2.2.2</p>
<p>A主机操作：</p>
<p>ip tunnel add ipip-tunnel mode ipip remote 2.2.2.2 local 1.1.1.1 ifconfig ipip-tunnel 10.0.1.1 netmask 255.255.255.0</p>
<p>B主机操作：</p>
<p>ip tunnel add ipip-tunnel mode ipip remote 1.1.1.1 local 2.2.2.2 ifconfig ipip-tunnel 10.0.1.2 netmask 255.255.255.0</p>
<p>然后这时候就可以在B主机上pingA主机设置的内网IP10.0.1.1看是否想通，如果同的话就代表成功打通。</p>
<p>此外介绍一种直接使用网卡配置文件（CentOS系统）的方法：</p>
<p>A主机（&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ipip-tunnel）</p>
<p>DEVICE=ipip-tunnel<br>ONBOOT=yes<br>TYPE=IPIP<br>TTL=255<br>PEER_OUTER_IPADDR=2.2.2.2<br>PEER_INNER_IPADDR=10.0.1.2<br>MY_OUTER_IPADDR=1.1.1.1<br>MY_INNER_IPADDR=10.0.1.1</p>
<p>B主机（&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ipip-tunnel）</p>
<p>DEVICE=ipip-tunnel<br>ONBOOT=yes<br>TYPE=IPIP<br>TTL=255<br>PEER_OUTER_IPADDR=1.1.1.1<br>PEER_INNER_IPADDR=10.0.1.1<br>MY_OUTER_IPADDR=2.2.2.2<br>MY_INNER_IPADDR=10.0.1.2</p>
<p>然后启动网卡即可</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>IPIP</tag>
        <tag>隧道</tag>
      </tags>
  </entry>
  <entry>
    <title>使用overture搭建DNS无污染递归服务器 可设置Host过滤广告</title>
    <url>/2020/05/06/%E4%BD%BF%E7%94%A8overture%E6%90%AD%E5%BB%BAdns%E6%97%A0%E6%B1%A1%E6%9F%93%E9%80%92%E5%BD%92%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%8F%AF%E8%AE%BE%E7%BD%AEhost%E8%BF%87%E6%BB%A4%E5%B9%BF%E5%91%8A/</url>
    <content><![CDATA[<p>overture开源项目：<a href="https://www.iprain.cn/go/aHR0cHM6Ly9naXRodWIuY29tL3NoYXduMW0vb3ZlcnR1cmU=">https://github.com/shawn1m/overture</a> overture是一个DNS服务程序，RainDNS也是采用这款程序搭建的，最大的特点就是小巧、快速，支持Linux和Windows环境，且是开源项目放心安全，可以用来搭建企业DNS服务。 <img src="/2020/05/He2709f47118544c9b1fe8a554591e318c.png" alt="overture工作配置流程"></p>
<p><a href="https://ae01.alicdn.com/kf/He2709f47118544c9b1fe8a554591e318c.png">overture工作配置流程</a></p>
<h2 id="下载overture"><a href="#下载overture" class="headerlink" title="下载overture"></a>下载overture</h2><p>前往Github下载： <a href="https://www.iprain.cn/go/aHR0cHM6Ly9naXRodWIuY29tL3NoYXduMW0vb3ZlcnR1cmUvcmVsZWFzZXM=">https://github.com/shawn1m/overture/releases</a> 由于我的系统是Centos7 64位的，所以我下载了overture-linux-amd64.zip</p>
<h2 id="释放overture"><a href="#释放overture" class="headerlink" title="释放overture"></a>释放overture</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip -d /usr/local/overture overture-linux-amd64.zip</span><br></pre></td></tr></table></figure>

<h2 id="修改config-json"><a href="#修改config-json" class="headerlink" title="修改config.json"></a>修改config.json</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;BindAddress&quot;: &quot;:53&quot;,</span><br><span class="line">  &quot;PrimaryDNS&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;Name&quot;: &quot;RainDNS&quot;,</span><br><span class="line">      &quot;Address&quot;: &quot;119.28.28.28:53&quot;,</span><br><span class="line">      &quot;Protocol&quot;: &quot;udp&quot;,</span><br><span class="line">      &quot;SOCKS5Address&quot;: &quot;&quot;,</span><br><span class="line">      &quot;Timeout&quot;: 6,</span><br><span class="line">      &quot;EDNSClientSubnet&quot;: &#123;</span><br><span class="line">        &quot;Policy&quot;: &quot;auto&quot;,</span><br><span class="line">        &quot;ExternalIP&quot;: &quot;&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;AlternativeDNS&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;Name&quot;: &quot;RainPOd&quot;,</span><br><span class="line">      &quot;Address&quot;: &quot;119.29.29.29:53&quot;,</span><br><span class="line">      &quot;Protocol&quot;: &quot;udp&quot;,</span><br><span class="line">      &quot;SOCKS5Address&quot;: &quot;&quot;,</span><br><span class="line">      &quot;Timeout&quot;: 6,</span><br><span class="line">      &quot;EDNSClientSubnet&quot;: &#123;</span><br><span class="line">        &quot;Policy&quot;: &quot;auto&quot;,</span><br><span class="line">        &quot;ExternalIP&quot;: &quot;&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;OnlyPrimaryDNS&quot;: false,</span><br><span class="line">  &quot;RedirectIPv6Record&quot;: false,</span><br><span class="line">  &quot;IPNetworkFile&quot;: &quot;./ip_network_sample&quot;,</span><br><span class="line">  &quot;DomainFile&quot;: &quot;./domain_sample&quot;,</span><br><span class="line">  &quot;DomainBase64Decode&quot;: true,</span><br><span class="line">  &quot;HostsFile&quot;: &quot;./hosts_sample&quot;,</span><br><span class="line">  &quot;MinimumTTL&quot;: 0,</span><br><span class="line">  &quot;CacheSize&quot; : 0,</span><br><span class="line">  &quot;RejectQtype&quot;: [255]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【BindAddress】DNS端口，默认为53 【PrimaryDNS】主DNS 其他配置信息可以阅读overture的Github底部</p>
<h2 id="修改防火墙"><a href="#修改防火墙" class="headerlink" title="修改防火墙"></a>修改防火墙</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=53/udp</span><br><span class="line">firewall-cmd --permanent --add-port=53/tcp</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h2 id="配置开机启动-vi-x2F-etc-x2F-systemd-x2F-system-x2F-overture-service"><a href="#配置开机启动-vi-x2F-etc-x2F-systemd-x2F-system-x2F-overture-service" class="headerlink" title="配置开机启动 vi &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;overture.service"></a>配置开机启动 vi &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;overture.service</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=overture</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/overture/overture-linux-amd64 -c /usr/local/overture/config.json</span><br><span class="line">Restart=on-abort</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<h2 id="启动overture"><a href="#启动overture" class="headerlink" title="启动overture"></a>启动overture</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable overture</span><br><span class="line">systemctl start overture</span><br></pre></td></tr></table></figure>

<p>好了，DNS服务器已经搭建好了！</p>
<p>转载:<a href="https://www.iprain.cn/archives/79.html">https://www.iprain.cn/archives/79.html</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>DNS</tag>
        <tag>Overture</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Mailu.io搭建基于Docker的域名邮箱</title>
    <url>/2021/12/16/%E4%BD%BF%E7%94%A8mailu-io%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Edocker%E7%9A%84%E5%9F%9F%E5%90%8D%E9%82%AE%E7%AE%B1/</url>
    <content><![CDATA[<p>Mailu.io是一款免费开源且性能强大、功能丰富的域名邮箱系统。它基于Docker, 具有部署简单，可移植性高，备份方便等多种优势。之前，<a href="https://qing.su/article/139.html">我们介绍过Poste邮箱系统的搭建</a>；Poste已经很久不再更新了，而Mailu则是Poste的升级版，一直稳定更新。</p>
<p>今天，我们就来介绍如何搭建并使用Mailu.io域名邮箱。类似的域名邮箱系统，我们还推荐<a href="https://qing.su/article/154.html">iRedMail</a>与<a href="https://qing.su/article/zimbra.html">Zimbra</a>, 您可以自行比较并选择喜欢的程序。本文作者为香菇肥牛，原文链接为<a href="https://qing.su/article/mail-hosting-with-mailu-io.html">https://qing.su/article/mail-hosting-with-mailu-io.html</a>, 转载需注明原文链接。</p>
<h2 id="1-系统环境要求"><a href="#1-系统环境要求" class="headerlink" title="1, 系统环境要求"></a>1, 系统环境要求</h2><p>由于Mailu基于Docker, 因此几乎可以在任何版本的Linux发行版上安装使用。安装前，请确保您的服务器有2 GB的内存，并拥有一个独立IP地址。</p>
<p>在安装之前，您需要确保您的VPS的25端口是开放的。您可以在您的VPS上执行下面的命令来测试25端口是否开放。</p>
<p>1</p>
<p>telnet smtp.aol.com 25</p>
<p>如果看到类似下面的回显，则说明端口是开放的：</p>
<p>1 2 3 4</p>
<p>Trying 74.6.141.50… Connected to smtp.aol.g03.yahoodns.net. Escape character is ‘^]‘. 220 smtp.mail.yahoo.com ESMTP ready</p>
<p>如果显示超时，说明25端口不开放；您需要向主机商申请开放25端口，或者更换一台VPS.</p>
<p>本文中，我们将在一台Ubuntu 20.04 LTS 64 bit操作系统的VPS中安装。在其他操作系统中的安装步骤类似。</p>
<h2 id="2-主机名与DNS设置"><a href="#2-主机名与DNS设置" class="headerlink" title="2, 主机名与DNS设置"></a>2, 主机名与DNS设置</h2><p>设置好主机名（服务器名, Hostname）是所有邮件服务器必不可少的一步，否则在发信时将会遇到各种错误。</p>
<p>如果您的域名为example.com, 那么我建议您的邮件服务器主机名可以设置为_<strong>mail.example.com</strong><em>或者</em><strong>mx.example.com</strong>_.  如果您不知道如何设置服务器名，<a href="https://qing.su/how-to-set-hostname">请参考我们的图文视频教程</a>。</p>
<p>下文中，我们将以_<strong>mx.qing.su</strong>_作为主机名介绍整个系统的部署。当您设置好主机名之后（以mx.qing.su为例），在SSH中执行命令：</p>
<p>1</p>
<p>hostname</p>
<p>此时您应当看到系统显示_<strong>mx</strong><em>.  如果系统显示</em><strong>mx.qing.su</strong>_, 说明主机名设置<strong>错误</strong>，请重新设置。</p>
<p>在SSH中执行命令：</p>
<p>1</p>
<p>hostname -f</p>
<p>此时您应当看到系统显示_<strong>mx.qing.su</strong>_.</p>
<p>设置好主机名之后，您还需要设置DNS解析记录。DNS记录的设置分为两部分，一部分需要在搭建邮箱之前设置，另一部分(DKIM)在搭建邮箱之后设置。我们先介绍第一部分。假设您的服务器IP地址为88.88.88.88, 那么您需要到您域名的DNS服务提供商处，添加下面的五条记录：</p>
<ul>
<li>将域名_<strong>qing.su</strong>_设置任意一条A记录或者ALIAS记录，值为任意。如果您不使用该域名做网站，您可以设置一条A记录，解析到127.0.0.1.  请注意，根域名不能设置CNAME记录。</li>
<li>将域名_<strong>mx.qing.su</strong>_设置A记录，解析到88.88.88.88</li>
<li>将域名_<strong>qing.su</strong>_设置MX记录，优先级为10，解析值为mx.qing.su</li>
<li>SPF: 将域名_<strong>qing.su</strong>_设置TXT记录，解析值为”v&#x3D;spf1 mx ~all”</li>
<li>DMARC: 将域名_<strong>_dmarc.qing.su</strong>_设置TXT记录，解析值为”v&#x3D;DMARC1; p&#x3D;none; pct&#x3D;100; rua&#x3D;mailto:<a href="mailto:&#x61;&#x64;&#x6d;&#105;&#110;&#64;&#113;&#x69;&#x6e;&#x67;&#46;&#x73;&#x75;">&#x61;&#x64;&#x6d;&#105;&#110;&#64;&#113;&#x69;&#x6e;&#x67;&#46;&#x73;&#x75;</a>”</li>
</ul>
<p>然后，您需要到您的VPS服务商处，为您的IP地址设置逆向DNS记录(Reverse DNS, PTR), 将88.88.88.88解析到mx.qing.su.</p>
<p>设置好这些之后，我们就可以开始部署Mailu域名邮箱了。</p>
<h2 id="3-安装Docker与Docker-Compose"><a href="#3-安装Docker与Docker-Compose" class="headerlink" title="3, 安装Docker与Docker Compose"></a>3, 安装Docker与Docker Compose</h2><p>前面说过，Mailu基于Docker.  这里我将以Ubuntu 20.04 LTS操作系统为例，简要记录Docker与Docker Compose的安装。如果您对Docker非常了解，可以跳过这一部分。如果您使用的是其他操作系统，可以在这里(<a href="https://docs.docker.com/engine/install/">https://docs.docker.com/engine/install/</a>, <a href="https://docs.docker.com/compose/install/)%E6%89%BE%E5%88%B0%E5%AF%B9%E5%BA%94%E7%9A%84%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E3%80%82">https://docs.docker.com/compose/install/)找到对应的安装步骤。</a></p>
<p>安装Docker Engine:</p>
<p>1 2 3 4 5 6</p>
<p>apt-get update &amp;&amp; apt-get upgrade apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common curl -fsSL <a href="https://download.docker.com/linux/ubuntu/gpg">https://download.docker.com/linux/ubuntu/gpg</a>  apt-key add - add-apt-repository “deb [arch&#x3D;amd64] <a href="https://download.docker.com/linux/ubuntu">https://download.docker.com/linux/ubuntu</a> $(lsb_release -cs) stable” apt-get update apt-get install docker-ce docker-ce-cli containerd.io</p>
<p>安装Docker Compose:</p>
<p>1 2</p>
<p>curl -L “<a href="https://github.com/docker/compose/releases/download/1.27.2/docker-compose-$">https://github.com/docker/compose/releases/download/1.27.2/docker-compose-$</a>(uname -s)-$(uname -m)” -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</p>
<p> </p>
<h2 id="4-配置Mailu服务器"><a href="#4-配置Mailu服务器" class="headerlink" title="4, 配置Mailu服务器"></a>4, 配置Mailu服务器</h2><p>Mailu服务器提供了一个自动生成配置文件的网页，非常方便。因此，我们将使用这个网页来生成配置文件。它的地址是<a href="https://setup.mailu.io/">https://setup.mailu.io/</a></p>
<p>打开网页后，第一步是选择版本与Docker管理方式。这里我们选择最新版1.7, Docker管理方式选择Docker.</p>
<p><img src="/2021/12/configuration_1-watermarked-1024x435-1.png" alt="设置Mailu版本与Docker"></p>
<p>第二步，需要设置路径与域名信息。请按照下图填写，并替换为您的域名。请注意，Main mail domain and server display name应该填写您的根域名，比如我这里是qing.su; 而Linked Website URL, 则填写您的邮件服务器主机名，这里我们填写<a href="https://mx.qing.su/">https://mx.qing.su</a>.  在TLS certificates这里，我们选择letsencrypt, 系统将会自动帮我们生成Let’s Encrypt证书。您也可以选择自己提供证书。下方的Enable the admin UI请务必勾选，否则系统将不会安装Web管理面板。</p>
<p><img src="/2021/12/configuration_2-watermarked-1024x726-1.png" alt="设置Mailu路径与管理员信息"></p>
<p>第三步，选择网页邮箱的面板。这里可以选择Roundcube和Rainloop, 您可以根据个人偏好来选择。我这里推荐Rainloop，它更美观，且对移动端的适配更好。Rainloop支持中文显示。下面的三个选项分别是杀毒、WebDAV、邮件代收，您可以根据自己的需要来勾选。</p>
<p><img src="/2021/12/configuration_3-watermarked-1024x415-1.png"></p>
<p>第四步，配置IP与主机名。请在IP listen address中填写您服务器的IP地址，比如88.88.88.88.  第二行是设置Docker的子网，一般保持默认即可。IPv6建议不启用。Unbound resolver建议启用。最后一栏，填写您的服务器的长主机名，我这里是mx.qing.su.</p>
<p><img src="/2021/12/configuration_4-watermarked-1024x510-1.png" alt="配置IP地址与主机名"></p>
<p>第五步，也是最后一步，选择数据库。这里我们选择最简单的Sqlite即可。您也可以选择其他的数据库，比如MySQL或者PostgreSQL.</p>
<p><img src="/2021/12/configuration_5-watermarked-1024x181-1.png" alt="选择数据库"></p>
<p>选择完毕后，点击Setup Mailu, 系统就会自动帮你生成好配置文件了，如下图。</p>
<p><img src="/2021/12/generated_configuration-watermarked-1024x847-1.png" alt="系统生成的Mailu配置文件"></p>
<h2 id="5-运行Mailu服务器"><a href="#5-运行Mailu服务器" class="headerlink" title="5, 运行Mailu服务器"></a>5, 运行Mailu服务器</h2><p>按照上述步骤生成好Mailu配置文件，就可以运行Mailu服务器了。回到SSH, 执行：</p>
<p>1 2</p>
<p>mkdir &#x2F;mailu cd &#x2F;mailu</p>
<p>然后找到之前那个页面生成的配置文件链接，下载到&#x2F;mailu文件夹中：</p>
<p>1 2</p>
<p>wget <a href="http://setup.mailu.io/1.7/file/edda7279-qing-su-qing-su-04773fdf23f9/docker-compose.yml">http://setup.mailu.io/1.7/file/edda7279-qing-su-qing-su-04773fdf23f9/docker-compose.yml</a> wget <a href="http://setup.mailu.io/1.7/file/edda7279-qing-su-qing-su-04773fdf23f9/mailu.env">http://setup.mailu.io/1.7/file/edda7279-qing-su-qing-su-04773fdf23f9/mailu.env</a></p>
<p>最后，使用Docker compose运行。</p>
<p>1</p>
<p>docker-compose -p mailu up -d</p>
<p>初次使用，系统将会下载几个Docker镜像，需要数分钟的时间。等系统提示完成后，Mailu就处于运行状态了。</p>
<p>部分朋友在初次运行Mailu的时候会遇到类似于下图的报错：</p>
<p><img src="/2021/12/binding_error-watermarked.png" alt="Mailu运行报错"></p>
<p>如果遇到这种情况，您可以编辑_<strong>docker-compose.yml</strong>_文件，删除掉所有绑定了**[::1]**地址与端口的行，然后重新运行上面的命令即可。</p>
<h2 id="6-使用Mailu域名邮箱"><a href="#6-使用Mailu域名邮箱" class="headerlink" title="6, 使用Mailu域名邮箱"></a>6, 使用Mailu域名邮箱</h2><p>在第一次登录Mailu服务器后台面板之前，需要新建一个管理员账户。在SSH中执行：</p>
<p>1</p>
<p>docker-compose -p mailu exec admin flask mailu admin hello example.com qing.su</p>
<p>这样，我们就创建了一个用户名为<a href="mailto:&#x68;&#x65;&#108;&#x6c;&#x6f;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#x6d;">&#x68;&#x65;&#108;&#x6c;&#x6f;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#x6d;</a>, 密码为qing.su的管理员账户。请替换为您需要的值。</p>
<p>创建完毕，您就可以在浏览器中访问<a href="https://mx.qing.su/admin%E7%99%BB%E5%BD%95%E6%82%A8%E7%9A%84%E7%AE%A1%E7%90%86%E5%91%98%E9%9D%A2%E6%9D%BF%E4%BA%86%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E3%80%82">https://mx.qing.su/admin登录您的管理员面板了，如下图。</a></p>
<p><img src="/2021/12/admin_login-watermarked.png" alt="Mailu后台面板"></p>
<p>点击左侧Mail Domains, 就能管理我们的邮箱域名。在域名管理界面，点击右上角New domain, 即可添加域名。点击下图中的红框部分，即可添加用户；点击绿框部分，则进入域名详情页。</p>
<p><img src="/2021/12/manage_domain-watermarked-1024x222-1.png" alt="管理邮箱域名"></p>
<p>点击上图中的红框，进入用户管理界面，如下图：</p>
<p><img src="/2021/12/add_user-watermarked-1024x548-1.png" alt="添加邮箱用户"></p>
<p>这里我们可以输入邮箱前缀，密码，姓名。下方的Features and quotas可以设置邮箱容量，并且可以设置是否允许IMAP和POP3客户端登录收信。设置完毕后，点击Save, 就添加好了用户。</p>
<p>在域名管理界面，点击之前那张图的绿框部分，则进入了域名详情页。我们点击右上角的Generate keys, 即可生成DKIM记录。如下图。</p>
<p><img src="/2021/12/DNS_records-watermarked-1024x528-1.png"></p>
<p>根据上图的信息，您需要去您的DNS服务器运营商设置域名的DKIM记录。比如，以我的qing.su域名为例，我需要设置下面的DKIM记录：</p>
<ul>
<li>将域名_<strong>dkim._domainkey.qing.su</strong>_设置TXT记录，解析值为”v&#x3D;DKIM1; k&#x3D;rsa; p&#x3D;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDK8nX8NbQ&#x2F;16bb7zUqZif39emugOQpBDTXeLTqKhmrhPHFt5RgrDj9ibL18ovXKsQONjXZ+qNE407+KQZWcVLFvCQ6jtl1ojSfnJGeltGRqgfjw0nIAFQ9P6UVO5fiyrnxR4NZ+MDKvsv33NMgJxpEH6O8hQ&#x2F;K2mDM+mDcIIbOwQIDAQAB”</li>
</ul>
<p>这样，我们就完成了全部的DNS设置。此时，您的域名邮箱已经全部搭建并配置完毕，可以收发信了。</p>
<p>访问<a href="https://mx.qing.su就会自动跳转到网页邮箱的登录界面.如果您在配置时选择了rainloop/">https://mx.qing.su就会自动跳转到网页邮箱的登录界面。如果您在配置时选择了Rainloop</a>, 则第一次登录时可以在界面上选择语言，比如简体中文。</p>
<p>我们使用mail-tester.com测试发信，可以看到评分为满分10分。</p>
<p><img src="/2021/12/mailtester_result-watermarked-1024x857-1.png" alt="Mail-tester邮件测试"></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Mailu.io</tag>
        <tag>域名邮箱</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Overture搭建支持EDNS的私人DNS</title>
    <url>/2018/10/19/%E4%BD%BF%E7%94%A8overture%E6%90%AD%E5%BB%BA%E6%94%AF%E6%8C%81edns%E7%9A%84%E7%A7%81%E4%BA%BAdns/</url>
    <content><![CDATA[<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>先匹配域名，再匹配解析出的ip来决定走primary DNS还是alternative DNS来解析，域名列表(domain_sample)命中，走alternative DNS, 否则走primary DNS，如果解析出的ip不在ip段(ip_network_sample)里，则再去走alternative DNS解析，这样可通过自己组合来完成逻辑上的解析流程。</p>
<h4 id="安装配置（Centos7-4）"><a href="#安装配置（Centos7-4）" class="headerlink" title="安装配置（Centos7.4）"></a>安装配置（Centos7.4）</h4><h5 id="创建文件夹并进入"><a href="#创建文件夹并进入" class="headerlink" title="创建文件夹并进入"></a>创建文件夹并进入</h5><blockquote>
<p>cd &#x2F; &amp;&amp; mkdir overture &amp;&amp; cd overture</p>
</blockquote>
<h5 id="下载Overture"><a href="#下载Overture" class="headerlink" title="下载Overture"></a>下载Overture</h5><blockquote>
<p>wget <a href="https://github.com/shawn1m/overture/releases/download/1.3.6rc2/overture-linux-amd64.zip">https://github.com/shawn1m/overture/releases/download/1.3.6rc2/overture-linux-amd64.zip</a></p>
</blockquote>
<h5 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h5><blockquote>
<p>unzip overture-linux-amd64.zip</p>
</blockquote>
<h5 id="备份初始文件"><a href="#备份初始文件" class="headerlink" title="备份初始文件"></a>备份初始文件</h5><blockquote>
<p>cp ip_network_sample ip_network_sample.bak</p>
</blockquote>
<h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><blockquote>
<p>echo “0.0.0.0&#x2F;0” &gt; ip_network_sample vim config.json</p>
</blockquote>
<h5 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h5><blockquote>
<p>BindAddress：监听的ip地址和端口号，默认同时监听TCP和UDP端口 PrimaryDNS：主DNS Name：DNS标志 Address：DNS的IP和端口号 Protocol：使用的协议 SOCKS5Address：转发DNS请求到Socket5代理 Timeout：代理到后端的超时时间 EDNSClientSubnet：智能DNS解析，建议设置为auto，根据客户端的IP地址做判断而不是客户端指定的DNS的IP地址 MinimumTTL：Overture缓存解析记录的时长 CacheSize：Overture缓存大小</p>
</blockquote>
<h5 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h5><blockquote>
<p>“DomainFile”: “.&#x2F;domain_sample” #这个文件里可放需走alternative DNS的域名, 如google.com, 支持后缀命中 “DomainBase64Decode”: false #这个要false关闭域名列表的64解码，才能用明文来表达域名</p>
</blockquote>
<h5 id="IP列表配置"><a href="#IP列表配置" class="headerlink" title="IP列表配置"></a>IP列表配置</h5><blockquote>
<p>“IPNetworkFile”: “.&#x2F;ip_network_sample” #直接用0.0.0.0&#x2F;0, 如有特别的逻辑可改</p>
</blockquote>
<h5 id="启动Overture"><a href="#启动Overture" class="headerlink" title="启动Overture"></a>启动Overture</h5><blockquote>
<p>.&#x2F;overture-linux-amd64 -c：指定配置文件路径；默认当前启动路径的下的config.json文件 -l：指定日志路径和日志文件；默认当前启动路径下的overture.log -p：指定进程数；默认当前CPU的核心数 -v：Debug日志模式</p>
</blockquote>
<p> </p>
<h3 id="真麻烦为什么不能自启动？？？这简直糟糕透了！！！"><a href="#真麻烦为什么不能自启动？？？这简直糟糕透了！！！" class="headerlink" title="真麻烦为什么不能自启动？？？这简直糟糕透了！！！"></a>真麻烦为什么不能自启动？？？这简直糟糕透了！！！</h3><p> </p>
<h5 id="设置Overture自启动"><a href="#设置Overture自启动" class="headerlink" title="设置Overture自启动"></a>设置Overture自启动</h5><blockquote>
<p>chmod +x &#x2F;etc&#x2F;rc.d&#x2F;rc.local vi &#x2F;etc&#x2F;rc.local 并写入 sh &#x2F;dns.sh vi &#x2F;dns.sh cd &#x2F;overture nohup &#x2F;overture&#x2F;overture-linux-amd64 -c &#x2F;overture&#x2F;config.json -l &#x2F;overture&#x2F;overture.log &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp; chmod 777 &#x2F;dns.sh</p>
</blockquote>
<h5 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成~~~"></a>大功告成~~~</h5><p>但是，但是！！！重点在这里！！！ 自己搭建Overture耗时耗钱，不想折腾可以直接使用Hi!XNS，已经稳定运行3年，非常可靠乐观！当然不是单纯的Overture那么简单，通过二次开发达到更高水准！非常纯净哦~~ 传送门：<a href="https://hixns.com/">https://hixns.com/</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>DNS</tag>
        <tag>Overture</tag>
        <tag>EDNS</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Mailcow自建邮件服务器</title>
    <url>/2018/10/02/%E4%BD%BF%E7%94%A8mailcow%E8%87%AA%E5%BB%BA%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>Mailcow是一个可以用Docker部署的邮件服务器，安装部署都比较简单，稍微搞下就能用。。。至于发的邮件进不进垃圾箱，看造化了。。。</p>
<p>本文将带领你使用Mailcow部署一个完全符合国际标准的邮件服务器，首先别急着部署，我们先要按照标准来设置域名解析。</p>
<p>1.rDNS，就是反向解析，这个功能只能看你的VPS或是服务器商家支不支持了，建议搭建邮件服务器的时候选择支持rDNS的机器，非必须要求，只是设置了rDNS后可以让你的邮件更加容易进入对方的收件箱而不是垃圾箱。</p>
<p>下面我以Linode为例，在这里可以设置rDNS：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/lala.im_2018-09-21_18-07-41.png"></p>
<p>假设你的邮件服务器域名是mail.example.com，那么在下面填入即可：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/lala.im_2018-09-21_16-39-49.png"></p>
<p>2.A记录，我以cloudflare的DNS解析界面做示范，那么现在就添加一个mail的A记录解析到你的服务器IP：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/lala.im_2018-09-21_18-21-13.png"></p>
<p>3.MX记录，这里假设你的域名是example.com，那么MX记录NAME这里就是@，Value就是mail.example.com：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/lala.im_2018-09-21_18-26-04.png"></p>
<p>4.两个CNAME记录，这是Mailcow部署所需要的。NAME分别是autoconfig&#x2F;autodiscover，Value是mail.example.com：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/lala.im_2018-09-21_18-28-28.png"></p>
<p>5.两个TXT记录，这里分别指的是SPF和DMARC，都是增强邮箱安全性的，并且解析设置相对简单，建议都设置一下。我们先来设置SPF，新建一个TXT记录，NAME指向你的根域名，假设你的根域名是example.com，那么NAME就是example.com，Value填写如下所示内容：</p>
<p>v=spf1 mx ~all</p>
<p>如下图所示：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/lala.im_2018-09-21_20-59-01.png"></p>
<p>接着是DMARC，还是一样新建一个TXT记录，NAME填写_dmarc，Value填写：</p>
<p>“v&#x3D;DMARC1; p&#x3D;reject; rua&#x3D;mailto:<a href="mailto:&#x6d;&#97;&#x69;&#108;&#x61;&#x75;&#116;&#104;&#45;&#x72;&#x65;&#112;&#x6f;&#x72;&#116;&#115;&#x40;&#101;&#x78;&#x61;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#109;">&#x6d;&#97;&#x69;&#108;&#x61;&#x75;&#116;&#104;&#45;&#x72;&#x65;&#112;&#x6f;&#x72;&#116;&#115;&#x40;&#101;&#x78;&#x61;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#109;</a>“</p>
<p>其中“<a href="mailto:&#x6d;&#x61;&#x69;&#x6c;&#97;&#x75;&#x74;&#x68;&#x2d;&#114;&#101;&#x70;&#x6f;&#114;&#x74;&#115;&#x40;&#x65;&#120;&#x61;&#x6d;&#112;&#108;&#x65;&#46;&#x63;&#111;&#x6d;">&#x6d;&#x61;&#x69;&#x6c;&#97;&#x75;&#x74;&#x68;&#x2d;&#114;&#101;&#x70;&#x6f;&#114;&#x74;&#115;&#x40;&#x65;&#120;&#x61;&#x6d;&#112;&#108;&#x65;&#46;&#x63;&#111;&#x6d;</a>”修改成一个你可以正常接收邮件的地址。</p>
<p>如下图所示：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/lala.im_2018-09-21_21-11-07.png"></p>
<p>6.DKIM记录，这其实也是一条TXT记录，并且也是增强邮箱安全性的，但是现在我们还无法配置，因为不知道具体的解析值是多少，这个要等Mailcow部署好了后才能设置。</p>
<p>所以，现在DNS解析这一块我们可以告一段落了，现在登到VPS内设置时间，VPS系统我选择使用CentOS7X64</p>
<p>先设置同步时间：</p>
<p>yum -y install chrony<br>systemctl start chronyd<br>systemctl enable chronyd</p>
<p>然后把NTP也开启了：</p>
<p>timedatectl set-ntp true</p>
<p>国外机器时区一般都不是东八区，我们把系统的本地时区改成东八区：</p>
<p>timedatectl set-timezone Asia&#x2F;Shanghai</p>
<p>最后查看一下系统时间是否正常：</p>
<p>timedatectl status</p>
<p>如果一切正常，你应该可以看到类似如下图所示的内容：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/lala.im_2018-09-21_21-19-36.png"></p>
<p>其中Universal time是世界时间，这个不用管，RTC time是主板时间，也不用管，只要保证Local time即本地时间是正确，并且是东八区即可。</p>
<p>现在我们安装Docker：</p>
<p>yum -y install <a href="https://download.docker.com/linux/centos/7/x86/_64/stable/Packages/docker-ce-18.06.1.ce-3.el7.x86/_64.rpm">https://download.docker.com/linux/centos/7/x86\_64/stable/Packages/docker-ce-18.06.1.ce-3.el7.x86\_64.rpm</a> systemctl start docker<br>systemctl enable docker.service</p>
<p>再安装docker-compose：</p>
<p>curl -L “<a href="https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$">https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$</a>(uname -s)-$(uname -m)” -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<br>chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</p>
<p>然后拉取mailcow项目文件：</p>
<p>yum -y install git<br>cd &#x2F;opt<br>git clone <a href="https://github.com/mailcow/mailcow-dockerized">https://github.com/mailcow/mailcow-dockerized</a> cd mailcow-dockerized</p>
<p>执行sh脚本：</p>
<p>.&#x2F;generate_config.sh</p>
<p>这个脚本会让你填写一个域名，这个域名就是我们之前A记录解析的域名，按我们之前说的，那这里我的域名地址应该是：mail.example.com</p>
<p>完成之后拉取镜像：</p>
<p>docker-compose pull</p>
<p>确保全部都是done状态：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/lala.im_2018-09-21_15-27-48.png"></p>
<p>运行mailcow：</p>
<p>docker-compose up -d</p>
<p>如果如下图所示，那么你的mailcow就运行成功了：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/2018-09-21_15-28-41.png"></p>
<p>打开域名mail.example.com，你应该可以看到登录界面：</p>
<p>默认的管理员账号是admin，密码是moohoo</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/2018-09-21_15-30-35.png"></p>
<p>登录进去之后第一件事是修改管理员密码，接着要来添加域名，点击右上角的“Configuration”-“Mailboxes”可以看到如下界面：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/lala.im_2018-09-21_21-29-52.png"></p>
<p>添加域名这个Domain填写你的根域名，其他的就按需要配置就行了，填写好了后点击“Add domain and restart SOGo”：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/2018-09-21_21-31-29.png"></p>
<p>现在我们回到之前的DNS解析这块，之前说过还有一个DKIM解析没设置，这里我们点击“Configuration”-“Administration”，然后选择“Configuration”，然后按如下图设置：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/lala.im_2018-09-21_15-50-37.png"></p>
<p>1.Domaion&#x2F;s填写我们的根域名，我这里假设就是example.com</p>
<p>2.DKIM key length (bits)选择1024bits。</p>
<p>完成之后你将得到一个解析值：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/2018-09-21_15-51-19.png"></p>
<p>回到cloudflare的DNS解析界面，添加一个TXT记录，NAME填写：</p>
<p>dkim._domainkey</p>
<p>值就是上图的这一串，复制粘贴就行了，如图所示：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/lala.im_2018-09-21_21-43-12.png"></p>
<p>现在我们就可以回到mailcow创建邮箱账号了，点击“Mailboxes”-“Add mailbox”开始创建你的邮箱账号：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/lala.im_2018-09-21_21-33-11.png"></p>
<p>Domain选择我们之前刚添加的域名，其他这些就按需填写即可：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/2018-09-21_21-34-25.png"></p>
<p>完成之后我们可以在右上角打开SOGo这个APP，这个就是mailcow的邮件系统：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/lala.im_2018-09-21_21-35-39.png"></p>
<p>登录界面长这样，可以设置中文：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/2018-09-21_21-36-52.png"></p>
<p>使用我们创建的邮箱账号登录，注意账号是邮件地址的全名，比如这样：<a href="mailto:&#116;&#x65;&#115;&#116;&#64;&#x65;&#120;&#x61;&#109;&#112;&#108;&#101;&#46;&#x63;&#111;&#109;">&#116;&#x65;&#115;&#116;&#64;&#x65;&#120;&#x61;&#109;&#112;&#108;&#101;&#46;&#x63;&#111;&#109;</a></p>
<p>测试发信：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/2018-09-21_21-47-57.png"></p>
<p>Mail-Tester测试了一下，还行吧8.1分：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/lala.im_2018-09-21_21-53-26.png"></p>
<p>我就TM一直纳闷这个PYZOR是个啥J8玩意：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/2018-09-21_21-54-33.png"></p>
<p>当然这些都只是测试并不代表实际使用效果，那么Mailcow实际发送邮件的效果如何？</p>
<p>答曰：稀烂！</p>
<p>发QQ邮箱进垃圾箱，发Gmail进垃圾箱，发什么都进垃圾箱，玩你妹啊！rDNS&#x2F;SPF&#x2F;DMARC&#x2F;DKIM都配置了还是如此，我也不知道该怎么办了，反正我个人觉得这款邮件系统发信进收件箱的几率太低了。。。</p>
<p>另外这个SOGo的界面说实话，有点华而不实，看上去挺好看的UI，实际用起来感觉难用到爆炸，算了，不想BB了，告辞~</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Mailcow</tag>
        <tag>自建</tag>
        <tag>邮件服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Plik搭建一个临时文件上传系统，自定义时长/下载即摧毁</title>
    <url>/2018/10/28/%E4%BD%BF%E7%94%A8plik%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%B3%BB%E7%BB%9F%EF%BC%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%B6%E9%95%BF-%E4%B8%8B/</url>
    <content><![CDATA[<p><strong>说明：</strong><code>Plik</code>是一个基于<code>golang</code>的可扩展且友好的临时文件上传系统。上传者可自定义文件保留时长，设置下载密码，允许上传者随时删除文件，设置下载一次就自动删除，二维码下载，上传者还可以选择不保存在服务器里，直接传到免费服务(貌似用的<code>ShareX</code>)，还支持在线播放<code>mp3</code>&#x2F;<code>mp4</code>文件，及一些功能拓展，挺强的，安装也简单。</p>
<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="https://www.jarods.org/wp-content/uploads/2018/10/plik1.png" alt="请输入图片描述" title="请输入图片描述"> <img src="https://www.jarods.org/wp-content/uploads/2018/10/plik2.png" alt="请输入图片描述" title="请输入图片描述"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>Github地址：</strong><a href="https://github.com/root-gg/plik">https://github.com/root-gg/plik</a></p>
<p>可以直接用作者编译好的包安装，下载地址：<a href="https://github.com/root-gg/plik/releases">点击查看</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#下载最新版本的Plik，目前是1.2.3版本</span><br><span class="line">wget https://github.com/root-gg/plik/releases/download/1.2.3/plik-1.2.3-linux-64bits.tar.gz</span><br><span class="line">#解压</span><br><span class="line">tar xzvf plik-1.2.3-linux-64bits.tar.gz</span><br><span class="line">#运行</span><br><span class="line">cd plik-1.2.3/server</span><br><span class="line">./plikd</span><br></pre></td></tr></table></figure>

<p>然后就可以访问<code>IP:8080</code>查看了，程序的配置文件在<code>server/plikd.cfg</code>，可以设置监听端口&#x2F;最大上传&#x2F;默认保存天数等等，上传文件默认保存在<code>server/files</code>。</p>
<p>如果<code>Web</code>界面打不开，可能需要开启防火墙端口。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#CentOS 6</span><br><span class="line">iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</span><br><span class="line">service iptables save</span><br><span class="line">service iptables restart</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最后设置完毕后就需要程序常驻后台了，可以使用<code>screen</code>命令。</p>
<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p><strong>1、安装Docker</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#CentOS 6</span><br><span class="line">rpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br><span class="line">yum update -y</span><br><span class="line">yum -y install docker-io</span><br><span class="line">service docker start</span><br><span class="line">chkconfig docker on</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>2、安装镜像</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#建一个保存Plik数据的文件夹</span><br><span class="line">mkdir /Plik &amp;&amp; cd /Plik</span><br><span class="line">#下载配置文件，可以保持默认，也可以编辑</span><br><span class="line">wget https://raw.githubusercontent.com/root-gg/plik/master/server/plikd.cfg</span><br><span class="line">#启动容器</span><br><span class="line">docker run --name pilk -d -p 8080:8080 -v /Plik/plikd.cfg:/home/plik/server/plikd.cfg -v /Plik/files:/home/plik/server/files rootgg/plik</span><br></pre></td></tr></table></figure>

<p>然后就可以打开<code>IP:8080</code>了，配置文件为<code>/Plik/plikd.cfg</code>，上传文件在<code>/Plik/files</code>，当然外部端口，文件路径可自行修改。</p>
<p>最后我们需要给外部存储目录，也就是<code>/Plik/files</code>文件夹<code>777</code>权限，不然上传会失败。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 /Plik/files</span><br></pre></td></tr></table></figure>

<h2 id="域名访问"><a href="#域名访问" class="headerlink" title="域名访问"></a>域名访问</h2><p>如果想通过域名访问的就需要使用域名反代了，这里就使用最方便的<code>Caddy</code>，请提前解析好域名到服务器，过程会自动签发<code>SSL</code>。</p>
<p><strong>1、安装Caddy</strong> 使用命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh install http.filemanager</span><br><span class="line">#备用地址</span><br><span class="line">wget -N --no-check-certificate https://www.moerats.com/usr/shell/Caddy/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh install http.filemanager</span><br></pre></td></tr></table></figure>

<p><strong>2、配置Caddy</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#以下全部内容是一个整体，请修改域名后一起复制到SSH运行！</span><br><span class="line">echo &quot;xx.com &#123;</span><br><span class="line"> gzip</span><br><span class="line"> tls admin@moerats.com</span><br><span class="line"> proxy / 0.0.0.0:8080</span><br><span class="line">&#125;&quot; &gt; /usr/local/caddy/Caddyfile</span><br></pre></td></tr></table></figure>

<p><code>tls</code>参数会自动帮你签发<code>ssl</code>证书，如果你要使用自己的<code>ssl</code>，改为<code>tls /root/xx.crt /root/xx.key</code>即可。后面为<code>ssl</code>证书路径。</p>
<p><strong>3、启动Caddy</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/caddy start</span><br></pre></td></tr></table></figure>

<p>如果启动失败，使用<code>tail -f /tmp/caddy.log</code>查看启动日志，可以自己分析下错误日志，如果不会就留言。</p>
<p>启动成功后就可以打开<code>https://xx.com</code>访问了。最后<code>Plik</code>附带一个功能强大的<code>golang</code>多平台<code>cli</code>客户端，不过使用起来挺麻烦的，适用性貌似不是很大，就不研究了。当然如果你有兴趣，可以查看<code>Github</code>项目地址。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
  </entry>
  <entry>
    <title>使用Tor创建.onion域名网站（创建暗网服务和暗网的网站）</title>
    <url>/2018/11/21/%E4%BD%BF%E7%94%A8tor%E5%88%9B%E5%BB%BA-onion%E5%9F%9F%E5%90%8D%E7%BD%91%E7%AB%99%EF%BC%88%E5%88%9B%E5%BB%BA%E6%9A%97%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%92%8C%E6%9A%97%E7%BD%91%E7%9A%84%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>使用Tor 的.onion域名创建匿名服务器</p>
<p>Tor不仅可以提供客户端的匿名访问，Tor还可以提供服务器的匿名。通过使用Tor网络，用户可以维护位置不可知的服务器。当然如果要访问这个隐蔽的服务，客户端也得安装Tor。</p>
<p>通过Tor指定的顶级域名（Top Level Domain，TLD）.onion，可以访问其隐藏的服务。Tor网络可以识别自己的TLD，并自动路由到隐藏的服务。然后，隐藏的服务将请求交由标準的服务器软件进行处理，这个服务器软件应该预先进行配置，从而只侦听非公开的接口。如果这个服务还可以通过公共的因特网来访问，那也会受到相关连的攻击，这样就没有真正的隐藏起来。</p>
<p>#################华丽的分割线##########################</p>
<p>我们可以使用tor指定的.onion顶级域名来隐藏自己的服务。接下介绍如果创建一个.onion的网站。</p>
<p>注意：这是一件严肃的事情。为了保证完全的匿名，你必须配置你的web服务器让其足够安全，不会泄露任何信息。而且确保没有错误的网页或者其他泄露你真是IP及其他身份信息的可能。注意安全(额，不是说nsa在监控tor吗？)</p>
<p>一些基本安全提示：</p>
<p>* 不要在这台服务器上运行或做其它事情。 * 在新服务器或 VPS 上进行全新安装。 * 不要保留或运行来自 VPS 提供商那儿的任何服务。 * 用 Paypal 支付你的 VPS 服务，不过最好使用 Bitcoin。 * 不要向 VPS 提供关于你的任何身份信息。 * 不要在这台服务器上运行 Tor 中继，因为 Tor 中继在真实世界的公开 IP 是公开的。 * 不要从这台服务器发送电子邮件。 * 不要运行讨厌的或卑鄙的 web 软件。如果你的 web 软件有管理员登陆或管理员账号，把密码改成复杂的 26 个字符组成的密码。很多 Tor 网站被攻破只是某人猜到了管理员登陆密码。 * 避免使用任何 JavaScript 之类脚本的 web 软件。 * 确保你的 web 应用不会泄露任何错误信息或身份信息，比如在错误信息中的真实公开 IP。 * 审查 web 前端代码，确保它不会从 jquery.com、Google Fonts 或任何外部服务拉取资源。 * 及时做好 VPS 的安全更新。</p>
<p>当然，如果你不是很关心匿名的问题，那么至少保证你的web服务器的安全措施做得好，因为尽管Tor是个好的东西，但是用Tor搭建的网站可能会频繁遭到那些脚本小子的攻击(指那些只会利用别人开发的工具进行攻击的人，这是牛逼的黑客对他们的蔑称)</p>
<p>使用这个教程的前提是你有一个web服务器，可以是apache，nginx或者其他的。 本教程在以下环境进行：</p>
<ul>
<li>一个已经安装了nginx的web服务器</li>
<li>web服务器端口是8080</li>
<li>系统版本Debian Wheezy</li>
</ul>
<p>第一步：安装nginx(实在不会，就用别人的军哥的lnmp一件安装包吧)</p>
<blockquote>
<p>sudo apt-get install nginx</p>
</blockquote>
<p>第二步：配置nginx去监听8080端口</p>
<blockquote>
<p>sudo vi &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default    &#x2F;&#x2F;用vi编辑nginx配置文件</p>
</blockquote>
<p>在server段内将listen 后面的数字改成8080   ，和下面一样：</p>
<blockquote>
<p>server { listen   127.0.0.1:8080; …</p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/11/njj6rgtich.png"></p>
<p>然后重启nginx：</p>
<blockquote>
<p>sudo service nginx restart</p>
</blockquote>
<p>然后在本机试着用 curl 访问  <a href="http://localhost:8080/">http://localhost:8080</a>        ，一般都装了。没装的自己装下。如果能访问，说明nginx设置完成了</p>
<p>——————————————————————————————————————————</p>
<p>更新下，添加apache和lighthttpd的配置说明：</p>
<p>Apache：</p>
<blockquote>
<p>listen   127.0.0.1:8080;</p>
</blockquote>
<p>lighthttpd:</p>
<blockquote>
<p>listen   127.0.0.1:8080; server.bind &#x3D; “127.0.0.1”</p>
</blockquote>
<p>记得他们修改配置后也要重启</p>
<p>————————————————————————————————————————————————</p>
<p>第三步：安装Tor 官方对于其他版本的教程地址：<a href="https://www.torproject.org/docs/debian.html.en">https://www.torproject.org/docs/debian.html.en</a></p>
<p>方法如下：</p>
<p>先修改debian的源的配置文件，然后就可以直接apt-get方式安装tor，省时省力</p>
<blockquote>
<p>sudo vi &#x2F;etc&#x2F;apt&#x2F;sources.list   &#x2F;&#x2F;用vi编辑源的配置文件</p>
</blockquote>
<p>添加下面一行：</p>
<blockquote>
<p>deb     <a href="http://deb.torproject.org/torproject.org">http://deb.torproject.org/torproject.org</a>  main</p>
</blockquote>
<p>然后添加key文件签名，用下面的两行命令：</p>
<blockquote>
<p>sudo gpg –keyserver keys.gnupg.net –recv 886DDD89 sudo  gpg –export A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89 sudo apt-key add –</p>
</blockquote>
<p>Tor的官方提供了一个debian的软件包，帮助我们时刻保持签名key的更新同步，用下面命令安装：</p>
<blockquote>
<p>sudo apt-get install deb.torproject.org-keyring</p>
</blockquote>
<p>配置好后，就可以直接用下面命令安装Tor了</p>
<blockquote>
<p>sudo apt-get install tor</p>
</blockquote>
<p>默认的dns名称是deb.torproject.org，如果连不上，可尝试下面三个：</p>
<ul>
<li>deb-master.torproject.org</li>
<li>mirror.netcologne.de</li>
<li>tor.mirror.youam.de</li>
</ul>
<p>(如果不熟悉debian的源的配置，请自行查阅相关文档)</p>
<p>第四步：修改Tor的配置文件 假设你已经安装好了Tor，下面进项相关的配置</p>
<blockquote>
<p>vi &#x2F;etc&#x2F;tor&#x2F;torrc</p>
</blockquote>
<p>添加下面两行：</p>
<blockquote>
<p>HiddenServiceDir &#x2F;var&#x2F;lib&#x2F;tor&#x2F;hidden_service&#x2F; HiddenServicePort 80 127.0.0.1:8080</p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/11/mzlquxxu3z.png"></p>
<p>然后保存文件，启动tor</p>
<blockquote>
<p>sudo service tor start</p>
</blockquote>
<p>当tor启动后，会创建一个私钥在你的hidden_service目录，同时创建你的独一无二的.onion 主机名。</p>
<p>下面是这些文件的呈现的样子。当然，你不应该让任何人看到你的私钥，下面的只是为了展示的目的：</p>
<blockquote>
<p>root@starbuck:~# cd &#x2F;var&#x2F;lib&#x2F;tor&#x2F;hidden_service&#x2F; root@starbuck:&#x2F;var&#x2F;lib&#x2F;tor&#x2F;hidden_service# ls hostname private_key root@starbuck:&#x2F;var&#x2F;lib&#x2F;tor&#x2F;hidden_service# cat private_key —–BEGIN RSA PRIVATE KEY—– MIICXAIBAAKBgQC9ymfMgQk12AFT4PXWV+XfmZ1tVDaGajya&#x2F;jIuwnwtjFdMWe7m VDWMjs8Z02GGJhH6tIIpoDUrWLi+YchNHlQBi2AnBFzAoSlfRcvobeBAaWuQn+aH Uzr+xVXOADSIcfgtT5Yd13RKmUEKFV8AO9u652zYP1ss0l+S2mY&#x2F;J&#x2F;t&#x2F;3wIDAQAB AoGAMjQwcPBRN2UENOP1I9XsgNFpy1nTcor3rShArg3UO1g8X34Kq&#x2F;Lql1vPfM1l ps67Qs4tAEXYyraVaAcFrSCwp6MyeKYwxZtT7ki7q3rbMycvbYquxquh0uGy4aed K8XWjPrUv3yzQSYslOehVWMTH7xTzaOvp5uhpAlHFRqN5MECQQDmpFkXmtfEGwqT bRbKegRs9siNY6McWBCGrYc&#x2F;BrpXEiK0j2QcrjC&#x2F;dMJ4P9O4A94aG4NSI&#x2F;005fII vxrOmD9VAkEA0qhBVWeZD7amfvPYChQo0B4ACZZdJlcUd&#x2F;x1JSOYbVKvRCvJLxjT 5LMwg93jj2m386jXWx8n40Zcus6BTDr6YwJBAKH8E0ZszdVBWLAqEbOq9qjAuiHz NH+XqiOshCxTwVOdvRorCxjJjhspGdvyl&#x2F;PJY5facuShuhgI13AlJ+KpMvECQHDJ l1lzw1bPc2uLgUM8MfHj7h8z+6G4hAQODmaZHVaDK8XzL59gyqqrajFgTyOM9emm n89w6flcxe9a+41mEoMCQBaM91yvrfp7N9BeDMCHlSDfAzX7sDqQn44ftHvZZI9V 4IouuRuLlqN0iaw4V73v3MUeqXoasmdeZ89bVGhVrC8&#x3D; —–END RSA PRIVATE KEY—– root@starbuck:&#x2F;var&#x2F;lib&#x2F;tor&#x2F;hidden_service# cat hostname juyy62wplbkk7gzy.onion root@starbuck:&#x2F;var&#x2F;lib&#x2F;tor&#x2F;hidden_service#</p>
</blockquote>
<p>第五步：用浏览器访问的.onion的域名，看是否成功</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/11/7g0nho7exj.png"></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>.onion</tag>
        <tag>Tor</tag>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>公共DNS递归服务器</title>
    <url>/2020/04/14/%E5%85%AC%E5%85%B1dns%E9%80%92%E5%BD%92%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="常用DNS服务器"><a href="#常用DNS服务器" class="headerlink" title="常用DNS服务器"></a>常用DNS服务器</h2><p>名称</p>
<p>DNS 服务器 IP 地址</p>
<p>China IPv6 DNS</p>
<p>240C::6666</p>
<p>240C::6644</p>
<p>114 DNS</p>
<p>114.114.114.114</p>
<p>114.114.115.115</p>
<p>Ali DNS</p>
<p>223.5.5.5</p>
<p>223.6.6.6</p>
<p>Baidu DNS</p>
<p>180.76.76.76</p>
<p>2400:da00::6666</p>
<p>DNSPod DNS+</p>
<p>119.29.29.29</p>
<p>119.28.28.28</p>
<p>182.254.116.116</p>
<p>182.254.118.118</p>
<p>CNNIC SDNS</p>
<p>1.2.4.8</p>
<p>210.2.4.8</p>
<p>oneDNS</p>
<p>117.50.10.10</p>
<p>117.50.20.20</p>
<p>DNS 派 电信&#x2F;移动&#x2F;铁通</p>
<p>101.226.4.6</p>
<p>218.30.118.6</p>
<p>DNS 派 联通</p>
<p>123.125.81.6</p>
<p>140.207.198.6</p>
<p>Google (US)</p>
<p>8.8.8.8</p>
<p>8.8.4.4</p>
<p>2001:4860:4860::8888</p>
<p>2001:4860:4860::8844</p>
<p>Cloudflare (US)</p>
<p>1.1.1.1</p>
<p>1.0.0.1</p>
<p>2606:4700:4700::1111</p>
<p>2606:4700:4700::1001</p>
<p>IBM (US)</p>
<p>9.9.9.9</p>
<p>149.112.112.112</p>
<p>2620:fe::fe</p>
<p>2620:fe::9</p>
<p>OpenDNS (US)</p>
<p>208.67.222.222</p>
<p>208.67.220.220</p>
<p>2620:0:ccc::2</p>
<p>2620:0:ccd::2</p>
<p>HE (US)</p>
<p>74.82.42.42</p>
<p>66.220.18.42</p>
<p>2001:470:20::2</p>
<p>2001:470:0:9d::2</p>
<p>Comodo (US)</p>
<p>8.26.56.8</p>
<p>8.20.247.20</p>
<p>Verisign (US)</p>
<p>64.6.64.6</p>
<p>64.6.65.6</p>
<p>2620:74:1b::1:1</p>
<p>2620:74:1c::2:2</p>
<p>Neustar (US)</p>
<p>156.154.70.1</p>
<p>156.154.71.1</p>
<p>2610:a1:1018::1</p>
<p>2610:a1:1019::1</p>
<p>Dyn (US)</p>
<p>216.146.35.35</p>
<p>216.146.36.36</p>
<p>Alternate (US)</p>
<p>23.253.163.53</p>
<p>198.101.242.72</p>
<p>Level3 (US)</p>
<p>209.244.0.3</p>
<p>209.244.0.4</p>
<p>V2EX DNS</p>
<p>199.91.73.222</p>
<p>178.79.131.110</p>
<p>清华大学 DNS</p>
<p>101.6.6.6</p>
<p>2001:da8::666</p>
<p>中科大 DNS</p>
<p>202.141.162.123（中国电信）</p>
<p>202.38.93.153 （教育网）</p>
<p>202.141.176.93 （中国移动）</p>
<p>KT (KR)</p>
<p>168.126.63.1</p>
<p>168.126.63.2</p>
<p>SK (KR)</p>
<p>210.220.163.82</p>
<p>219.250.36.130</p>
<p>LG U+ (KR)</p>
<p>164.124.101.2</p>
<p>203.248.252.2</p>
<p>164.124.107.9</p>
<p>203.248.242.2</p>
<p>Yandex (RU)</p>
<p>77.88.8.8</p>
<p>77.88.8.1</p>
<p>2a02:6b8::feed:0ff</p>
<p>2a02:6b8:0:1::feed:0ff</p>
<p>SafeDNS (RU)</p>
<p>195.46.39.39</p>
<p>195.46.39.40</p>
<p>DNS.WATCH (DE)</p>
<p>84.200.69.80</p>
<p>84.200.70.40</p>
<p>2001:1608:10:25::1c04:b12f</p>
<p>2001:1608:10:25::9249:d69b</p>
<p>Uncensored (DK)</p>
<p>91.239.100.100</p>
<p>89.233.43.71</p>
<p>2001:67c:28a4::</p>
<p>2a01:3a0:53:53::</p>
<p>Freenom (NL)</p>
<p>80.80.80.80</p>
<p>80.80.81.81</p>
<h2 id="各地电信DNS"><a href="#各地电信DNS" class="headerlink" title="各地电信DNS"></a>各地电信DNS</h2><p>名称</p>
<p>DNS 服务器 IP 地址</p>
<p>安徽电信 DNS</p>
<p>61.132.163.68</p>
<p>202.102.213.68</p>
<p>北京电信 DNS</p>
<p>219.141.136.10</p>
<p>219.141.140.10</p>
<p>重庆电信 DNS</p>
<p>61.128.192.68</p>
<p>61.128.128.68</p>
<p>福建电信 DNS</p>
<p>218.85.152.99</p>
<p>218.85.157.99</p>
<p>甘肃电信 DNS</p>
<p>202.100.64.68</p>
<p>61.178.0.93</p>
<p>广东电信 DNS</p>
<p>202.96.128.86</p>
<p>202.96.128.166</p>
<p>202.96.134.33</p>
<p>202.96.128.68</p>
<p>广西电信 DNS</p>
<p>202.103.225.68</p>
<p>202.103.224.68</p>
<p>贵州电信 DNS</p>
<p>202.98.192.67</p>
<p>202.98.198.167</p>
<p>河南电信 DNS</p>
<p>222.88.88.88</p>
<p>222.85.85.85</p>
<p>黑龙江电信</p>
<p>219.147.198.230</p>
<p>219.147.198.242</p>
<p>湖北电信 DNS</p>
<p>202.103.24.68</p>
<p>202.103.0.68</p>
<p>湖南电信 DNS</p>
<p>222.246.129.80</p>
<p>59.51.78.211</p>
<p>江苏电信 DNS</p>
<p>218.2.2.2</p>
<p>218.4.4.4</p>
<p>61.147.37.1</p>
<p>218.2.135.1</p>
<p>江西电信 DNS</p>
<p>202.101.224.69</p>
<p>202.101.226.68</p>
<p>内蒙古电信</p>
<p>219.148.162.31</p>
<p>222.74.39.50</p>
<p>山东电信 DNS</p>
<p>219.146.1.66</p>
<p>219.147.1.66</p>
<p>陕西电信 DNS</p>
<p>218.30.19.40</p>
<p>61.134.1.4</p>
<p>上海电信 DNS</p>
<p>202.96.209.133</p>
<p>116.228.111.118</p>
<p>202.96.209.5</p>
<p>108.168.255.118</p>
<p>四川电信 DNS</p>
<p>61.139.2.69</p>
<p>218.6.200.139</p>
<p>天津电信 DNS</p>
<p>219.150.32.132</p>
<p>219.146.0.132</p>
<p>云南电信 DNS</p>
<p>222.172.200.68</p>
<p>61.166.150.123</p>
<p>浙江电信 DNS</p>
<p>202.101.172.35</p>
<p>61.153.177.196</p>
<p>61.153.81.75</p>
<p>60.191.244.5</p>
<h2 id="联通DNS服务器"><a href="#联通DNS服务器" class="headerlink" title="联通DNS服务器"></a>联通DNS服务器</h2><p>名称</p>
<p>DNS 服务器 IP 地址</p>
<p>北京联通 DNS</p>
<p>123.123.123.123</p>
<p>123.123.123.124</p>
<p>202.106.0.20</p>
<p>202.106.195.68</p>
<p>重庆联通 DNS</p>
<p>221.5.203.98</p>
<p>221.7.92.98</p>
<p>广东联通 DNS</p>
<p>210.21.196.6</p>
<p>221.5.88.88</p>
<p>河北联通 DNS</p>
<p>202.99.160.68</p>
<p>202.99.166.4</p>
<p>河南联通 DNS</p>
<p>202.102.224.68</p>
<p>202.102.227.68</p>
<p>黑龙江联通</p>
<p>202.97.224.69</p>
<p>202.97.224.68</p>
<p>吉林联通 DNS</p>
<p>202.98.0.68</p>
<p>202.98.5.68</p>
<p>江苏联通 DNS</p>
<p>221.6.4.66</p>
<p>221.6.4.67</p>
<p>内蒙古联通</p>
<p>202.99.224.68</p>
<p>202.99.224.8</p>
<p>山东联通 DNS</p>
<p>202.102.128.68</p>
<p>202.102.152.3</p>
<p>202.102.134.68</p>
<p>202.102.154.3</p>
<p>山西联通 DNS</p>
<p>202.99.192.66</p>
<p>202.99.192.68</p>
<p>陕西联通 DNS</p>
<p>221.11.1.67</p>
<p>221.11.1.68</p>
<p>上海联通 DNS</p>
<p>210.22.70.3</p>
<p>210.22.84.3</p>
<p>四川联通 DNS</p>
<p>119.6.6.6</p>
<p>124.161.87.155</p>
<p>天津联通 DNS</p>
<p>202.99.104.68</p>
<p>202.99.96.68</p>
<p>浙江联通 DNS</p>
<p>221.12.1.227</p>
<p>221.12.33.227</p>
<p>辽宁联通 DNS</p>
<p>202.96.69.38</p>
<p>202.96.64.68</p>
<h2 id="移动DNS服务器"><a href="#移动DNS服务器" class="headerlink" title="移动DNS服务器"></a>移动DNS服务器</h2><p>名称</p>
<p>DNS 服务器 IP 地址</p>
<p>江苏移动 DNS</p>
<p>221.131.143.69</p>
<p>112.4.0.55</p>
<p>安徽移动 DNS</p>
<p>211.138.180.2</p>
<p>211.138.180.3</p>
<p>山东移动 DNS</p>
<p>218.201.96.130</p>
<p>211.137.191.26</p>
<p>四川移动 DNS</p>
<p>223.87.238.22</p>
<h2 id="港澳台DNS服务器"><a href="#港澳台DNS服务器" class="headerlink" title="港澳台DNS服务器"></a>港澳台DNS服务器</h2><p>名称</p>
<p>DNS 服务器 IP 地址</p>
<p>香港 (HK)</p>
<p>205.252.144.228</p>
<p>208.151.69.65</p>
<p>202.181.202.140</p>
<p>202.181.224.2</p>
<p>香港宽频 (HK)</p>
<p>203.80.96.10</p>
<p>203.80.96.9</p>
<p>HKNet宽频 (HK)</p>
<p>202.67.240.222</p>
<p>202.67.240.221</p>
<p>和记环球电讯 (HK)</p>
<p>202.45.84.58</p>
<p>202.45.84.59</p>
<p>NetFront前线 (HK)</p>
<p>202.81.252.1</p>
<p>202.81.252.2</p>
<p>Pacific SuperNet (HK)</p>
<p>202.14.67.4</p>
<p>202.14.67.14</p>
<p>CyberExpress (HK)</p>
<p>202.85.146.104</p>
<p>202.60.252.8</p>
<p>澳门 (MO)</p>
<p>202.175.3.8</p>
<p>202.175.3.3</p>
<p>HiNet (TW)</p>
<p>168.95.1.1</p>
<p>168.95.192.1</p>
<p>2001:b000:168::1</p>
<p>2001:b000:168::2</p>
<p>数位联合电信 (TW)</p>
<p>139.175.252.16</p>
<p>139.175.55.244</p>
<p>台湾网路资讯 (TW)</p>
<p>101.101.101.101</p>
<p>101.102.103.104</p>
<p>2001:de4::101</p>
<p>2001:de4::102</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>关闭「Windows 10」这些功能，或许能解决部分BUG</title>
    <url>/2020/11/01/%E5%85%B3%E9%97%AD%E3%80%8Cwindows-10%E3%80%8D%E8%BF%99%E4%BA%9B%E5%8A%9F%E8%83%BD%EF%BC%8C%E6%88%96%E8%AE%B8%E8%83%BD%E8%A7%A3%E5%86%B3%E9%83%A8%E5%88%86bug/</url>
    <content><![CDATA[<p>[ 所有资源失效不补，会员无任何额外承诺，如若介意请不要付费！]</p>
<p>关闭「Windows 10」这些功能，或许能解决部分BUG</p>
<p>从「Windows 10」发布至今不断的出现各种 BUG 问题，已经被用户调侃成 “BUG WIN” ！</p>
<p><strong>幻灯片放映导致游戏掉帧</strong> 「Windows 10」的桌面壁纸幻灯片放映会导致全屏游戏时掉帧。 解决方法：桌面右键 → 个性化 → 背景 → 设置为图片</p>
<p><strong>碎片整理导致存储空间文件损坏</strong> 当你使用存储空间 “分区空间” 功能时，「Windows 10」2004 可能会损坏你的文件，引起损坏的原因可能是系统自带的碎片整理功能导致的。 解决方法：磁盘右键属性 → 工具 → 优化 → 计划优化关闭 另外微软已经发布了补丁 KB4568831 加入了对影响存储空间问题的修复，还没有收到补丁推送的，可以先关闭磁盘碎片整理优化。</p>
<p><strong>拼音输入法导致软件假死</strong> 「Windows 10」2004 版本里微软更新了拼音输入法，但是会导致某些软件偶尔出现假死情况，例如「PhotoShop」就会出现这个情况。 解决方法：输入法设置 → 常规 → 兼容性 → 打开</p>
<p><strong>搜索索引导致磁盘占用率高</strong> 「Windows 10」的 Windows Search 搜索索引导致机械硬盘占用率高的问题相信很多用户都遇到过。 微软在「Windows 10」2004 版本里面采用了新算法来改进磁盘占用率高的问题，虽然比 1909 好了一些，但偶尔还是会抽风，索性关了吧。 解决方法：计算机管理 → 服务 → Windows Search → 停止</p>
<p><strong>关闭节约电源解决移动硬盘掉盘</strong> 如果你长期挂着移动硬盘到电脑上，在「Windows 10」里可能会遇到突然掉盘的情况，需要重新拔插数据线，才能重新识别到移动硬盘。 解决方法：设备管理器 → USB3.0 → 电源管理 → 关闭节约电源 需要注意的是，你的设备管理器里可能有多个 USB 3.0 设备，建议全部都关闭节约电源功能。</p>
<p><strong>关闭自动更新驱动服务</strong> 「Windows 10」自动更新硬件驱动导致出现无法正常使用的情况非常多，特别是无线网卡、蓝牙驱动容易出现蓝屏。 解决方法：Win R → 输入gpedit.msc → 打开组策略 定位到：计算机配置 — 管理模板 — 系统 — Internet 通信管理 — Internet 通信设置，在右侧窗口中找到 “关闭Windows 更新设备驱动程序搜索” ，选择已禁用。</p>
<p><strong>关闭Windows Defender</strong> 「Windows 10」自带的杀毒软件 Windows Defender 也是磁盘杀手，经常导致磁盘占用率非常高，原因据说是没有对扫描过的文件进行缓存处理，所以你每次运行文件&#x2F;程序都会先扫描一遍。 解决方法：安装其它杀毒软件代替，例如 火绒杀毒 ，安装后 Windows Defender 会自动关闭。 你也可以选择通过组策略设置禁用 Windows Defender 启动，但是不建议系统裸奔，”常在河边走，哪有不湿鞋”。</p>
]]></content>
      <categories>
        <category>Win</category>
      </categories>
      <tags>
        <tag>WIN10</tag>
        <tag>BUG</tag>
      </tags>
  </entry>
  <entry>
    <title>借助mkcert签发本地证书</title>
    <url>/2019/10/20/%E5%80%9F%E5%8A%A9mkcert%E7%AD%BE%E5%8F%91%E6%9C%AC%E5%9C%B0%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<p><a href="https://github.com/FiloSottile/mkcert">mkcert</a> 是由 <a href="https://blog.filippo.io/hi/">Filippo Valsorda</a> 使用<code>go</code>语言开源的一款零配置搭建本地证书服务的工具，它可以兼容<code>Window, Linux, macOS</code>等多种开发平台，省去了我们自签本地证书的繁琐步骤，从而让我们专注于开发。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/10/51066373-96d4aa80-15be-11e9-91e2-f4e44a3a4458.png"></p>
<h2 id="1-安装mkcert"><a href="#1-安装mkcert" class="headerlink" title="1. 安装mkcert"></a>1. 安装mkcert</h2><h3 id="1-1-Windows"><a href="#1-1-Windows" class="headerlink" title="1.1 Windows"></a>1.1 Windows</h3><p>在<code>Windows</code>环境下，推荐使用<code>Chocolatey</code>包管理工具安装<code>mkcert</code>，你可以选择使用<code>cmd</code>或<code>power shell</code>安装<code>Chocolatey</code>：</p>
<p>以管理员权限打开<code>cmd</code>窗口，输入以下命令进行安装</p>
<p>1</p>
<p>@”%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe” -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command “iex ((New-Object System.Net.WebClient).DownloadString(‘<a href="https://chocolatey.org/install.ps1&#39;))&quot;">https://chocolatey.org/install.ps1&#39;))&quot;</a> &amp;&amp; SET “PATH&#x3D;%PATH%;%ALLUSERSPROFILE%\chocolatey\bin”</p>
<p>以管理员权限打开<code>power shell</code>窗口，输入以下命令进行安装</p>
<p>1</p>
<p>Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(‘<a href="https://chocolatey.org/install.ps1&#39;">https://chocolatey.org/install.ps1&#39;</a>))</p>
<p><code>Chocolatey</code>安装完成之后，命令行窗口输入以下命令安装<code>mkcert</code></p>
<p>1</p>
<p>choco install mkcert</p>
<h3 id="1-2-Linux"><a href="#1-2-Linux" class="headerlink" title="1.2 Linux"></a>1.2 Linux</h3><p><strong>以下假定使用的是全新的<code>Linux</code>系统！</strong></p>
<p>首先更新软件源，防止<code>E: Unable to locate package</code>的错误，</p>
<p>1</p>
<p>sudo apt update</p>
<p>首先安装证书数据库工具<code>certutil</code>:</p>
<p>1<br>2</p>
<p>sudo apt install libnss3-tools &#x2F;&#x2F; ubuntu<br>sudo yum install nss-tools &#x2F;&#x2F; centos</p>
<p>然后，安装包管理工具<code>Linuxbrew</code>:</p>
<p>1<br>2</p>
<p>sudo apt install linuxbrew-wrapper  &#x2F;&#x2F; ubuntu<br>sudo yum install linuxbrew-wrapper &#x2F;&#x2F; centos 待定</p>
<p>最后，使用<code>brew</code>安装<code>mkcert</code></p>
<p>1</p>
<p>brew install mkcert</p>
<p>tips:可能需要执行两次命令，同时不要使用<code>sudo</code>命令，系统会提示你不要使用<code>root</code>权限来执行<code>brew</code>。</p>
<p>在<code>mkcert</code>安装目录下启动<code>mkcert</code>，推荐将<code>mkcert</code>加入全局命令，</p>
<p>1</p>
<p>PATH&#x3D;$PATH:&#x2F;home&#x2F;linuxbrew&#x2F;.linuxbrew&#x2F;Cellar&#x2F;mkcert&#x2F;1.2.0&#x2F;bin</p>
<h3 id="1-3-macOS"><a href="#1-3-macOS" class="headerlink" title="1.3 macOS"></a>1.3 macOS</h3><p>使用<a href="https://brew.sh/">Homebrew</a>安装<code>mkcert</code>：</p>
<p>1<br>2</p>
<p>brew install mkcert<br>brew install nss # if you use Firefox</p>
<h2 id="2-生成本地CA证书"><a href="#2-生成本地CA证书" class="headerlink" title="2. 生成本地CA证书"></a>2. 生成本地CA证书</h2><h3 id="2-1-生成根证书"><a href="#2-1-生成根证书" class="headerlink" title="2.1 生成根证书"></a>2.1 生成根证书</h3><p><code>mkcert</code>安装完成之后就可以使用<code>mkcert</code>命令生成本地<code>CA</code>证书了，非常简单，傻瓜式安装。</p>
<p>首先，生成根证书，一般在<code>C:\Users\用户名\AppData\Local\mkcert</code>目录下会生成<code>rootCA.pem</code>和<code>rootCA-key.pem</code>两个文件。</p>
<p>根证书用来充当第三方证书签发机构，类似于<code>Symantec</code>这种机构，为网站签发CA证书。因为证书也可以伪造，所以浏览器需要验证证书的有效性，证书有效之后才可以进行<code>https</code>连接，而第三方签发机构提供证书的可信度验证。</p>
<p><code>rootCA</code>文件就是告诉浏览器我们自签的证书是真实有效的，接下来我们签发的本地证书都离不开<code>rootCA</code>。</p>
<p>1<br>2<br>3<br>4</p>
<p>$ mkcert -install<br>Created a new local CA at “&#x2F;Users&#x2F;filippo&#x2F;Library&#x2F;Application Support&#x2F;mkcert” ?<br>The local CA is now installed in the system trust store! ⚡️<br>The local CA is now installed in the Firefox trust store (requires restart)! ?</p>
<h3 id="2-2-签发本地证书"><a href="#2-2-签发本地证书" class="headerlink" title="2.2 签发本地证书"></a>2.2 签发本地证书</h3><p>根证书生成之后就可以签发本地证书了，命令超级简单，唯一需要注意的就是生成的证书存放路径就是命令的执行路径。</p>
<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12</p>
<p>$ mkcert example.com “*.example.org” myapp.dev localhost 127.0.0.1 ::1<br>Using the local CA at “&#x2F;Users&#x2F;filippo&#x2F;Library&#x2F;Application Support&#x2F;mkcert” ✨</p>
<p>Created a new certificate valid for the following names ?</p>
<ul>
<li>“example.com”</li>
<li>“*.example.org”</li>
<li>“myapp.dev”</li>
<li>“localhost”</li>
<li>“127.0.0.1”</li>
<li>“::1”</li>
</ul>
<p>The certificate is at “.&#x2F;example.com+5.pem” and the key at “.&#x2F;example.com+5-key.pem” ✅</p>
<h3 id="2-3-root-stores"><a href="#2-3-root-stores" class="headerlink" title="2.3 root stores"></a>2.3 root stores</h3><p><code>mkcert</code>支持以下根存储(mkcert supports the following root stores:)：</p>
<ul>
<li>macOS system store</li>
<li>Windows system store</li>
<li>Linux variants that provide either<ul>
<li>update-ca-trust (Fedora, RHEL, CentOS) or</li>
<li>update-ca-certificates (Ubuntu, Debian) or</li>
<li>trust (Arch)</li>
</ul>
</li>
<li>Firefox (macOS and Linux only)</li>
<li>Chrome and Chromium</li>
<li>Java (when JAVA_HOME is set)</li>
</ul>
<p>这句话的意思就是说，<code>mkcert</code>会自动把证书加入系统认证，操作系统和浏览器可以直接识别。比如，证书安装完成之后chrome的证书信任中心会增加以下内容：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/10/p36.png"></p>
<h3 id="2-4-node环境验证"><a href="#2-4-node环境验证" class="headerlink" title="2.4 node环境验证"></a>2.4 node环境验证</h3><p><code>node</code>不会使用<code>root store</code>，因此需要特殊对待，命令行手动设置<code>NODE_EXTRA_CA_CERTS</code>这个环境变量。</p>
<p>1</p>
<p>set NODE_EXTRA_CA_CERTS&#x3D;”$(mkcert -CAROOT)&#x2F;rootCA.pem”</p>
<p>** <code>mkcert -CAROOT</code>会输出本地根证书的存储路径，可以使用环境变量<code>$CAROOT</code>来指定寻找证书的默认路径。</p>
<p>使用<code>node</code>开启<code>https</code>服务：</p>
<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20</p>
<p>var https &#x3D; require(‘https’);<br>var fs &#x3D; require(‘fs’);</p>
<p>const hostname &#x3D; ‘127.0.0.1’;<br>const port &#x3D; 3000;</p>
<p>var options &#x3D; {<br> key : fs.readFileSync(‘c:&#x2F;证书路径’),<br> cert : fs.readFileSync(‘c:&#x2F;证书路径’),<br>}</p>
<p>const server &#x3D; https.createServer(options ,(req, res) &#x3D;&gt; {<br> res.statusCode &#x3D; 200;<br> res.setHeader(‘Content-Type’, ‘text&#x2F;plain’);<br> res.end(‘Hello World\n’);<br>});</p>
<p>server.listen(port, hostname, () &#x3D;&gt; {<br> console.log(`Server running at https:&#x2F;&#x2F;${hostname}:${port}&#x2F;`);<br>});</p>
<p><code>https</code>进行访问：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/10/p37.png"></p>
<h2 id="3-分享"><a href="#3-分享" class="headerlink" title="3. 分享"></a>3. 分享</h2><p>搞定了自己，接下来就要搞定别人，如何让其它用户也识别我们的本地证书呢？</p>
<p><code>mkcert</code>同样也给我们提供了可移植的解决方案。</p>
<p>将自签证书(包括公钥和私钥)以及根证书的公钥拷贝给其它用户，修改<code>$CAROOT</code>环境变量，指定<code>mkcert</code>寻找根证书的路径，</p>
<p><code>linux</code>系统下：</p>
<p>1</p>
<p>export CAROOT&#x3D;”&#x2F;home&#x2F;…”</p>
<p><code>window</code>系统下：</p>
<p>设置系统的环境变量，变量名为<code>CAROOT</code></p>
<blockquote>
<p>我的电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量</p>
</blockquote>
<p>最后执行<code>mkcert -install</code>即可，控制台会提示，此时我们的自签证书就可以在其它机器上运行了，根证书被导入到了浏览器的证书信任中心。</p>
<p>1<br>2</p>
<p>The local CA is now installed in the system trust store! ⚡️<br>The local CA is now installed in the Firefox and&#x2F;or Chrome&#x2F;Chromium trust store (requires browser restart)! ?</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>mkcert</tag>
        <tag>本地证书</tag>
      </tags>
  </entry>
  <entry>
    <title>几个常用 Nginx 规则</title>
    <url>/2020/04/14/%E5%87%A0%E4%B8%AA%E5%B8%B8%E7%94%A8-nginx-%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 防止tpl inc cfg文件被下载 </span><br><span class="line">        location ~* \.(tplinccfg)$ &#123; </span><br><span class="line">        deny all;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 套用CDN的情况返回真实IP</span><br><span class="line">        add_header X-Real-IP $http_x_real_ip;</span><br><span class="line">        set_real_ip_from 0.0.0.0/0;</span><br><span class="line">        real_ip_header X-Real-IP;</span><br><span class="line">        real_ip_recursive on;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># SSL反代</span><br><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">     listen 443;</span><br><span class="line">      server_name www.ccav.me ccav.me;</span><br><span class="line">      #rewrite ^/(.*) https://$server_name$1 permanent;</span><br><span class="line">      ssl on;</span><br><span class="line">      ssl_certificate /root/#PEM/CRT;</span><br><span class="line">      ssl_certificate_key /root/#KEY;</span><br><span class="line">      #               ssl_protocols SSLv2 SSLv3 TLSv1;</span><br><span class="line">       #              ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</span><br><span class="line">        #             ssl_prefer_server_ciphers on;</span><br><span class="line">     #listen 80;</span><br><span class="line">      location / &#123;</span><br><span class="line">      proxy_redirect www.B.com /;</span><br><span class="line">      proxy_pass https://www.B.com;</span><br><span class="line">      proxy_set_header Accept-Encoding &quot;&quot;;</span><br><span class="line">      proxy_set_header User-Agent $http_user_agent;</span><br><span class="line">      proxy_set_header Accept-Language &quot;zh-CN&quot;;</span><br><span class="line">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>八个HTTPS和SSL优化使用心得-减少等待时间和降低Https性能损耗</title>
    <url>/2020/04/30/%E5%85%AB%E4%B8%AAhttps%E5%92%8Cssl%E4%BC%98%E5%8C%96%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97-%E5%87%8F%E5%B0%91%E7%AD%89%E5%BE%85%E6%97%B6%E9%97%B4%E5%92%8C%E9%99%8D%E4%BD%8Ehttps%E6%80%A7%E8%83%BD/</url>
    <content><![CDATA[<p>随着大家上网安全意识的增强，以及各大主要互联网公司对Https普及工作的推动，HTTPS SSL现在基本上成了建站的标配了。得益于<a href="https://wzfou.com/tag/lets-encrypt/">Let’s Encrypt</a>、Digicert、TrustAsia、Symantec等提供的免费SSL证书，现在不管是个人建站还是企业建站，上Https的成本可以忽略不计了。</p>
<p>为了安全，我们要上Https，但是开启 SSL 会增加内存、CPU、网络带宽的开销。相对于http，使用TCP 三次握手建立连接，客户端和服务器需要交换3个包，https除了 TCP 的三个包，还要加上 ssl握手需要的9个包，一共是12个包。所以，<a href="https://wzfou.com/tag/https-youhua/">HTTPS优化</a>得不少反而容易出现性能慢的问题。</p>
<p>当然，有人可能为会认为HTTPS与SSL增加的服务器开销基本上没有感觉到，这是因为网站的流量比较少，加上服务器的性能配置足以支撑起当前的流量。但是对于大型的网站，例如百度、Google以及热门APP，优化Https性能，减少资源消耗还是非常有用的。</p>
<p><img src="/2020/04/ssl-ecc_00.png" alt="八个HTTPS和SSL优化使用心得-减少等待时间降低Https性能损耗加大SSL缓存"></p>
<p>本篇文章就来分享一下HTTPS和<a href="https://wzfou.com/tag/ssl-youhua/">SSL优化</a>使用几点心得体会，更多的有关于<a href="https://wzfou.com/ssl/">SSL证书</a>和Https经验教程还有：</p>
<ol>
<li><a href="https://wzfou.com/mianfei-ssl/">免费SSL证书收集整理汇总-免费给网站添加Https安全加密访问</a></li>
<li><a href="https://wzfou.com/cloudflare/">十个你可能不知道的CloudFlare免费CDN加速技巧-SSL\DDOS\Cache</a></li>
<li><a href="https://wzfou.com/hsts-preload/">启用HSTS并加入HSTS Preload List让网站Https访问更加安全-附删除HSTS方法</a></li>
</ol>
<p><strong>PS：2018年9月6日更新</strong>，如果想要使用付费的DNS解析服务，这里有两个比较便宜的比较适合个人的DNS服务：<a href="https://wzfou.com/cloudns-dnsmadeeasy/">两款适合个人使用的DNS产品:ClouDNS和DNS Made Easy域名解析</a>。</p>
<p><strong>PS：2019年1月15日更新，</strong>想要SSL访问获得更快的速度以及更高的性能，可以试试TLSV1.3和Brotli压缩：<a href="https://wzfou.com/tlsv1-3-brotli/">网站优化加速-开启TLSV1.3和Brotli压缩-Oneinstack,LNMP,宝塔面板</a>。</p>
<h2 id="一、如何选择免费SSL证书？"><a href="#一、如何选择免费SSL证书？" class="headerlink" title="一、如何选择免费SSL证书？"></a>一、如何选择免费SSL证书？</h2><p><strong>建议选择Let’s Encrypt。</strong>Let’s Encrypt免费SSL证书虽然只有90天，但是可以无限期续期，并且支持手动和自动续期。Let’s Encrypt SSL在各大浏览器上都得到认可，是免费SSL证书的首选。教程：<a href="https://wzfou.com/lets-encrypt-wildcard-ssl/">Let’s Encrypt Wildcard 免费泛域名SSL证书一键申请与SSL使用教程</a>。</p>
<p><img src="/2020/04/ssl-ecc_03.jpg" alt="如何选择免费SSL证书"></p>
<p>Let’s Encrypt适用于VPS等有独立IP的主机上，否则只能使用一些利用Let’s Encrypt API开发的在线SSL证书申请。当然，有一定的经济实力的话自然选择付费的SSL证书更为可行，更多SSL证书见：<a href="https://wzfou.com/mianfei-ssl/">免费SSL证书收集整理汇总</a>。</p>
<h2 id="二、服务器开启HSTS"><a href="#二、服务器开启HSTS" class="headerlink" title="二、服务器开启HSTS"></a>二、服务器开启HSTS</h2><p>采用 HSTS 协议的网站将保证浏览器始终连接到网站的HTTPS版本，而不需要用户手动在URL地址栏中输入包含<code>https://</code>的加密地址。我用的是Nginx 服务器，只需要编辑 Nginx 配置文件（如：&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf）将下面行添加到 HTTPS 配置的 server 块中即可：</p>
<p>add_header Strict-Transport-Security “max-age&#x3D;63072000; includeSubdomains; preload”;</p>
<p>Apache、Lighttpd等启用HSTS详细的方法见：<a href="https://wzfou.com/hsts-preload/#HSTS">服务器启用HSTS</a>。</p>
<p><img src="/2020/04/ssl-ecc_04.jpg" alt="服务器开启HSTS"></p>
<h2 id="三、域名加入HSTS-preload-list计划"><a href="#三、域名加入HSTS-preload-list计划" class="headerlink" title="三、域名加入HSTS preload list计划"></a>三、域名加入HSTS preload list计划</h2><p>上面虽然是启用了HSTS 协议保证了用户访问的始终是Https连接，但是一般地首次访问网站用户都会习惯性地输入非https域名，这就导致了第一次访问网站容易出现http劫持的问题。HSTS preload list计划就是为了解决这个问题的，它是chrome\Firefox\Edge等浏览器内置的列表。</p>
<p><img src="/2020/04/ssl-ecc_04_1.jpg" alt="域名加入HSTS preload list计划"></p>
<p>加入HSTS Preload List的方法：<a href="https://wzfou.com/hsts-preload/">启用HSTS并加入HSTS Preload List让网站Https访问更加安全-附删除HSTS方法</a>。目前wzfou.com已经成功加入到了HSTS preload list，如果你用的是Chrome或者Firefox，第一次访问本站就是默认用Https连接的。</p>
<p><img src="/2020/04/ssl-ecc_05.gif" alt="域名加入HSTS preload list计划成功提交"></p>
<h2 id="四、开启HTTP-x2F-2和OCSP-Stapling"><a href="#四、开启HTTP-x2F-2和OCSP-Stapling" class="headerlink" title="四、开启HTTP&#x2F;2和OCSP Stapling"></a>四、开启HTTP&#x2F;2和OCSP Stapling</h2><p>HTTP&#x2F;2 相比于之前的HTTP&#x2F;1.1 在性能上的大幅度提升，所以只要你启用了Https，记得一定要开启HTTP&#x2F;2，检查一下你的配置文件是否有：<code>listen 443 ssl http2;</code></p>
<p>OCSP Stapling 服务器事先模拟浏览器对证书链进行验证，然后将 OCSP 验证结果缓存到本地。这样，当浏览器访问站点时，在握手阶段，可以直接拿到 OCSP 响应结果和证书链，对访问速度有明显提升。</p>
<p><img src="/2020/04/ssl-ecc_06.jpg" alt="开启HTTP/2和OCSP Stapling "></p>
<p><strong>Nginx 中开启 OCSP Stapling</strong>。（如果 ssl_certificate 指令指定了完整的证书链，则 ssl_trusted_certificate 可省略）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssl_stapling on;</span><br><span class="line">ssl_stapling_verify on;</span><br><span class="line">ssl_trusted_certificate /path/to/certs/chained.pem;</span><br></pre></td></tr></table></figure>

<p><strong>Apache 中开启 OCSP Stapling</strong>：</p>
<p>在 <code>&lt;VirtualHost&gt;&lt;/VirtualHost&gt;</code> 中添加:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SSLUseStapling on</span><br></pre></td></tr></table></figure>

<p>在 <code>&lt;VirtualHost&gt;&lt;/VirtualHost&gt;</code> 外添加:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SSLStaplingCache shmcb:/tmp/stapling_cache(128000)</span><br></pre></td></tr></table></figure>

<h2 id="五、使用ECC和RSA双证书"><a href="#五、使用ECC和RSA双证书" class="headerlink" title="五、使用ECC和RSA双证书"></a>五、使用ECC和RSA双证书</h2><p>默认的我们都会使用RSA证书，因为RSA证书的兼容性最为广泛。但是ECC 证书拥有体积小、运算速度快、安全性高（256位<code>ECC key</code>就能起到相当于3072位的<code>RSA key</code>的安全性）等特点，可以在一定程度上提供Https性能。</p>
<p><img src="/2020/04/ssl-ecc_07.jpg" alt="使用ECC和RSA双证书"></p>
<p>Let’s Encrypt已经支持生成ECC 证书了，使用 acme.sh 签发SSL证书， 指定 <code>--keylength ec-256</code> 就可以将证书类型改为 ECC：</p>
<p>acme.sh –issue -w &#x2F;data&#x2F;wwwroot&#x2F;wzfou.com -d wzfou.com -d <a href="http://www.wzfou.com/">www.wzfou.com</a> –keylength ec-256</p>
<p>需要注意的是ECC在Windows XP上不兼容，这个时候我们就会想到用双证书了，即当不支持ECC证书时Nginx自动将RSA证书展示给用户。如果nginx 的版本大于<code>1.11</code>，直接就可以在配置文件中写上ECC和RSA双证书的路径了，wzfou.com演示如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ECC</span><br><span class="line">ssl_certificate /root/.acme.sh/wzfou.com_ecc/fullchain.cer;</span><br><span class="line">ssl_certificate_key /root/.acme.sh/wzfou.com_ecc/wzfou.com.key;</span><br><span class="line">#RSA</span><br><span class="line">ssl_certificate /usr/local/nginx/conf/ssl/wzfou.com.crt;</span><br><span class="line">ssl_certificate_key /usr/local/nginx/conf/ssl/wzfou.com.key;</span><br></pre></td></tr></table></figure>

<p>重启Nginx，当XP等不支持ECC证书的用户访问网站时，显示的是RSA证书。</p>
<p><img src="/2020/04/ssl-ecc_02.gif" alt="显示RSA证书"></p>
<p>而其它的用户则优先使用ECC证书。</p>
<p><img src="/2020/04/ssl-ecc_03.gif" alt="使用ECC证书"></p>
<p>如果你发现ECC没有优先显示，检查一下<code>ssl_prefer_server_ciphers</code>是否开启，同时<code>ssl_ciphers</code>有没有配置好，以下是wzfou.com当用的配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line">ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5;</span><br></pre></td></tr></table></figure>

<p>另外，下面三个任选其一即可（仅供测试）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssl_ciphers &#x27;EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5&#x27;;</span><br><span class="line"></span><br><span class="line">ssl_ciphers &#x27;ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="六、-开启DNS-CAA"><a href="#六、-开启DNS-CAA" class="headerlink" title="六、 开启DNS CAA"></a>六、 开启DNS CAA</h2><p>DNS CAA的作用是只允许在记录中列出的 CA 机构颁发针对该域名(或子域名)的证书，以防止有人伪造SSL证书，同时CAA 记录可以控制单域名 SS L证书的发行，也可以控制通配符证书。详细方法见：<a href="https://wzfou.com/jdcloud-dns/#ftoc-heading-3">京东云DNS设置CAA</a>。</p>
<p><img src="/2020/04/ssl-ecc_08.gif" alt="开启CAA"></p>
<p><strong>问题：</strong>开启DNS CAA导致错误：Verify error:CAA record for *.wzfou.comprevents issuance。解决的办法就是增加 <code>issuewild</code> 记录： <code>0 issuewild &quot;letsencrypt.org&quot;</code> 。 另外提供两个检测CAA配置是否正确的网站：</p>
<ol>
<li><a href="https://caatest.co.uk/">https://caatest.co.uk/</a></li>
<li><a href="https://dnsspy.io/labs/caa-validator">https://dnsspy.io/labs/caa-validator</a></li>
</ol>
<h2 id="七、定期自动更新SSL证书"><a href="#七、定期自动更新SSL证书" class="headerlink" title="七、定期自动更新SSL证书"></a>七、定期自动更新SSL证书</h2><p>想手动更新方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># RSA</span><br><span class="line">$ acme.sh --renew -d wzfou.com –d www.wzfou.com --force</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一般地acme.sh已经自动添加了定时任务了，定期更新Let’s Encrypt证书，如果你发现没有定期更新证书，检查一下你的Cron任务是否正确，也可以试试强制更新：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/root/.acme.sh&quot;https://wzfou.cdn.bcebos.com/acme.sh --cron --home &quot;/root/.acme.sh&quot; --force</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/ssl-ecc_18.gif" alt="定期自动更新SSL证书 "></p>
<h2 id="八、检测SSL证书配置"><a href="#八、检测SSL证书配置" class="headerlink" title="八、检测SSL证书配置"></a>八、检测SSL证书配置</h2><p>常用的检测网站有：</p>
<ol>
<li><a href="https://www.ssllabs.com/ssltest/analyze.html">https://www.ssllabs.com/ssltest/analyze.html</a></li>
<li><a href="https://myssl.com/">https://myssl.com/</a></li>
</ol>
<p>重点推荐用ssllabs.com，检测的结果还是非常地准确，如下：</p>
<p><img src="/2020/04/ssl-ecc_19.gif" alt="检测SSL证书配置"></p>
<h2 id="九、综合"><a href="#九、综合" class="headerlink" title="九、综合"></a>九、综合</h2><p>综合以上优化策略，Nginx的配置文件具体的优化如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">listen 443 ssl http2;</span><br><span class="line">#使用HTTP/2，需要Nginx1.9.7以上版本</span><br><span class="line"></span><br><span class="line">add_header Strict-Transport-Security &quot;max-age=6307200; includeSubdomains; preload&quot;;</span><br><span class="line">#开启HSTS，并设置有效期为“6307200秒”（6个月），包括子域名(根据情况可删掉)，预加载到浏览器缓存(根据情况可删掉)</span><br><span class="line"></span><br><span class="line">add_header X-Frame-Options DENY;</span><br><span class="line">#禁止被嵌入框架</span><br><span class="line"></span><br><span class="line">add_header X-Content-Type-Options nosniff;</span><br><span class="line">#防止在IE9、Chrome和Safari中的MIME类型混淆攻击</span><br><span class="line"></span><br><span class="line">ssl_certificate /usr/local/nginx/conf/vhost/sslkey/www.linpx.com.crt;</span><br><span class="line">ssl_certificate_key /usr/local/nginx/conf/vhost/sslkey/www.linpx.com.key;</span><br><span class="line">#SSL证书文件位置</span><br><span class="line"></span><br><span class="line">ssl_trusted_certificate /usr/local/nginx/conf/vhost/sslkey/chaine.pem;</span><br><span class="line">#OCSP Stapling的证书位置</span><br><span class="line"></span><br><span class="line">ssl_dhparam /usr/local/nginx/conf/vhost/sslkey/dhparam.pem;</span><br><span class="line">#DH-Key交换密钥文件位置</span><br><span class="line"></span><br><span class="line">#SSL优化配置</span><br><span class="line"></span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">#只允许TLS协议</span><br><span class="line"></span><br><span class="line">ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;</span><br><span class="line">#加密套件,这里用了CloudFlare&#x27;s Internet facing SSL cipher configuration</span><br><span class="line"></span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line">#由服务器协商最佳的加密算法</span><br><span class="line"></span><br><span class="line">ssl_session_cache builtin:1000 shared:SSL:10m;</span><br><span class="line">#Session Cache，将Session缓存到服务器，这可能会占用更多的服务器资源</span><br><span class="line"></span><br><span class="line">ssl_session_tickets on;</span><br><span class="line">#开启浏览器的Session Ticket缓存</span><br><span class="line"></span><br><span class="line">ssl_session_timeout 10m; </span><br><span class="line">#SSL session过期时间</span><br><span class="line"></span><br><span class="line">ssl_stapling on; </span><br><span class="line">#OCSP Stapling开启,OCSP是用于在线查询证书吊销情况的服务，使用OCSP Stapling能将证书有效状态的信息缓存到服务器，提高TLS握手速度</span><br><span class="line"></span><br><span class="line">ssl_stapling_verify on;</span><br><span class="line">#OCSP Stapling验证开启</span><br><span class="line"></span><br><span class="line">resolver 8.8.8.8 8.8.4.4 valid=300s;</span><br><span class="line">#用于查询OCSP服务器的DNS</span><br><span class="line"></span><br><span class="line">resolver_timeout 5s;</span><br><span class="line">#查询域名超时时间</span><br><span class="line"></span><br><span class="line">···</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>实际使用过程中发现个别的“优化”还得根据自身的需要来确定，以下是wzfou.com正在用的Nginx配置，仅供参考：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">listen 80; </span><br><span class="line">listen 443 ssl http2;</span><br><span class="line">#ECC</span><br><span class="line">ssl_certificate /root/.acme.sh/wzfou.com_ecc/fullchain.cer;</span><br><span class="line">ssl_certificate_key /root/.acme.sh/wzfou.com_ecc/wzfou.com.key;  </span><br><span class="line">#RSA </span><br><span class="line">ssl_certificate /usr/local/nginx/conf/ssl/wzfou.com.crt;</span><br><span class="line">ssl_certificate_key /usr/local/nginx/conf/ssl/wzfou.com.key; </span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5;</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line">ssl_session_timeout 10m;</span><br><span class="line">ssl_session_cache builtin:1000 shared:SSL:10m;</span><br><span class="line">ssl_buffer_size 1400;</span><br><span class="line">add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; preload&quot;;</span><br><span class="line">ssl_stapling on; </span><br><span class="line">ssl_stapling_verify on;</span><br></pre></td></tr></table></figure>

<p><strong>PS：2018年8月5日更新</strong>，感谢<a href="https://wzfou.com/https-ssl/#comment-7061">xiaoz</a>的提醒，这里有一个在线生成SSL配置的网站，出自Mozilla，参考性非常高：</p>
<ol>
<li><a href="https://mozilla.github.io/server-side-tls/ssl-config-generator/">https://mozilla.github.io/server-side-tls/ssl-config-generator/</a></li>
</ol>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>CentOS</tag>
        <tag>Debian</tag>
        <tag>Linux</tag>
        <tag>SSL</tag>
        <tag>OneinStack</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 Dnsmasq 部署 DNS 服务</title>
    <url>/2020/05/14/%E5%88%A9%E7%94%A8-dnsmasq-%E9%83%A8%E7%BD%B2-dns-%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>Dnsmasq提供DNS缓存和DHCP服务、Tftp服务功能。作为域名解析服务器(DNS)，Dnsmasq可以通过缓存DNS请求来提高对访问过的网址的连接速度。作为DHCP服务器，Dnsmasq可以为局域网电脑提供内网ip地址和路由。DNS和DHCP两个功能可以同时或分别单独实现。Dnsmasq轻量且易配置，适用于个人用户或少于50台主机的网络。此外它还自带了一个PXE服务器。</p>
<p><strong>Dnsmasq工作原理</strong></p>
<p>当接受到一个DNS请求时，Dnsmasq首先会查找<code>/etc/hosts</code>这个文件，然后查找<code>/etc/resolv.con</code>f中定义的外部DNS。所以说Dnsmasq是一个很不错的外部DNS中继。</p>
<p>配置Dnsmasq为DNS缓存服务器，同时在<code>/etc/hosts</code>文件中加入本地内网解析，这样一来每当内网机器查询时就会优先查询hosts文件，这就等于将<code>/etc/hosts</code>共享给全内网机器使用，从而解决内网机器互相识别的问题。相比逐台机器编辑hosts文件或者添加Bind DNS记录，仅编辑一个hosts文件，这简直太容易了。</p>
<h3 id="安装Dnsmasq"><a href="#安装Dnsmasq" class="headerlink" title="安装Dnsmasq"></a>安装Dnsmasq</h3><ul>
<li>Ubuntu&#x2F;Debian</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ apt-get install dnsmasq</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum install dnsmasq</span><br></pre></td></tr></table></figure>

<h3 id="配置Dnsmasq"><a href="#配置Dnsmasq" class="headerlink" title="配置Dnsmasq"></a>配置Dnsmasq</h3><p>Dnsmasq处理DNS设置与BIND等其他DNS服务有所不同。所有的配置都在一个文件中完成<code>/etc/dnsmasq.conf</code>。默认情况下dnsmasq.conf中只开启了最后include项，可以在<code>/etc/dnsmasq.d</code>中自己写任意名字的配置文件。</p>
<h4 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h4><p>Dnsmasq配置文件是<code>/etc/dnsmasq.conf</code>，下面对Dnsmasq中和DNS相关的配置项进行说明。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用指定的端口代替默认的DNS 53端口，如果设置为0，则完全禁止DNS功能，只使用dhcp服务</span><br><span class="line">port=5353</span><br><span class="line"></span><br><span class="line">以下两个参数告诉Dnsmasq过滤一些查询：1.哪些公共DNS没有回答 2.哪些root根域不可达。</span><br><span class="line"></span><br><span class="line">从不转发格式错误的域名</span><br><span class="line">#domain-needed</span><br><span class="line"></span><br><span class="line">从不转发不在路由地址中的域名</span><br><span class="line">#bogus-priv</span><br><span class="line"></span><br><span class="line">resolv-file配置Dnsmasq额外的向流的DNS服务器，如果不开启就使用linux主机默认的/etc/resolv.conf里的nameserver，通过下面的选项指定其他文件。</span><br><span class="line">resolv-file=/etc/dnsmasq.d/upstream_dns.conf</span><br><span class="line"></span><br><span class="line">默认情况下Dnsmasq会发送查询到它的任何上游DNS服务器上，如果取消注释，则Dnsmasq则会严格按照/etc/resolv.conf中的DNS Server顺序进行查询。</span><br><span class="line">#strict-order</span><br><span class="line"></span><br><span class="line">以下两个参数控制是否通过/etc/resolv.conf确定上游服务器，是否检测/etc/resolv.conf的变化，则取消注释。</span><br><span class="line"></span><br><span class="line">如果你不想Dnsmasq读取/etc/resolv.conf文件或者其他文件，获得它的servers</span><br><span class="line"># If you don&#x27;t want dnsmasq to read /etc/resolv.conf or any other</span><br><span class="line"># file, getting its servers from this file instead (see below), then</span><br><span class="line"># uncomment this.</span><br><span class="line">#no-resolv</span><br><span class="line"></span><br><span class="line">如果你不允许Dnsmasq通过轮询/etc/resolv.conf或者其他文件来获取配置的改变，则取消注释。</span><br><span class="line">#no-poll</span><br><span class="line"></span><br><span class="line">增加一个name server，一般用于内网域名</span><br><span class="line">#server=/localnet/192.168.0.1</span><br><span class="line"></span><br><span class="line">设置一个反向解析，所有192.168.3.0/24的地址都到10.1.2.3去解析</span><br><span class="line">#server=/3.168.192.in-addr.arpa/10.1.2.3</span><br><span class="line"></span><br><span class="line">增加一个本地域名，会在/etc/hosts中进行查询</span><br><span class="line">#local=/localnet/</span><br><span class="line"></span><br><span class="line">增加一个域名，强制解析到你指定的地址上</span><br><span class="line">#address=/double-click.net/127.0.0.1</span><br><span class="line"></span><br><span class="line">同上，还支持ipv6</span><br><span class="line">#address=/www.thekelleys.org.uk/fe80::20d:60ff:fe36:f83</span><br><span class="line"></span><br><span class="line">增加查询yahoo google和它们的子域名到vpn、search查找</span><br><span class="line"># Add the IPs of all queries to yahoo.com, google.com, and their</span><br><span class="line"># subdomains to the vpn and search ipsets:</span><br><span class="line">#ipset=/yahoo.com/google.com/vpn,search</span><br><span class="line"></span><br><span class="line">你还可以控制Dnsmasq和Server之间的查询从哪个网卡出去</span><br><span class="line"># server=10.1.2.3@eth1</span><br><span class="line"></span><br><span class="line">指定源地址携带10.1.2.3地址和192.168.1.1的55端口进行通讯</span><br><span class="line"># and this sets the source (ie local) address used to talk to</span><br><span class="line"># 10.1.2.3 to 192.168.1.1 port 55 (there must be a interface with that</span><br><span class="line"># IP on the machine, obviously).</span><br><span class="line"># server=10.1.2.3@192.168.1.1#55</span><br><span class="line"></span><br><span class="line">改变Dnsmasq默认的uid和gid</span><br><span class="line">#user=</span><br><span class="line">#group=</span><br><span class="line"></span><br><span class="line">如果你想Dnsmasq监听某个端口为dhcp、dns提供服务</span><br><span class="line">#interface=</span><br><span class="line"></span><br><span class="line">你还可以指定哪个端口你不想监听</span><br><span class="line">#except-interface=</span><br><span class="line"></span><br><span class="line">设置想监听的地址，如果你本机要使用写上127.0.0.1。</span><br><span class="line">#listen-address=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果你想在某个端口只提供dns服务，则可以进行配置禁止dhcp服务</span><br><span class="line">#no-dhcp-interface=</span><br><span class="line"></span><br><span class="line"># On systems which support it, dnsmasq binds the wildcard address,</span><br><span class="line"># even when it is listening on only some interfaces. It then discards</span><br><span class="line"># requests that it shouldn&#x27;t reply to. This has the advantage of</span><br><span class="line"># working even when interfaces come and go and change address. If you</span><br><span class="line"># want dnsmasq to really bind only the interfaces it is listening on,</span><br><span class="line"># uncomment this option. About the only time you may need this is when</span><br><span class="line"># running another nameserver on the same machine.</span><br><span class="line">#bind-interfaces</span><br><span class="line"></span><br><span class="line">如果你不想使用/etc/hosts，则取消下面的注释</span><br><span class="line">#no-hosts</span><br><span class="line"></span><br><span class="line">如果你项读取其他类似/etc/hosts文件，则进行配置</span><br><span class="line">addn-hosts=/etc/banner_add_hosts</span><br><span class="line"></span><br><span class="line">自动的给hosts中的name增加一个域名</span><br><span class="line">#expand-hosts</span><br><span class="line"></span><br><span class="line">给dhcp服务赋予一个域名</span><br><span class="line">#domain=thekelleys.org.uk</span><br><span class="line"></span><br><span class="line">给dhcp的一个子域赋予一个不同的域名</span><br><span class="line">#domain=wireless.thekelleys.org.uk,192.168.2.0/24</span><br><span class="line"></span><br><span class="line">同上，不过子域是一个范围</span><br><span class="line">#domain=reserved.thekelleys.org.uk,192.68.3.100,192.168.3.200</span><br><span class="line"></span><br><span class="line">dhcp分发ip的范围，以及每个ip的租约时间</span><br><span class="line">#dhcp-range=192.168.0.50,192.168.0.150,12h</span><br><span class="line"></span><br><span class="line">同上，不过给出了掩码</span><br><span class="line">#dhcp-range=192.168.0.50,192.168.0.150,255.255.255.0,12h</span><br><span class="line"></span><br><span class="line">自动加载conf-dir目录下的配置文件</span><br><span class="line">conf-dir=/etc/dnsmasq.d</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> </p>
<h4 id="配置实例"><a href="#配置实例" class="headerlink" title="配置实例"></a>配置实例</h4><h5 id="配置上游服务器地址"><a href="#配置上游服务器地址" class="headerlink" title="配置上游服务器地址"></a>配置上游服务器地址</h5><p>resolv-file配置Dnsmasq额外的上游的DNS服务器，如果不开启就使用Linux主机默认的<code>/etc/resolv.conf</code>里的nameserver。</p>
<ul>
<li>通过下面的选项指定其他文件来管理上游的DNS服务器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vi /etc/dnsmasq.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>在指定文件中增加转发DNS的地址</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vi /etc/resolv.dnsmasq.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="本地启用Dnsmasq解析"><a href="#本地启用Dnsmasq解析" class="headerlink" title="本地启用Dnsmasq解析"></a>本地启用Dnsmasq解析</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vi /etc/resolv.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> </p>
<h5 id="添加解析记录"><a href="#添加解析记录" class="headerlink" title="添加解析记录"></a>添加解析记录</h5><ul>
<li>使用系统默认hosts</li>
</ul>
<p>编辑hosts文件,简单列举一下格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vi /etc/hosts</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> </p>
<p>hosts文件的强大之处还在于能够劫持解析，譬如mirror.centos.org是CentOS仓库所在，几乎是机器正常必访问一个域名，我将它解析成一个内网地址，搭建一个内网镜像站，不仅内网机器也可以及时得到安全更新，每月还可以节省很多流量。</p>
<ul>
<li>使用自定义hosts文件</li>
</ul>
<p>修改配置，增加自定义hosts文件位置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vi /etc/dnsmasq.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> </p>
<p>在&#x2F;etc&#x2F;dnsmasq.hosts文件中添加DNS记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vi /etc/dnsmasq.hosts</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>使用自定义conf</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vi /etc/dnsmasq.d/address.conf</span><br><span class="line"></span><br><span class="line"># 指定dnsmasq默认查询的上游服务器，此处以Google Public DNS为例。</span><br><span class="line">server=8.8.8.8</span><br><span class="line">server=8.8.4.4</span><br><span class="line"></span><br><span class="line"># 把所有.cn的域名全部通过114.114.114.114这台国内DNS服务器来解析</span><br><span class="line">server=/cn/114.114.114.114</span><br><span class="line"></span><br><span class="line"># 给*.apple.com和taobao.com使用专用的DNS</span><br><span class="line">server=/taobao.com/223.5.5.5</span><br><span class="line">server=/.apple.com/223.5.5.5</span><br><span class="line"></span><br><span class="line"># 把www.hi-linux.com解析到特定的IP</span><br><span class="line">address=/www.hi-linux.com/192.168.101.107</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> </p>
<p>注：也可以直接添加到&#x2F;etc&#x2F;dnsmasq.conf中,不过&#x2F;etc&#x2F;dnsmasq.d&#x2F;*.conf的优先级大于&#x2F;etc&#x2F;dnsmasq.conf。</p>
<h3 id="修改iptables配置"><a href="#修改iptables配置" class="headerlink" title="修改iptables配置"></a>修改iptables配置</h3><ul>
<li>允许本机的53端口可对外访问</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ iptables -A INPUT -p udp -m udp --dport 53 -j ACCEPT</span><br><span class="line">$ iptables -A INPUT -p tcp -m tcp --dport 53 -j ACCEPT</span><br></pre></td></tr></table></figure>

<ul>
<li>转发DNS请求</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开启流量转发功能</span><br><span class="line">$ echo &#x27;1&#x27; &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">$ echo &#x27;1&#x27; &gt; /proc/sys/net/ipv6/ip_forward # IPv6 用户选用</span><br><span class="line"></span><br><span class="line"># 添加流量转发规则，将外部到53的端口的请求映射到Dnsmasq服务器的53端口</span><br><span class="line">$ iptables -t nat -A PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 53</span><br><span class="line">$ iptables -t nat -A PREROUTING -p tcp --dport 53 -j REDIRECT --to-ports 53</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>保存规则并重启</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ service iptables save</span><br><span class="line">$ service iptables restart</span><br></pre></td></tr></table></figure>

<p> </p>
<h3 id="测试Dnsmasq"><a href="#测试Dnsmasq" class="headerlink" title="测试Dnsmasq"></a>测试Dnsmasq</h3><ul>
<li>启动Dnsmasq</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ service dnsmasq start</span><br></pre></td></tr></table></figure>

<ul>
<li>测试Dnsmasq</li>
</ul>
<p>将其他机器的DNS换成dnsmasq所在的IP即可，就这么容易。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ dig @192.168.101.104 www.hi-linux.com</span><br></pre></td></tr></table></figure>

<h3 id="一些Dnsmasq技巧"><a href="#一些Dnsmasq技巧" class="headerlink" title="一些Dnsmasq技巧"></a>一些Dnsmasq技巧</h3><h4 id="Dnsmasq性能优化"><a href="#Dnsmasq性能优化" class="headerlink" title="Dnsmasq性能优化"></a>Dnsmasq性能优化</h4><p>我们都知道Bind不配合数据库的情况下，经常需要重新载入并读取配置文件，这是造成性能低下的原因。根据这点教训，我们可以考虑不读取<code>/etc/hosts</code>文件。而是另外指定一个在共享内存里的文件，比如<code>/dev/shm/dnsrecord.txt</code> ，这样就不费劲了，又由于内存的非持久性，重启就消失，可以定期同步硬盘上的某个内容到内存文件中。</p>
<p>具体实现步骤</p>
<ul>
<li>配置dnsmasq</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim /etc/dnsmasq.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>解决同步问题</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开机启动</span><br><span class="line">$ echo &quot;cat /etc/hosts &gt; /dev/shm/dnsrecord.txt&quot; &gt;&gt;/etc/rc.local</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Dnsmasq选择最快的上游DNS服务器"><a href="#Dnsmasq选择最快的上游DNS服务器" class="headerlink" title="Dnsmasq选择最快的上游DNS服务器"></a>Dnsmasq选择最快的上游DNS服务器</h4><p>经常会有这样的情景，Dnsmasq服务器配了一堆上游服务器，转发本地的dns请求，缺省是Dnsmasq事实上是只挑了一个上游dns服务器来查询并转发结果，这样如果选错服务器的话会导致DNS响应变慢。</p>
<p>解决方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vi /etc/dnsmasq.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> </p>
<p>all-servers表示对以下设置的所有server发起查询，选择回应最快的一条作为查询结果返回。 上面我们设置了两个dns server，8.8.8.8(谷歌dns)和219.141.136.10(移动的dns)，会同时查询这两个服务器，询问dns地址谁返回快就采用谁的结果。</p>
<h4 id="dnsmasq-china-list项目"><a href="#dnsmasq-china-list项目" class="headerlink" title="dnsmasq-china-list项目"></a>dnsmasq-china-list项目</h4><p>dnsmasq-china-list项目维护了一张国内常用但是通过国外DNS会解析错误的网站域名的列表，保证List中的国内域名全部走国内DNS服务器解析。</p>
<p>项目地址: <a href="https://github.com/felixonmars/dnsmasq-china-list">https://github.com/felixonmars/dnsmasq-china-list</a></p>
<p>dnsmasq-china-list使用</p>
<ul>
<li>取消dnsmasq.conf里conf-dir&#x3D;&#x2F;etc&#x2F;dnsmasq.d这一行的注释</li>
<li>获取项目文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone https://github.com/felixonmars/dnsmasq-china-list.git</span><br></pre></td></tr></table></figure>

<ul>
<li>将accelerated-domains.china.conf, bogus-nxdomain.china.conf,google.china.conf(可选)放到&#x2F;etc&#x2F;dnsmasq.d&#x2F;目录下(如目录不存在则建立一个)。</li>
<li>将<code>dnsmasq-update-china-list</code>放到<code>/usr/bin/</code>，这是一个批量修改DNS服务器的工具(可选)。</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.google.com/">http://www.google.com</a> <a href="http://purplegrape.blog.51cto.com/1330104/1083354">http://purplegrape.blog.51cto.com/1330104/1083354</a> <a href="https://i-meto.com/archives/iptables_PREROUTING.html">https://i-meto.com/archives/iptables_PREROUTING.html</a> <a href="http://blog.itphp.org/archives/225">http://blog.itphp.org/archives/225</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>DNS</tag>
        <tag>DNSmasq</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 iptables 实现中继(中转/端口转发)加速</title>
    <url>/2018/01/10/%E5%88%A9%E7%94%A8-iptables-%E5%AE%9E%E7%8E%B0%E4%B8%AD%E7%BB%A7%E4%B8%AD%E8%BD%AC-%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>玩 vps 的经常要用到端口转发用以实现更快的速度。比如 ovh 机房的网络我这里访问非常慢，用远程桌面会吐血的类型。所以就会用其他的线路作为跳板，比如洛杉矶，香港之类的。再比如如果需要一个日本 ip ，但是本地访问 linode ， conoha 的日本都绕路，又慢，这时如果用一个香港的 vps 做中转，就能达到比较稳定快速的效果。</p>
<p>使用 iptables 的好处就是不用额外装东西，上手就可以搞。</p>
</blockquote>
<h2 id="新人说明"><a href="#新人说明" class="headerlink" title="新人说明"></a>新人说明</h2><p>中继、端口转发的模型：A、B、C</p>
<p>A是你自己，B是中继的VPS，C是需要被中继的VPS（A要通过B来加速对C的访问，所以配置都是在B上面，配置完成后A连接B，B将流量转发给C，C再转回给B，B最后才转回给A。这就是整个过程。）</p>
<h2 id="iptables配置"><a href="#iptables配置" class="headerlink" title="iptables配置"></a>iptables配置</h2><p><strong>开启防火墙的ipv4转发</strong></p>
<p>echo -e “net.ipv4.ip_forward&#x3D;1” &gt;&gt; &#x2F;etc&#x2F;sysctl.conf<br>sysctl -p</p>
<p> </p>
<h2 id="单端口-端口转发"><a href="#单端口-端口转发" class="headerlink" title="单端口 端口转发"></a>单端口 端口转发</h2><p><strong>同端口 端口转发</strong></p>
<p>iptables -t nat -A PREROUTING -p tcp --dport [本地端口] -j DNAT --to-destination [目标IP:目标端口] iptables -t nat -A PREROUTING -p udp --dport [本地端口] -j DNAT --to-destination [目标IP:目标端口] iptables -t nat -A POSTROUTING -p tcp -d [目标IP] --dport [目标端口] -j SNAT --to-source [本地服务器主网卡绑定IP] iptables -t nat -A POSTROUTING -p udp -d [目标IP] --dport [目标端口] -j SNAT --to-source [本地服务器主网卡绑定IP]</p>
<p>以下示例，假设你的国外服务器（被中转服务器）是 1.1.1.1 ，你的SS端口是 10000 ，而你这台正在操作的VPS的主网卡绑定IP（中转服务器）是 2.2.2.2 。</p>
<p>iptables -t nat -A PREROUTING -p tcp -m tcp --dport 10000 -j DNAT --to-destination 1.1.1.1:10000 iptables -t nat -A PREROUTING -p udp -m udp --dport 10000 -j DNAT --to-destination 1.1.1.1:10000 iptables -t nat -A POSTROUTING -d 1.1.1.1 -p tcp -m tcp --dport 10000 -j SNAT --to-source 2.2.2.2 iptables -t nat -A POSTROUTING -d 1.1.1.1 -p udp -m udp --dport 10000 -j SNAT --to-source 2.2.2.2</p>
<p>这个时候你Shadowsocks客户端填写Shadowsocks信息的时候，账号配置和端口填写都不变，只需要修改IP为中转服务器IP即可 。</p>
<p><strong>不同端口 端口转发</strong></p>
<p>将本地服务器(中转服务器 2.2.2.2 )的 10000 端口转发至目标IP(被中转服务器)为 1.1.1.1 的 30000 端口</p>
<p>iptables -t nat -A PREROUTING -p tcp -m tcp --dport 10000 -j DNAT --to-destination 1.1.1.1:30000 iptables -t nat -A PREROUTING -p udp -m udp --dport 10000 -j DNAT --to-destination 1.1.1.1:30000 iptables -t nat -A POSTROUTING -d 1.1.1.1 -p tcp -m tcp --dport 30000 -j SNAT --to-source 2.2.2.2 iptables -t nat -A POSTROUTING -d 1.1.1.1 -p udp -m udp --dport 30000 -j SNAT --to-source 2.2.2.2</p>
<p>这个时候你Shadowsocks客户端填写Shadowsocks信息的时候，端口应该填 10000 而不是 30000 。</p>
<h2 id="多端口-端口转发"><a href="#多端口-端口转发" class="headerlink" title="多端口 端口转发"></a>多端口 端口转发</h2><p><strong>同端口 端口转发</strong></p>
<p>将本地服务器(中转服务器 2.2.2.2 )的 10000<del>30000 端口转发至目标IP(被中转服务器)为 1.1.1.1 的 10000</del>30000 端口</p>
<p>iptables -t nat -A PREROUTING -p tcp -m tcp --dport 10000:30000 -j DNAT --to-destination 1.1.1.1:10000-30000 iptables -t nat -A PREROUTING -p udp -m udp --dport 10000:30000 -j DNAT --to-destination 1.1.1.1:10000-30000 iptables -t nat -A POSTROUTING -d 1.1.1.1 -p tcp -m tcp --dport 10000:30000 -j SNAT --to-source 2.2.2.2 iptables -t nat -A POSTROUTING -d 1.1.1.1 -p udp -m udp --dport 10000:30000 -j SNAT --to-source 2.2.2.2</p>
<p>这个时候你Shadowsocks客户端填写Shadowsocks信息的时候，账号配置和端口填写都不变，只需要修改IP为中转服务器IP即可 。</p>
<p><strong>不同端口 端口转发</strong></p>
<p>将本地服务器(中转服务器 2.2.2.2 )的 10000<del>20000 端口转发至目标IP(被中转服务器)为 1.1.1.1 的 30000</del>40000 端口</p>
<p>iptables -t nat -A PREROUTING -p tcp -m tcp --dport 10000:20000 -j DNAT --to-destination 1.1.1.1:30000-40000 iptables -t nat -A PREROUTING -p udp -m udp --dport 10000:20000 -j DNAT --to-destination 1.1.1.1:30000-40000 iptables -t nat -A POSTROUTING -d 1.1.1.1 -p tcp -m tcp --dport 30000:40000 -j SNAT --to-source 2.2.2.2 iptables -t nat -A POSTROUTING -d 1.1.1.1 -p udp -m udp --dport 30000:40000 -j SNAT --to-source 2.2.2.2</p>
<p>这个时候你Shadowsocks客户端填写Shadowsocks信息的时候，端口应该填 10000<del>2000 而不是 30000</del>40000 。</p>
<h2 id="保存iptables配置"><a href="#保存iptables配置" class="headerlink" title="保存iptables配置"></a>保存iptables配置</h2><p><strong>CentOS 系统：</strong></p>
<p>service iptables save</p>
<p><strong>Debian&#x2F;Ubuntu 系统：</strong></p>
<p>iptables-save &gt; &#x2F;etc&#x2F;iptables.up.rules</p>
<h2 id="查看NAT规则"><a href="#查看NAT规则" class="headerlink" title="查看NAT规则"></a>查看NAT规则</h2><p>iptables -t nat -vnL POSTROUTING<br>iptables -t nat -vnL PREROUTING</p>
<h2 id="删除NAT规则"><a href="#删除NAT规则" class="headerlink" title="删除NAT规则"></a>删除NAT规则</h2><p>通过上面的查看规则命令，查看规则后，确定你要删除的规则的顺序，下面的命令是删除 第一个 规则。</p>
<p>iptables -t nat -D POSTROUTING 1 iptables -t nat -D PREROUTING 1</p>
<h2 id="配置iptables开机加载"><a href="#配置iptables开机加载" class="headerlink" title="配置iptables开机加载"></a>配置iptables开机加载</h2><p><strong>CentOS 系统：</strong></p>
<p>service iptables save<br>chkconfig --level 2345 iptables on</p>
<p><strong>Debian&#x2F;Ubuntu 系统：</strong></p>
<p>iptables-save &gt; &#x2F;etc&#x2F;iptables.up.rules<br>echo -e ‘#!&#x2F;bin&#x2F;bash\n&#x2F;sbin&#x2F;iptables-restore &lt; &#x2F;etc&#x2F;iptables.up.rules’ &gt; &#x2F;etc&#x2F;network&#x2F;if-pre-up.d&#x2F;iptables<br>chmod +x &#x2F;etc&#x2F;network&#x2F;if-pre-up.d&#x2F;iptables</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Caddy快速简单的部署反向代理/镜像，自动签发SSL证书</title>
    <url>/2020/01/05/%E5%88%A9%E7%94%A8caddy%E5%BF%AB%E9%80%9F%E7%AE%80%E5%8D%95%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-%E9%95%9C%E5%83%8F%EF%BC%8C%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%8F%91ssl%E8%AF%81/</url>
    <content><![CDATA[<h2 id="安装Caddy"><a href="#安装Caddy" class="headerlink" title="安装Caddy"></a>安装Caddy</h2><p>运行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh</span><br><span class="line">#备用地址</span><br><span class="line">wget -N --no-check-certificate https://www.moerats.com/usr/shell/Caddy/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh</span><br></pre></td></tr></table></figure>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>以下所有示例域名为<code>toyoo.ml</code>，请注意替换为自己的域名 ！</p>
<p><strong>1、服务器IP反向代理</strong> 下面是一个，用你服务器的<code>IP</code>来反向代理一个<code>http</code>协议的网站<code>http://www.baidu.com</code> 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 以下全部内容是一个整体，是一个命令，全部复制粘贴到SSH软件中并一起执行！</span><br><span class="line">echo &quot;:80 &#123;</span><br><span class="line"> gzip</span><br><span class="line"> proxy / http://www.baidu.com</span><br><span class="line">&#125;&quot; &gt; /usr/local/caddy/Caddyfile</span><br></pre></td></tr></table></figure>

<p>服务器<code>IP</code>也可以反向代理<code>HTTPS</code>协议的网站，但是需要自签<code>SSL</code>证书，现在的浏览器一般都不会认自签的<code>SSL</code>证书，所以不建议这么做。</p>
<p><strong>2、域名反向代理HTTP</strong> 下面是一个，用你的域名来反向代理一个<code>http</code>协议的网站<code>http://www.baidu.com</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 以下全部内容是一个整体，是一个命令，全部复制粘贴到SSH软件中并一起执行！</span><br><span class="line">echo &quot;http://toyoo.ml &#123;</span><br><span class="line"> gzip</span><br><span class="line"> proxy / http://www.baidu.com</span><br><span class="line">&#125;&quot; &gt; /usr/local/caddy/Caddyfile</span><br></pre></td></tr></table></figure>

<p>如果你需要反向代理<code>HTTPS</code>协议的网站，比如<code>https://www.baidu.com</code>，那么继续看下面步骤。</p>
<p><strong>3、域名反向代理HTTPS</strong> 如果你有<code>SSL</code>证书和密匙的话，把<code>SSL</code>证书(<code>xxx.crt</code>)和密匙(<code>xxx.key</code>)文件放到<code>/root</code>文件夹下（也可以是其他文件夹，自己改下面代码），然后这样做：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 以下全部内容是一个整体，是一个命令，全部复制粘贴到SSH软件中并一起执行！</span><br><span class="line">echo &quot;https://toyoo.ml &#123;</span><br><span class="line"> gzip</span><br><span class="line"> tls /root/xxx.crt /root/xxx.key</span><br><span class="line"> proxy / https://www.baidu.com</span><br><span class="line">&#125;&quot; &gt; /usr/local/caddy/Caddyfile</span><br></pre></td></tr></table></figure>

<p>如果你没有<code>SSL</code>证书和密匙，那么你可以这样做：</p>
<p>下面的<code>xxxx@xxx.xx</code>改成你的邮箱，同时需要注意的是，申请<code>SSL</code>证书前，请务必提前解析好域名记录(解析后最好等一会，以全球生效)，否则<code>Caddy</code>会申请并配置失败！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 以下全部内容是一个整体，是一个命令，全部复制粘贴到SSH软件中并一起执行！</span><br><span class="line">echo &quot;https://toyoo.ml &#123;</span><br><span class="line"> gzip</span><br><span class="line"> tls xxxx@xxx.xx</span><br><span class="line"> proxy / https://www.baidu.com</span><br><span class="line">&#125;&quot; &gt; /usr/local/caddy/Caddyfile</span><br></pre></td></tr></table></figure>

<p>如果一切正常，那么<code>Caddy</code>会自动帮你申请<code>SSL</code>证书并配置好，而且会定时续约<code>SSL</code>证书和强制<code>http</code>重定向至<code>https</code>！</p>
<p><strong>4、HTTP重定向为HTTPS</strong> 当你是手动指定<code>SSL</code>证书和密匙 来配置的话，<code>Caddy</code>只会监听<code>443</code>端口(<code>https</code>)，并不会自动设置<code>80</code>端口(<code>http</code>)的重定向（如果是<code>Caddy</code>自动申请的<code>SSL</code>证书，那么就自动做好了），如果要做重定向的话，可以这样做：</p>
<p>下面的示例代码中，是把<code>http://toyoo.ml</code>、<code>http://233.toyoo.ml</code>、<code>https://666.toyoo.ml</code>三个域名都重定向到了 <code>https://toyoo.ml</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 以下全部内容是一个整体，是一个命令，全部复制粘贴到SSH软件中并一起执行！</span><br><span class="line">echo &quot;http://toyoo.ml ,http://233.toyoo.ml ,https://666.toyoo.ml &#123;</span><br><span class="line"> redir https://toyoo.ml&#123;url&#125;</span><br><span class="line">&#125;</span><br><span class="line">https://toyoo.ml &#123;</span><br><span class="line"> gzip</span><br><span class="line"> tls /root/xxx.crt /root/xxx.key</span><br><span class="line"> proxy / https://www.baidu.com</span><br><span class="line">&#125;&quot; &gt; /usr/local/caddy/Caddyfile</span><br></pre></td></tr></table></figure>

<p>修改完<code>Caddy</code>的配置文件后，重启<code>Caddy</code>即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/caddy restart</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Caddy</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>利用dnsmasq 屏蔽广告和跟踪</title>
    <url>/2021/02/17/%E5%88%A9%E7%94%A8dnsmasq-%E5%B1%8F%E8%94%BD%E5%B9%BF%E5%91%8A%E5%92%8C%E8%B7%9F%E8%B8%AA/</url>
    <content><![CDATA[<p>对运营商劫持DNS插入广告是不是觉得很厌烦，对各种网站上的广告感到厌烦，可以使用Dnsmasq搭建DNS服务器来屏蔽广告和不想看到的网站</p>
<h4 id="本文测试环境为Debian-以及Centos"><a href="#本文测试环境为Debian-以及Centos" class="headerlink" title="本文测试环境为Debian 以及Centos"></a>本文测试环境为Debian 以及Centos</h4><h3 id="一：替换系统源【Centos7跳过此步骤】"><a href="#一：替换系统源【Centos7跳过此步骤】" class="headerlink" title="一：替换系统源【Centos7跳过此步骤】"></a>一：替换系统源【Centos7跳过此步骤】</h3><p>由于腾讯家的镜像源没有dnsmasq，所以我们将系统源换成科大的，运行以下命令进行替换</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo sed -i ‘s/mirrors.tencentyun.com/mirrors.ustc.edu.cn/g’ /etc/apt/sources.list</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<h3 id="二：安装Dnsmasq"><a href="#二：安装Dnsmasq" class="headerlink" title="二：安装Dnsmasq"></a>二：安装Dnsmasq</h3><p>Debian执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install dnsmasq -y</span><br></pre></td></tr></table></figure>

<p>Centos 执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install dnsmasq -y</span><br></pre></td></tr></table></figure>

<p>运行上面命令后，dnsmasq就安装好了</p>
<h3 id="三：配置Dnsmasq"><a href="#三：配置Dnsmasq" class="headerlink" title="三：配置Dnsmasq"></a>三：配置Dnsmasq</h3><p>编辑<code>/etc/resolv.conf</code>将里面的nameserver地址改成<code>127.0.0.1</code> <img src="/2021/02/1_4KPBGC8J2EZBPKH_1583413268334.png" alt="1_4KPBGC8J2EZBPKH.png"></p>
<p>新增一个上游DNS地址配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/resolv.dnsmasq.conf</span><br></pre></td></tr></table></figure>

<p><img src="/2021/02/1_R7DFSWTQCQX69JV_1583413563114.png" alt="1_R7DFSWTQCQX69JV.png"></p>
<p>我这里用的一个是国内腾讯家提供的一个是谷歌家的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nameserver 119.29.29.29</span><br><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure>

<p>接下来我们修改dnsmasq主要配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/dnsmasq.conf</span><br></pre></td></tr></table></figure>

<p>下面是需要修改的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">port=53</span><br><span class="line">#DNS监听端口默认53</span><br><span class="line">resolv-file=/etc/resolv.dnsmasq.conf</span><br><span class="line">#上游DNS配置文件</span><br><span class="line">strict-order</span><br><span class="line">listen-address=10.139.133.25,127.0.0.1</span><br><span class="line">#监听地址，10.139.133.25这个地址替换成ifconfig运行后eth0 里的inet 地址</span><br><span class="line">conf-dir=/etc/dnsmasq.d</span><br><span class="line">#自动导入这个目录下的配置文件</span><br><span class="line">conf-dir=/etc/dnsmasq.d/,*.conf</span><br></pre></td></tr></table></figure>

<p>关于监听地址，运行ifconfig 后参考下图 <img src="/2021/02/1_YX8MQXCB2E9WE9W_1583413619861.png" alt="1_YX8MQXCB2E9WE9W.png"></p>
<p>修改好后Dnsmasq就搭建好了</p>
<h3 id="四：广告屏蔽"><a href="#四：广告屏蔽" class="headerlink" title="四：广告屏蔽"></a>四：广告屏蔽</h3><p>如果你想屏蔽广告啥的可以将下面文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://gitee.com/privacy-protection-tools/anti-ad/raw/master/anti-ad-for-dnsmasq.conf</span><br></pre></td></tr></table></figure>

<p>将这个文件放到&#x2F;etc&#x2F;dnsmasq.d目录下</p>
<p>注：屏蔽广告来源<a href="https://github.com/privacy-protection-tools/anti-AD">https://github.com/privacy-protection-tools/anti-AD</a></p>
<p>替换后重启Dnsmasq</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service dnsmasq restart</span><br></pre></td></tr></table></figure>

<p>搭建好后你可以在本地进行测试看看是否搭建成功</p>
<p>WIN+R 输入<code>CMD</code>运行之后输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nslookup baidu.com 你搭建的DNS服务器地址</span><br></pre></td></tr></table></figure>

<p>如果反馈出百度的IP即搭建成功</p>
<h3 id="五：其他说明"><a href="#五：其他说明" class="headerlink" title="五：其他说明"></a>五：其他说明</h3><p>查看服务状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service dnsmasq status</span><br></pre></td></tr></table></figure>

<p>address自定义域名解析的IP地址，在此已360.com这个域名为例。注意dnsmasq是支持泛域名解析的，以下配置就是一个典型的泛域名解析实例。将360Ban了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">address=/360.com/0.0.0.0</span><br></pre></td></tr></table></figure>

<p>address也可以过滤某些网站，比如如果不想让客户端解析youk.com这个域名的话，我们这个把该域名解析到一台不存在的服务器上或者解析到127.0.0.1这个地址。如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">address=/youk.com/127.0.0.1</span><br></pre></td></tr></table></figure>

<p>为了防止DNS污染，我们使用bogus-nxdomain定义DNS解析的服务器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bogus-nxdomain=211.98.70.226</span><br></pre></td></tr></table></figure>

<p>我们可以用server定于某个域名使用的上游DNS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server=/4gml.com/114.114.114.114</span><br></pre></td></tr></table></figure>

<p>当然你也可以通过修改hosts来禁止域名啥的</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>DNS</tag>
        <tag>DNSmasq</tag>
        <tag>去广告</tag>
      </tags>
  </entry>
  <entry>
    <title>卸载重装 Windows 10 内置应用的最全方法，还你一个干净清爽的系统</title>
    <url>/2020/05/21/%E5%8D%B8%E8%BD%BD%E9%87%8D%E8%A3%85-windows-10-%E5%86%85%E7%BD%AE%E5%BA%94%E7%94%A8%E7%9A%84%E6%9C%80%E5%85%A8%E6%96%B9%E6%B3%95%EF%BC%8C%E8%BF%98%E4%BD%A0%E4%B8%80%E4%B8%AA%E5%B9%B2%E5%87%80/</url>
    <content><![CDATA[<p><img src="https://www.jarods.org/wp-content/uploads/2020/05/aeb269a548568ca42be527a614226c9a.png" alt="clipboard.png" title="clipboard.png"></p>
<p>想必现在小伙伴们电脑都已经升级到 Windows 10 了。不过，你是否发现，你的系统里默默躺着很多系统自带却你从来不用的应用程序呢。这些应用并不会占用多大的空间，有些只是一个启动链接，比如系统自带「迪士尼梦幻王国」游戏，默认不占用多少空间，在你点击后，就会自动下载整个600M的安装包进行安装。</p>
<p>另外，这些自带应用有些都是随系统自动启动的，多少总会占用一点系统资源。</p>
<p>德哥是个强迫症患者，看到这些平时用不着的应用在眼前晃来晃去，总想着除之而后快。</p>
<h3 id="卸载-win10-自带应用的通常方法"><a href="#卸载-win10-自带应用的通常方法" class="headerlink" title="卸载 win10 自带应用的通常方法"></a>卸载 win10 自带应用的通常方法</h3><p>卸载这些应用说容易也容易，说不容易也不容易。 最常见的方式，就是点开启动菜单，右键点击你需要卸载的应用，点击<code>卸载</code>即可。</p>
<p>但我们会发现，这些应用有些提供<code>卸载</code>按钮，有些则不提供<code>卸载</code>按钮。</p>
<ul>
<li>可以卸载应用（邮箱、地图、钱包、新闻、Xbox 等）</li>
</ul>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/05/1e0eed49066ba8a5156a18cff3a552b5.png" alt="clipboard.png" title="clipboard.png"></p>
<ul>
<li>不可卸载应用（应用商店、消息、相机、人脉、闹钟、图片、sticky notes、获取帮助、混合现实门户等）</li>
</ul>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/05/e8c5a23161a26d6040c58081b9f83999.png" alt="clipboard.png" title="clipboard.png"></p>
<p>当然，你也可以用控制面板的<code>卸载</code>模块进行卸载。 点击开始菜单，点击<code>设置</code>-<code>应用</code>，找到你要卸载的应用即可。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/05/de01262cd63ed1392c69825a0ac112a7.png" alt="clipboard.png" title="clipboard.png"></p>
<p>上面的方法，也适用于自己下载安装的应用程序。</p>
<h3 id="利用第三方应用管理程序进行卸载，比如-CleanMyPC"><a href="#利用第三方应用管理程序进行卸载，比如-CleanMyPC" class="headerlink" title="利用第三方应用管理程序进行卸载，比如 CleanMyPC"></a>利用第三方应用管理程序进行卸载，比如 CleanMyPC</h3><p>经常使用 Mac 的小伙伴知道，Mac 上有一款 CleanMyMac 的神器，可以帮你清理你无法清理干净的应用。有个好消息是，这货也出了一款 PC 上的兄弟软件：CleanMyPC。它可以帮你方便的干掉这些难缠的应用。另外，它还有个好处就是可以帮你发现一些 Windows 系统自己发现不了的应用。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/05/9fa67983ca4124c0971ffee729c2f81f.png" alt="clipboard.png" title="clipboard.png"></p>
<p>不过，CleanMyPC 是一款收费软件，价格还不菲，有些高级功能需要缴费才能使用。</p>
<h3 id="通过-PowerShell-命令行模式来卸载应用"><a href="#通过-PowerShell-命令行模式来卸载应用" class="headerlink" title="通过 PowerShell 命令行模式来卸载应用"></a>通过 PowerShell 命令行模式来卸载应用</h3><p>当我们既想省点钱，又想卸载系统那些不提供<code>卸载</code>按钮的自带应用该怎么办呢？</p>
<p>这时候，就要用到我们的 PowerShell 命令行模式了。</p>
<p>Windows 相比 Linux 和 MacOS，最欠缺的就是命令行模式的灵活性和可编程性太弱。powershell 的诞生，就仿佛给了 Windows 一把瑞士军刀。PowerShell 是一款基于对象的shell, 建立在.Net框架之上, 使命令行用户和脚本编写者可以利用 .NET Framework的强大功能，同时能深入到系统进程中，开展一系列自动化和批处理工作。</p>
<p>下面我们就采用 Windows 10 中 powershell 内置的 <code>Get-AppxPackage</code> 、 <code>Remove-AppxPackage</code> 和 <code>Add-AppxPackage</code> 命令来进行安装卸载操作。</p>
<blockquote>
<p><code>Get-AppxPackage</code>：用于获得 Win 10 系统内置应用信息。 <code>Remove-AppxPackage</code>：用于删除 Win 10 系统内置应用。 <code>Add-AppxPackage</code>：用于安装 Win 10 系统内置应用。</p>
</blockquote>
<h4 id="首先，以管理员身份打开PowerShell"><a href="#首先，以管理员身份打开PowerShell" class="headerlink" title="首先，以管理员身份打开PowerShell"></a>首先，以管理员身份打开PowerShell</h4><p>如果你的系统是最新版 Windows 10，你只需要按住快捷键 <code>Windows + X</code>，或右键点击左下角的 win 图标，然后从高级用户菜单中选择“Windows PowerShell（管理员）”选项。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/05/c9ead9e8f3a52522d1910d6b61ba9dd1.png" alt="clipboard.png" title="clipboard.png"></p>
<p>若你的 win10 系统没有及时更新，也可能看到的不是 powershell，而是「命令行」。这样的话，你可以按快捷键 <code>Windows + S</code>，输入<code>powershell</code>，然后右键选择「以管理员身份运行」。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/05/a658a5cdb327d2de52df72d1e53ab5b3.png" alt="clipboard.png" title="clipboard.png"></p>
<h4 id="获取-Win-10-系统内置应用信息"><a href="#获取-Win-10-系统内置应用信息" class="headerlink" title="获取 Win 10 系统内置应用信息"></a>获取 Win 10 系统内置应用信息</h4><p>做任何事情，我们都应该做到有「备」无患。</p>
<p>应用信息备份有两种方式：</p>
<h5 id="一是备份当前已装应用的详细信息"><a href="#一是备份当前已装应用的详细信息" class="headerlink" title="一是备份当前已装应用的详细信息"></a>一是备份当前已装应用的详细信息</h5><p>输入命令 <code>Get-AppxPackage</code> ，就可以查看当前用户所有已安装的应用。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/05/75a61acea9ec19e97d0cb26a45eeb76e.png" alt="clipboard.png" title="clipboard.png"></p>
<p>将已安装应用列表导出到一个文件，留作备份，可以帮助我们后续重新安装回所需的应用。 复制下面代码到 PowerShell，并输入回车即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-AppxPackage &gt;&gt; D:\AppxPackage.bak1.txt</span><br></pre></td></tr></table></figure>

<p><code>&gt;&gt;</code> 也可以换成 <code>&gt;</code>，前者是内容追加到文档最后，后者是覆盖文档内容。看您需要合理选择即可。</p>
<h5 id="二是只备份应用包的简称和全称"><a href="#二是只备份应用包的简称和全称" class="headerlink" title="二是只备份应用包的简称和全称"></a>二是只备份应用包的简称和全称</h5><p>因为我们重装应用只需要用到应用名称和包全称，其他信息并不需要，所以，我们也可以只备份这两部分内容。</p>
<p>查看应用名称和包全称：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get-appxpackage  Select Name, PackageFullName</span><br></pre></td></tr></table></figure>

<p>若要导出为备份，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get-appxpackage  Select Name, PackageFullName &gt;&gt; D:\AppxPackage.bak2.txt</span><br></pre></td></tr></table></figure>

<h5 id="没有备份的补救措施"><a href="#没有备份的补救措施" class="headerlink" title="没有备份的补救措施"></a>没有备份的补救措施</h5><p>如果你没有备份就直接卸载了，又想不起该应用的包信息。我们也可以通过以下命令来找出系统自带所有安装包的信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get-appxpackage -allusers</span><br></pre></td></tr></table></figure>

<p>如果你知道该包的大致简称，还可以加上该简称信息，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get-appxpackage -allusers *windowscalculator*</span><br></pre></td></tr></table></figure>

<p>你将得到「计算器」应用的所有信息。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/05/8e7cdc01b3c4a95ec8b514e2dd57216d.png" alt="clipboard.png" title="clipboard.png"></p>
<h4 id="用-PowerShell-卸载应用"><a href="#用-PowerShell-卸载应用" class="headerlink" title="用 PowerShell 卸载应用"></a>用 PowerShell 卸载应用</h4><p>当你做好备份工作后，你现在就可以开始利用 powershell 进行愉快的卸载安装工作了。 <code>Get-AppxPackage</code> 命令可以帮助你卸载大多数内置的应用程序，甚至那些通常不提供“卸载”选项的应用。但是，请注意，这个技巧不允许你删除一些最重要的内置应用程序，比如 Cortana 和 Edge 浏览器。如果强行删除，只会看到一个报错信息。</p>
<p>下面，我们先尝试一下删除单个应用。</p>
<h5 id="利用-Remove-AppxPackage-PackageFullName-命令卸载"><a href="#利用-Remove-AppxPackage-PackageFullName-命令卸载" class="headerlink" title="利用 Remove-AppxPackage PackageFullName 命令卸载"></a>利用 <code>Remove-AppxPackage PackageFullName</code> 命令卸载</h5><p>首先，我们用前文提到的 <code>Get-AppxPackage Select Name, PackageFullName</code> 命令获得的应用包全称。 比如你不大玩游戏，想删除 Xbox 应用，那么，就找到「Xbox」对应的应用包全称</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/05/4e02b3fa73cfa9146db446894983cfac.png" alt="clipboard.png" title="clipboard.png"></p>
<p>再在 PowerShell 输入下面的命令即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Remove-AppxPackage Microsoft.XboxApp_41.41.18005.0_x64__8wekyb3d8bbwe</span><br></pre></td></tr></table></figure>

<p>打字累的话，PowerShell 支持 <code>Ctrl + C</code> 和 <code>Ctrl + V</code>。</p>
<h5 id="利用通配符（-）结合管道命令进行卸载"><a href="#利用通配符（-）结合管道命令进行卸载" class="headerlink" title="利用通配符（*）结合管道命令进行卸载"></a>利用通配符（*）结合管道命令进行卸载</h5><p>另外，还可以使用通配符（*）结合管道符来卸载应用，这样，我们只要输入前面的应用简称即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-AppxPackage *xboxapp*  Remove-AppxPackage</span><br></pre></td></tr></table></figure>

<p>OK，就是这么轻松。 如果你想删除其他应用，只需要将 <code>*xboxapp*</code> 换成你想删除应用的名称即可。</p>
<h5 id="有些应用是不能卸载的"><a href="#有些应用是不能卸载的" class="headerlink" title="有些应用是不能卸载的"></a>有些应用是不能卸载的</h5><p>Win10 中那些和系统结合紧密的应用是无法删除的，如果碰到无法删除的应用，则会出现错误提示，比如删除微软小娜「Cortana」：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-AppxPackage *cortana*  Remove-AppxPackage</span><br></pre></td></tr></table></figure>

<p>将出现如下报错：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/05/d3edeb82d8904b90c1c278392d6b464f.png" alt="clipboard.png" title="clipboard.png"></p>
<h5 id="常用应用列表"><a href="#常用应用列表" class="headerlink" title="常用应用列表"></a>常用应用列表</h5><p>下面我给一个常用应用的列表：</p>
<p>应用名称</p>
<p>对应代码</p>
<p>画图3D</p>
<p><em>3dbuilder</em></p>
<p>闹钟和时钟</p>
<p><em>windowsalarms</em></p>
<p>计算器</p>
<p><em>windowscalculator</em></p>
<p>日历和邮件</p>
<p><em>windowscommunicationsapps</em></p>
<p>摄像头</p>
<p><em>windowscamera</em></p>
<p>联系人</p>
<p>无法删除</p>
<p>Cortana</p>
<p>无法删除</p>
<p>我的office</p>
<p><em>officehub</em></p>
<p>入门</p>
<p><em>getstarted</em></p>
<p>Groove 音乐</p>
<p><em>zunemusic</em></p>
<p>地图</p>
<p><em>windowsmaps</em></p>
<p>Edge</p>
<p>无法删除</p>
<p>棋牌游戏</p>
<p><em>solitairecollection</em></p>
<p>记账</p>
<p><em>bingfinance</em></p>
<p>电影和电视</p>
<p><em>zunevideo</em></p>
<p>新闻</p>
<p><em>bingnews</em></p>
<p>OneNote</p>
<p><em>onenote</em></p>
<p>人脉</p>
<p><em>people</em></p>
<p>Phone Companion</p>
<p><em>windowsphone</em></p>
<p>照片</p>
<p><em>photos</em></p>
<p>应用商店</p>
<p><em>windowsstore</em></p>
<p>运动</p>
<p><em>bingsports</em></p>
<p>录音</p>
<p><em>soundrecorder</em></p>
<p>天气</p>
<p><em>bingweather</em></p>
<p>Feedback</p>
<p>无法删除</p>
<p>Xbox</p>
<p><em>xboxapp</em></p>
<h5 id="用-powershell-批量卸载内置应用"><a href="#用-powershell-批量卸载内置应用" class="headerlink" title="用 powershell 批量卸载内置应用"></a>用 powershell 批量卸载内置应用</h5><p>是不是感觉一个个卸载应用太麻烦，其实，你完全可以利用通配符 <code>*</code> ，一条命令实现内置应用的批量卸载。</p>
<p>卸载「Xbox」相关的所有应用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-AppxPackage *Xbox*  Remove-AppxPackage</span><br></pre></td></tr></table></figure>

<p>卸载所有系统内置应用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-AppxPackage *  Remove-AppxPackage</span><br></pre></td></tr></table></figure>

<p>你将在一片红色警告和黄色提示后，重新得到一个干净清爽的系统。</p>
<p>当然，那些 Windows 死活都不愿意你卸载的应用还是没有办法的，因为去掉那些应用，你的系统可能就运行不正常了。</p>
<h4 id="重新安装内置应用"><a href="#重新安装内置应用" class="headerlink" title="重新安装内置应用"></a>重新安装内置应用</h4><h5 id="重装单个应用"><a href="#重装单个应用" class="headerlink" title="重装单个应用"></a>重装单个应用</h5><p>比如，我们不小心把系统自带的计算器给删除了，那该怎么安装回去呢？ 很简单，我们先找到这个应用的包全名。 命令行下输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-AppxPackage -allusers *windowscalculator*</span><br></pre></td></tr></table></figure>

<p>得到如下信息：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/05/2d66435ab480cbc9267aa582b39e3c6c.png" alt="clipboard.png" title="clipboard.png"></p>
<p>拷贝查到的 <code>InstallLocation</code>，黏贴到如下命令中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Add-AppxPackage -register &quot;C:\Program Files\WindowsApps\Microsoft.WindowsCalculator_10.1805.1201.0_x64__8wekyb3d8bbwe\appxmanifest.xml&quot; -DisableDevelopmentMode</span><br></pre></td></tr></table></figure>

<p>不同的包，替换命令中橘色背景部分的 <code>InstallLocation</code>内容即可。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/05/c55fdc683752bcf21452918aaa00ff6a.png" alt="clipboard.png" title="clipboard.png"></p>
<p>不用重启电脑，计算器应用又可以使用了。</p>
<h4 id="重装所有内置应用"><a href="#重装所有内置应用" class="headerlink" title="重装所有内置应用"></a>重装所有内置应用</h4><p>如果你有一天后悔了，想重装全部应用，又不想一个个复制包全称进行安装。办法也是有的，用管理员权限打开 PowerShell，复制黏贴如下命令并回车即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-AppxPackage -AllUsers Foreach &#123;Add-AppxPackage -DisableDevelopmentMode -Register &quot;$($_.InstallLocation)\AppXManifest.xml&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>这条命令会将 Windows 10 所有内置的默认应用都重新安装回来。如果看到错误提示，不必理会，重启系统即可。</p>
<p>现在，你的系统是不是已经按照你的要求定制了呢，如果还没有，赶快动手吧！</p>
<p>Enjoy it！^_^</p>
]]></content>
      <categories>
        <category>Win</category>
      </categories>
      <tags>
        <tag>WIN10</tag>
        <tag>Windows 10</tag>
        <tag>内置应用</tag>
      </tags>
  </entry>
  <entry>
    <title>另类玩法用Linux做私有服务器NAS</title>
    <url>/2019/12/21/%E5%8F%A6%E7%B1%BB%E7%8E%A9%E6%B3%95%E7%94%A8linux%E5%81%9A%E7%A7%81%E6%9C%89%E6%9C%8D%E5%8A%A1%E5%99%A8nas/</url>
    <content><![CDATA[<h4 id="准备实现的功能："><a href="#准备实现的功能：" class="headerlink" title="准备实现的功能："></a>准备实现的功能：</h4><p>搭建Linux（基本操作百度有很多我不打算给大家演示）</p>
<p>局域网分享通过SAMBA NFS</p>
<p>流媒体服务器 PLEX  <a href="https://www.lxg2016.com/52259.html">点击我跳转安装教程</a></p>
<p>文件可视化管理 分享  <a href="https://www.lxg2016.com/52278.html">kodexplorer（可道云）</a> <a href="https://www.lxg2016.com/52272.html">owncloud</a></p>
<p>无线音箱Airplay （支持音频的电脑可用）</p>
<p>KODI （选装可以省下一个硬盘网络盒子）</p>
<p>rutorrent (PT客户端 方便挂PT）<a href="https://www.lxg2016.com/52285.html">点击我跳转安装教程</a></p>
<p>管理面板这个我在搜索资料找到适当的在发吧暂时保留！</p>
<p>因为都写在一个文章内 文章太长的缘故我已经把部分教程分开写了</p>
<hr>
<h2 id="基础篇："><a href="#基础篇：" class="headerlink" title="基础篇："></a>基础篇：</h2><p>准备硬盘的时候有一个问题需要注意你的主机要是有阵列卡的请配置好你阵列卡的硬盘然后再做系统的时候手动分区把其他分区分好了以后剩下的所有容量都分到home下，</p>
<p>如果你没有阵列卡 安装系统默认分区即可然后在Linux做软阵列 至于阵列模式根据自己的情况而定然后在按照下面的教程操作</p>
<p>ubuntu切换root权限并开启外网登录root权限</p>
<p>sudo passwd root (提示输入你现在用户的密码 然后在输入两次新密码 root账户就可以登录了）</p>
<p>su -l (输入之后输入上一个指令新建的密码）</p>
<p>apt-get update -y</p>
<p>apt-get install ssh -y (安装ssh）</p>
<p>vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config (在配置文件中找到PermitRootLogin这行吧后面的删掉改为YES即可）</p>
<p>service ssh restart</p>
<h3 id="配置硬盘"><a href="#配置硬盘" class="headerlink" title="配置硬盘"></a>配置硬盘</h3><p>lsblk(查看硬盘结构）</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/4095933-375x101-1.png" alt="另类玩法用Linux做私有服务器NAS Linux 第1张" title="另类玩法用Linux做私有服务器NAS Linux 第1张-RSG-人生观"></p>
<h4 id="红色框框内就是需要我们配置的硬盘以及自动挂载"><a href="#红色框框内就是需要我们配置的硬盘以及自动挂载" class="headerlink" title="红色框框内就是需要我们配置的硬盘以及自动挂载"></a>红色框框内就是需要我们配置的硬盘以及自动挂载</h4><p>fdisk -l (查询硬盘）<br>root@LINUXNAS:~# fdisk  &#x2F;dev&#x2F;sdb （硬盘写你自己的位置）<br>Device contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabel<br>Building a new DOS disklabel with disk identifier 0xa654af95.<br>Changes will remain in memory only, until you decide to write them.<br>After that, of course, the previous content won’t be recoverable.</p>
<p>Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)</p>
<p>命令(输入 m 获取帮助)： p （查看硬盘情况）</p>
<p>Disk &#x2F;dev&#x2F;sdb: 107.4 GB, 107374182400 bytes<br>255 heads, 63 sectors&#x2F;track, 13054 cylinders, total 209715200 sectors<br>Units &#x3D; 扇区 of 1 * 512 &#x3D; 512 bytes<br>Sector size (logical&#x2F;physical): 512 bytes &#x2F; 512 bytes<br>I&#x2F;O size (minimum&#x2F;optimal): 512 bytes &#x2F; 512 bytes<br>Disk identifier: 0xa654af95</p>
<p>   设备 启动      起点          终点     块数   Id  系统</p>
<p>命令(输入 m 获取帮助)： n （新建分区）<br>Partition type:<br>   p   primary (0 primary, 0 extended, 4 free)<br>   e   extended<br>Select (default p): p （新建主分区）<br>分区号 (1-4，默认为 1)： 1 （需要分几个分区 我个人建议分一个）<br>起始 sector (2048-209715199，默认为 2048)：（默认回车）<br>将使用默认值 2048<br>Last sector, +扇区 or +size{K,M,G} (2048-209715199，默认为 209715199)： +98G（+的容量要小于实际容量一点 原因为啥自己百度 后面的单位必须为大写）</p>
<p>命令(输入 m 获取帮助)： w （保存指令）<br>The partition table has been altered!</p>
<p>Calling ioctl() to re-read partition table.<br>Syncing disks.</p>
<p>mkfs.ext4   &#x2F;dev&#x2F;sdb1 （格式化新加的硬盘）</p>
<h3 id="开机自动挂载硬盘"><a href="#开机自动挂载硬盘" class="headerlink" title="开机自动挂载硬盘"></a>开机自动挂载硬盘</h3><p>mkdir &#x2F;home&#x2F;<a href="https://www.lxg2016.com/tag/nas">nas</a></p>
<p>查看更多关于 nas 的文章</p>
<p> （建设一个想要当NAS的根目录）</p>
<p>vi &#x2F;etc&#x2F;fstab (添加开机启动挂载目录）</p>
<p>&#x2F;dev&#x2F;sdb1   &#x2F;home&#x2F;<a href="https://www.lxg2016.com/tag/nas">nas</a></p>
<p>查看更多关于 nas 的文章</p>
<pre><code>  ext4   defaults    0      0  （粘贴在最后一行下面）
</code></pre>
<p>reboot （重启）</p>
<p>lsblk （查看是否挂载成功）</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/456.png" alt="另类玩法用Linux做私有服务器NAS Linux 第2张" title="另类玩法用Linux做私有服务器NAS Linux 第2张-RSG-人生观"></p>
<p>如图所示 挂载成功！！ 基本准备到此结束！！！</p>
<hr>
<h3 id="安装SAMBA-NFS"><a href="#安装SAMBA-NFS" class="headerlink" title="安装SAMBA NFS:"></a>安装SAMBA NFS:</h3><p>更换ubuntu的源地址为阿里源</p>
<p>mv &#x2F;etc&#x2F;apt&#x2F;sources.list sources.list.bak （备份原文件）</p>
<p>vi &#x2F;etc&#x2F;apt&#x2F;sources.list （新建文件之后把下面的粘贴进去）</p>
<p>-——————————————————————————————–<br>deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> trusty main restricted universe multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> trusty-security main restricted universe multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> trusty-updates main restricted universe multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> trusty-proposed main restricted universe multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> trusty-backports main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> trusty main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> trusty-security main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> trusty-updates main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> trusty-proposed main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> trusty-backports main restricted universe multiverse</p>
<hr>
<p>apt-get update (更新）</p>
<h4 id="安装SAMBA："><a href="#安装SAMBA：" class="headerlink" title="安装SAMBA："></a>安装SAMBA：</h4><p>apt-get install <a href="https://www.lxg2016.com/tag/samba">samba</a></p>
<p>查看更多关于 samba 的文章</p>
<p> -y (安装SAMBA）</p>
<p>sudo smbpasswd -a root （用户名）</p>
<p>sudo mv &#x2F;etc&#x2F;samba&#x2F;smb.conf &#x2F;etc&#x2F;samba&#x2F;smb.conf.original</p>
<p>sudo install nano -y </p>
<p>sudo nano &#x2F;etc&#x2F;samba&#x2F;smb.conf</p>
<p>-————将下面的内容，复制粘贴进去———————</p>
<p>[global]<br>netbios name &#x3D; Linux NAS<br>server string &#x3D; The Pi File Center<br>workgroup &#x3D; WORKGROUP<br>hosts allow &#x3D;<br>remote announce &#x3D;<br>remote browse sync &#x3D;</p>
<p>[Linux NAS] （名字随意）<br>path &#x3D; &#x2F;home&#x2F;<a href="https://www.lxg2016.com/tag/nas">nas</a> (需要连接的目录）<br>comment &#x3D; No comment<br>browsable &#x3D; yes<br>read only &#x3D; no<br>valid users &#x3D;<br>writable &#x3D; yes<br>guest ok &#x3D; yes<br>public &#x3D; yes<br>create mask &#x3D; 0777<br>directory mask &#x3D; 0777<br>force user &#x3D; root<br>force create mode &#x3D; 0777<br>force directory mode &#x3D; 0777<br>hosts allow &#x3D;</p>
<p>-————-分界线———————————–</p>
<p>sudo service smbd restart</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/24352.png" alt="另类玩法用Linux做私有服务器NAS Linux 第3张" title="另类玩法用Linux做私有服务器NAS Linux 第3张-RSG-人生观"></p>
<p>在Windows电脑内网络内搜索 如果没有 就在运行内输入\192.168.1.45(IP修改成你自己的）访问即可 SAMBA 安装以及配置到此结束！</p>
<h4 id="安装NFS："><a href="#安装NFS：" class="headerlink" title="安装NFS："></a>安装NFS：</h4><p>安装nfs：</p>
<p>apt-get install nfs-kernel-server</p>
<p>配置NFS</p>
<p>修改配置文件<br>vi &#x2F;etc&#x2F;exports</p>
<p>在最后一行添加 目录位置写你自己的</p>
<p>&#x2F;home&#x2F;<a href="https://www.lxg2016.com/tag/nas">nas</a> *(rw,sync,no_root_squash,no_subtree_check) </p>
<p>前面那个目录是与nfs服务客户端共享的目录，*代表允许所有的网段访问（也可以使用具体的IP）<br>rw：挂接此目录的客户端对该共享目录具有读写权限<br>sync：资料同步写入内存和硬盘<br>no_root_squash：客户机用root访问该共享文件夹时，不映射root用户。（root_squash：客户机用root用户访问该共享文件夹时，将root用户映射成匿名用户）<br>no_subtree_check：不检查父目录的权限。<br>2.2-nfs是一个RPC程序，使用它前，需要映射好端口，通过rpcbind 设定：</p>
<p>重启nfs服务</p>
<p>service nfs-kernel-server restart</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Debian</tag>
        <tag>Linux</tag>
        <tag>NAS</tag>
      </tags>
  </entry>
  <entry>
    <title>只用一行代码从零搭建WordPress</title>
    <url>/2021/12/16/%E5%8F%AA%E7%94%A8%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAwordpress/</url>
    <content><![CDATA[<p>WordPress是世界上最著名的博客及内容管理系统(CMS)之一，我们这个博客也是基于WordPress的。通常来说，从一个新装的系统搭建WordPress都是比较麻烦的，自己需要安装PHP, 数据库，服务器程序等等多个组件，装好WordPress大概需要一个多小时，而且性能优化也不能尽如人意。因此，我们今天介绍一行代码，可以从零开始，用一行代码帮你搭好WordPress系统。本文作者为香菇肥牛，原文链接为<a href="https://qing.su/article/146.html">https://qing.su/article/146.html</a>, 转载请注明原文链接，谢谢！</p>
<h2 id="1-服务器系统要求"><a href="#1-服务器系统要求" class="headerlink" title="1, 服务器系统要求"></a>1, 服务器系统要求</h2><p> </p>
<p>今天的教程支持CentOS 6, 7; Debian 7, 8, 9; Ubuntu 14, 16, 18.  所有系统均需为64位操作系统。安装时需要root权限。</p>
<h2 id="2-安装的组件"><a href="#2-安装的组件" class="headerlink" title="2, 安装的组件"></a>2, 安装的组件</h2><p> </p>
<p>这个一行安装代码将在您的服务器上安装LLsMP组件与Wordpress程序，即OpenLiteSpeed服务器，MariaDB数据库，及PHP.  OpenLiteSpeed是非常高效的服务器软件，其性能可以直接吊打Apache, 甚至还可以性能数倍于Nginx.  现在大部分主机商的虚拟主机都是搭建在LiteSpeed系统上的，因为它对高并发访问的支持是所有服务器程序里面最好的，同时还能兼容.htaccess这类比较方便的Apache功能。OpenLiteSpeed自带了人性化的后台控制面板，因此不仅高效，而且非常易用。服务器自带的LSCache更是毫无争议的效率最高的WordPress缓存系统。<strong>这个一行代码搭建出来的WordPress可以直接作为安全高效的生产环境。</strong>下面，我们开始介绍这个一行代码。</p>
<h2 id="3-安装Wordpress"><a href="#3-安装Wordpress" class="headerlink" title="3, 安装Wordpress"></a>3, 安装Wordpress</h2><p> </p>
<p>代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/litespeedtech/ols1clk/master/ols1clk.sh &amp;&amp; bash ols1clk.sh -w --adminpassword mypassword --email myemail@qing.su --lsphp 73 --wordpressplus mydomain.qing.su --wordpresspath /srv/www/mydomain.qing.su/public_html/ --dbrootpassword myrootpassword --dbname mywordpressdb --dbuser mywordpressdbuser --dbpassword mywordpressdbpassword --listenport 80 --wpuser mywpuser --wppassword mywppassword --wplang zh_CN</span><br></pre></td></tr></table></figure>

<p>我们依次解释一下这行代码里面用到的几个参数。</p>
<ul>
<li><strong>-w</strong> 安装wordpress</li>
<li><strong>–adminpassword</strong> 后面加上你设定的OpenLiteSpeed后台管理员密码</li>
<li><strong>–email</strong> 后面跟你的WordPress管理员邮箱</li>
<li><strong>–lsphp</strong> 后面加上你想要安装的PHP版本，比如7.3就输入73, 5.6就输入56.</li>
<li><strong>–wordpressplus</strong> 后面加上你的WordPress域名。请提前将该域名解析到这台VPS或者服务器上。</li>
<li><strong>–wordpresspath</strong> 后面跟WordPress的安装路径。</li>
<li><strong>–dbrootpassword</strong> 后面加上MariaDB数据库root用户的密码。</li>
<li><strong>–dbname</strong> 后面加上你需要新建的WordPress的数据库名。</li>
<li><strong>–dbuser</strong> 后面加上你需要新建的WordPress的数据库用户名。</li>
<li><strong>–dbpassword</strong> 后面加上你需要新建的WordPress的数据库密码。</li>
<li><strong>–listenport</strong> 后面加上网站的端口，默认是80。</li>
<li><strong>–wpuser</strong> 后面加上你需要新建的WordPress的管理员用户名。</li>
<li><strong>–wppassword</strong> 后面加上你需要新建的WordPress的管理员密码。</li>
<li><strong>–wplang</strong> 后面加上WordPress语言，如果需要中文，填zh_CN; 如果需要英文，填en.</li>
</ul>
<p>输入并执行这行命令之后，会出现下面这个页面，可以确认一下信息输入是否有误。</p>
<p><img src="/2021/12/1-2.png"></p>
<p>如果没有问题，回车即可开始安装啦，一般来说很快就能安装好。如果缺一些依赖环境，这行命令也会自动帮你安装。</p>
<p>安装完毕之后，登录你的域名，就能管理WordPress啦，比如如果你的安装域名是mydomain.qing.su, 那么登录WordPress后台的地址是mydomain.qing.su&#x2F;wp-login.php.  在后台，你可以继续设置主题、插件，布置模块样式等。</p>
<p>如果需要登录OLS的后台添加其他网站，请访问你的域名:7080, 比如这里是mydomain.qing.su:7080, 用户名是admin, 密码是刚才设定的第二个参数。</p>
<p>今天就介绍到这里。这个一行代码安装WordPress的方法是不是很方便呢？如果您遇到任何问题，欢迎留言与我交流。本文作者为香菇肥牛，原文链接为<a href="https://qing.su/article/146.html">https://qing.su/article/146.html</a>, 转载请注明原文链接，谢谢！</p>
<p>EDIT: 新增SSL安全证书的安装</p>
<h2 id="4-可选-安装SSL安全证书"><a href="#4-可选-安装SSL安全证书" class="headerlink" title="4. [可选]安装SSL安全证书"></a>4. [可选]安装SSL安全证书</h2><p>这个脚本一键安装的WordPress是基于HTTP的，不带安全证书。如果您需要给网站加上安全证书，则还需要安装SSL.  刚开始用LiteSpeed的朋友们可能不清楚怎样安装SSL证书。我们这里假设用Let’s Encrypt生成好了证书，私钥储存在&#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;domain.qing.su&#x2F;privkey.pem, 证书储存在&#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;domain.qing.su&#x2F;fullchain.pem (这里我们使用全链，包含了证书和中间链)。然后，我们登录OpenLiteSpeed后台，地址是你的网址:7080, 比如example.com:7080, 用户名是admin, 密码是之前使用一键安装的时候设置的–adminpassword参数值。登录好之后，会看到类似下面的界面。</p>
<p><img src="/2021/12/2-1-1024x941-1.png"></p>
<p>上面有服务器相关的基本信息。我们点击左侧的Listeners, 来到下图的界面。</p>
<p><img src="/2021/12/3-1-1024x341-1.png"></p>
<p>然后点击图中的wordpressssl, 即可编辑我们刚刚安装的WordPress网站的相关设置。如下图。</p>
<p><img src="/2021/12/4-1-1024x517-1.png"></p>
<p>我们点击头部的SSL选项卡，然后点击右上角小蓝色方框里面的图标，编辑第一个部分SSL Private Key &amp; Certificate.  编辑的时候，我们在Private Key File里面填入服务器上私钥的地址，在Certificate File里面填入全链证书的地址，然后Chained Certificate选择Yes.</p>
<p>全部填好之后，保存并点击右上角绿色方框里的图标，重启LiteSpeed服务器。这样，我们就安装好SSL证书啦！</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>MariaDB</tag>
        <tag>PHP</tag>
        <tag>OpenLiteSpeed</tag>
        <tag>Wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>启用HSTS并加入HSTS Preload List让网站Https访问更加安全-附删除HSTS方法</title>
    <url>/2020/04/30/%E5%90%AF%E7%94%A8hsts%E5%B9%B6%E5%8A%A0%E5%85%A5hsts-preload-list%E8%AE%A9%E7%BD%91%E7%AB%99https%E8%AE%BF%E9%97%AE%E6%9B%B4%E5%8A%A0%E5%AE%89%E5%85%A8-%E9%99%84%E5%88%A0%E9%99%A4hsts%E6%96%B9/</url>
    <content><![CDATA[<p>启用HSTS后自然想要加入HSTS Preload List了，这是各大浏览器都遵循的一个强制使用Https访问的网站列表，只要加入到这个列表中，所有的通过浏览器访问请求都会强制走Https，这在很大程度上可以杜绝“第一次”访问的劫持，最大限度地提高Https访问的安全性。</p>
<p>需要注意的是加入<a href="https://wzfou.com/tag/hsts-preload-list/">HSTS Preload List</a>需要以根域名的形式加入，如果你启用了<a href="http://www.wzfou.com这样的二级域名形式访问，你需要先停止301跳转，即要保证wzfou.com这样的根域名是用Https可以访问到的。（PS：之前我有一个网站就是这样的情况，如有变化大家在申请时结合具体情况分析）。">www.wzfou.com这样的二级域名形式访问，你需要先停止301跳转，即要保证wzfou.com这样的根域名是用Https可以访问到的。（PS：之前我有一个网站就是这样的情况，如有变化大家在申请时结合具体情况分析）。</a></p>
<p><img src="/2020/04/hstspreload_00.jpg" alt="启用HSTS并加入HSTS Preload List让网站Https访问更加安全-附删除HSTS方法"></p>
<p><a href="https://wzfou.com/tag/hsts/">HSTS</a>是在服务器强化Https安全，如果你的网站还没有启用Https，可以试试免费的SSL证书Let’s Encrypt，最近还推出了免费泛域名证书：<a href="https://wzfou.com/lets-encrypt-wildcard-ssl/">Let’s Encrypt Wildcard 免费泛域名SSL证书一键申请与SSL使用教程</a>，更多的关于<a href="https://wzfou.com/jianzhan/">建站</a>的经验与技巧，你可以看看：</p>
<ol>
<li><a href="https://wzfou.com/watermark/">站长必备技能批量给图片添加水印-XnView和美图秀秀批量处理方法</a></li>
<li><a href="https://wzfou.com/paypal-lianlian/">PayPal连连提现五个注意事项-账号绑定,失败锁定,手续费与提现时长</a></li>
<li><a href="https://wzfou.com/nginx-cdn/">自建CDN加速-Nginx反向绑定,缓存加速,自动更新缓存和获取真实IP</a></li>
</ol>
<p><strong>PS：2018年8月6日更新，</strong>服务器启用SSL证书其实也是一种资源开消，如何最大限度地减少这种资源消耗提升https访问速度，参考这里：<a href="https://wzfou.com/https-ssl/">八个HTTPS和SSL优化使用心得-减少等待时间和降低Https性能损耗</a>。</p>
<h2 id="一、服务器启用HSTS"><a href="#一、服务器启用HSTS" class="headerlink" title="一、服务器启用HSTS"></a>一、服务器启用HSTS</h2><p>HSTS是国际互联网工程组织 IETE 正在推行一种新的 Web安全协议HTTP Strict Transport Security（HSTS）。采用 HSTS 协议的网站将保证浏览器始终连接到该网站的 HTTPS 加密版本，不需要用户手动在 URL 地址栏中输入加密地址。</p>
<h3 id="1-1-Apache2-配置-HSTS"><a href="#1-1-Apache2-配置-HSTS" class="headerlink" title="1.1  Apache2 配置 HSTS"></a>1.1  Apache2 配置 HSTS</h3><p>编辑你的 apache 配置文件（如 &#x2F;etc&#x2F;apache2&#x2F;sites-enabled&#x2F;website.conf 和 &#x2F;etc&#x2F;apache2&#x2F;httpd.conf ），并加以下行到你的 HTTPS VirtualHost：</p>
<p># Apache需加载mod_header库，一般位于httpd.conf文件，搜索mod_headers并取消注释。（已加载可跳过）<br>LoadModule headers_module modules&#x2F;mod_headers.so   #然后对应站点VirtualHost里面插入HSTS响应头信息</p>
<p>Header always set Strict-Transport-Security “max-age&#x3D;63072000; includeSubdomains; preload”</p>
<p>保存 Apache 配置文件，然后重启。现在你的 web 站点在每次访问时都会发送该请求头，失效时间是两年（秒数），这个失效时间每次都会设置为两年后。</p>
<h3 id="1-2-Nginx-配置-HSTS"><a href="#1-2-Nginx-配置-HSTS" class="headerlink" title="1.2  Nginx 配置 HSTS"></a>1.2  Nginx 配置 HSTS</h3><p>Nginx 服务器中的配置最为简单，只需要编辑 Nginx 配置文件（如：&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf）将下面行添加到你的 HTTPS 配置的 server 块中即可：</p>
<p>add_header Strict-Transport-Security “max-age&#x3D;63072000; includeSubdomains; preload”;</p>
<p>如果你发现直接添加在 server 块中无效的情况，你可以试试直接插入到 location ~ *php 内：</p>
<p>location ~ [^&#x2F;]\.php(&#x2F;$) {<br>add_header Strict-Transport-Security “max-age&#x3D;63072000; includeSubdomains; preload”;<br>}</p>
<p>配置保存后重启 Nginx 服务。</p>
<h3 id="1-3-在-Lighttpd-中配置-HSTS"><a href="#1-3-在-Lighttpd-中配置-HSTS" class="headerlink" title="1.3  在 Lighttpd 中配置 HSTS"></a>1.3  在 Lighttpd 中配置 HSTS</h3><p>将下述配置增加到你的 Lighttpd 配置文件（例如：&#x2F;etc&#x2F;lighttpd&#x2F;lighttpd.conf）：</p>
<p>server.modules +&#x3D; ( “mod_setenv” )<br>$HTTP[“scheme”] &#x3D;&#x3D; “https” {<br>setenv.add-response-header  &#x3D; ( “Strict-Transport-Security” &#x3D;&gt; “max-age&#x3D;63072000; includeSubdomains; preload”)<br>}</p>
<p>编辑保存后记得重启一下。</p>
<h3 id="1-4-PHP通用配置-HSTS-方法"><a href="#1-4-PHP通用配置-HSTS-方法" class="headerlink" title="1.4  PHP通用配置 HSTS 方法"></a>1.4  PHP通用配置 HSTS 方法</h3><p>将以下代码添加到网站根目录 index.php 中或者header.php中</p>
<p>header(“Strict-Transport-Security: max-age&#x3D;63072000; includeSubdomains; preload”);</p>
<p>开启了HSTS后，你部署SSL&#x2F;TLS的服务检测得分就可能是A+以上了。ssllabs官网以及演示如下：</p>
<ol>
<li>官网：<a href="https://www.ssllabs.com/">https://www.ssllabs.com/</a></li>
<li>中文版：<a href="https://myssl.com/">https://myssl.com</a></li>
<li>演示：<a href="https://www.ssllabs.com/ssltest/analyze.html?d=wzfou.com">https://www.ssllabs.com/ssltest/analyze.html?d=wzfou.com</a></li>
</ol>
<p><img src="/2020/04/hstspreload_03.gif" alt="HSTS Preload List达到A+等级"></p>
<h2 id="二、加入HSTS-Preload-List"><a href="#二、加入HSTS-Preload-List" class="headerlink" title="二、加入HSTS Preload List"></a>二、加入HSTS Preload List</h2><p>HSTS preload list是Chrome浏览器中的HSTS预载入列表，在该列表中的网站，使用Chrome浏览器访问时，会自动转换成HTTPS。Firefox、Safari、Edge浏览器也在采用这个列表。</p>
<ol>
<li><a href="https://hstspreload.org/">https://hstspreload.org/</a></li>
<li><a href="https://wzfou.com/cloudflare/">https://wzfou.com/cloudflare/</a></li>
</ol>
<h3 id="2-1-测试HSTS是否生效"><a href="#2-1-测试HSTS是否生效" class="headerlink" title="2.1  测试HSTS是否生效"></a>2.1  测试HSTS是否生效</h3><p>直接打开Chrome查看网络，就可以看到头部已经包含了HSTS信息了。</p>
<p><img src="/2020/04/hstspreload_04.gif" alt="HSTS Preload List头部信息"></p>
<h3 id="2-2-做好Http跳转Https"><a href="#2-2-做好Http跳转Https" class="headerlink" title="2.2 做好Http跳转Https"></a>2.2 做好Http跳转Https</h3><p>将wzfou.com以及任意二级域名都要做好Http跳转到Https，启用了HSTS后请求地址为 header 头中的 <code>Location</code>会显示307 ，即要求浏览器继续向 Location 的地址 POST 内容。</p>
<p><img src="/2020/04/hstspreload_05.gif" alt="HSTS Preload List跳转成功"></p>
<h3 id="2-3-加入HSTS-Preload-List"><a href="#2-3-加入HSTS-Preload-List" class="headerlink" title="2.3  加入HSTS Preload List"></a>2.3  加入HSTS Preload List</h3><p>进入hstspreload官网，输入你的域名，然后检测结果会告诉是否符合加入HSTS Preload List，没有问题的话勾选确定。（点击放大）</p>
<p><img src="/2020/04/hstspreload_01.gif" alt="申请加入HSTS Preload List"></p>
<p>HSTS Preload List审核的时间有长有短，一旦提交后你就只能等待。</p>
<p><img src="/2020/04/hstspreload_02.gif" alt="HSTS Preload List耐心等待"></p>
<h2 id="三、HSTS-Preload-List问题"><a href="#三、HSTS-Preload-List问题" class="headerlink" title="三、HSTS Preload List问题"></a>三、HSTS Preload List问题</h2><h3 id="3-1-是否成功加入HSTS-Preload-List"><a href="#3-1-是否成功加入HSTS-Preload-List" class="headerlink" title="3.1  是否成功加入HSTS Preload List"></a>3.1  是否成功加入HSTS Preload List</h3><p>直接到下列网址搜索是否有你的域名即可：</p>
<ol>
<li><a href="https://cs.chromium.org/chromium/src/net/http/transport/_security/_state/_static.json">https://cs.chromium.org/chromium/src/net/http/transport\_security\_state\_static.json</a></li>
</ol>
<p>当然，加入到了HSTS Preload List后，你可能还需要等待1-2月，待新版本的Chrome和Chromium、Firefox、IE等发布后，你的域名算是正式被各大浏览器承认并强制使用Https访问了，你可以在Chrome浏览器的地址框中输入“chrome:&#x2F;&#x2F;net-internals&#x2F;#hsts”查看。</p>
<p><img src="/2020/04/hstspreload_06.gif" alt="HSTS Preload List搜索查看"></p>
<h3 id="3-2-如何撤销HSTS-Preload-List"><a href="#3-2-如何撤销HSTS-Preload-List" class="headerlink" title="3.2  如何撤销HSTS Preload List"></a>3.2  如何撤销HSTS Preload List</h3><ol>
<li><a href="https://hstspreload.org/removal/">https://hstspreload.org/removal/</a></li>
</ol>
<p>官方也提供了一个申请<a href="https://wzfou.com/tag/del-hsts/">删除HSTS</a> Preload List，不过需要注意的是撤销HSTS Preload List和加入HSTS Preload List一样，花费的时间可能需要几个月以上，所以<a href="https://wzfou.com/tag/shenqing-hsts/">申请HSTS</a> Preload List前一定要谨慎。</p>
<p><img src="/2020/04/hstspreload_07.gif" alt="HSTS Preload List删除"></p>
<h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>由于HSTS Preload List是一个内置于各大浏览器的Https网站列表，所以能否加入成功除了审核通过外，还得看浏览器版本的更新。一旦加入HSTS Preload List了想要退出就比较麻烦了，所以加入前一定要考虑好。</p>
<p>那么哪些网站适合加入HSTS Preload List？个人博客或者网站可以来玩一玩，对于安全性要求比较高的电商网站，会员管理后台等完全可以使用HSTS Preload List，对于一些有Http需要的还是不加入得好。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>SSL</tag>
        <tag>HSTS</tag>
        <tag>HSTS Preload List</tag>
      </tags>
  </entry>
  <entry>
    <title>在 CentOS 7 操作系统进行 OpenVZ 7 安装</title>
    <url>/2019/05/07/%E5%9C%A8-centos-7-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%BF%9B%E8%A1%8C-openvz-7-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>今天带来关于OpenVZ 7 的安装博文，现使用虚拟硬件式技术的企业或个人都倾向于Vmware 或者微软的Hyper-V 使用容器式虚拟化技术的企业或个人都倾向于使用 Docker 、LXC 技术。OpenVZ 7 使用的虚拟化技术包含了 容器式与硬件式虚拟机技术，具体就是 OpenVZ 自家的容器式技术与KVM硬件式虚拟化技术，当然 Docker 也可允许在容器式虚拟机内。</p>
<p>1. 安装前准备</p>
<ul>
<li>准备好有 <a href="https://baike.baidu.com/item/Intel%20VT/2091588?fr=aladdin">Intel VT 技术</a> 的服务器</li>
<li>准备好最新 CentOS7 迷你版本iso 光盘，或使用 <a href="http://rufus.akeo.ie/">rufus</a> 刻进usb内。</li>
<li>磁盘划分，&#x2F; 根分区  ext4 &#x2F;boot 分区 ext4 &#x2F;vz 分区 ext4 最后就是 swap</li>
</ul>
<p>2. 一键安装脚本，包含了Fail2ban 对 SSH 22 端口的密码暴力破解保护。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># Defined Var</span><br><span class="line">YUM=/usr/bin/yum</span><br><span class="line">SED=/bin/sed</span><br><span class="line">RPM=/bin/rpm</span><br><span class="line">SYS=/usr/bin/systemctl</span><br><span class="line"></span><br><span class="line"># Add epel</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/yum.repos.d/epel.repo &lt;&lt;EOF</span><br><span class="line">[epel]</span><br><span class="line">name=Extra Packages for Enterprise Linux 7 - \$basearch</span><br><span class="line">#baseurl=http://download.fedoraproject.org/pub/epel/7/\$basearch</span><br><span class="line">metalink=https://mirrors.fedoraproject.org/metalink?repo=epel-7&amp;arch=\$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line"></span><br><span class="line">[epel-debuginfo]</span><br><span class="line">name=Extra Packages for Enterprise Linux 7 - \$basearch - Debug</span><br><span class="line">#baseurl=http://download.fedoraproject.org/pub/epel/7/\$basearch/debug</span><br><span class="line">metalink=https://mirrors.fedoraproject.org/metalink?repo=epel-debug-7&amp;arch=\$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line">gpgcheck=1</span><br><span class="line"></span><br><span class="line">[epel-source]</span><br><span class="line">name=Extra Packages for Enterprise Linux 7 - \$basearch - Source</span><br><span class="line">#baseurl=http://download.fedoraproject.org/pub/epel/7/SRPMS</span><br><span class="line">metalink=https://mirrors.fedoraproject.org/metalink?repo=epel-source-7&amp;arch=\$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line">gpgcheck=1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># Add epel-testing</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/yum.repos.d/epel-testing.repo &lt;&lt;EOF</span><br><span class="line">[epel-testing]</span><br><span class="line">name=Extra Packages for Enterprise Linux 7 - Testing - \$basearch</span><br><span class="line">#baseurl=http://download.fedoraproject.org/pub/epel/testing/7/\$basearch</span><br><span class="line">metalink=https://mirrors.fedoraproject.org/metalink?repo=testing-epel7&amp;arch=\$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line"></span><br><span class="line">[epel-testing-debuginfo]</span><br><span class="line">name=Extra Packages for Enterprise Linux 7 - Testing - \$basearch - Debug</span><br><span class="line">#baseurl=http://download.fedoraproject.org/pub/epel/testing/7/\$basearch/debug</span><br><span class="line">metalink=https://mirrors.fedoraproject.org/metalink?repo=testing-debug-epel7&amp;arch=\$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line">gpgcheck=1</span><br><span class="line"></span><br><span class="line">[epel-testing-source]</span><br><span class="line">name=Extra Packages for Enterprise Linux 7 - Testing - \$basearch - Source</span><br><span class="line">#baseurl=http://download.fedoraproject.org/pub/epel/testing/7/SRPMS</span><br><span class="line">metalink=https://mirrors.fedoraproject.org/metalink?repo=testing-source-epel7&amp;arch=\$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line">gpgcheck=1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># Import OpenVZ</span><br><span class="line"></span><br><span class="line">$RPM --import http://download.openvz.org/RPM-GPG-Key-OpenVZ</span><br><span class="line">$RPM --import https://archive.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7</span><br><span class="line"></span><br><span class="line">$YUM install https://download.openvz.org/virtuozzo/releases/7.0/x86_64/os/Packages/o/openvz-release-7.0.8-4.vz7.x86_64.rpm -y</span><br><span class="line"></span><br><span class="line"># Yum Make Cache</span><br><span class="line"></span><br><span class="line">$YUM makecache</span><br><span class="line"></span><br><span class="line"># Yum Install Base</span><br><span class="line"></span><br><span class="line">$YUM install yum-plugin-priorities telnet bind-utils vim-en* lrzsz wget iptables-services net-tools psmisc -y</span><br><span class="line"></span><br><span class="line"># Yum Update</span><br><span class="line">$YUM update -y </span><br><span class="line"></span><br><span class="line"># startup network or postalias will complain error</span><br><span class="line">$SED -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/sysconfig/selinux</span><br><span class="line">$SED -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/config</span><br><span class="line"></span><br><span class="line"># Clean UP Iptables</span><br><span class="line">echo &#x27;&#x27; &gt; /etc/sysconfig/iptables</span><br><span class="line"></span><br><span class="line"># Install OpenVZ</span><br><span class="line"></span><br><span class="line">$YUM install prlctl prl-disp-service vzkernel ploop prl-disk-tool -y</span><br><span class="line"></span><br><span class="line"># Install fail2ban</span><br><span class="line"></span><br><span class="line">$YUM install fail2ban fail2ban-systemd -y</span><br><span class="line"></span><br><span class="line"># Add fail2ban sshd.local</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/fail2ban/jail.d/sshd.local &lt;&lt; EOF</span><br><span class="line">[sshd]</span><br><span class="line">enabled = true</span><br><span class="line">filter = sshd</span><br><span class="line">action = iptables[name=sshd-ban, port=ssh, protocol=tcp]</span><br><span class="line">findtime =60</span><br><span class="line">bantime = 600</span><br><span class="line">maxretry = 3</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$SYS enable fail2ban</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3. 简单而基本命令</p>
<ul>
<li>查看虚拟机 prlctl list -a</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UUID唯一标识                             状态         IP地址         类型 名称</span><br><span class="line">UUID                                    STATUS       IP_ADDR         T  NAME</span><br><span class="line">&#123;4cc24118-b7a1-408a-9af8-caaf492e26c7&#125;  running      192.168.1.164   CT 164</span><br><span class="line">&#123;bada9314-1050-4fe5-8865-4edf93c97c0f&#125;  running      -               VM CentOS7</span><br><span class="line">&#123;c71d02d9-d0e4-42d0-bc1e-bcb3e8e97dc7&#125;  stopped      -               VM MyVM</span><br></pre></td></tr></table></figure>

<ul>
<li>查看已安装的容器式模版 vzpkg list -O</li>
<li>查看线上可用的模版 vzpkg list –available</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">centos-6-x86_64                    openvz-os</span><br><span class="line">centos-7-x86_64                    openvz-os</span><br><span class="line">debian-7.0-x86_64                  openvz-os</span><br><span class="line">debian-8.0-x86_64                  openvz-os</span><br><span class="line">debian-9.0-x86_64                  openvz-os</span><br><span class="line">fedora-23-x86_64                   openvz-os</span><br><span class="line">sles-11-x86_64                     openvz-os</span><br><span class="line">sles-12-x86_64                     openvz-os</span><br><span class="line">suse-42.1-x86_64                   openvz-os</span><br><span class="line">suse-42.2-x86_64                   openvz-os</span><br><span class="line">suse-42.3-x86_64                   openvz-os</span><br><span class="line">ubuntu-14.04-x86_64                openvz-os</span><br><span class="line">ubuntu-16.04-x86_64                openvz-os</span><br><span class="line">ubuntu-17.10-x86_64                openvz-os</span><br><span class="line">ubuntu-18.04-x86_64                openvz-os</span><br></pre></td></tr></table></figure>

<ul>
<li>预安装线上模版</li>
</ul>
<p>vzpkg install template centos-6-x86_64</p>
<ul>
<li>建立线上预安装的模版</li>
</ul>
<p>vzpkg create cache centos-6-x86_64</p>
<ul>
<li>建立容器式虚拟机</li>
</ul>
<p>prlctl create MyCT –vmtype ct</p>
<ul>
<li>设定容器式虚拟机使用的系统模版</li>
</ul>
<p>prlctl set MyCT –ostemplate centos-6-x86_64</p>
<ul>
<li>设定资源</li>
</ul>
<p>prlctl set MyCT –cpus 8 –memsize 8G –swap 4G</p>
<ul>
<li>设定网络</li>
</ul>
<p>prlctl set MyCT –ipadd 192.168.1.x</p>
<ul>
<li>建立硬件式虚拟机</li>
</ul>
<p>prlctl create MyVM –vmtype vm -d centos7</p>
<ul>
<li>硬件式虚拟机支持的操作系统</li>
</ul>
<p>Windows Server 2016 、2012、2012 R2 2008 R2 CentOS 5、6、7 x86_64 Debian 8、9 x86_64 Ubuntu 14-18 x86_64</p>
<ul>
<li>挂载光盘ISO文件</li>
</ul>
<p>prlctl set MyVM –device-set cdrom0 –image &#x2F;vz&#x2F;iso&#x2F;CentOS-7-x86_64-Minimal-1804.iso</p>
<ul>
<li>设定资源</li>
</ul>
<p>prlctl set MyVM –cpus 8 –memsize 8G</p>
<ul>
<li>修改默认磁盘容量（默认值为 64G）</li>
</ul>
<p>prl_disk_tool resize –hdd &#x2F;vz&#x2F;vmprivate&#x2F;c71d02d9-d0e4-42d0-bc1e-bcb3e8e97dc7&#x2F;harddisk.hdd –size 30G</p>
<ul>
<li>设定VNC服务</li>
</ul>
<p>prlctl set MyVM –vnc-mode manual –vnc-port 5902 –vnc-passwd linseek –vnc-address 0.0.0.0 &#x2F; 127.0.0.1</p>
<ul>
<li>查看虚拟机信息</li>
</ul>
<p>prlctl list –info MyVM</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ID: &#123;c71d02d9-d0e4-42d0-bc1e-bcb3e8e97dc7&#125;</span><br><span class="line">EnvID: 1193083609</span><br><span class="line">Name: MyVM</span><br><span class="line">Description: </span><br><span class="line">Type: VM</span><br><span class="line">State: stopped</span><br><span class="line">OS: centos7</span><br><span class="line">Template: no</span><br><span class="line">Uptime: 00:00:00 (since 2018-09-10 11:28:59)</span><br><span class="line">Home: /vz/vmprivate/c71d02d9-d0e4-42d0-bc1e-bcb3e8e97dc7/</span><br><span class="line">Owner: root@.</span><br><span class="line">GuestTools: state=not_installed</span><br><span class="line">GuestTools autoupdate: on</span><br><span class="line">Autostart: off</span><br><span class="line">Autostop: shutdown</span><br><span class="line">Autocompact: off</span><br><span class="line">Boot order: hdd0 cdrom0 net0 </span><br><span class="line">EFI boot: off</span><br><span class="line">Allow select boot device: off</span><br><span class="line">External boot device: </span><br><span class="line">On guest crash: restart</span><br><span class="line">Remote display: mode=manual port=5902 address=127.0.0.1</span><br><span class="line">Remote display state: stopped</span><br><span class="line">Hardware:</span><br><span class="line">  cpu sockets=1 cpus=8 cores=8 VT-x accl=high mode=64 ioprio=4 iolimit=&#x27;0&#x27;</span><br><span class="line">  memory 8192Mb</span><br><span class="line">  video 32Mb 3d acceleration=off vertical sync=yes</span><br><span class="line">  memory_guarantee auto</span><br><span class="line">  hdd0 (+) scsi:0 image=&#x27;/vz/vmprivate/c71d02d9-d0e4-42d0-bc1e-bcb3e8e97dc7/harddisk.hdd&#x27; type=&#x27;expanded&#x27; 30720Mb subtype=virtio-scsi</span><br><span class="line">  cdrom0 (+) scsi:1 image=&#x27;/vz/iso/CentOS-7-x86_64-Minimal-1804.iso&#x27; subtype=virtio-scsi</span><br><span class="line">  usb (+)</span><br><span class="line">  net0 (+) dev=&#x27;vme001c42cda633&#x27; network=&#x27;Bridged&#x27; mac=001C42CDA633 card=virtio</span><br><span class="line">SmartMount: (-)</span><br><span class="line">Disabled Windows logo: on</span><br><span class="line">Nested virtualization: off</span><br><span class="line">Offline management: (-)</span><br></pre></td></tr></table></figure>

<ul>
<li>控制命令</li>
</ul>
<p>prlctl stop  MyCT &#x2F; MyVM prlctl start MyCT &#x2F; MyVM prlctl restart MyCT &#x2F; MyVM prlctl suspend MyCT &#x2F; MyVM prlctl resume MyCT &#x2F; MyVM prlctl mount MyCT &#x2F; MyVM prlclt umount MyCT &#x2F; MyVM</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>OpenVZ 7</tag>
      </tags>
  </entry>
  <entry>
    <title>在CentOS 7中安装KVM平台搭建VPS</title>
    <url>/2018/10/07/%E5%9C%A8centos-7%E4%B8%AD%E5%AE%89%E8%A3%85kvm%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BAvps-2/</url>
    <content><![CDATA[<p>KVM即Kernal-based Virtual Machine, 是一种高效且成熟稳定的虚拟化技术, 支持所有的操作系统. 因此, 掌握服务器上搭建KVM平台是很有意义的. 通过虚拟机的建立以及IP分配, 虚拟机可以当做一台完全独立的服务器来使用, 即我们常用的VPS.</p>
<p>搭建虚拟机平台对宿主机系统的要求较高. KVM虚拟化要求宿主机的CPU支持Intel VT或AMD-V技术 (请执行cat &#x2F;proc&#x2F;cpuinfo查看), CPUBenchMark至少在1000以上, 建议5000或更多 (ATOM D525这种就不要来装虚拟机了). 系统内存要求至少为4G, 建议8G或更多. 硬盘要求20G以上. 操作系统必须为64位. 服务器至少分配2枚或以上的独立IP地址 (每个VPS一枚, 宿主机一枚). 本次教程, 我们以最新版本的CentOS 7为例, 介绍KVM平台的搭建.</p>
<h2 id="1-系统环境准备"><a href="#1-系统环境准备" class="headerlink" title="1, 系统环境准备"></a>1, 系统环境准备</h2><p>(1) 设置服务器名(Hostname)</p>
<p>任何与网络相关的Linux操作都要求设置好服务器名. 请确保您已经正确设置服务器名: 当您在SSH中执行hostname -f命令时, 应看到servername.domainname.com; 当您执行hostname命令时, 应看到servername. 具体设置方法我已强调数十遍, 这里不再赘述. 若未设置好服务器名, 请不要继续.</p>
<p>(2) 软件更新</p>
<p>CentOS系统下执行yum -y update命令更新软件.</p>
<p>(3) 检查网络与IP信息</p>
<p>CentOS 7系统中执行ip addr命令查看网卡及IP地址信息. 查看一下绑定您的宿主机外网主IP地址的网卡名称, 记下它, 我这里是ens9. 查看一下是否有其他的虚拟网卡绑定了额外的外网IP地址, 若有, 请删除对应的虚拟网卡.</p>
<p>本次教程中, 我们假设给宿主机分配的IP地址段为标准网段100.100.100.200&#x2F;29共8个IP, 则网络地址100.100.100.200, 网关100.100.100.201, 宿主机IP 100.100.100.202, VPS IP段100.100.100.203 ~ 100.100.100.206, 广播地址100.100.100.207, 子网掩码255.255.255.248.</p>
<h2 id="2-桌面环境的搭建"><a href="#2-桌面环境的搭建" class="headerlink" title="2, 桌面环境的搭建"></a>2, 桌面环境的搭建</h2><p>如果您仅使用一台服务器搭建KVM, 那我建议搭建桌面环境并搭建VNC服务器, 这样在管理KVM虚拟机和安装操作系统时较为方便. 我们以GNOME桌面环境为例介绍VNC服务器的搭建. GNOME桌面环境安装很简单, 执行下面这行命令即可:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum groupinstall &quot;GNOME Desktop&quot;</span><br></pre></td></tr></table></figure>

<p>然后安装VNC服务器. 执行:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install tigervnc-server</span><br></pre></td></tr></table></figure>

<p>新建用户, 用来连接VNC, 并配置用户的连接文件. 执行:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd jarod</span><br><span class="line">cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service</span><br></pre></td></tr></table></figure>

<p>编辑文件: &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@:1.service</p>
<p>将文件中的<USER>替换为我们的用户名jarod, 并取消行首的注释符.</p>
<p>配置防火墙:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-service vnc-server</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>然后, 切换到用户jarod， 启动VNC服务器:</p>
<p>su jarod vncserver</p>
<p>此时, 会提示输入VNC密码, 设置好后回车即可.</p>
<p>最后切换回root, 设置随开机启动:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su root</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable vncserver@:1.service</span><br></pre></td></tr></table></figure>

<p>这样, 我们就配置好VNC服务器了. 在本地电脑上使用VNC客户端连接100.100.100.202:5901即可访问服务器的GNOME桌面环境. 第一次使用VNC连接的时候会提示输入管理员密码, 如下图.</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/0.png" alt="0"></p>
<p>此时请输入您的root用户密码. 然后会提示一系列配置信息, 直接NEXT就好.</p>
<h2 id="3-KVM的安装"><a href="#3-KVM的安装" class="headerlink" title="3, KVM的安装"></a>3, KVM的安装</h2><p>KVM安装很简单. 在SSH中执行下面这行命令即可.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install qemu-kvm qemu-img virt-manager libvirt libvirt-python libvirt-client virt-install virt-viewer</span><br></pre></td></tr></table></figure>

<h2 id="4-在宿主机上新建VPS"><a href="#4-在宿主机上新建VPS" class="headerlink" title="4, 在宿主机上新建VPS"></a>4, 在宿主机上新建VPS</h2><p>首先, 使用VNC连接宿主机. 进入桌面后, 找到Virtual Machine Manager, 如下图.</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/1.png" alt="1"></p>
<p>打开后, 点击图标Create a new virtual machine.</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/2.png" alt="2"></p>
<p>然后按步骤载入系统镜像. 如果没有系统镜像的, 可以去我的下载站<a href="http://wget.pro下载/">http://wget.pro下载</a>.</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/3.png" alt="3"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/4.png" alt="4"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/5.png" alt="5"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/6.png" alt="6"></p>
<p>接着分配内存和硬盘. KVM是实虚拟, 因此分配内存后宿主机就不能再使用这部分资源了.</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/7.png" alt="7"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/8.png" alt="8"></p>
<p>最后分配网卡. 这里我们要选择桥接模式Bridge, 并选择宿主机的出口网卡. 如下图.</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/9.png" alt="9"></p>
<p>这样, 我们就新建完成了VPS, 可以安装操作系统了.</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/10.png" alt="10"></p>
<p>是不是很简单呢? 安装系统的时候有一个步骤是配置网络信息, 这里我们的DHCP是不生效的, 需要在VPS上获取IP. 选择Configure Network Manually, 然后按照第一部分第三小节的信息来配置即可.</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/11.png" alt="11"></p>
<p>至此, 大功告成. 我们在VPS上安装SSH服务器后, 就可以对它进行完全独立的网络访问了.</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h3><p>1, Kishore, S. <em>VNC-Server installation on CentOS 7</em>. <a href="https://www.howtoforge.com/vnc-server-installation-on-centos-7">https://www.howtoforge.com/vnc-server-installation-on-centos-7</a></p>
<p><a href="http://linux.dell.com/files/whitepapers/KVM_Virtualization_in_RHEL_7_Made_Easy.pdf">2, Rosa, J. <em>KVM Virtualization in RHEL 7 Made Easy</em>. Dell.</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>KVM</tag>
      </tags>
  </entry>
  <entry>
    <title>在CentOS 7中安装KVM平台搭建VPS</title>
    <url>/2018/07/23/%E5%9C%A8centos-7%E4%B8%AD%E5%AE%89%E8%A3%85kvm%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BAvps/</url>
    <content><![CDATA[<p>KVM即Kernal-based Virtual Machine, 是一种高效且成熟稳定的虚拟化技术, 支持所有的操作系统. 因此, 掌握服务器上搭建KVM平台是很有意义的. 通过虚拟机的建立以及IP分配, 虚拟机可以当做一台完全独立的服务器来使用, 即我们常用的VPS.</p>
<p>搭建虚拟机平台对宿主机系统的要求较高. KVM虚拟化要求宿主机的CPU支持Intel VT或AMD-V技术 (请执行cat &#x2F;proc&#x2F;cpuinfo查看), CPUBenchMark至少在1000以上, 建议5000或更多 (ATOM D525这种就不要来装虚拟机了). 系统内存要求至少为4G, 建议8G或更多. 硬盘要求20G以上. 操作系统必须为64位. 服务器至少分配2枚或以上的独立IP地址 (每个VPS一枚, 宿主机一枚). 本次教程, 我们以最新版本的CentOS 7为例, 介绍KVM平台的搭建.</p>
<h2 id="1-系统环境准备"><a href="#1-系统环境准备" class="headerlink" title="1, 系统环境准备"></a>1, 系统环境准备</h2><p>(1) 设置服务器名(Hostname)</p>
<p>任何与网络相关的Linux操作都要求设置好服务器名. 请确保您已经正确设置服务器名: 当您在SSH中执行hostname -f命令时, 应看到servername.domainname.com; 当您执行hostname命令时, 应看到servername. 具体设置方法我已强调数十遍, 这里不再赘述. 若未设置好服务器名, 请不要继续.</p>
<p>(2) 软件更新</p>
<p>CentOS系统下执行yum -y update命令更新软件.</p>
<p>(3) 检查网络与IP信息</p>
<p>CentOS 7系统中执行ip addr命令查看网卡及IP地址信息. 查看一下绑定您的宿主机外网主IP地址的网卡名称, 记下它, 我这里是ens9. 查看一下是否有其他的虚拟网卡绑定了额外的外网IP地址, 若有, 请删除对应的虚拟网卡.</p>
<p>本次教程中, 我们假设给宿主机分配的IP地址段为标准网段100.100.100.200&#x2F;29共8个IP, 则网络地址100.100.100.200, 网关100.100.100.201, 宿主机IP 100.100.100.202, VPS IP段100.100.100.203 ~ 100.100.100.206, 广播地址100.100.100.207, 子网掩码255.255.255.248.</p>
<h2 id="2-桌面环境的搭建"><a href="#2-桌面环境的搭建" class="headerlink" title="2, 桌面环境的搭建"></a>2, 桌面环境的搭建</h2><p>如果您仅使用一台服务器搭建KVM, 那我建议搭建桌面环境并搭建VNC服务器, 这样在管理KVM虚拟机和安装操作系统时较为方便. 我们以GNOME桌面环境为例介绍VNC服务器的搭建. GNOME桌面环境安装很简单, 执行下面这行命令即可:</p>
<p>1</p>
<p>yum groupinstall “GNOME Desktop”</p>
<p>然后安装VNC服务器. 执行:</p>
<p>1</p>
<p>yum install tigervnc-server</p>
<p>新建用户, 用来连接VNC, 并配置用户的连接文件. 执行:</p>
<p>1 2</p>
<p>useradd qingsu cp &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;vncserver@.service &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@:1.service</p>
<p>编辑文件: &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@:1.service</p>
<p>将文件中的<USER>替换为我们的用户名qingsu, 并取消行首的注释符.</p>
<p>配置防火墙:</p>
<p>1 2</p>
<p>firewall-cmd –permanent –zone&#x3D;public –add-service vnc-server firewall-cmd –reload</p>
<p>然后, 切换到用户qingsu, 启动VNC服务器:</p>
<p>su qingsu vncserver</p>
<p>此时, 会提示输入VNC密码, 设置好后回车即可.</p>
<p>最后切换回root, 设置随开机启动:</p>
<p>1 2 3</p>
<p>su root systemctl daemon-reload systemctl enable vncserver@:1.service</p>
<p>这样, 我们就配置好VNC服务器了. 在本地电脑上使用VNC客户端连接100.100.100.202:5901即可访问服务器的GNOME桌面环境. 第一次使用VNC连接的时候会提示输入管理员密码, 如下图.</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/0.png" alt="0"></p>
<p>此时请输入您的root用户密码. 然后会提示一系列配置信息, 直接NEXT就好.</p>
<h2 id="3-KVM的安装"><a href="#3-KVM的安装" class="headerlink" title="3, KVM的安装"></a>3, KVM的安装</h2><p>KVM安装很简单. 在SSH中执行下面这行命令即可.</p>
<p>1</p>
<p>yum install qemu-kvm qemu-img virt-manager libvirt libvirt-python libvirt-client virt-install virt-viewer</p>
<p> </p>
<h2 id="4-在宿主机上新建VPS"><a href="#4-在宿主机上新建VPS" class="headerlink" title="4, 在宿主机上新建VPS"></a>4, 在宿主机上新建VPS</h2><p>首先, 使用VNC连接宿主机. 进入桌面后, 找到Virtual Machine Manager, 如下图.</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/1.png" alt="1"></p>
<p>打开后, 点击图标Create a new virtual machine.</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/2.png" alt="2"></p>
<p>然后按步骤载入系统镜像. 如果没有系统镜像的, 可以去我的下载站<a href="http://wget.pro下载/">http://wget.pro下载</a>.</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/3.png" alt="3"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/4.png" alt="4"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/5.png" alt="5"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/6.png" alt="6"></p>
<p>接着分配内存和硬盘. KVM是实虚拟, 因此分配内存后宿主机就不能再使用这部分资源了.</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/7.png" alt="7"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/8.png" alt="8"></p>
<p>最后分配网卡. 这里我们要选择桥接模式Bridge, 并选择宿主机的出口网卡. 如下图.</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/9.png" alt="9"></p>
<p>这样, 我们就新建完成了VPS, 可以安装操作系统了.</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/10.png" alt="10"></p>
<p>是不是很简单呢? 安装系统的时候有一个步骤是配置网络信息, 这里我们的DHCP是不生效的, 需要在VPS上获取IP. 选择Configure Network Manually, 然后按照第一部分第三小节的信息来配置即可.</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/11.png" alt="11"></p>
<p>至此, 大功告成. 我们在VPS上安装SSH服务器后, 就可以对它进行完全独立的网络访问了.</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>KVM</tag>
        <tag>VNC</tag>
      </tags>
  </entry>
  <entry>
    <title>在Debian 9和Ubuntu 16.04上禁用IPv6</title>
    <url>/2018/07/02/%E5%9C%A8debian-9%E5%92%8Cubuntu-16-04%E4%B8%8A%E7%A6%81%E7%94%A8ipv6/</url>
    <content><![CDATA[<p>在禁用IPv6之前，让我们看看系统中可用的网卡。使用<strong>ifconfig</strong>命令。</p>
<p>enp0s3：flags &#x3D; 4163 &lt;UP，BROADCAST，RUNNING，MULTICAST&gt; mtu 1500<br>        inet 192.168.1.10 netmask 255.255.255.0 broadcast 192.168.1.255 <strong>inet6 fd50：1d9：9fe3：1400：a00：27ff：fe36：34ae prefixlen 64 scopeid 0x0</strong><br>        inet6 fe80 :: a00：27ff：fe36：34ae prefixlen 64 scopeid 0x20<br>        ether 08：00：27：36：34：ae txqueuelen 1000（以太网）<br>        RX数据包893字节116790（114.0 KiB）<br>        RX错误0丢弃0超出0帧0<br>        TX数据包1054字节77781（75.9 KiB）<br>        TX错误0丢弃0超载0载波0碰撞0<br>lo：标志&#x3D; 73 &lt;UP，LOOPBACK，RUNNING&gt; mtu 65536<br>        inet 127.0.0.1 netmask 255.0.0.0 <strong>inet6 :: 1 prefixlen 128 scopeid 0x10</strong></p>
<pre><code>    loop txqueuelen 1（本地环回） RX数据包772字节73806（72.0 KiB） RX错误0丢弃0溢出0帧0 
    TX数据包772字节73806（72.0 KiB） TX错误0丢弃0溢出0载波0冲突0
</code></pre>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/Disable-IPv6-on-Debian-9-Ouput-of-ifconfig-command-Before-Disabling-IPv6.png" alt="在Debian 9上禁用IPv6  - 在禁用IPv6之前输出ifconfig命令"></p>
<p>在Debian 9上禁用IPv6 - 在禁用IPv6之前输出ifconfig命令</p>
<p>以上输出确认两个网卡均启用了IPv6。所以，我们现在将使用下面的方法禁用IPv6。</p>
<h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>编辑**&#x2F;etc&#x2F;sysctl.conf**文件。</p>
<p>sudo nano &#x2F;etc&#x2F;sysctl.conf</p>
<p>放置以下条目以禁用所有适配器的IPv6。</p>
<p>net.ipv6.conf.all.disable_ipv6 &#x3D; 1</p>
<p>对于特定的适配器（<strong>如果网卡名称为enp0s3</strong>）。</p>
<p>net.ipv6.conf.ens4.disable_ipv6 &#x3D; 1</p>
<p>要反映更改，请执行以下命令。</p>
<p>sudo sysctl -p</p>
<h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>在**&#x2F;etc&#x2F;sysctl.d<strong>目录中创建一个名为</strong>70-disable-ipv6.conf<strong>的</strong>文件**。</p>
<p>sudo nano &#x2F;etc&#x2F;sysctl.d&#x2F;70-disable-ipv6.conf</p>
<p>添加以下条目以禁用所有适配器的IPv6。</p>
<p>net.ipv6.conf.all.disable_ipv6 &#x3D; 1</p>
<p>对于特定的适配器（<strong>如果网卡名称为enp0s3</strong>）。</p>
<p>net.ipv6.conf.ens4.disable_ipv6 &#x3D; 1</p>
<p>运行以下命令以执行更改。</p>
<p>sudo sysctl -p -f &#x2F;etc&#x2F;sysctl.d&#x2F;70-disable-ipv6.conf</p>
<p>使用<strong>ifconfig</strong>命令验证<strong>。您可以看到输出中没有IPv6地址。</strong></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/Disable-IPv6-on-Debian-9-Ouput-of-ifconfig-command-After-Disabling-IPv6.png" alt="在Debian 9上禁用IPv6  - 禁用IPv6后输出ifconfig命令"></p>
<p>在Debian 9上禁用IPv6 - 禁用IPv6后输出ifconfig命令</p>
<p>就这样。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Debian</tag>
        <tag>IPV6</tag>
      </tags>
  </entry>
  <entry>
    <title>在Proxmox VE（PVE）安装黑群晖</title>
    <url>/2019/12/03/%E5%9C%A8proxmox-ve%EF%BC%88pve%EF%BC%89%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/</url>
    <content><![CDATA[<p><strong>一、环境介绍</strong></p>
<p>1、Proxmox VE（以下简称PVE） 5.4-3</p>
<p>2、黑群晖引导（本教程采用DSM3617-1.03b引导）由Jun大神提供（相关文件可从<a href="https://dl.gxnas.com/">网盘</a>下载）</p>
<p>3、黑群晖系统PAT安装包（本教程安装DSM3617  6.2-23739版本）可从<a href="https://dl.gxnas.com/">网盘</a>下载，也可以从<a href="https://archive.synology.com/download/DSM/release/6.2/23739/">官网</a>下载</p>
<p><strong>二、环境创建</strong></p>
<p>1、点击“创建虚拟机”按钮，勾上“高级”，勾上“开机自启动”（软路由一般情况下开机启动），名称填入虚拟机名称（例如DSM），点击“下一步”</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/d1ae14ba3924a4f99aac7644dd97aa78-1.png" alt="488-1.png" title="点击查看原图"></p>
<p>2、操作系统选择“Linux”，版本选择“4.X&#x2F;3.X&#x2F;2.6 Kernel”即可，选择“不适用任何介质”，点击“下一步”</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/25a8cae4219fd2cb85d7ce97e09009b9-1.png" alt="488-2.png" title="点击查看原图"></p>
<p>3、系统默认即可，点击“下一步”</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/d094631376a2eb6c8506e185126366b8-1.png" alt="488-3.png" title="点击查看原图"></p>
<p>4、硬盘，随便设置，之后会删除的，点击“下一步”</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/cac94a64c72b74284dd68e8f285f835c-1.png" alt="488-4.png" title="点击查看原图"></p>
<p>5、CPU按照实际情况选择，点击“下一步”</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/9572a9268ffa73efcbea326cee83d158-1.png" alt="488-5.png" title="点击查看原图"></p>
<p>6、内存大小设置，也是根据实际情况选择（如果仅当下载机用的话，设置2G内存就足够了；如果多套件使用，建议设置8G以上内存），点击“下一步”</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/1ea01d843cd705935b1fb6269931ceca-1.png" alt="488-6.png" title="点击查看原图"></p>
<p>7、网络模型选择“intel E1000”，点击“下一步”</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/40a86985362eb2f33b3c9f3f07ac9d82-1.png" alt="488-7.png" title="点击查看原图"></p>
<p>8、确认配置，直接点击“完成”</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/e876651a8c0b6d883101cd3d37ff6933-1.png" alt="488-8.png" title="点击查看原图"></p>
<p>9、删除硬盘，选择“DSM” –&gt; “硬件”，找到硬盘，选中点击“分离”</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/50c4b9806752cf74b8ee138a1ba00e58-1.png" alt="488-9.png" title="点击查看原图"></p>
<p>10、硬盘分离后，选中未使用的磁盘0，点击“删除”</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/c46890203bbc9b57daf946ddfc8b0391.png" alt="488-10.png" title="点击查看原图"></p>
<p><strong>三、硬盘设置</strong></p>
<p>1、使用WinSCP把下载的.img引导文件改成英文的文件名synoboot.img并上传到PVE的根目录</p>
<p>2、进入DSM虚拟机Shell，输入qm importdisk 101 &#x2F;synoboot.img local-lvm回车，会看到vm-101-disk-0正在创建</p>
<p>（101是虚拟机编号，synoboot.img是刚才上传的引导镜像）</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/0e0b24f0e832c1dcf67a82adeb0a1ea5.png" alt="488-11.png" title="点击查看原图"></p>
<p>3、添加磁盘。进入LEDE硬件设置，选中未使用的磁盘0，点击编辑</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/a19a9794633631d8bc96d5a6496ed206.png" alt="488-12.png" title="点击查看原图"></p>
<p>4、总线&#x2F;设备选择SATA和0，磁盘镜像选择vm-101-disk-0</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/709f3c8bdb7e9fddc8f5018fffd425d1.png" alt="488-13.png" title="点击查看原图"></p>
<p>5、引导顺序，改为硬盘，Disk ‘sata0’</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/6d257145d4fe0a9602af04f98b988ec1.png" alt="488-14.png" title="点击查看原图"></p>
<p>6、添加一块系统盘，点击“硬件”，添加“添加”下拉菜单中的“硬盘”，总线&#x2F;设备选择SATA和1，存储选择local-vm，根据你的具体情况设置磁盘的大小（本教程设置为16G）</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/fc119183cd0fbfb79186d353c9fa24f6.png" alt="488-17.png" title="点击查看原图"></p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/a384cabb031fbb8a58b9fa905c48a443.png" alt="488-18.png" title="点击查看原图"></p>
<p><strong>四、群晖安装</strong></p>
<p>1、启动DSM虚拟机</p>
<p>2、内网访问网页<a href="http://find.synology.com/">http://find.synology.com</a>，找到未安装的群晖</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/fade2769fa530d6ad00510fb75bbe6f4.png" alt="488-15.png" title="点击查看原图"></p>
<p>3、用户协议，勾上确定，下一步</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/77312894beb8ee49b2d381c41d4d12cc.png" alt="488-16.png" title="点击查看原图"></p>
<p>4、点击“设置”。（如果你直通了硬盘并且之前已经在群晖系统中正常使用的，此时系统会显示“还原”或者“恢复”。建议把硬盘的第一个分区格式化一次后再重新来安装）</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/206160c87d3614dba6640a0ef4ef5379.png" alt="488-19.png" title="点击查看原图"></p>
<p>5、点击“手动安装”，选择从下载好的DS3617xs的6.2-23739.pat安装包（需要注意的是引导必须和安装包要匹配，否则安装教程中会报错），点击立即安装</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/cf8674d61200f52c58330d8b2ec72f1b.png" alt="488-20.png" title="点击查看原图"></p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/d27cec881eaa4321d5c9ac264f34f826.png" alt="488-22.png" title="点击查看原图"></p>
<p>6、会提示硬盘1、2数据会被删除，1是引导盘，2是系统盘</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/976a10eb5dea295e17ca7d9afd269eaf.png" alt="488-21.png" title="点击查看原图"></p>
<p>7、等待安装完成</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/31088fe9f2f208343db3286fbdc6b69e.png" alt="488-23.png" title="点击查看原图"></p>
<p>8、DSM初次进入的配置（略）</p>
<p>9、进入到DSM桌面后的图</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/a7a658886a85ecf5826dd2b37f02e9b7.png" alt="488-24.png" title="点击查看原图"></p>
<p>至此，黑群晖安装完毕，需要注意的是如果你的物理网卡不能进行升级，一旦升级就启动不了。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Proxmox VE</tag>
        <tag>黑群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>在Proxmox VE（PVE）下安装LEDE/OpenWrt软路由</title>
    <url>/2019/12/03/%E5%9C%A8proxmox-ve%EF%BC%88pve%EF%BC%89%E4%B8%8B%E5%AE%89%E8%A3%85lede-openwrt%E8%BD%AF%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<p><strong>一、环境介绍</strong></p>
<p>PVE版本：Proxmox Virtual Environment 5.4-3</p>
<p>LEDE版本：openwrt-koolshare-mod-v2.31-r10822-50aa0525d1-x86-64-combined-squashfs.img.gz</p>
<p><strong>二、环境创建</strong></p>
<p>1、点击“创建虚拟机”按钮，勾上“高级”，勾上“开机自启动”（软路由一般情况下开机启动），名称填入虚拟机名称（例如LEDE），点击“下一步”</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/247cdbf0c598d89172ef40bc930bd9ee.png" alt="487-1.png" title="点击查看原图"></p>
<p>2、操作系统选择“Linux”，版本选择“4.X&#x2F;3.X&#x2F;2.6 Kernel”即可，选择“不适用任何介质”，点击“下一步”</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/dd2ab19ec71b2ad71929469dd09920f8.png" alt="487-2.png" title="点击查看原图"></p>
<p>3、系统默认即可，点击“下一步”</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/401da59df4ea422b1bd392581429065e.png" alt="487-3.png" title="点击查看原图"></p>
<p>4、硬盘，这边随便设置，之后会删除的，点击“下一步”</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/e67007e5e02786d340a3be90e749b6fb.png" alt="487-4.png" title="点击查看原图"></p>
<p>5、CPU按照实际情况选择，点击“下一步”</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/7d8261ca6f6467e57bd701743588dd7d.png" alt="487-5.png" title="点击查看原图"></p>
<p>6、内存大小设置，也是根据实际情况选择，点击“下一步”</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/1282cd322342b0ab56e155b6faee1fac.png" alt="487-6.png" title="点击查看原图"></p>
<p>7、网络模型选择“intel E1000”，关闭防火墙（勾去掉），点击“下一步”</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/eac188718609a189ccf53595ac3ad86b.png" alt="487-7.png" title="点击查看原图"></p>
<p>8、直接点击“完成”</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/9f08ded2e7c79fb4c175fb9f270cc921.png" alt="487-8.png" title="点击查看原图"></p>
<p>9、选择“LEDE” –&gt; “硬件”，找到硬盘，选中点击“分离”</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/1a4de83d482cf4a1114afeef79b84ca7.png" alt="487-10.png" title="点击查看原图"></p>
<p>10、硬盘分离后，选中未使用的磁盘0，点击“删除”</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/0ea39ae95113d9ce09201a35059105e7.png" alt="487-9.png" title="点击查看原图"></p>
<p><strong>三、磁盘设置</strong></p>
<p>1、解压openwrt-koolshare-mod-v2.31-r10822-50aa0525d1-x86-64-combined-squashfs.img.gz文件，解压出openwrt-koolshare-mod-v2.31-r10822-50aa0525d1-x86-64-combined-squashfs.img重名为openwrt.img（原来文件名太长，输命令比较麻烦）</p>
<p>2、使用WinSCP把openwrt.img上传到根目录</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/ef67afc8d453ad8afefe5ac3cb19bec8.png" alt="487-11.png" title="点击查看原图"></p>
<p>3、添加磁盘。选择Shell，输入qm importdisk 100 &#x2F;openwrt.img local-lvm 会看到vm-100-disk-0正在创建</p>
<p>100是虚拟机编号，openwrt.img是刚才上传的lede镜像</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/8cf3712cbe6d9aaccc7664e659f90e38.png" alt="487-12.png" title="点击查看原图"></p>
<p>4、添加磁盘。进入LEDE硬件设置，选中未使用的磁盘0，点击编辑，弹出窗口默认配置即可，直接点击添加</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/0631df0e2de800c1a333623fd1be2c05.png" alt="487-13.png" title="点击查看原图"></p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/9db30fa38a220b624894b939c896d632.png" alt="487-14.png" title="点击查看原图"></p>
<p>5、调准磁盘大小，选中硬盘，点击“调整磁盘大小”，弹出框 输入要增加的磁盘大小。</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/eb7862b3eb0be57cef82f9858c460a90.png" alt="487-15.png" title="点击查看原图"></p>
<p><strong>四、启动顺序</strong></p>
<p>LEDE选项，引导顺序，改为硬盘</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/fe58c2804bc2682136b9d6d747bc32e0.png" alt="487-16.png" title="点击查看原图"></p>
<p><strong>五、启动LEDE并配置（略）</strong></p>
<p>这里我就不详细说明了。</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/93e4fe3afe6b3980aa3978c180afd54c.png" alt="487-17.png" title="点击查看原图"></p>
<p><strong>六、添加网卡（略）</strong></p>
<p>关闭lede，添加网卡，配置好LEDE的lan之后再添加网卡会比较方便不容易出问题。</p>
<p>至此，PVE安装LEDE就差不多完成了。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Proxmox VE</tag>
        <tag>LEDE</tag>
        <tag>OpenWrt</tag>
      </tags>
  </entry>
  <entry>
    <title>基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置</title>
    <url>/2019/12/03/%E5%9F%BA%E4%BA%8Eproxmox-ve%E7%9A%84%E8%99%9A%E6%8B%9F%E5%8C%96%E5%AE%B6%E5%BA%AD%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E7%AF%87%E4%B8%80%EF%BC%89-proxmox-ve-%E5%AE%89%E8%A3%85%E5%8F%8A/</url>
    <content><![CDATA[<h3 id="ProXmoX-VE-介绍"><a href="#ProXmoX-VE-介绍" class="headerlink" title="ProXmoX VE 介绍"></a>ProXmoX VE 介绍</h3><p>Proxmox VE是一款套开源的虚拟化管理软件，用户可通过网页的方式来管理<a href="https://www.smzdm.com/fenlei/fuwuqi/">服务器</a>上使用 kvm 以及 lxc 技术运行的虚拟机。同时提供了一些先进功能的支持，如集群、HA等。</p>
<p>PVE虽然是开源，却是由一个商业公司在运营、更新以及维护</p>
<h3 id="ProXmoX-VE-安装"><a href="#ProXmoX-VE-安装" class="headerlink" title="ProXmoX VE 安装"></a>ProXmoX VE 安装</h3><p>基础准备</p>
<p>16G以上U盘一个(非必须，这个U盘是用来安装PROXMOX的，也可以直接装<a href="https://www.smzdm.com/fenlei/yingpan/">硬盘</a>上，GEN8比较特殊，使用U盘引导比较方便，所以我安装在U盘上)；4G以上U盘一个；</p>
<p>支持虚拟化技术的CPU；</p>
<p>如果要虚拟软路由，需要有2个网口以上，最好千兆</p>
<h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>首先去proxmox下载安装包，目前最新版本是5.2-1，推荐使用<a href="https://www.smzdm.com/fenlei/zhongzi/">种子</a>下载，速度会比较快，下载完成后务必使用使用工具进行SHA256校验，防止下载错误</p>
<p>然后使用软碟通把下载的ISO文件刻录进4G的U盘（本人使用GEN8的ILO4远程安装，有GEN8的朋友应该知道咋弄）。</p>
<p>接着把4GU盘和16GU盘插入电脑，BIOS中开启虚拟化支持（具体方法百度，BIOS太多，我就不放图了），一个网口接入路由，使用4GU盘引导启动很快就会进入安装界面。</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/93e3546f11bae3fd67f94ccaf804602d-1.jpg" alt="基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置"></p>
<p>此处选择第一项回车，稍微等待一会，进入下图界面</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/3652e306401150f3e67ec74685551270-1.jpg" alt="基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置"></p>
<p>选择 I agree</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/92e5bc9b54e4a6da5f297ac82efe88cd-1.jpg" alt="基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置"></p>
<p>这里选择你要安装的的硬盘或者U盘，选定后点击Next</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/71aa26dfbc12cedd4b08f3759f202588-1.jpg" alt="基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置"></p>
<p>这里一般会默认china，如果没有那就输入china，其他默认，点击Next</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/4862a4ba9d43b298774a6ccc56306c3d-1.jpg" alt="基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置"></p>
<p>输入两遍管理密码和邮箱，点击Next</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/0df6d434a977c8f2e138d7727653cee6-1.jpg" alt="基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置"></p>
<p>这里注意，查看一下是不是你局域网的网段，如果不是，很可能和路由之间网络不通，另外，Hostname这项的格式需为*.*，默认的是无法下一步的，我这里使用PVE.LEN，点击next，等待安装完成，出现如下界面时，说明安装已经完成，点击reboot，</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/a8a3a41b7aafe21e01237916dda16d71-1.jpg" alt="基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置"></p>
<p>然后拔掉4GU盘，等待重启完成，如果顺利，会出现如下界面</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/94fcb998b1e96b5437b4037895063365-1.jpg" alt="基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置"></p>
<p>用另外一台电脑在浏览器中输入上面的地址进行访问</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/b8f2d7fcdc4dd29195ccb9108173f35c-1.jpg" alt="基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置"></p>
<p>language选择chinese就可以中文访问啦，用户名输入root，密码为刚才安装时候输的两遍管理密码</p>
<h3 id="ProXmoX-VE-初始配置"><a href="#ProXmoX-VE-初始配置" class="headerlink" title="ProXmoX VE 初始配置"></a>ProXmoX VE 初始配置</h3><p> </p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/df8db7aa05013699ffe960f19862017e-1.jpg" alt="基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置"></p>
<p>由于proxmox一些功能是需要付费订阅的，虽然可以免费使用，但是每次登陆时候都会弹出如上让你订阅的通知，比较烦，我们这里通过技术手段把它屏蔽掉。</p>
<p>首先点击确定把它关掉，然后通过winscp打开以下文件&#x2F;usr&#x2F;share&#x2F;javascript&#x2F;proxmox-widget-toolkit&#x2F;proxmoxlib.js，或者直接在</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/9c22876c14d00b1ae4cce8b943f52622-1.jpg" alt="基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置"></p>
<p>shell中使用VI等工具编辑，找到if(data.status!&#x3D;&#x3D;’Active’){，</p>
<p>替换为</p>
<p>if(false){</p>
<p>这条位置比较靠后，大约在800行，替换完成后保存文件，注销登陆，清理浏览器缓存，再次登陆，发现已经不再弹窗让你订阅啦。</p>
<p>接下来下来我们更新一下proxomx的软件，proxmox的底层毕竟是个debian系统，刚安装还是要更新一下的，在shell中输入aptupdate &amp;&amp; apt dist-upgrade，回车，发现报错无法更新，查看官方文档发现需要更改一些设置，在shell输入</p>
<p>rm -f&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;pve-enterprise.list</p>
<p>添加新的</p>
<p>echo“deb<a href="http://download.proxmox.com/debian/pve">http://download.proxmox.com/debian/pve</a> stretch pve-no-subscription”&gt;&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;pve-install-repo.list</p>
<p>下载秘钥</p>
<p>Wget <a href="http://download.proxmox.com/debian/proxmox-ve-release-5.x.gpg%20-O%20/etc/apt/trusted.gpg.d/proxmox-ve-release-5.x.gpg">http://download.proxmox.com/debian/proxmox-ve-release-5.x.gpg-O /etc/apt/trusted.gpg.d/proxmox-ve-release-5.x.gpg</a></p>
<p>再次输入apt update &amp;&amp; apt dist-upgrade</p>
<p>已经可以正常更新，等待更新完成，更新完成后重启一下虚拟机</p>
<h3 id="ProXmoX-VE-磁盘映射"><a href="#ProXmoX-VE-磁盘映射" class="headerlink" title="ProXmoX VE 磁盘映射"></a>ProXmoX VE 磁盘映射</h3><p>如果你的proxmox是直接安装在硬盘上的，那已经可以正常使用了，如果你和我一样是安装在U盘的，因为U盘空间比较小，需要弄个硬盘用来安装虚拟机</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/731047c60ca2f0a77cae7f26c3a7d25b-1.jpg" alt="基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置"></p>
<p>在磁盘中看下哪个是你要挂载的硬盘，一般推荐SSD，我这里需要挂载的设备目录为&#x2F;dev&#x2F;sdb，</p>
<p>在shell中输入mkdir &#x2F;mnt&#x2F;sdb创建sdb<a href="https://www.smzdm.com/fenlei/wenjianjia/">文件夹</a>用来给磁盘挂载</p>
<p>输入fdisk &#x2F;dev&#x2F;sdb管理这个硬盘，给它分区</p>
<p>输入n新建分区</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/b90725250310776308cb7affa10d1325-1.jpg" alt="基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置"></p>
<p>输入p建立主分区，</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/f8e70c229bba9f3199676d2d88b559c1-1.jpg" alt="基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置"></p>
<p>输入1创建一个分区，</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/d3d4a3635739e896fd26fdd5c46f2c24-1.jpg" alt="基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置"></p>
<p>这里是让输入这个分区的扇区起始位置，我们选择默认，直接回车</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/bd9639768e7a7737c853b5a7265309fd-1.jpg" alt="基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置"></p>
<p>分区的扇区结束位置，默认，直接回车，到此就分区完成了，我们输入p查看一下</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/4d7a0ced3a68d355756ee420e14070e0-1.jpg" alt="基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置"></p>
<p>分区已经完成，目录为&#x2F;dev&#x2F;sdb1</p>
<p>输入w，保存并退出fdisk工具</p>
<p>输入mkfs -t ext4&#x2F;dev&#x2F;sdb1格式化一下</p>
<p>输入 mount&#x2F;dev&#x2F;sdb1 &#x2F;mnt&#x2F;sdb进行挂载</p>
<p>输入vim&#x2F;etc&#x2F;fstab 编辑一下这个文件，在最后追加</p>
<p>&#x2F;dev&#x2F;sdb1 &#x2F;mnt&#x2F;sdbext4 defaults 0 0</p>
<p>保存退出</p>
<p>使proxmox可以开机自动挂载.</p>
<p>然后依次点击数据中心-存储-添加-目录</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/3bbc28146876dc78474f58ba8a583216.jpg" alt="基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置"></p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/57f42c9b86ae24d2ea45b55d96292740.jpg" alt="基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置"></p>
<p><a href="https://post.smzdm.com/p/a3k2r5r/pic_21/"><img src="https://wp.qiniu.gxnas.com/wp-content/uploads/2019/04/1aed4fc63b99279bd21abf955dd85e3c.jpg" alt="基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置"></a></p>
<p>ID随意，目录输入刚才挂载的目录，内容都选上，点添加，</p>
<p>最后点OS查看一下是否正常识别</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/f0bf58a17dc1d0089c0e6a88a3875445.jpg" alt="基于ProXmoX VE的虚拟化家庭服务器（篇一）—ProXmoX VE 安装及基础配置"></p>
<p>基础安装完工，下篇主要内容为虚拟软路由的安装配置，敬请期待</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Proxmox VE</tag>
      </tags>
  </entry>
  <entry>
    <title>#增量备份# 使用Rsync实现网站自动备份</title>
    <url>/2017/11/06/%E5%A2%9E%E9%87%8F%E5%A4%87%E4%BB%BD-%E4%BD%BF%E7%94%A8rsync%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%AB%99%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<p>微魔已经在网站上发布了多篇备份相关的文章，希望大家在其中已经获得了自己想要的东西，现在，微魔再补充一下Rsync备份的相关内容，提到Rsync，很多熟识Linux的朋友都不会陌生，很多Linux的镜像都是采用这种方式进行同步的。网络上更是有很多人采用了Rsync配合DNS，为网站架设多个镜像站点的案例。本文仅粗浅的介绍一个使用Rsync进行网站备份的方法，也欢迎大家补充更多内容。</p>
<p>首先，我们假定网站所在的服务器为A服务器，备份服务器为B服务器。安装rsync的方法就不说了，Linux直接yum&#x2F;apt-get install rsync就可以了</p>
<p>1.用ssh-key-gen命令在A服务器上创建公钥和密钥（目的是免密码登录B服务器）</p>
<p>ssh-keygen -t rsa</p>
<p>2.在A服务器上运行ssh-copy-id命令把公钥复制到B服务器（.ssh&#x2F;authorized_key）上</p>
<p>ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub root@B服务器的ip</p>
<p>期间需要输入B服务器的密码</p>
<p>如果出现形如如下错误</p>
<p>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<br>@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @<br>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<br>IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!<br>Someone could be eavesdropping on you right now (man-in-the-middle attack)!<br>It is also possible that the RSA host key has just been changed.<br>The fingerprint for the RSA key sent by the remote host is<br>xxxxxxxx<br>Please contact your system administrator.<br>Add correct host key in &#x2F;home&#x2F;conbar&#x2F;.ssh&#x2F;known_hosts to get rid of this message.<br>Offending key in &#x2F;home&#x2F;conbar&#x2F;.ssh&#x2F;known_hosts:10<br>RSA host key for xxxxxx has changed and you have requested strict checking.<br>Host key verification failed.</p>
<p>在A服务器下运行如下命令</p>
<p>ssh-keygen -R B服务器的ip</p>
<p>3.在A服务器上尝试登录B服务器</p>
<p>ssh B服务器ip</p>
<p>如果成功就没问题了</p>
<p>4.A服务器建立备份脚本（本文示例是在&#x2F;root下建立了backup.sh文件）：</p>
<p>示例1（先打包再同步）：</p>
<p>#!&#x2F;bin&#x2F;bash<br>echo “Now packing your database…”<br>mysqldump -uroot -p数据库密码 数据库名称&gt; backup.sql<br>echo “Now your files…”<br>tar zcvfP backup.tar.gz 网站目录（如&#x2F;home&#x2F;wwwroot）<br>echo “rsync start…”<br>echo “Database file is under rsync…”<br>rsync -avz -e “ssh -o StrictHostKeyChecking&#x3D;no -o UserKnownHostsFile&#x3D;&#x2F;dev&#x2F;null” –progress &#x2F;root&#x2F;backup.sql B服务器ip:&#x2F;home&#x2F;<br>echo “Now your files…”<br>rsync -avz -e “ssh -o StrictHostKeyChecking&#x3D;no -o UserKnownHostsFile&#x3D;&#x2F;dev&#x2F;null” –progress &#x2F;root&#x2F;backup.tar.gz B服务器ip:&#x2F;home&#x2F;<br>echo “Complete!”</p>
<p>示例2（直接同步网站目录，可实现增量备份）：</p>
<p>#!&#x2F;bin&#x2F;bash<br>echo “Now packing your database…”<br>mysqldump -uroot -p数据库密码 数据库名称&gt; backup.sql<br>echo “rsync start…”<br>echo “Database file is under rsync…”<br>rsync -avz -e “ssh -o StrictHostKeyChecking&#x3D;no -o UserKnownHostsFile&#x3D;&#x2F;dev&#x2F;null” –progress &#x2F;root&#x2F;backup.sql B服务器ip:&#x2F;home&#x2F;<br>echo “Now your files…”<br>rsync -avz -e “ssh -o StrictHostKeyChecking&#x3D;no -o UserKnownHostsFile&#x3D;&#x2F;dev&#x2F;null” –progress &#x2F;home&#x2F;wwwroot B服务器ip:&#x2F;home&#x2F;<br>echo “Complete!”</p>
<p>5.为备份脚本增加运行权限</p>
<p>chmod +x backup.sh</p>
<p>运行sh backup.sh进行备份尝试</p>
<p>6.设置crontab（crontab -e命令）进行定期备份（每周二、周四凌晨4点开始备份）</p>
<p># m h  dom mon dow   command<br>0 4 * * 1,4       &#x2F;bin&#x2F;bash &#x2F;root&#x2F;backup.sh</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Rsync</tag>
      </tags>
  </entry>
  <entry>
    <title>多用户网盘程序Cloudreve的安装</title>
    <url>/2018/03/25/%E5%A4%9A%E7%94%A8%E6%88%B7%E7%BD%91%E7%9B%98%E7%A8%8B%E5%BA%8Fcloudreve%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>本文在Centos下成功。演示：<a href="https://pan.zhujiwiki.com/">https://pan.zhujiwiki.com</a></p>
<p>Cloudreve是一款基于ThinkPHP构建的开源网盘系统，可快速对接多家云存储，支持七牛、又拍云、阿里云OSS、AWS S3、自建远程服务器，还有本地存储。支持多用户。下面是安装过程（均在SSH下完成）。</p>
<p>最直接的安装：官网下载源码，新建数据库，导入mysql.sql，修改application&#x2F;database_sample.php为application&#x2F;database.php，并修改数据库信息。</p>
<p><strong>一. 前提准备</strong> 1、安装Composer</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sS https://getcomposer.org/installer  php</span><br><span class="line">mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure>

<p>2、安装curl、fileinfo、gd扩展</p>
<p>3、创建站点</p>
<p><strong>二、安装Cloudreve</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer create-project hfo4/cloudreve:dev-master</span><br></pre></td></tr></table></figure>

<p>按说明填入数据库名、数据库用户名、数据库密码、域名等。</p>
<h1 id="出现如下提示表示安装完成"><a href="#出现如下提示表示安装完成" class="headerlink" title="出现如下提示表示安装完成"></a>出现如下提示表示安装完成</h1><p>Congratulations! Cloudreve has been installed successfully.</p>
<p><strong>三、相关设置</strong> 1、目录权限设置 runtime、public目录权限设置为777</p>
<p>2、伪静态 a、Nginx服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">   if (!-e $request_filename) &#123;</span><br><span class="line">   rewrite  ^(.*)$  /index.php?s=/$1  last;</span><br><span class="line">   break;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>b、Apache服务器 目录下的.htaccess已经配置好重写规则</p>
<p>c、后台及默认用户、密码 后台地址：<a href="http://你的域名/Admin">http:&#x2F;&#x2F;你的域名&#x2F;Admin</a> 初始用户名 <a href="mailto:&#x61;&#100;&#x6d;&#x69;&#x6e;&#x40;&#x63;&#108;&#x6f;&#x75;&#100;&#x72;&#101;&#118;&#x65;&#46;&#x6f;&#x72;&#x67;">&#x61;&#100;&#x6d;&#x69;&#x6e;&#x40;&#x63;&#108;&#x6f;&#x75;&#100;&#x72;&#101;&#118;&#x65;&#46;&#x6f;&#x72;&#x67;</a> 初始密码 admin</p>
<p>Cloudreve官网：<a href="https://cloudreve.org/">https://cloudreve.org/</a></p>
<p>via：<a href="https://github.com/HFO4/Cloudreve/wiki/%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E">https://github.com/HFO4/Cloudreve/wiki/%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Cloudreve</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优雅地升级 Debian 内核</title>
    <url>/2021/12/13/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%8D%87%E7%BA%A7-debian-%E5%86%85%E6%A0%B8/</url>
    <content><![CDATA[<p>前几天在网上看到了一篇 <a href="https://roov.org/2020/03/bbr-bbrplus-bbr2/">《BBR vs BBRplus vs BBR2 一般网络速度对比》</a> 的文章，文章中指出了高版本内核下 <code>BBR</code> 速度有较大提升。</p>
<p><img src="/2021/12/16394067811.png"></p>
<p>BBR vs BBR2 vs BBR Plus — 引用至原文</p>
<p>于是就心血来潮想要升级下 Debian 内核，在此记录。</p>
<h1 id="更新内核"><a href="#更新内核" class="headerlink" title="更新内核"></a>更新内核</h1><p>以下过程都需要有 <code>root</code> 权限！</p>
<h2 id="添加-Backports-源"><a href="#添加-Backports-源" class="headerlink" title="添加 Backports 源"></a>添加 <code>Backports</code> 源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb http://deb.debian.org/debian buster-backports main&quot;</span> &gt; /etc/apt/sources.list.d/backports.list</span><br><span class="line">apt update</span><br></pre></td></tr></table></figure>

<h2 id="安装新内核"><a href="#安装新内核" class="headerlink" title="安装新内核"></a>安装新内核</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt -t buster-backports install linux-image-amd64</span><br><span class="line">apt -t buster-backports install linux-headers-amd64</span><br><span class="line">update-grub</span><br></pre></td></tr></table></figure>

<p>然后 <strong>重启</strong> 并查看内核是否已经更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -r</span><br></pre></td></tr></table></figure>

<p>截止目前 Debian 的最新内核是：<code>5.10.0-0.bpo.3-amd64</code>，返回形如此的内容及更新成功。</p>
<h1 id="卸载旧内核"><a href="#卸载旧内核" class="headerlink" title="卸载旧内核"></a>卸载旧内核</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg --list  grep linux-image</span><br></pre></td></tr></table></figure>

<p>输出形式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ii  linux-image-5.10.0-0.bpo.3-amd64    5.10.13-1~bpo10+1            amd64        Linux 5.10 for 64-bit PCs (signed)</span><br><span class="line">ii  linux-image-4.19.0-14-amd64      4.19.171-2                   amd64        Linux 4.19 for 64-bit PCs (signed)</span><br><span class="line">ii  linux-image-amd64                   5.10.13-1~bpo10+1            amd64        Linux for 64-bit PCs (meta-package)</span><br></pre></td></tr></table></figure>

<p>从中可以看出旧内核为：<code>linux-image-4.19.0-14-amd64</code></p>
<p>在确保剩余至少一个最新内核下，删除旧内核：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt purge linux-image-4.19.0-14-amd64</span><br></pre></td></tr></table></figure>

<p>其他情况同理。同时也可以删除旧内核头文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg --list  grep linux-headers</span><br><span class="line">apt purge linux-headers-4.19.0-14-amd64</span><br></pre></td></tr></table></figure>

<p>❗注意：卸载了旧内核后一定要确保剩余至少一个最新内核：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure>

<p>在输出中至少能看到一个内核。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Debian</tag>
        <tag>升级</tag>
        <tag>内核</tag>
      </tags>
  </entry>
  <entry>
    <title>如何安装纯净的NVIDIA显卡驱动</title>
    <url>/2020/05/17/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E7%BA%AF%E5%87%80%E7%9A%84nvidia%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<p>NVIDIA的GeForce Experience（简称GFE）最新版在网上引起了轩然大波，一个游戏优化软件竟然也注册为服务，还在收集用户隐私数据并上传到服务器。这个遥测功能使得很多人不放心</p>
<p>如果你对这些辅助功能没什么需求，其实也可以完全不安装GFE软件，所以需要绿色版的驱动</p>
<p>先使用<a href="http://www.guru3d.com/files-details/display-driver-uninstaller-download.html">DDU</a>将以前安装的驱动卸载干净，</p>
<p><img src="/2020/05/TB2jDAQknvI8KJjSspjXXcgjXXa_1118749017.png"></p>
<p>卸载完成之后，在NVIDIA官网下载对应的显卡驱动，下载完成后右键解压一下，</p>
<p>然后用Cmd进入Display.Driver目录，看清楚是Cmd进入，并不是进那个文件夹，然后执行下面两行命令</p>
<p>For %1 in (*.dl_) do expand %1 %<del>n1.dll &amp; For %1 in (*.ex_) do expand %1 %</del>n1.exe &amp; For %1 in (*.sy_) do expand %1 %<del>n1.sys &amp; For %1 in (*.bi_) do expand %1 %</del>n1.bin</p>
<p>del &#x2F;f &#x2F;s &#x2F;q *.dl_ *.ex_ *.sy_ *.bi_</p>
<p><img src="/2020/05/TB2VvszkcbI8KJjy1zdXXbe1VXa_1118749017.png"></p>
<p>最后，进入设备管理器，选择你的显卡，点更新驱动程序，目录指向刚刚操作过的 Display.Driver 目录，点下一步即可，设备管理器将会自动完成驱动安装工作，如果已经是最新驱动，则会提示你已经安装。</p>
]]></content>
      <categories>
        <category>Win</category>
      </categories>
      <tags>
        <tag>NVIDIA</tag>
      </tags>
  </entry>
  <entry>
    <title>如何将Windows Server（2003/2008/2012/2016/XP/7/8/10）重装到Linux Server（CentOS/Debian/Ubuntu）</title>
    <url>/2018/10/03/%E5%A6%82%E4%BD%95%E5%B0%86windows-server%EF%BC%882003-2008-2012-2016-xp-7-8-10%EF%BC%89%E9%87%8D%E8%A3%85%E5%88%B0linux-server%EF%BC%88centos-debian-ubuntu%EF%BC%89/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>有时候，我们的无法在服务商的控制面板将Windwos Server服务器重装为Linux Server。</p>
<p>我们尝试发送支持票据，服务商告诉我们因为授权价格差异，不支持更换。我们只能想办法手动解决。</p>
<p>今天，我将演示通过四种方式，来帮助你成功的在服务器上将Windows安装为Linux。我在Alibaba Cloud、以及一些KVM机器中完成测试。如果你正在寻找这样的方案，赶快来试试吧。</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>一台装有Windows的服务器 &#x2F; 具有互联网接入 &#x2F; 有控制台(VNC&#x2F;KVM)操作权限 &#x2F; 或者具有恢复模式</p>
<p>请注意，以下四种方案均通过测试，因此绝大部分的机器都可以通过以下四种方式进行操作。（你应该测试哪一种方案适合你）</p>
<h3 id="让我们开始"><a href="#让我们开始" class="headerlink" title="让我们开始"></a>让我们开始</h3><h4 id="1-解决方案一（通过服务商提供的恢复模式）："><a href="#1-解决方案一（通过服务商提供的恢复模式）：" class="headerlink" title="1. 解决方案一（通过服务商提供的恢复模式）："></a>1. 解决方案一（通过服务商提供的恢复模式）：</h4><p>①. 首先在服务商面板选择并进入恢复模式</p>
<p>你将会收到一个包含有SSH&#x2F;RDP连接信息的提示&#x2F;邮件，通过这些信息，你可以访问到恢复模式，用来管理和操作你的服务器。 （解决方案一主要针对收到SSH连接信息的恢复模式，如果收到的是RDP信息，请查看解决方案二&#x2F;解决方案三&#x2F;解决方案四）</p>
<p>②. 检查磁盘信息</p>
<p>查看你想安装到的磁盘，输入以下命令。（你的磁盘可能是以下名称vda&#x2F;vdb&#x2F;sda&#x2F;sdb&#x2F;等等，请修改下面命令中的vda为您的磁盘） <code>fdisk -l</code></p>
<p>③. 执行以下的DD系统命令，进行一键安装最新的系统（你需要使用你自己的DD镜像，我提供了一个最新的CentOS7.X镜像）</p>
<p><code>wget -qO- https://opendisk.cxthhhhh.com/OperatingSystem/CentOS/CentOS_7.X_NetInstall_AutoPartition.vhd.gz gunzip -dc dd of=/dev/vda</code></p>
<p>④. 执行完毕重启计算机，等待15-45分钟，通过IP:22进行SSH连接（上述CentOS7安装后的默认密码为cxthhhhh.com）。</p>
<h4 id="2-解决方案二（通过官方提供的Debian-Installer-Loader中转安装Linux）"><a href="#2-解决方案二（通过官方提供的Debian-Installer-Loader中转安装Linux）" class="headerlink" title="2. 解决方案二（通过官方提供的Debian-Installer Loader中转安装Linux）"></a>2. 解决方案二（通过官方提供的Debian-Installer Loader中转安装Linux）</h4><p>①. 在Windows系统中下载Debian-Installer Loader硬盘安装器</p>
<p>Debian-Installer硬盘安装器 下载：<code>https://opendisk.cxthhhhh.com/OperatingSystem/Debian/Debian-install-Windows.exe</code></p>
<p>②. 通过Debian-Installer Loader安装Debian系统（按照程序提示，这是Debian官方提供的方案）</p>
<p>以下是安装预览图片（独立服务器的话，你需要去主板设置关闭安全启动Secure Boot）</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/Debian-install-Windows-introduction.png" alt="《[解决方案] 如何将Windows Server（2003/2008/2012/2016/XP/7/8/10）重装到Linux Server（CentOS/Debian/Ubuntu）》"></p>
<p>③. 通过VNC&#x2F;KVM界面开机选择安装Debian，进行一步步的手动安装操作（无需SSH，请在VNC&#x2F;SSH下操作）。</p>
<p>④. 等待Debian安装完毕，启动Debian。</p>
<p>（你已经完成Debian的安装，但是Windows系统也同时存在硬盘上，所以建议再次通过DD方式重新安装Linux系统，使得所有磁盘空间可用）</p>
<h4 id="3-解决方案三（通过UNetbootin安装方案）"><a href="#3-解决方案三（通过UNetbootin安装方案）" class="headerlink" title="3. 解决方案三（通过UNetbootin安装方案）"></a>3. 解决方案三（通过UNetbootin安装方案）</h4><p>①. 在Windows系统中下载UNetbootin安装器</p>
<p>UNetbootin 下载：<code>https://opendisk.cxthhhhh.com/Software/UNetbootin/UNetbootin-Windows-661.exe</code></p>
<p>②. 通过UNetbootin安装Linux发行版系统（我将使用CentOS来演示操作）</p>
<p>以下是安装预览图片（独立服务器的话，你需要去主板设置关闭安全启动Secure Boot）</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/UNetbootin-installer-introduction.png" alt="《[解决方案] 如何将Windows Server（2003/2008/2012/2016/XP/7/8/10）重装到Linux Server（CentOS/Debian/Ubuntu）》"></p>
<p>*提示信息：你也可以选择一个你已经下载好的任意Linux发行版ISO光盘镜像进行安装。（第一步选择ISO镜像即可，不使用在线安装）</p>
<p>③. 通过VNC&#x2F;KVM界面开机选择启动UNetbootin引导，进行一步步的手动安装Linux的操作即可（无需SSH，请在VNC&#x2F;SSH下操作）。</p>
<p>④. 手动安装完毕，重启计算机，你的Windows系统就成功的安装到了Linux。</p>
<p>（可选）如果不放心，你可以在当前已经安装好的Linux下再次通过第一种解决方案DD安装新的纯净Linux系统。 （已经有Grub引导了，此时你也手动安装其他Linux发行版）</p>
<h4 id="4-解决方案四（通过Deepin引导方案）："><a href="#4-解决方案四（通过Deepin引导方案）：" class="headerlink" title="4. 解决方案四（通过Deepin引导方案）："></a>4. 解决方案四（通过Deepin引导方案）：</h4><p>①. 在Windows系统中下载Deepin操作系统和Deepin硬盘安装器</p>
<p>Deepin系统 下载：<code>https://opendisk.cxthhhhh.com/OperatingSystem/Deepin/deepin-15.7-amd64.iso</code> Deepin硬盘安装器 下载：<code>https://opendisk.cxthhhhh.com/OperatingSystem/Deepin/deepin-system-installer.exe</code></p>
<p>②. 通过deepin硬盘安装器安装Deepin系统（将安装器和ISO镜像放在同一个目录下）</p>
<p>以下是安装预览图片（独立服务器的话，你需要去主板设置关闭安全启动Secure Boot）</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/Deepin-installer-introduction.png" alt="《[解决方案] 如何将Windows Server（2003/2008/2012/2016/XP/7/8/10）重装到Linux Server（CentOS/Debian/Ubuntu）》"></p>
<p>③. 通过VNC&#x2F;KVM界面开机选择安装Deepin，进行一步步的手动安装操作（无需SSH，请在VNC&#x2F;SSH下操作）。</p>
<p>④. 等待Deepin安装完毕，启动Deepin，然后在Deepin下通过第一种解决方案DD安装新的Linux系统</p>
<p>（可选）如果不放心，你可以在当前已经安装好的Linux下再次通过第一种解决方案DD安装新的纯净Linux系统。 （已经有Grub引导了，此时你也手动安装其他Linux发行版）</p>
<h3 id="非常棒，现在你已经掌握四种方案成功的将Windows重装为Linux"><a href="#非常棒，现在你已经掌握四种方案成功的将Windows重装为Linux" class="headerlink" title="非常棒，现在你已经掌握四种方案成功的将Windows重装为Linux"></a>非常棒，现在你已经掌握四种方案成功的将Windows重装为Linux</h3>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
  </entry>
  <entry>
    <title>安全、可靠、快速的「私人云盘」  Seafile 介绍与搭建</title>
    <url>/2018/01/09/%E5%AE%89%E5%85%A8%E3%80%81%E5%8F%AF%E9%9D%A0%E3%80%81%E5%BF%AB%E9%80%9F%E7%9A%84%E3%80%8C%E7%A7%81%E4%BA%BA%E4%BA%91%E7%9B%98%E3%80%8D-seafile-%E4%BB%8B%E7%BB%8D%E4%B8%8E%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>　安全快速的「私人云盘」其实并不是遥不可及，乐于折腾的你，也许可以考虑以下 Seafile 实现私有云方案。</p>
</blockquote>
<h2 id="Seafile-介绍"><a href="#Seafile-介绍" class="headerlink" title="Seafile 介绍"></a>Seafile 介绍</h2><h3 id="安全"><a href="#安全" class="headerlink" title="安全?"></a>安全?</h3><p>Seafile 支持<strong>端到端</strong>的加密技术来保护你的数据安全，服务器端数据加密，所有的数据传输使用 HTTPS&#x2F;TLS 协议。 Seafile 通过“资料库”来分类管理文件，每个资料库可单独同步，用户可「加密」资料库， 且密码不会保存在服务器端，所以即使是服务器管理员也无权?访问你的文件。</p>
<h3 id="可靠"><a href="#可靠" class="headerlink" title="可靠?"></a>可靠?</h3><p><strong>软件可靠性</strong>：Seafile 同步算法经过 3 年的不断改进和数十万用户的使用，已经非常可靠。 文件历史和资料库镜像机制，保证了文件可随时方便的恢复到任意历史状态。 <strong>硬件可靠性</strong>：使用 VPS 的硬盘看服务商而定，其可靠性高达99.999%。本地搭建依环境与硬盘质量而定，当然也可根据需求组建 RAID 提高本地数据可靠性。</p>
<h3 id="快速"><a href="#快速" class="headerlink" title="快速?"></a>快速?</h3><p>Seafile 服务器内核由 C 语言编写。运行起来小巧快速。可直接通过本地 S 盘来访问云端文件，不占用本地存储。同操作系统无缝集成，可离线修改文件。升级通过最新的软件包以及一键脚本即可完成。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/01/2018-01-06-142808.png" alt="null"></p>
<h2 id="简述安装教程"><a href="#简述安装教程" class="headerlink" title="简述安装教程"></a>简述安装教程</h2><p>本文以 Windows 下的操作为例。macOS 因为自带终端（Terminal），可以简化安装 PuTTY 等部分步骤，请使用纯净的 CentOS 7 系统，其他系统或非纯净系统可能会出错。 若你已经熟悉部分操作，可跳跃查看文章内容。</p>
<h3 id="提前准备一些工具"><a href="#提前准备一些工具" class="headerlink" title="提前准备一些工具"></a>提前准备一些工具</h3><ol>
<li>耐心、细心。</li>
<li>VPS 或私有服务器，搭载 CentOS 7 或 Ubuntu 16.04 系统。（本文介绍的是使用 <strong>CentOS 7纯净系统</strong> 的安装方式）</li>
<li>WinSCP + PuTTY （下载地址： <a href="https://sourceforge.net/projects/winscp/files/latest/download" title=" WinSCP 下载">WinSCP 下载</a>、 <a href="https://winscp.net/download/putty-0.70-installer.msi" title=" PuTTY 下载">PuTTY 下载</a>)</li>
</ol>
<h3 id="登录操作-VPS"><a href="#登录操作-VPS" class="headerlink" title="登录操作 VPS"></a>登录操作 VPS</h3><p>请确保你的 PuTTY 安装在默认位置即 C:\Program Files (x86)\PUTTY 下。</p>
<h4 id="WinSCP登录-配置如有不同请自行更改"><a href="#WinSCP登录-配置如有不同请自行更改" class="headerlink" title="WinSCP登录(配置如有不同请自行更改)"></a>WinSCP登录(配置如有不同请自行更改)</h4><p><img src="https://www.jarods.org/wp-content/uploads/2018/01/ec48cc9a28e311841b1d86a8d6351c1a.gif" alt="WinSCP 登录" title="WinSCP 登录"></p>
<p>WinSCP 登录</p>
<h4 id="WinSCP界面"><a href="#WinSCP界面" class="headerlink" title="WinSCP界面"></a>WinSCP界面</h4><p><img src="https://www.jarods.org/wp-content/uploads/2018/01/f099ea42cb33e240b59e278e7fed89a5.gif" alt="WinSCP查看文件" title="WinSCP查看文件"></p>
<p>WinSCP查看文件</p>
<p>WinSCP是一款开源的SFTP客户端，运行于Windows系统下，遵照GPL发布。 使用WinSCP可以使你更加直观的看到你的Linux服务器文件，可直接进行文件拖拽，文件编辑等操作。 此次安装 Seafile ，教程默认在ROOT路径下进行操作（SSH&#x2F;PuTTY连接时候已默认处于ROOT路径下）</p>
<h4 id="SSH-PuTTY-登录"><a href="#SSH-PuTTY-登录" class="headerlink" title="SSH ( PuTTY )登录"></a>SSH ( PuTTY )登录</h4><p><img src="https://www.jarods.org/wp-content/uploads/2018/01/5cca3c3e1be9a50067f392da58d4392e.png" alt=" SSH ( PuTTY )可在WinSCP中调用" title=" SSH ( PuTTY )可在WinSCP中调用"></p>
<p>SSH ( PuTTY )可在WinSCP中调用</p>
<h3 id="一键脚本安装Seafile"><a href="#一键脚本安装Seafile" class="headerlink" title="一键脚本安装Seafile"></a>一键脚本安装Seafile</h3><p>在 PuTTY 中输入下方全部代码后，请<strong>分行</strong>运行（回车） 注：此脚本出处为 Xiaoz 博客。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/helloxz/seafile/master/install_seafile.sh</span><br><span class="line">chmod +x install_seafile.sh &amp;&amp; ./install_seafile.sh</span><br></pre></td></tr></table></figure>

<p><img src="https://www.jarods.org/wp-content/uploads/2018/01/8a01b9780846b20179c001ca63e86aa6.gif" alt="安装脚本下载" title="安装脚本下载"></p>
<p>安装脚本下载</p>
<p>根据提示进行选择即可。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/01/d56dd217b4541b6d6ee4fd3d4c04dc5e.gif" alt="根据提示安装" title="根据提示安装"></p>
<p>根据提示安装</p>
<p>该脚本运行完后会在命令行中打印配置信息和管理员账号密码，请仔细阅读。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装目录</span><br><span class="line">/home/MyCloud  </span><br><span class="line">#启动服务</span><br><span class="line">/home/MyCloud/seafile-server/seafile.sh start </span><br><span class="line">#启动服务/home/MyCloud/seafile-server/seahub.sh start </span><br><span class="line">#停止服务</span><br><span class="line">/home/MyCloud/seafile-server/seafile.sh stop</span><br><span class="line">#停止服务 /home/MyCloud/seafile-server/seahub.sh stop</span><br></pre></td></tr></table></figure>

<h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><p>现在你可以通过 <a href="http://ip:8000/">http://ip:8000/</a> 访问属于你自己的私有云了，Enjoy ！</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/01/2c0e800a53905439ce6f57aefd0621d6.png" alt="网页版操作界面" title="网页版操作界面"></p>
<p>网页版操作界面</p>
<p> </p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/01/579ef07e4b5dabaeeb2578e5c0dc8074.png" alt="Windows客户端" title="Windows客户端"></p>
<p>Windows客户端</p>
<p>搭配 Seafile 客户端，享受多平台跨越自建私有云的安全快速，不仅桌面端，手机上也可以使用 <a href="https://itunes.apple.com/cn/app/seafile-pro/id639202512?l=en&mt=8&at=10lJSw" title="Seafile">Seafile</a>。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/01/4afea498b53ddd1c60a51792da3925f2.jpg"></p>
<h4 id="Seafile-Pro"><a href="#Seafile-Pro" class="headerlink" title="Seafile Pro"></a>Seafile Pro</h4><p>iOS</p>
<p><a href="https://sspai.com/app/Seafile%20Pro">相关文章</a></p>
<p>下载</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.seafile.com/home/" title="项目官网">项目官网</a> <a href="https://github.com/haiwen/seafile" title="Github 项目地址">Github 项目地址</a> <a href="https://manual-cn.seafile.com/deploy/" title="官方安装教程">官方安装教程</a> <a href="https://github.com/haiwen/seafile-server-installer-cn" title="官方脚本简易版">官方脚本简易版</a> <a href="https://www.xiaoz.me/archives/8480" title="小z脚本">小z脚本</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Seafile</tag>
      </tags>
  </entry>
  <entry>
    <title>宝塔面板：1分钱可购买3年的异常监控推送和小程序插件</title>
    <url>/2019/03/20/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%EF%BC%9A1%E5%88%86%E9%92%B1%E5%8F%AF%E8%B4%AD%E4%B9%B03%E5%B9%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E7%9B%91%E6%8E%A7%E6%8E%A8%E9%80%81%E5%92%8C%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>宝塔的最新活动，针对宝塔小程序和异常推送的插件，原价<code>525.6</code>元&#x2F;<code>3</code>年，现在<code>0.01</code>元&#x2F;<code>3</code>年，然后出了个组团活动，需要<code>10</code>个人才能<code>1</code>分钱获得插件，不然退款，组团人数越多，奖励越高，也有一定几率奖励专业版，前<code>3</code>的话，所有组团队员都有专业版，<code>1</code>分钱不多，建议上车！</p>
<p>上车后可以自己组队。</p>
<p><strong>活动地址</strong>：<a href="https://www.bt.cn/team.html?MTI3MjA5eno=">https://www.bt.cn/team.html?MTI3MjA5eno=</a></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/03/bt-20190320.jpg"></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>宝塔面板</tag>
      </tags>
  </entry>
  <entry>
    <title>宝塔 Linux 面板 7.7.0 开心版分享</title>
    <url>/2021/11/14/%E5%AE%9D%E5%A1%94-linux-%E9%9D%A2%E6%9D%BF-7-7-0-%E5%BC%80%E5%BF%83%E7%89%88%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<p>Linux面板7.7.0升级专业版命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl https://download.moetas.com/install/update6.shbash</span><br></pre></td></tr></table></figure>

<p>Debian安装命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -O install.sh https://download.moetas.com/install/install-ubuntu_6.0.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure>

<p>Centos安装命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh https://download.moetas.com/install/install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure>

<p>转自：<a href="https://fenhao.me/10.html">https://fenhao.me/10.html</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>宝塔面板</tag>
        <tag>BT</tag>
      </tags>
  </entry>
  <entry>
    <title>实时监测VPS网络带宽流量 / 带精美图表</title>
    <url>/2018/07/30/%E5%AE%9E%E6%97%B6%E7%9B%91%E6%B5%8Bvps%E7%BD%91%E7%BB%9C%E5%B8%A6%E5%AE%BD%E6%B5%81%E9%87%8F-%E5%B8%A6%E7%B2%BE%E7%BE%8E%E5%9B%BE%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="Speedometer"><a href="#Speedometer" class="headerlink" title="Speedometer"></a>Speedometer</h2><p>这是我首推的一个工具，原因是有彩色的图表，简单直观。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/2018072809415326-1024x732.png"></p>
<h3 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Debian / Ubuntu</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install speedometer -y</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Bmon"><a href="#Bmon" class="headerlink" title="Bmon"></a>Bmon</h2><p>如果说上面的那款工具过于花哨，功能性不强的话，可以试试看这款 Bmon，感觉就是增强版的 nload。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/07/2018072809464081-1024x794.png"></p>
<h3 id="安装使用-1"><a href="#安装使用-1" class="headerlink" title="安装使用"></a>安装使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Debian / Ubuntu</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install bmon -y</span><br><span class="line"></span><br><span class="line"># CentOS / RHEL</span><br><span class="line">yum install epel-release -y</span><br><span class="line">yum install bmon -y</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>网络带宽流量 / 带精美图表</tag>
      </tags>
  </entry>
  <entry>
    <title>小鸡设置</title>
    <url>/2021/11/20/%E5%B0%8F%E9%B8%A1%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>个人喜欢先更新一下系统</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt upgrade -y</span><br></pre></td></tr></table></figure>

<p>改为 root 密码登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo root:密码 chpasswd root</span><br><span class="line">sed -i &#x27;s/^#\?PermitRootLogin.*/PermitRootLogin yes/g&#x27; /etc/ssh/sshd_config;</span><br><span class="line">sed -i &#x27;s/^#\?PasswordAuthentication.*/PasswordAuthentication yes/g&#x27; /etc/ssh/sshd_config;</span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure>

<p> </p>
<p>开启 BBR</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#修改系统变量</span><br><span class="line">echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#保存生效</span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看内核是否已开启BBR</span><br><span class="line">lsmod  grep bbr</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>放行全部端口（重启失效）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -P INPUT ACCEPT</span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line">iptables -P OUTPUT ACCEPT</span><br><span class="line">iptables -F</span><br><span class="line">iptables-save</span><br></pre></td></tr></table></figure>

<p> </p>
<p>持续化规则（重启不失效）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装iptables-persistent</span><br><span class="line">apt install iptables-persistent</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>对于关闭防火墙更暴力点的方法，可以选择如下两种</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/iptables &amp;&amp; reboot</span><br><span class="line">或</span><br><span class="line">rm -rf /etc/iptables/rules.v4</span><br><span class="line">rm -rf /etc/iptables/rules.v6</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<p>同时你也需要进入后台配置一下入站规则，我是开放的所有协议</p>
<p>然后你就可以干点你想做的了，至于 DD 系统，我打算过段时间再搞，现阶段封号的太多了</p>
<p>已找甲骨文适配的 DD 脚本，下方演示为 Debian 10</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash &lt;(wget --no-check-certificate -qO- &#x27;https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh&#x27;) -d 10 -v 64 -p &quot;密码&quot; -port &quot;端口&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>开箱设置</tag>
      </tags>
  </entry>
  <entry>
    <title>开启极速 HTTPS 体验</title>
    <url>/2020/04/05/%E5%BC%80%E5%90%AF%E6%9E%81%E9%80%9F-https-%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<h3 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h3><p>如果说 HTTP&#x2F;​2 是当前互联网 Web 发展的讨论热点之一，那么下一个热点应该就是 TLS 1.3 了。 上次加密协议更新至今已有八年多，TLS 1.3 的最终版本现已于 2018 年 8 月发布。</p>
<hr>
<h3 id="0x02-当前的TLS协议存在问题"><a href="#0x02-当前的TLS协议存在问题" class="headerlink" title="0x02 当前的TLS协议存在问题"></a>0x02 当前的TLS协议存在问题</h3><p>老版本的 SSL 协议被公认在完整性校验、密钥协商过程中有重大缺陷，因此，2011 年与 2015 年 IETF 小组相继声明禁止使用 SSL 2.0、3.0。 TLS 协议针对此前披露的漏洞做了相应的处理，但是因为其复杂性，还没有一个版本能真正保证绝对的安全。</p>
<p>目前最新版本的 TLS 1.2 发布距今已有九年时间，在此期间，许多 SSL&#x2F;​TLS 协议的新漏洞被发现，比如针对其压缩机制的 CRIME 漏洞，针对 CBC 块加密模式的 BEAST 漏洞（主要是针对 SSL 3.0 和 TLS 1.0），早已不再是当初设计者认为的那么安全，人们迫切需要新的协议将其代替。</p>
<hr>
<h3 id="0x03-TLS-1-3有哪些变化？"><a href="#0x03-TLS-1-3有哪些变化？" class="headerlink" title="0x03 TLS 1.3有哪些变化？"></a>0x03 TLS 1.3有哪些变化？</h3><ul>
<li>TLS1.3 大幅提高安全性，还简化了握手过程，使第一次握手时只需要一个RTT，并在第二次访问时提供了 0-RTT 模式，提高了性能降低服务器压力。</li>
<li>支持0-RTT数据传输</li>
<li>废弃了3DES、RC4、AES-CBC等加密组件。废弃了SHA1、MD5等哈希算法。</li>
<li>不再允许对加密报文进行压缩、不再允许双方发起重协商，密钥的改变不再需要发送change_cipher_spec报文给对方。</li>
<li>握手阶段的报文可见明文大大减少。</li>
</ul>
<hr>
<h3 id="0x04-TLS-1-3完整握手工作流"><a href="#0x04-TLS-1-3完整握手工作流" class="headerlink" title="0x04 TLS 1.3完整握手工作流"></a>0x04 TLS 1.3完整握手工作流</h3><ul>
<li>+表示该报文中值得注意的extension</li>
<li>*表示该内容也可能不被发送</li>
<li>{} 表示该内容使用handshake_key加密</li>
<li>[] 表示该内容使用application_key加密</li>
</ul>
<hr>
<h3 id="0x05-速度优势"><a href="#0x05-速度优势" class="headerlink" title="0x05 速度优势"></a>0x05 速度优势</h3><p>在 Web 性能方面，TLS 和加密连接总是增加了一些开销。HTTP &#x2F; 2 肯定有助于解决这个问题，但 TLS 1.3 通过 TLS 错误启动和零往返时间（0-RTT）等功能帮助加速加密连接。</p>
<p>简单地说，使用 TLS 1.2，需要两次往返才能完成 TLS hand­shake。使用 1.3 时，它只需要一次往返， 从而将加密延迟减少一半。这有助于这些加密连接感觉比以前更快一点。</p>
<hr>
<h3 id="0x06-如何为自己站点启用TLS-1-3"><a href="#0x06-如何为自己站点启用TLS-1-3" class="headerlink" title="0x06 如何为自己站点启用TLS 1.3"></a>0x06 如何为自己站点启用TLS 1.3</h3><p>演示环境:</p>
<ul>
<li>面板：宝塔面板 6.8.3</li>
<li>系统：Centos 7.5</li>
<li>Nginx：1.15.6</li>
</ul>
<p>修改网站配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//替换</span><br><span class="line">ssl_ciphers TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5;</span><br><span class="line">//替换</span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line">//增加</span><br><span class="line">add_header Strict-Transport-Security &quot;max-age=31536000&quot;;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="0x07-开启成功"><a href="#0x07-开启成功" class="headerlink" title="0x07 开启成功"></a>0x07 开启成功</h3><p><img src="https://www.jarods.org/wp-content/uploads/2020/04/1814070566.png" alt="TIM图片20181216133616.png"></p>
<p>TIM图片20181216133616.png</p>
<hr>
<h3 id="0x08-总结"><a href="#0x08-总结" class="headerlink" title="0x08 总结"></a>0x08 总结</h3><p>TLS 1.3 使用了复杂的密钥导出过程，增强了最终使用的密钥的安全性。同时简化了所使用的加密算法，废弃了 RC4、3DES、MD5、SHA1、AES-CBC 等加密算法，删除了压缩、重协商等具有漏洞的机制，大大精简了协议。 因此，TLS 1.3 如果能够得到普及，网络数据的传递将会变得更加安全、隐秘，TLS 1.3 的推广需要每一位开发者、运营者的认可和支持。</p>
<p>目前 TLS 1.3 虽然还在草案阶段，但是其基本原理和思想已经应用在了实际生活中，chrome 等浏览器都已准备好了对其的支持，期待 TLS 1.3 正式成为一个协议规范的那一天。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>HTTPS</tag>
      </tags>
  </entry>
  <entry>
    <title>工具软件下载</title>
    <url>/2022/01/05/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<h1 id="生产力工具集"><a href="#生产力工具集" class="headerlink" title="生产力工具集"></a>生产力工具集</h1><p><a href="https://u.tools/">https://u.tools/</a></p>
<h1 id="Windows-子系统"><a href="#Windows-子系统" class="headerlink" title="Windows 子系统"></a>Windows 子系统</h1><h2 id="直接安装WSL2"><a href="#直接安装WSL2" class="headerlink" title="直接安装WSL2"></a>直接安装WSL2</h2><p>适用于之前没有安装过WSL</p>
<p>1.如果之前没有用过 WSL，那么首先需要为Linux启用Windows子系统:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></table></figure>

<p>2.安装 WSL2 之前，必须启用“虚拟机平台”可选功能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure>

<p>重新启动计算机以完成WSL安装并更新到 WSL2</p>
<p>3.安装适用于 x64 计算机的 WSL2 Linux 内核更新包</p>
<p><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</a></p>
<p>4.完成之后，以管理员身份运行 PowerShell，执行如下命令来设置wsl使用的默认版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure>

<p>这里我们将默认设置为 WSL2</p>
<p>5.接下来通过访问 Microsoft Store 来安装分发版 <a href="https://aka.ms/wslstore">https://aka.ms/wslstore</a></p>
<p>6.查看 WSL 版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure>

<h2 id="Win-10下开启Windows子系统WSL"><a href="#Win-10下开启Windows子系统WSL" class="headerlink" title="Win 10下开启Windows子系统WSL"></a>Win 10下开启Windows子系统WSL</h2><p>1.程序和功能 - 启动或关闭Windows功能 - 适用于Linux的Windows子系统 勾选后确定，重启系统。</p>
<p>2.打开cmd，输入bash回车，提示访问一个网址，使用浏览器访问，</p>
<p>重定向到应用商店，然后可以获取需要的Linux子系统，比如Ubuntu</p>
<p>3.阿里云官方镜像站：<a href="https://developer.aliyun.com/mirror/">https://developer.aliyun.com/mirror/</a></p>
<h2 id="从WSL-1切换到WSL-2"><a href="#从WSL-1切换到WSL-2" class="headerlink" title="从WSL 1切换到WSL 2"></a>从WSL 1切换到WSL 2</h2><p>WSL 2相比WSL 1有着更完整的虚拟环境，而且一些数据库比如mongodb在WSL 1下默认是无法使用的，所以果断升级：</p>
<p>升级步骤参考微软官方文档：<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">https://docs.microsoft.com/zh-cn/windows/wsl/install-win10</a></p>
<p>升级过程需要注意2点：</p>
<p>1.使用power shell 管理员权限执行命名。</p>
<p>2.如果WSL 1已经有Linux环境，升级后要重启电脑。</p>
<h2 id="windows-ubuntu子系统设置默认root用户"><a href="#windows-ubuntu子系统设置默认root用户" class="headerlink" title="windows ubuntu子系统设置默认root用户"></a>windows ubuntu子系统设置默认root用户</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ubuntu config --default-user root</span><br></pre></td></tr></table></figure>

<h2 id="WSL2-固定IP"><a href="#WSL2-固定IP" class="headerlink" title="WSL2 固定IP"></a>WSL2 固定IP</h2><p>在Windows 10中，以管理员权限运行CMD或Powershell，然后执行以下两个命令：</p>
<p>1.在Ubuntu中添加IP地址192.168.50.2，名为eth0:1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl -d Ubuntu -u root ip addr add 192.168.50.2/24 broadcast 192.168.50.255 dev eth0 label eth0:1</span><br></pre></td></tr></table></figure>

<p>2.在Win10中添加IP地址192.168.50.1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh interface ip add address &quot;vEthernet (WSL)&quot; 192.168.50.1 255.255.255.0</span><br></pre></td></tr></table></figure>

<p>将来，访问Ubuntu时将使用192.168.50.2，访问Win10时将使用192.168.50.1。 您可以将上述两行命令另存为.bat文件，然后将其放入引导区，并使其每次自动执行。</p>
<h1 id="Windows-Terminal"><a href="#Windows-Terminal" class="headerlink" title="Windows Terminal"></a>Windows Terminal</h1><p>您可以从Microsoft Store安装Windows Terminal：<a href="https://aka.ms/terminal">https://aka.ms/terminal</a></p>
<p>官方文档：<a href="https://docs.microsoft.com/en-us/windows/terminal/">https://docs.microsoft.com/en-us/windows/terminal/</a></p>
<p>快速打开：运行 wt</p>
<p>快速启动ssh：wt -w 0 new-tab cmd &#x2F;k ssh <a href="mailto:&#114;&#x6f;&#x6f;&#116;&#x40;&#49;&#x37;&#50;&#x2e;&#49;&#54;&#46;&#50;&#x2e;&#x32;&#x32;&#x33;">&#114;&#x6f;&#x6f;&#116;&#x40;&#49;&#x37;&#50;&#x2e;&#49;&#54;&#46;&#50;&#x2e;&#x32;&#x32;&#x33;</a></p>
<p>设置-打开JSON文件 settings.json</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// This file was initially generated by Windows Terminal Preview 1.5.3242.0</span><br><span class="line">// It should still be usable in newer versions, but newer versions might have additional</span><br><span class="line">// settings, help text, or changes that you will not see unless you clear this file</span><br><span class="line">// and let us generate a new one for you.</span><br><span class="line"></span><br><span class="line">// To view the default settings, hold &quot;alt&quot; while clicking on the &quot;Settings&quot; button.</span><br><span class="line">// For documentation on these settings, see: https://aka.ms/terminal-documentation</span><br><span class="line">&#123;</span><br><span class="line">    &quot;$schema&quot;: &quot;https://aka.ms/terminal-profiles-schema&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;defaultProfile&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,</span><br><span class="line"></span><br><span class="line">    // You can add more global application settings here.</span><br><span class="line">    // To learn more about global settings, visit https://aka.ms/terminal-global-settings</span><br><span class="line"></span><br><span class="line">    // If enabled, selections are automatically copied to your clipboard.</span><br><span class="line">    &quot;copyOnSelect&quot;: false,</span><br><span class="line"></span><br><span class="line">    // If enabled, formatted data is also copied to your clipboard</span><br><span class="line">    &quot;copyFormatting&quot;: false,</span><br><span class="line"></span><br><span class="line">    // A profile specifies a command to execute paired with information about how it should look and feel.</span><br><span class="line">    // Each one of them will appear in the &#x27;New Tab&#x27; dropdown,</span><br><span class="line">    //   and can be invoked from the commandline with `wt.exe -p xxx`</span><br><span class="line">    // To learn more about profiles, visit https://aka.ms/terminal-profile-settings</span><br><span class="line">    &quot;profiles&quot;:</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;defaults&quot;:</span><br><span class="line">        &#123;</span><br><span class="line">            // Put settings here that you want to apply to all profiles.</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;list&quot;:</span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;guid&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,</span><br><span class="line">                &quot;hidden&quot;: false,</span><br><span class="line">                &quot;name&quot;: &quot;Ubuntu&quot;,</span><br><span class="line">                &quot;source&quot;: &quot;Windows.Terminal.Wsl&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // Make changes here to the powershell.exe profile.</span><br><span class="line">                &quot;guid&quot;: &quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;,</span><br><span class="line">                &quot;name&quot;: &quot;Windows PowerShell&quot;,</span><br><span class="line">                &quot;commandline&quot;: &quot;powershell.exe&quot;,</span><br><span class="line">                &quot;hidden&quot;: false</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // Make changes here to the cmd.exe profile.</span><br><span class="line">                &quot;guid&quot;: &quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;,</span><br><span class="line">                &quot;name&quot;: &quot;命令提示符&quot;,</span><br><span class="line">                &quot;commandline&quot;: &quot;cmd.exe&quot;,</span><br><span class="line">                &quot;hidden&quot;: false</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;guid&quot;: &quot;&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;&quot;,</span><br><span class="line">                &quot;hidden&quot;: false,</span><br><span class="line">                &quot;name&quot;: &quot;Azure Cloud Shell&quot;,</span><br><span class="line">                &quot;source&quot;: &quot;Windows.Terminal.Azure&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // Add custom color schemes to this array.</span><br><span class="line">    // To learn more about color schemes, visit https://aka.ms/terminal-color-schemes</span><br><span class="line">    &quot;schemes&quot;: [],</span><br><span class="line"></span><br><span class="line">    // Add custom actions and keybindings to this array.</span><br><span class="line">    // To unbind a key combination from your defaults.json, set the command to &quot;unbound&quot;.</span><br><span class="line">    // To learn more about actions and keybindings, visit https://aka.ms/terminal-keybindings</span><br><span class="line">    &quot;actions&quot;:</span><br><span class="line">    [</span><br><span class="line">        // Copy and paste are bound to Ctrl+Shift+C and Ctrl+Shift+V in your defaults.json.</span><br><span class="line">        // These two lines additionally bind them to Ctrl+C and Ctrl+V.</span><br><span class="line">        // To learn more about selection, visit https://aka.ms/terminal-selection</span><br><span class="line">        &#123; &quot;command&quot;: &quot;closeTab&quot;, &quot;keys&quot;: &quot;ctrl+w&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &quot;newTab&quot;, &quot;keys&quot;: &quot;ctrl+t&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &quot;scrollUpPage&quot;, &quot;keys&quot;: &quot;alt+pageup&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &quot;scrollUpPage&quot;, &quot;keys&quot;: &quot;shift+pageup&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &quot;scrollDownPage&quot;, &quot;keys&quot;: &quot;alt+pagedown&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &quot;scrollDownPage&quot;, &quot;keys&quot;: &quot;shift+pagedown&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 0 &#125;, &quot;keys&quot;: &quot;ctrl+1&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 1 &#125;, &quot;keys&quot;: &quot;ctrl+2&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 2 &#125;, &quot;keys&quot;: &quot;ctrl+3&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 3 &#125;, &quot;keys&quot;: &quot;ctrl+4&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 4 &#125;, &quot;keys&quot;: &quot;ctrl+5&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 5 &#125;, &quot;keys&quot;: &quot;ctrl+6&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 6 &#125;, &quot;keys&quot;: &quot;ctrl+7&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 7 &#125;, &quot;keys&quot;: &quot;ctrl+8&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 8 &#125;, &quot;keys&quot;: &quot;ctrl+9&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 0 &#125;, &quot;keys&quot;: &quot;alt+1&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 1 &#125;, &quot;keys&quot;: &quot;alt+2&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 2 &#125;, &quot;keys&quot;: &quot;alt+3&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 3 &#125;, &quot;keys&quot;: &quot;alt+4&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 4 &#125;, &quot;keys&quot;: &quot;alt+5&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 5 &#125;, &quot;keys&quot;: &quot;alt+6&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 6 &#125;, &quot;keys&quot;: &quot;alt+7&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 7 &#125;, &quot;keys&quot;: &quot;alt+8&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 8 &#125;, &quot;keys&quot;: &quot;alt+9&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &#123;&quot;action&quot;: &quot;copy&quot;, &quot;singleLine&quot;: false &#125;, &quot;keys&quot;: &quot;ctrl+c&quot; &#125;,</span><br><span class="line">        &#123; &quot;command&quot;: &quot;paste&quot;, &quot;keys&quot;: &quot;ctrl+v&quot; &#125;,</span><br><span class="line"></span><br><span class="line">        // Press Ctrl+Shift+F to open the search box</span><br><span class="line">        &#123; &quot;command&quot;: &quot;find&quot;, &quot;keys&quot;: &quot;ctrl+shift+f&quot; &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Windows-SVN"><a href="#Windows-SVN" class="headerlink" title="Windows SVN"></a>Windows SVN</h1><p><a href="https://tortoisesvn.net/downloads.zh.html">https://tortoisesvn.net/downloads.zh.html</a></p>
<h1 id="Windows-GIT"><a href="#Windows-GIT" class="headerlink" title="Windows GIT"></a>Windows GIT</h1><p><a href="https://tortoisegit.org/">https://tortoisegit.org/</a></p>
<h1 id="接口调试工具"><a href="#接口调试工具" class="headerlink" title="接口调试工具"></a>接口调试工具</h1><h2 id="postman"><a href="#postman" class="headerlink" title="postman"></a>postman</h2><p><a href="https://www.postman.com/downloads/">https://www.postman.com/downloads/</a></p>
<h2 id="PostmanCanary"><a href="#PostmanCanary" class="headerlink" title="PostmanCanary"></a>PostmanCanary</h2><p><a href="https://www.postman.com/downloads/canary/">https://www.postman.com/downloads/canary/</a></p>
<h2 id="insomnia"><a href="#insomnia" class="headerlink" title="insomnia"></a>insomnia</h2><p><a href="https://insomnia.rest/download/">https://insomnia.rest/download/</a></p>
<h2 id="ApiPost"><a href="#ApiPost" class="headerlink" title="ApiPost"></a>ApiPost</h2><p><a href="https://www.apipost.cn/download.html">https://www.apipost.cn/download.html</a></p>
<h1 id="Git-bash"><a href="#Git-bash" class="headerlink" title="Git bash"></a>Git bash</h1><p><a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="默认打开路径"><a href="#默认打开路径" class="headerlink" title="默认打开路径"></a>默认打开路径</h3><p>修改文件：C:\Program Files\PortableGit\etc\profile</p>
<p>在底部加入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># set Project Path</span><br><span class="line">proj=&quot;你的项目文件目录&quot;</span><br><span class="line">cd $proj</span><br></pre></td></tr></table></figure>

<h3 id="加入Alias"><a href="#加入Alias" class="headerlink" title="加入Alias"></a>加入Alias</h3><p>进入 C:\Users\username目录</p>
<p>添加3个文件(.bash_profile，.bashrc，git-prompt.sh)：</p>
<p>.bash_profile</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if [ -f ~/.bashrc ]; then . ~/.bashrc; fi</span><br></pre></td></tr></table></figure>

<p>.bashrc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias s=&#x27;screen -d -R&#x27;</span><br><span class="line">alias mp=&#x27;git commit -am &quot;autopush&quot; &amp;&amp; git push&#x27;</span><br><span class="line">alias rm=&#x27;rm -i&#x27;</span><br><span class="line">alias cp=&#x27;cp -i&#x27;</span><br><span class="line">alias mv=&#x27;mv -i&#x27;</span><br><span class="line"></span><br><span class="line">alias ls=&#x27;ls -hFG&#x27;</span><br><span class="line">alias l=&#x27;ls -lFah&#x27;</span><br><span class="line">alias ll=&#x27;ls -alF&#x27;</span><br><span class="line">alias lt=&#x27;ls -ltrF&#x27;</span><br><span class="line">alias ll=&#x27;ls -alF&#x27;</span><br><span class="line">alias lls=&#x27;ls -alSrF&#x27;</span><br><span class="line">alias llt=&#x27;ls -altrF&#x27;</span><br><span class="line"></span><br><span class="line">alias tarc=&#x27;tar cvf&#x27;</span><br><span class="line">alias tarcz=&#x27;tar czvf&#x27;</span><br><span class="line">alias tarx=&#x27;tar xvf&#x27;</span><br><span class="line">alias tarxz=&#x27;tar xvzf&#x27;</span><br><span class="line"></span><br><span class="line">alias g=&#x27;git&#x27;</span><br><span class="line">alias less=&#x27;less -R&#x27;</span><br><span class="line">alias os=&#x27;lsb_release -a&#x27;</span><br><span class="line">alias vi=&#x27;vim&#x27;</span><br><span class="line"></span><br><span class="line"># Colorize directory listing</span><br><span class="line">alias ls=&quot;ls -ph --color=auto&quot;</span><br><span class="line"></span><br><span class="line"># Colorize grep</span><br><span class="line">alias grep=&quot;grep --color=auto&quot;</span><br><span class="line"></span><br><span class="line"># Shell</span><br><span class="line">export CLICOLOR=&quot;1&quot;</span><br><span class="line">if [ -f &quot;$HOME/git-prompt.sh&quot; ]; then</span><br><span class="line">source $HOME/git-prompt.sh</span><br><span class="line">export GIT_PS1_SHOWDIRTYSTATE=&quot;1&quot;</span><br><span class="line">export PS1=&quot;\[\033[40m\]\[\033[34m\][ \[\033[36m\]\w\$(__git_ps1 \&quot; \[\033[35m\]&#123;\[\033[32m\]%s\[\033[35m\]&#125;\&quot;)\[\033[34m\] ]$\[\033[0m\] &quot;</span><br><span class="line">#   export PS1=&quot;\[\033[40m\]\[\033[34m\][ \u@\H:\[\033[36m\]\w\$(__git_ps1 \&quot; \[\033[35m\]&#123;\[\033[32m\]%s\[\033[35m\]&#125;\&quot;)\[\033[34m\] ]$\[\033[0m\] &quot;</span><br><span class="line">else</span><br><span class="line">export PS1=&quot;\[\033[40m\]\[\033[34m\][ \[\033[36m\]\w\[\033[34m\] ]$\[\033[0m\] &quot;</span><br><span class="line">#   export PS1=&quot;\[\033[40m\]\[\033[34m\][ \u@\H:\[\033[36m\]\w\[\033[34m\] ]$\[\033[0m\] &quot;</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下载 <a href="https://gist.githubusercontent.com/pingmalu/ef63b5da2ac287f80dc01208fe6cbf91/raw/c30db366775cc9da672e2769666fa78f92902087/git-prompt.sh">git-prompt.sh</a></p>
<h2 id="执行bat"><a href="#执行bat" class="headerlink" title="执行bat"></a>执行bat</h2><p>git-bash下执行RUN.bat</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd /cRUN.bat</span><br></pre></td></tr></table></figure>

<h1 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h1><h2 id="Markdown编辑器"><a href="#Markdown编辑器" class="headerlink" title="Markdown编辑器"></a>Markdown编辑器</h2><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><p><a href="https://www.typora.io/">https://www.typora.io/</a></p>
<p>Typora Beta 0.11.18 下载地址：</p>
<ul>
<li>Windows x64： <a href="https://download.typora.io/windows/typora-update-x64-1117.exe">https://download.typora.io/windows/typora-update-x64-1117.exe</a></li>
<li>Windows x86： <a href="https://download.typora.io/windows/typora-update-ia32-1117.exe">https://download.typora.io/windows/typora-update-ia32-1117.exe</a></li>
<li>Linux x64： <a href="https://download.typora.io/linux/typora/_0.11.18/_amd64.deb">https://download.typora.io/linux/typora\_0.11.18\_amd64.deb</a></li>
<li>MacOS： <a href="https://download.typora.io/mac/Typora-0.11.18.dmg">https://download.typora.io/mac/Typora-0.11.18.dmg</a></li>
</ul>
<h3 id="markdownpad"><a href="#markdownpad" class="headerlink" title="markdownpad"></a>markdownpad</h3><p><a href="http://markdownpad.com/">http://markdownpad.com/</a></p>
<blockquote>
<p>Email：</p>
<p><a href="mailto:&#x53;&#x6f;&#97;&#x72;&#x33;&#54;&#x30;&#x40;&#x6c;&#105;&#118;&#x65;&#46;&#x63;&#111;&#x6d;">&#x53;&#x6f;&#97;&#x72;&#x33;&#54;&#x30;&#x40;&#x6c;&#105;&#118;&#x65;&#46;&#x63;&#111;&#x6d;</a></p>
<p>License Key：</p>
<p>GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5&#x2F;sQytXJUQl&#x2F;QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb&#x2F;ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8&#x2F;eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ&#x3D;&#x3D;</p>
</blockquote>
<h2 id="VScode"><a href="#VScode" class="headerlink" title="VScode"></a>VScode</h2><p>下载：<a href="https://code.visualstudio.com/Download">https://code.visualstudio.com/Download</a></p>
<h3 id="同步配置"><a href="#同步配置" class="headerlink" title="同步配置"></a>同步配置</h3><p>文件 - 首选项 - 设置同步 （可使用live账户）</p>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h4 id="css压缩插件css-minify"><a href="#css压缩插件css-minify" class="headerlink" title="css压缩插件css-minify"></a>css压缩插件css-minify</h4><p><a href="https://marketplace.visualstudio.com/items?itemName=DiegoMolina.css-minify">https://marketplace.visualstudio.com/items?itemName=DiegoMolina.css-minify</a></p>
<h3 id="终端下使用的字体（等宽字体）"><a href="#终端下使用的字体（等宽字体）" class="headerlink" title="终端下使用的字体（等宽字体）"></a>终端下使用的字体（等宽字体）</h3><p><a href="https://github.com/abertsch/Menlo-for-Powerline">https://github.com/abertsch/Menlo-for-Powerline</a></p>
<h3 id="右键使用vscode打开-reg"><a href="#右键使用vscode打开-reg" class="headerlink" title="右键使用vscode打开.reg"></a>右键使用vscode打开.reg</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\VSCode]</span><br><span class="line">@=&quot;VSCode&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Program Files\\Microsoft VS Code\\Code.exe&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="EmEditor"><a href="#EmEditor" class="headerlink" title="EmEditor"></a>EmEditor</h2><p>超大文件编辑器</p>
<p><a href="https://www.rjsos.com/archives/emurasoft19.html">https://www.rjsos.com/archives/emurasoft19.html</a></p>
<h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><h3 id="Chrome-1"><a href="#Chrome-1" class="headerlink" title="Chrome:"></a>Chrome:</h3><p>注意下载地址长期不变，但下到的始终是当前最新的Stable版。</p>
<p>32位：<a href="https://dl.google.com/tag/s/appguid%3D%7B8A69D345-D564-463C-AFF1-A69D9E530F96%7D%26iid%3D%7BCEC27557-0338-A6BE-F10F-A625517C44BB%7D%26lang%3Dzh-CN%26browser%3D3%26usagestats%3D0%26appname%3DGoogle%2520Chrome%26needsadmin%3Dtrue/update2/installers/ChromeStandaloneSetup.exe">直接下载</a></p>
<p>64位：<a href="https://dl.google.com/tag/s/appguid%3D%7B8A69D345-D564-463C-AFF1-A69D9E530F96%7D%26iid%3D%7BCEC27557-0338-A6BE-F10F-A625517C44BB%7D%26lang%3Dzh-CN%26browser%3D3%26usagestats%3D0%26appname%3DGoogle%2520Chrome%26needsadmin%3Dtrue%26ap%3Dx64-stable%26installdataindex%3Ddefaultbrowser/update2/installers/ChromeStandaloneSetup64.exe">直接下载</a></p>
<h3 id="Chrome-Canary"><a href="#Chrome-Canary" class="headerlink" title="Chrome Canary:"></a>Chrome Canary:</h3><p><a href="https://dl.google.com/tag/s/appguid%3D%7B4ea16ac7-fd5a-47c3-875b-dbf4a2008c20%7D%26iid%3D%7B3E66C4C1-6218-EC71-998A-F658140D6F5C%7D%26lang%3Den%26browser%3D4%26usagestats%3D0%26appname%3DChrome%2520Canary%26needsadmin%3Dfalse%26ap%3Dx64-canary/update2/installers/ChromeStandaloneSetup.exe">64位直接下载</a></p>
<h3 id="Chrome-Dev"><a href="#Chrome-Dev" class="headerlink" title="Chrome Dev:"></a>Chrome Dev:</h3><p><a href="https://dl.google.com/tag/s/appguid%3D%7B401C381F-E0DE-4B85-8BD8-3F3F14FBDA57%7D%26iid%3D%7B4CD5F2AA-B666-3E5F-B4B6-897EA3E7B0E6%7D%26lang%3Dzh-CN%26browser%3D4%26usagestats%3D0%26appname%3DGoogle%2520Chrome%2520Dev%26needsadmin%3Dprefers%26ap%3D-arch_x64-statsdef_1%26installdataindex%3Dempty/chrome/install/dev/ChromeDevStandaloneSetup64.exe">64位直接下载</a></p>
<h3 id="Chrome-Stable-for-Linux"><a href="#Chrome-Stable-for-Linux" class="headerlink" title="Chrome Stable for Linux"></a>Chrome Stable for Linux</h3><p>64位</p>
<p><a href="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb">https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</a></p>
<p><a href="https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm">https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm</a></p>
<p>chrome代理插件：<a href="https://github.com/FelisCatus/SwitchyOmega/releases">https://github.com/FelisCatus/SwitchyOmega/releases</a></p>
<h2 id="FireFox"><a href="#FireFox" class="headerlink" title="FireFox"></a>FireFox</h2><p>下载地址：</p>
<p><a href="https://www.mozilla.org/en-US/firefox/all/">https://www.mozilla.org/en-US/firefox/all/</a></p>
<h2 id="Opera"><a href="#Opera" class="headerlink" title="Opera"></a>Opera</h2><p>Opera浏览器桌面版历史版本下载</p>
<p><a href="http://get.opera.com/ftp/pub/opera/desktop/">http://get.opera.com/ftp/pub/opera/desktop/</a></p>
<p><a href="http://get.geo.opera.com/pub/opera/desktop/">http://get.geo.opera.com/pub/opera/desktop/</a></p>
<h1 id="Vmware"><a href="#Vmware" class="headerlink" title="Vmware"></a>Vmware</h1><p>Vmware Workstation Pro 下载 15-14</p>
<p><a href="https://my.vmware.com/group/vmware/info?slug=desktop_end_user_computing/vmware_workstation_pro/15_0">https://my.vmware.com/group/vmware/info?slug=desktop_end_user_computing&#x2F;vmware_workstation_pro&#x2F;15_0</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">激活许可证</span><br><span class="line">UY758-0RXEQ-M81WP-8ZM7Z-Y3HDA</span><br><span class="line">VF750-4MX5Q-488DQ-9WZE9-ZY2D6</span><br><span class="line">UU54R-FVD91-488PP-7NNGC-ZFAX6</span><br><span class="line">YC74H-FGF92-081VZ-R5QNG-P6RY4</span><br><span class="line">YC34H-6WWDK-085MQ-JYPNX-NZRA2</span><br></pre></td></tr></table></figure>

<p>Vmware Workstation Pro 历史版本下载 12-9</p>
<p><a href="https://my.vmware.com/group/vmware/info/slug/desktop_end_user_computing/vmware_workstation_pro/12_0">https://my.vmware.com/group/vmware/info/slug/desktop_end_user_computing&#x2F;vmware_workstation_pro&#x2F;12_0</a></p>
<h2 id="清理VMware-bat"><a href="#清理VMware-bat" class="headerlink" title="清理VMware.bat"></a>清理VMware.bat</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net stop VMwareHostd</span><br><span class="line">net stop VMAuthdService</span><br><span class="line">net stop VMnetDHCP</span><br><span class="line">net stop VMUSBArbService</span><br><span class="line">net stop &quot;VMware NAT Service&quot;</span><br><span class="line">taskkill /F /im vmware-tray.exe</span><br></pre></td></tr></table></figure>

<h1 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h1><h2 id="RustDesk"><a href="#RustDesk" class="headerlink" title="RustDesk"></a>RustDesk</h2><p><a href="http://rustdesk.com/">http://rustdesk.com/</a></p>
<h2 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h2><p><a href="https://www.realvnc.com/en/connect/download/vnc/">VNC Server</a></p>
<p><a href="https://www.realvnc.com/en/connect/download/viewer/">VNC Viewer</a></p>
<h2 id="TeamViewer"><a href="#TeamViewer" class="headerlink" title="TeamViewer"></a>TeamViewer</h2><p><a href="https://www.teamviewer.cn/cn/download/windows/">https://www.teamviewer.cn/cn/download/windows/</a></p>
<h2 id="向日葵"><a href="#向日葵" class="headerlink" title="向日葵"></a>向日葵</h2><p><a href="https://sunlogin.oray.com/download/">https://sunlogin.oray.com/download/</a></p>
<h2 id="ToDesk"><a href="#ToDesk" class="headerlink" title="ToDesk"></a>ToDesk</h2><p><a href="https://www.todesk.com/download.html">https://www.todesk.com/download.html</a></p>
<h2 id="清理远程-bat"><a href="#清理远程-bat" class="headerlink" title="清理远程.bat"></a>清理远程.bat</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sc stop &quot;SunloginService&quot;</span><br><span class="line">sc stop &quot;ToDesk_Service&quot;</span><br><span class="line">sc stop &quot;teamviewer&quot;</span><br><span class="line">sc stop &quot;vncserver&quot;</span><br><span class="line">taskkill /F /im SunloginClient.exe</span><br><span class="line">taskkill /F /im todesk_service.exe</span><br><span class="line">taskkill /F /im todesk.exe</span><br><span class="line">REM start &quot;&quot; &quot;C:\Program Files\RealVNC\VNC Server\vncserver.exe&quot; -service -stop</span><br></pre></td></tr></table></figure>

<h2 id="启动远程-bat"><a href="#启动远程-bat" class="headerlink" title="启动远程.bat"></a>启动远程.bat</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sc start &quot;SunloginService&quot;</span><br><span class="line">sc start &quot;ToDesk_Service&quot;</span><br><span class="line">sc start &quot;teamviewer&quot;</span><br><span class="line">sc start &quot;vncserver&quot;</span><br></pre></td></tr></table></figure>

<h1 id="虚拟组网"><a href="#虚拟组网" class="headerlink" title="虚拟组网"></a>虚拟组网</h1><p>蒲公英 <a href="https://pgy.oray.com/download/">https://pgy.oray.com/download/</a></p>
<p>zerotier <a href="https://zerotier.com/download/">https://zerotier.com/download/</a></p>
<h2 id="Win10启动时候加载bat"><a href="#Win10启动时候加载bat" class="headerlink" title="Win10启动时候加载bat"></a>Win10启动时候加载bat</h2><p>运行： shell:startup -&gt; startup.vbs</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set ws=WScript.CreateObject(&quot;WScript.Shell&quot;)</span><br><span class="line">ws.Run &quot;C:\auto_run\startup\start.bat /start&quot;,0</span><br></pre></td></tr></table></figure>

<h1 id="Beyond-Compare"><a href="#Beyond-Compare" class="headerlink" title="Beyond Compare"></a>Beyond Compare</h1><p><a href="http://www.ucbug.com/soft/40421.html">http://www.ucbug.com/soft/40421.html</a></p>
<p>安装说明：<a href="https://www.rjsos.com/archives/beyondcompare4.html">https://www.rjsos.com/archives/beyondcompare4.html</a></p>
<h1 id="Adobe-Photoshop-CS6"><a href="#Adobe-Photoshop-CS6" class="headerlink" title="Adobe Photoshop CS6"></a>Adobe Photoshop CS6</h1><p><a href="http://xiazai.zol.com.cn/detail/15/146785.shtml">http://xiazai.zol.com.cn/detail/15/146785.shtml</a></p>
<p>补丁 (将 amtlib 覆盖掉相应软件的源文件) <a href="http://xiazai.zol.com.cn/detail/45/440347.shtml">http://xiazai.zol.com.cn/detail/45/440347.shtml</a></p>
<h1 id="Adobe-Premiere-Pro-2020"><a href="#Adobe-Premiere-Pro-2020" class="headerlink" title="Adobe Premiere Pro 2020"></a>Adobe Premiere Pro 2020</h1><p><a href="https://www.rjsos.com/archives/premiere2020.html">https://www.rjsos.com/archives/premiere2020.html</a></p>
<h1 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a>Everything</h1><p>Windows桌面搜索引擎 （快速搜索文件工具）</p>
<p><a href="https://www.voidtools.com/">https://www.voidtools.com</a></p>
<h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><h2 id="XMind"><a href="#XMind" class="headerlink" title="XMind"></a>XMind</h2><p><a href="https://www.xmind.cn/download/">https://www.xmind.cn/download/</a> <a href="http://www.ddooo.com/softdown/170894.htm">破解1</a> <a href="http://www.opdown.com/soft/219172.html">破解2</a></p>
<h2 id="MindMaster"><a href="#MindMaster" class="headerlink" title="MindMaster"></a>MindMaster</h2><p><a href="https://www.edrawsoft.cn/mindmaster/">https://www.edrawsoft.cn/mindmaster/</a> <a href="http://www.ccths.com/soft/28594.html">破解</a></p>
<h1 id="Virtual-Audio-Cable"><a href="#Virtual-Audio-Cable" class="headerlink" title="Virtual Audio Cable"></a>Virtual Audio Cable</h1><p>混音软件，可实现多音频设备同时输出</p>
<p><a href="https://software.muzychenko.net/eng/vacselect.htm">https://software.muzychenko.net/eng/vacselect.htm</a></p>
<h1 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h1><p><a href="https://appdownload.deepl.com/windows/full/DeepLSetup.exe">https://appdownload.deepl.com/windows/full/DeepLSetup.exe</a></p>
<h1 id="Hyper"><a href="#Hyper" class="headerlink" title="Hyper"></a>Hyper</h1><p><a href="https://hyper.is/">https://hyper.is/</a></p>
<p>安装主题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hyper i hyper-material-theme</span><br></pre></td></tr></table></figure>

<p>配置文件路径：C:\Users\malu\AppData\Roaming\Hyper.hyper.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell: &#x27;C:\\Program Files\\PortableGit\\bin\\bash.exe&#x27;,</span><br><span class="line">...</span><br><span class="line">plugins: [&quot;hyper-material-theme&quot;],</span><br></pre></td></tr></table></figure>

<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="Windows-Redis"><a href="#Windows-Redis" class="headerlink" title="Windows Redis"></a>Windows Redis</h2><p><a href="https://github.com/microsoftarchive/redis/releases">https://github.com/microsoftarchive/redis/releases</a></p>
<h2 id="Redis-分析工具客户端"><a href="#Redis-分析工具客户端" class="headerlink" title="Redis 分析工具客户端"></a>Redis 分析工具客户端</h2><p><a href="https://redislabs.com/redisinsight/">https://redislabs.com/redisinsight/</a></p>
<h2 id="PowerDesigner-v16-5"><a href="#PowerDesigner-v16-5" class="headerlink" title="PowerDesigner v16.5"></a>PowerDesigner v16.5</h2><p><a href="http://onlinedown.rbread04.cn/huajunsafe/powerdesigner1029.zip">http://onlinedown.rbread04.cn/huajunsafe/powerdesigner1029.zip</a></p>
<h2 id="ODBC-for-MySQL"><a href="#ODBC-for-MySQL" class="headerlink" title="ODBC for MySQL"></a>ODBC for MySQL</h2><p>(注意powerdesigner是用java32位的，所以ODBC也下32位</p>
<p><a href="https://dev.mysql.com/downloads/connector/odbc/">https://dev.mysql.com/downloads/connector/odbc/</a></p>
<h1 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h1><p>bios修改工具mmtool <a href="https://softradar.com/static/products/mmtool/distr/0/mmtool_softradar-com.zip">https://softradar.com/static/products/mmtool/distr/0/mmtool_softradar-com.zip</a></p>
<p>win10适配修改器 <a href="http://www.angusj.com/resourcehacker">http://www.angusj.com/resourcehacker</a></p>
<p>也可以直接下修改好的mmtool <a href="http://www.smxdiy.com/thread-1995-1-1.html">http://www.smxdiy.com/thread-1995-1-1.html</a></p>
<p>技嘉B85主板BIOS <a href="https://www.gigabyte.com/tw/Motherboard/GA-B85-HD3-A-rev-10/support#support-dl-bios">https://www.gigabyte.com/tw/Motherboard/GA-B85-HD3-A-rev-10/support#support-dl-bios</a></p>
<p>B85芯片组主板也能用上NvmeSSD <a href="https://zhuanlan.zhihu.com/p/40367807">https://zhuanlan.zhihu.com/p/40367807</a></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><a href="https://www.rjsos.com/">https://www.rjsos.com/</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>常用 Git 命令清单</title>
    <url>/2021/12/05/%E5%B8%B8%E7%94%A8-git-%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/</url>
    <content><![CDATA[<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p>
<p><img src="/2021/12/bg2015120901.png"></p>
<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p>
<blockquote>
<ul>
<li>Workspace：工作区</li>
<li>Index &#x2F; Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
</blockquote>
<h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="三、增加-x2F-删除文件"><a href="#三、增加-x2F-删除文件" class="headerlink" title="三、增加&#x2F;删除文件"></a>三、增加&#x2F;删除文件</h2><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [<span class="built_in">dir</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git <span class="built_in">rm</span> [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git <span class="built_in">rm</span> --cached [file]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h2><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h2><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h2><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure></blockquote>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>找回 macOS Sierra允许“任何来源” 的应用</title>
    <url>/2019/04/07/%E6%89%BE%E5%9B%9E-macos-sierra%E5%85%81%E8%AE%B8%E4%BB%BB%E4%BD%95%E6%9D%A5%E6%BA%90-%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>安装macOS Sierra后，会发现系统偏好设置的“安全与隐私”中默认已经去除了允许“任何来源”App的选项，无法运行一些第三方应用。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/04/12118839_154539wzpgugjg9kbdz4sn.png"></p>
<p>如果需要恢复允许“任何来源”的选项，即关闭Gatekeeper，请在终端中使用spctl命令：</p>
<ol>
<li>sudo spctl –master-disable</li>
</ol>
<p><em>复制代码</em></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/04/12560995_%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2016-09-26-%E4%B8%8B%E5%8D%8812.19.38.png"></p>
<p>久违的“任何来源”回来了：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/04/12118857_%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2016-06-25-%E4%B8%8A%E5%8D%889.38.38.png"></p>
<p>需要说明的是，如果在系统偏好设置的“安全与隐私”中重新选中允许App Store 和被认可的开发者App，即重新打开Gatekeeper后，允许“任何来源”App的选项会再次消失，可运行上述命令再次关闭Gatekeeper。 相关知识链接： <a href="https://support.apple.com/zh-cn/HT202491">OS X：关于 Gatekeeper</a></p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>MacOS</tag>
        <tag>任何来源</tag>
      </tags>
  </entry>
  <entry>
    <title>提高Github Clone速度</title>
    <url>/2020/01/12/%E6%8F%90%E9%AB%98github-clone%E9%80%9F%E5%BA%A6/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><hr>
<p>Github作为全球最大的同性交友网站，一直广受开发者们的喜爱，但是由于某些不可描述的原因，在访问、克隆、拉取、推送的时候，经常莫名其妙的不好使，速度慢的让人无法忍受。解决这个问题（克隆、拉取、推送）的一个途径就是通过代理，绕过 <strong>某长城</strong> 。</p>
<h1 id="配置本地代理"><a href="#配置本地代理" class="headerlink" title="配置本地代理"></a>配置本地代理</h1><hr>
<p>关于代理服务器的事儿就不多说了，要么买，要么租vps自己搭建。一下内容的先决条件是你拥有一个好使的代理服务。 用<code>shadowsocks</code>开启代理后，右键点击托盘中的纸飞机，选择选项配置：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/01/git1.png" alt="图片无法显示"></p>
<p>设置一个本地代理端口号，如果需要局域网其它用户也通过此代理，需要勾选 <em>允许来自局域网的连接</em> 选项：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/01/git2.png" alt="图片无法显示"></p>
<h1 id="设置git代理"><a href="#设置git代理" class="headerlink" title="设置git代理"></a>设置git代理</h1><hr>
<p>通过以下命令设置git的代理：</p>
<p>1<br>2</p>
<p>git config –global http.proxy ‘socks5:&#x2F;&#x2F;ip:1080’<br>git config –global https.proxy ‘socks5:&#x2F;&#x2F;ip:1080’</p>
<p>这里需要注意的是，如果本机使用的话，ip用<code>127.0.0.1</code>即可,局域网ip能不能用我没有测试。如果需要取消代理，可以用下面的代码：</p>
<p>1<br>2</p>
<p>git config –global –unset http.proxy<br>git config –global –unset https.proxy</p>
]]></content>
      <categories>
        <category>Linux教程</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>git</tag>
        <tag>Clone</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建KMS激活服务器</title>
    <url>/2020/04/05/%E6%90%AD%E5%BB%BAkms%E6%BF%80%E6%B4%BB%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="什么是KMS"><a href="#什么是KMS" class="headerlink" title="什么是KMS?"></a>什么是KMS?</h2><p><strong>Key Management Service（简称：KMS），这个功能是在 Windows Vista 之后的产品中的一种新型产品激活机制，目的是为了 Microsoft 更好的遏制非法软件授权行为 (盗版)。</strong> [scode type&#x3D;”green”] KMS 激活有两种方法，分别为 vlm­csd 和 py-kms，本文使用 vlm­csd 进行搭建 [&#x2F;​scode]</p>
<h2 id="为什么要自建KMS激活服务？"><a href="#为什么要自建KMS激活服务？" class="headerlink" title="为什么要自建KMS激活服务？"></a>为什么要自建KMS激活服务？</h2><p><strong>虽然现在网络上已经涌现了大批的激活工具，但是存在许多不安定因素，例如后门或者病毒等，会造成较大的安全隐患，而自己搭建 Kms 激活服务则可以避免这类问题～</strong></p>
<p><strong>注意：只能激活 VL 版本的 Windows</strong> <strong>VL，就是 VOL，Volume Licensing for Organizations 的缩写，中文翻译为团体批量许可证</strong></p>
<hr>
<p><strong>环境：CentOS 7.5</strong> [but­ton color&#x3D;”suc­cess” icon&#x3D;”glyph­icon glyph­icon-file”]<a href="https://github.com/Wind4/vlmcsd">Vlmcsd</a>[&#x2F;but­ton] <strong>首先使用下面命令确认机器的 CPU 架构</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /proc/cpuinfo</span><br></pre></td></tr></table></figure>

<p><strong>这是我机器的信息</strong></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2020/04/2991210118.png" alt="1.png"></p>
<p>1.png</p>
<p><strong>首先从Github下载项目文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line">wget https://github.com/Wind4/vlmcsd/releases/download/svn1111/binaries.tar.gz</span><br></pre></td></tr></table></figure>

<p><strong>解压安装包</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvf binaries.tar.gz</span><br></pre></td></tr></table></figure>

<p><strong>如果你机器的架构为 Intel，cd 到如下目录，否则的话需要在 binaries 目录内找到对应你机器 CPU 架构的目录</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd binaries/Linux/intel/static</span><br></pre></td></tr></table></figure>

<p><strong>启动服务</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./vlmcsd-x64-musl-static</span><br></pre></td></tr></table></figure>

<p><strong>如果你的机器不是 64 位系统，则需要内找到对应系统位数的可执行文件来运行</strong> <strong>因为 vlmcsd 运行后会占用 1688 端口，请在防火墙放行 1688 端口，或者关闭防火墙，所以我们可以输入以下命令查看是否成功启动：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -lnp</span><br></pre></td></tr></table></figure>

<h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p><strong>以管理员身份运行 CMD</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slmgr /skms 你服务器的IP或者域名</span><br><span class="line">slmgr /ato</span><br><span class="line">slmgr /xpr</span><br></pre></td></tr></table></figure>

<p><strong>到这你的 KMS 服务应该可以正常使用了，激活周期为 180 天，到期后如果你的 KMS 服务器还在运行，Windows 将自动进行激活</strong></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>KMS</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建高大上的Zimbra办公与邮件服务系统</title>
    <url>/2018/10/18/%E6%90%AD%E5%BB%BA%E9%AB%98%E5%A4%A7%E4%B8%8A%E7%9A%84zimbra%E5%8A%9E%E5%85%AC%E4%B8%8E%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>Table of Contents</p>
<ul>
<li><a href="https://www.zrj96.com/post-884.html#Ubuntu_1604" title="一、Ubuntu 16.04搭建方法">一、Ubuntu 16.04搭建方法</a><ul>
<li><a href="https://www.zrj96.com/post-884.html#1" title="1.系统软硬件要求">1.系统软硬件要求</a></li>
<li><a href="https://www.zrj96.com/post-884.html#2DNS" title="2.配置DNS">2.配置DNS</a></li>
<li><a href="https://www.zrj96.com/post-884.html#3" title="3.系统环境的设置">3.系统环境的设置</a></li>
<li><a href="https://www.zrj96.com/post-884.html#4" title="4.下载并安装软件包">4.下载并安装软件包</a></li>
<li><a href="https://www.zrj96.com/post-884.html#5" title="5.选择安装组件">5.选择安装组件</a></li>
<li><a href="https://www.zrj96.com/post-884.html#6_Zimbra" title="6, 配置Zimbra">6, 配置Zimbra</a></li>
<li><a href="https://www.zrj96.com/post-884.html#7SSL" title="7.配置SSL">7.配置SSL</a></li>
</ul>
</li>
<li><a href="https://www.zrj96.com/post-884.html#CentOS_7" title="二、CentOS 7的搭建方法">二、CentOS 7的搭建方法</a><ul>
<li><a href="https://www.zrj96.com/post-884.html#i" title="安装要求">安装要求</a></li>
<li><a href="https://www.zrj96.com/post-884.html#i-2" title="开始">开始</a><ul>
<li><a href="https://www.zrj96.com/post-884.html#i-3" title="域名解析">域名解析</a></li>
<li><a href="https://www.zrj96.com/post-884.html#DNS" title="反向DNS解析">反向DNS解析</a></li>
<li><a href="https://www.zrj96.com/post-884.html#sendmailpostfix25" title="关闭sendmail或postfix服务，避免25端口被占用">关闭sendmail或postfix服务，避免25端口被占用</a></li>
<li><a href="https://www.zrj96.com/post-884.html#selinux" title="关闭selinux">关闭selinux</a></li>
<li><a href="https://www.zrj96.com/post-884.html#i-4" title="防火墙">防火墙</a></li>
<li><a href="https://www.zrj96.com/post-884.html#HOSTNAME" title="配置主机名HOSTNAME">配置主机名HOSTNAME</a></li>
<li><a href="https://www.zrj96.com/post-884.html#HOSTS" title="配置HOSTS">配置HOSTS</a></li>
<li><a href="https://www.zrj96.com/post-884.html#NTP" title="NTP">NTP</a></li>
<li><a href="https://www.zrj96.com/post-884.html#_wiki" title="安装依赖包 wiki">安装依赖包 wiki</a></li>
<li><a href="https://www.zrj96.com/post-884.html#i-5" title="安装及使用">安装及使用</a></li>
<li><a href="https://www.zrj96.com/post-884.html#SPF" title="SPF">SPF</a></li>
<li><a href="https://www.zrj96.com/post-884.html#DKIM" title="DKIM">DKIM</a></li>
<li><a href="https://www.zrj96.com/post-884.html#DMARC" title="DMARC">DMARC</a></li>
<li><a href="https://www.zrj96.com/post-884.html#i-6" title="域名解析记录">域名解析记录</a></li>
<li><a href="https://www.zrj96.com/post-884.html#DKIM-2" title="验证DKIM">验证DKIM</a></li>
<li><a href="https://www.zrj96.com/post-884.html#i-7" title="重新签发证书">重新签发证书</a></li>
<li><a href="https://www.zrj96.com/post-884.html#i-8" title="可以学习的内容">可以学习的内容</a></li>
<li><a href="https://www.zrj96.com/post-884.html#i-9" title="小工具">小工具</a></li>
<li><a href="https://www.zrj96.com/post-884.html#i-10" title="参考文章">参考文章</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="一、Ubuntu-16-04搭建方法"><a href="#一、Ubuntu-16-04搭建方法" class="headerlink" title="一、Ubuntu 16.04搭建方法"></a>一、Ubuntu 16.04搭建方法</h1><p>Zimbra是著名的开源系统，它一体化地提供了邮件收发、文件共享、协同办公、即时聊天等一系列解决方案，是开源软件中的精品。它拥有美观大气的使用界面，以及非常实用的功能。作为邮件服务器系统，Zimbra更是凭借卓越的稳定性和功能当之无愧地成为开源邮件服务器系统的首选，适合各类型&#x2F;人数的用户群，尤其适合团队使用。之前我们写过一个简单的Zimbra邮件服务器安装的教程，然而那篇文章写于五年前，对于现在的版本已经不再适用。正好由于前天，Online.net服务器大幅提价，我们不得不迁移之前的服务器，于是需要在新的系统上重新搭建一次Zimbra. 因此，我们这里凭借这个机会再介绍一下如何安装与配置独立的Zimbra开源办公与邮件服务系统，希望对大家有所帮助。多台服务器协同部署的步骤这里不做太多介绍。</p>
<h2 id="1-系统软硬件要求"><a href="#1-系统软硬件要求" class="headerlink" title="1.系统软硬件要求"></a>1.系统软硬件要求</h2><p>Zimbra的体量较大，因此对于系统环境的要求较高。首先，系统必须为64位。目前，Zimbra支持的操作系统包括：CentOS 6, CentOS 7, Ubuntu 14.04 LTS, Ubuntu 16.04 LTS, Red Hat Linux 6&#x2F;7, 以及Oracle Linux 6&#x2F;7.</p>
<p>关于硬件需求，首先，内存需要8 GB或者以上，建议16 GB. 系统的硬盘占用约为8 GB左右，视自己的需要而定。CPU和其他硬件没有特别需求，但是Zimbra官方说明中有提到，<strong>强烈不建议在RAID 5 (包括50)的服务器上搭建Zimbra</strong>. 如果您有类似的服务器，建议更改RAID模式，避免RAID 5或者50.</p>
<p>鉴于Zimbra的体量，我们不建议在VPS上安装Zimbra, 而最好是在一台独立服务器上安装。本文的操作环境为Ubuntu 16.04 LTS 64bit.</p>
<h2 id="2-配置DNS"><a href="#2-配置DNS" class="headerlink" title="2.配置DNS"></a>2.配置DNS</h2><p>我们简要说明一下一个最简单的zimbra邮件服务器的DNS配置需求。</p>
<p>如果以qing.su域名为例，我们将域名本身qing.su以A记录解析到任意IP, 然后将邮件服务器的hostname, 比如mx.qing.su以A记录解析到我们将要搭建的邮件服务器的IP上。</p>
<p>然后，我们分别将qing.su与mx.qing.su以MX记录解析到mx.qing.su, 优先级可以为任意值。</p>
<p>如果需要用web访问邮箱，可以将mail.qing.su解析到邮件服务器的IP上。</p>
<p>其他记录的设置，比如TXT, SRV等，可以后期根据自己的需要来自行配制。</p>
<h2 id="3-系统环境的设置"><a href="#3-系统环境的设置" class="headerlink" title="3.系统环境的设置"></a>3.系统环境的设置</h2><p>毫无疑问，对于任何邮件服务器来说，最重要的前提步骤是正确设置服务器的hostname. 如何正确设置服务器的hostname我们已经强调过多次。我们以mx.example.com为例，当在SSH中执行hostname命令时，应当看到的回显为短主机名，即mx; 而在SSH中执行hostname -f命令时，应当看到的回显为长主机名(FQDN), 即mx.example.com. 若hostname没有正确设置好，请不要继续。</p>
<p>然后，我们用root账户登录SSH, 即可开始安装。(不要sudo, 请直接su到root, 否则会出错)</p>
<h2 id="4-下载并安装软件包"><a href="#4-下载并安装软件包" class="headerlink" title="4.下载并安装软件包"></a>4.下载并安装软件包</h2><p>Zimbra各系统软件包的下载地址如下：<a href="https://www.zimbra.com/downloads/zimbra-collaboration-open-source/">https://www.zimbra.com/downloads/zimbra-collaboration-open-source/</a></p>
<p>请按照自己的需求下载。我们这里以Ubuntu 16.04为例。执行：</p>
<p><code>apt-get update &amp;&amp; apt-get upgrade cd /tmp wget https://files.zimbra.com/downloads/8.8.9_GA/zcs-8.8.9_GA_2055.UBUNTU16_64.20180703080917.tgz tar xvzf *.tgz rm -f zcs*.tgz cd zcs* ./install.sh</code></p>
<h2 id="5-选择安装组件"><a href="#5-选择安装组件" class="headerlink" title="5.选择安装组件"></a>5.选择安装组件</h2><p>正确执行上述步骤后，首先会提示是否同意用户协议，选择Y即可。</p>
<p><code>Do you agree with the terms of the https://qing.su software license agreement? [N] Y</code></p>
<p>然后会提示选择需要安装的组件，如果您不是特别了解的话可以直接选择默认选项。</p>
<p><code>Use Zimbra&#39;s package repository [Y] Install zimbra-ldap [Y] Install zimbra-logger [Y] Install zimbra-mta [Y] Install zimbra-dnscache [Y] Install zimbra-snmp [Y] Install zimbra-store [Y] Install zimbra-apache [Y] Install https://qing.su[Y] Install zimbra-spell [Y] Install zimbra-memcached [Y] Install zimbra-proxy [Y] Install zimbra-drive [Y] Install zimbra-imapd (BETA - for evaluation only) [N] Install zimbra-chat [Y]</code></p>
<p>最后，系统会提示是否确认更改，我们需要选择Y。</p>
<p><code>The system will be modified.  Continue? [N] Y</code></p>
<p>至此，系统将会下载必要的安装包并自动安装。</p>
<h2 id="6-配置Zimbra"><a href="#6-配置Zimbra" class="headerlink" title="6, 配置Zimbra"></a>6, 配置Zimbra</h2><p>安装完毕后，系统会弹出命令行菜单，如下面这样：</p>
<p><code>Main menu 1) Common Configuration: 2) zimbra-ldap: Enabled 3) zimbra-logger: Enabled 4) zimbra-mta: Enabled 5) zimbra-dnscache: Enabled 6) zimbra-snmp: Enabled 7) zimbra-store: Enabled +Create Admin User: yes +Admin user to create: admin@mx.example.com ******* +Admin Password UNSET +Anti-virus quarantine user: virus-quarantine.6zk4_0qy@mx.example.com +Enable automated spam training: yes +Spam training user: spam.zc3z28w0@mx.example.com +Non-spam(Ham) training user: ham.bkojeqoiq@mx.example.com +SMTP host: mx.example.com +Web server HTTP port: 8080 +Web server HTTPS port: 8443 +Web server mode: https +IMAP server port: 7143 +IMAP server SSL port: 7993 +POP server port: 7110 +POP server SSL port: 7995 +Use spell check server: yes +Spell server URL: http://mx.example.com:7780/aspell.php +Enable version update checks: TRUE +Enable version update notifications: TRUE +Version update notification email: admin@mx.example.com +Version update source email: admin@mx.example.com +Install mailstore (service webapp): yes +Install UI (zimbra,zimbraAdmin webapps): yes 8) zimbra-spell: Enabled 9) zimbra-proxy: Enabled 10) Default Class of Service Configuration: s) Save config to file x) Expand menu q) Quit Address unconfigured (**) items (? - help) 7</code></p>
<p>这里我们选择7,  进入Store configuration, 并在下一步选择4, 设置管理员密码。</p>
<p><code>Store configuration 1) Status:                                  Enabled 2) Create Admin User:                       yes 3) Admin user to create:                    admin@mx.example.com ** 4) Admin Password                           UNSET 5) Anti-virus quarantine user:              virus-quarantine.6zk4_0qy@mx.example.com 6) Enable automated spam training:          yes 7) Spam training user:                      spam.zc3z28w0@mx.example.com 8) Non-spam(Ham) training user:             ham.bkojeqoiq@mx.example.com 9) SMTP host:                               mx.example.com 10) Web server HTTP port:                    8080 11) Web server HTTPS port:                   8443 12) Web server mode:                         https 13) IMAP server port:                        7143 14) IMAP server SSL port:                    7993 15) POP server port:                         7110 16) POP server SSL port:                     7995 17) Use spell check server:                  yes 18) Spell server URL:                        http://mx.example.com:7780/aspell.php 19) Enable version update checks:            TRUE 20) Enable version update notifications:     TRUE 21) Version update notification email:       admin@mx.example.com 22) Version update source email:             admin@mx.example.com 23) Install mailstore (service webapp):      yes 24) Install UI (zimbra,zimbraAdmin webapps): yes Select, or &#39;r&#39; for previous menu [r]</code></p>
<p>如果有其他选项您希望更改的，也可以一并更改（但是不建议更改端口地址）。更改完毕后，输入r返回上级菜单，然后输入a让更改生效并将配置写入至文件。</p>
<p><code>*** CONFIGURATION COMPLETE - press &#39;a&#39; to apply Select from menu, or press &#39;a&#39; to apply config (? - help) a Save configuration data to a file? [Yes] Save config in file: [/opt/zimbra/config.11819] Saving config in /opt/zimbra/config.11819...done. The system will be modified - continue? [No] Yes</code></p>
<p>要忘记最后要输入Yes来保存更改。几秒钟之后，系统就配置完毕。至此，Zimbra安装完毕，我们可以登录后台添加域名、添加用户等进行一系列的管理了。</p>
<h2 id="7-配置SSL"><a href="#7-配置SSL" class="headerlink" title="7.配置SSL"></a>7.配置SSL</h2><p>安装完毕Zimbra以后，我们就可以通过<a href="https://mx.example.com:7071登录后台，进行管理。此时，SSL证书还没有配置好，我们需要配置SSL">https://mx.example.com:7071登录后台，进行管理。此时，SSL证书还没有配置好，我们需要配置SSL</a>, 否则浏览器会一直报错。点击界面下方Get Started –&gt; Install Certificates, 选择Next然后选择Generate the CSR for the commercial certificate authorizer, 然后在弹出来的界面中生成CSR. 我们需要将主域名mx.example.com填在Common Name中，然后在Subjective Alternative Name中添加需要一并生成证书的其他域名，比如example.com, <a href="http://www.example.com/">www.example.com</a>, mail.example.com等。点击Next即可生成证书CSR.</p>
<p>有了CSR之后，我们即可申请证书了。Zimbra配置证书的过程比较tricky, 经常会报错，特别是如果在网页后台安装证书时报错的原因很不清晰，导致无法分析错误发生的原因。因此，我们一般选择在SSH中使用命令行的方式安装证书。下面我们以Let’s Encrypt为例安装证书，其他的商业证书的安装较为简单，这里就不再重复。</p>
<p>我们用SSH登录服务器，然后su切换至root. 首先，我们将刚才的CSR保存至&#x2F;tmp&#x2F;mx.example.com.csr文件。然后，安装certbot, 签发Let’s Encrypt证书。</p>
<p><code>apt-get install software-properties-common add-apt-repository ppa:certbot/certbot apt-get update apt-get install certbot</code></p>
<p>这里有一个小技巧，通常我们签发Let’s Encrypt证书的时候是让它自己生成私钥和CSR的，但是在需要的时候，certbot可以根据已有的CSR来签发证书，只需使用–csr参数即可。因此，我们基于刚刚生成的CSR来签发证书。</p>
<p><code>certbot certonly --standalone --csr /tmp/mx.example.com.csr</code></p>
<p>签发的证书和链文件位于&#x2F;tmp目录内。需要注意的是，Certbot生成的中间链会在Zimbra中校验失败，我们需要下载额外的Root CA和中间链证书。</p>
<p><code>wget https://letsencrypt.org/certs/isrgrootx1.pem.txt -O ca.crt wget https://letsencrypt.org/certs/letsencryptauthorityx3.pem.txt -O ca_intermediary.crt</code></p>
<p>然后再整理、合并一下证书：</p>
<p><code>mv 0000_cert.pem commercial.crt cat /tmp/ca_intermediary.crt /tmp/ca.crt &gt; /tmp/ca_chain.crt</code></p>
<p>现在就可以开始签发安装证书了。安装证书需要使用zimbra用户，这是在安装Zimbra的时候新建的内置用户。</p>
<p><code>su zimbra</code></p>
<p>安装之前，我们先验证一下证书。执行</p>
<p><code>/opt/zimbra/bin/zmcertmgr verifycrt comm /opt/zimbra/ssl/zimbra/commercial/commercial.key /tmp/commercial.crt /tmp/ca_chain.crt</code></p>
<p>如果看到类似于下面的回显，说明合格了。如果报错，大概率是因为Root CA和中间链哪里没有弄对，请仔细检查后再试。</p>
<p><code>** Verifying &#39;/tmp/commercial.crt&#39; against &#39;/opt/zimbra/ssl/zimbra/commercial/commercial.key&#39; **Tutorial written by https://qing.su** Certificate &#39;/tmp/commercial.crt&#39; and private key &#39;/opt/zimbra/ssl/zimbra/commercial/commercial.key&#39; match. ** Verifying &#39;/tmp/commercial.crt&#39; against &#39;/tmp/ca_chain.crt&#39; Valid certificate chain: /tmp/commercial.crt: OK</code></p>
<p>证书验证完毕后，执行下面的命令安装并检验：</p>
<p><code>/opt/zimbra/bin/zmcertmgr deploycrt comm /tmp/commercial.crt /tmp/ca_chain.crt /opt/zimbra/bin/zmcertmgr viewdeployedcrt</code></p>
<p>最后，我们要重启zimbra服务器，让证书生效。</p>
<p><code>exit service zimbra restart</code></p>
<p>再次登录<a href="https://mx.example.com:7071/">https://mx.example.com:7071</a>, 已经可以看到证书生效了。</p>
<p>至此，Zimbra服务器安装完毕并成功配置了SSL证书。在添加好相应的域名之后，即可使用相关用户名和密码登录<a href="https://mail.example.com来登录邮箱,界面非常美观大气.可以看到,在邮箱右下角还有聊天窗口,可以和同一个工作组内的伙伴实时通讯并传输文件./">https://mail.example.com来登录邮箱，界面非常美观大气。可以看到，在邮箱右下角还有聊天窗口，可以和同一个工作组内的伙伴实时通讯并传输文件。</a></p>
<h1 id="二、CentOS-7的搭建方法"><a href="#二、CentOS-7的搭建方法" class="headerlink" title="二、CentOS 7的搭建方法"></a>二、CentOS 7的搭建方法</h1><h2 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h2><p>1、64位服务器并能设置反向DNS解析（zimbra新版不支持32位操作系统）</p>
<p>2、磁盘空间≥5GB（zimbra默认安装位置&#x2F;opt 请确保磁盘空间足够 可以挂载到新磁盘）</p>
<p>3、内存≥4GB（编译对内存要求较高，内存小的用户可以设置swap来缓解内存压力）</p>
<p>4、域名一枚</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>zimbra在线安装时要检查MX 安装之前配置好dns MX解析并确认已生效 未生效安装过程会终止</p>
<p>假如&gt;&gt;</p>
<p>邮件服务器IP：138.68.227.28</p>
<p>邮件服务器采用的域名：mail.example.com</p>
<p>对外发送和接收邮件的域名：example.com</p>
<p>mail.example.com. IN A 138.68.227.28</p>
<p>example.com. IN MX 10 mail.example.com.</p>
<h3 id="反向DNS解析"><a href="#反向DNS解析" class="headerlink" title="反向DNS解析"></a>反向DNS解析</h3><p>反向解析由主机商提供（有些面板可以设置，不行提交工单）</p>
<p>主要用于发件，确认邮件来源的有效性。</p>
<p>命令查看反向解析是否生效：<code>nslookup -qt=ptr 138.68.227.28</code> 返回指向mail.example.com则成功</p>
<h3 id="关闭sendmail或postfix服务，避免25端口被占用"><a href="#关闭sendmail或postfix服务，避免25端口被占用" class="headerlink" title="关闭sendmail或postfix服务，避免25端口被占用"></a>关闭sendmail或postfix服务，避免25端口被占用</h3><p># centos 6</p>
<p>&#x2F;etc&#x2F;init.d&#x2F;sendmail stop &amp;&amp; chkconfig sendmail off</p>
<p>&#x2F;etc&#x2F;init.d&#x2F;postfix stop &amp;&amp; chkconfig postfix off</p>
<p># centos 7</p>
<p>systemctl stop postfix &amp;&amp; yum erase postfix</p>
<p>systemctl stop sendmail &amp;&amp; systemctl disable sendmail</p>
<h3 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a><a href="https://www.zephyr.vip/204">关闭selinux</a></h3><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a><strong>防火墙</strong></h3><p>根据自已需求选择要不要关闭，也可以选用设置防火墙规则</p>
<p><strong>关闭防火墙功能</strong></p>
<p># centos 6</p>
<p>service iptables stop &amp;&amp; chkconfig iptables off</p>
<p># centos 7</p>
<p>systemctl stop firewalld.service &amp;&amp; systemctl disable firewalld.service</p>
<p><strong>添加防火墙规则 开放端口</strong></p>
<p>–A INPUT –m state —state NEW –m tcp –p tcp —dport 80 –j ACCEPT</p>
<p>–A INPUT –m state —state NEW –m tcp –p tcp —dport 443 –j ACCEPT</p>
<p>–A INPUT –m state —state NEW –m tcp –p tcp —dport 7071 –j ACCEPT</p>
<p>–A INPUT –m state —state NEW –m tcp –p tcp —dport 8087 –j ACCEPT</p>
<p>–A INPUT –m state —state NEW –m tcp –p tcp —dport 8080 –j ACCEPT</p>
<p>–A INPUT –m state —state NEW –m tcp –p tcp —dport 8443 –j ACCEPT</p>
<p>–A INPUT –m state —state NEW –m tcp –p tcp —dport 25 –j ACCEPT</p>
<p>–A INPUT –m state —state NEW –m tcp –p tcp —dport 110 –j ACCEPT</p>
<p>–A INPUT –m state —state NEW –m tcp –p tcp —dport 143 –j ACCEPT</p>
<p>–A INPUT –m state —state NEW –m tcp –p tcp —dport 993 –j ACCEPT</p>
<p>–A INPUT –m state —state NEW –m tcp –p tcp —dport 995 –j ACCEPT</p>
<p># iptables -F</p>
<p># iptables -P INPUT DROP</p>
<p># iptables -P OUTPUT ACCEPT</p>
<p># iptables -A INPUT -i lo -j ACCEPT</p>
<p># iptables -A INPUT -s IP-Address-of-your-server&#x2F;32 -j ACCEPT</p>
<p># iptables -A INPUT -m state –state ESTABLISHED,RELATED -j ACCEPT</p>
<p># iptables -A INPUT -p tcp –dport 22 -j ACCEPT</p>
<p># iptables -A INPUT -p icmp -j ACCEPT</p>
<p>## Zimbra rules for external access ##</p>
<p># iptables -A INPUT -p tcp –dport 25  -j ACCEPT</p>
<p># iptables -A INPUT -p tcp –dport 80  -j ACCEPT</p>
<p># iptables -A INPUT -p tcp –dport 110  -j ACCEPT</p>
<p># iptables -A INPUT -p tcp –dport 143 -j ACCEPT</p>
<p># iptables -A INPUT -p tcp –dport 443  -j ACCEPT</p>
<p># iptables -A INPUT -p tcp –dport 465  -j ACCEPT</p>
<p># iptables -A INPUT -p tcp –dport 587  -j ACCEPT</p>
<p># iptables -A INPUT -p tcp –dport 993  -j ACCEPT</p>
<p># iptables -A INPUT -p tcp –dport 995  -j ACCEPT</p>
<p># iptables -A INPUT -p tcp –dport 3443  -j ACCEPT</p>
<p># iptables -A INPUT -p tcp –dport 9071  -j ACCEPT</p>
<p># iptables -A INPUT -p tcp –dport 7071  -j ACCEPT</p>
<h3 id="配置主机名HOSTNAME"><a href="#配置主机名HOSTNAME" class="headerlink" title="配置主机名HOSTNAME"></a>配置主机名HOSTNAME</h3><p><strong>修改配置文件</strong></p>
<p><code>vi /etc/sysconfig/network</code> 内容 <code>HOSTNAME=mail.example.com</code></p>
<p>或 <strong>命令设置</strong></p>
<p>hostnamectl set–hostname mail.example.com</p>
<p>hostnamectl status</p>
<p>hostname</p>
<h3 id="配置HOSTS"><a href="#配置HOSTS" class="headerlink" title="配置HOSTS"></a>配置HOSTS</h3><p>安装时会检查hosts文件内容要否符合要求：<ip> <FQHN> <HN></p>
<p>核查hosts文件中的FQHN是否与与hostname一致，不一致安装中止</p>
<p>不设置<ip> <FQHN> <HN> 返回的错误信息：</p>
<p>ERROR: Installation can not proceeed. Please fix your &#x2F;etc&#x2F;hosts file</p>
<p> to contain:</p>
<p> &lt;ip&gt; &lt;FQHN&gt; &lt;HN&gt;</p>
<p> Where &lt;IP&gt; is the ip address of the host,</p>
<p> &lt;FQHN&gt; is the FULLY QUALIFIED host name, and</p>
<p> &lt;HN&gt; is the (optional) hostname–only portion</p>
<p>错误信息2 出错原因也说的很详细了 注释掉有12.0.0.1的行 DO服务器注释掉<code>#centos-512mb-ams2-01 centos-512mb-ams2-01的行</code></p>
<p>ERROR: Installation can not proceeed. Please fix your &#x2F;etc&#x2F;hosts file</p>
<p> to contain:</p>
<p> 127.0.0.1 localhost.localdomain localhost</p>
<p> Zimbra install grants mysql permissions only to localhost and</p>
<p> localhost.localdomain users. But Fedora&#x2F;RH installs leave lines such</p>
<p> as these in &#x2F;etc&#x2F;hosts:</p>
<p> 127.0.0.1 myhost.mydomain.com myhost localhost.localdomain localhost</p>
<p> This causes MySQL to reject users coming from 127.0.0.1 as users from</p>
<p> myhost.mydomain.com. You can read more details at:</p>
<p> <a href="http://bugs.mysql.com/bug.php?id=11822">http://bugs.mysql.com/bug.php?id=11822</a></p>
<p><em>服务器IP</em> <em>完整域名</em> 主机名称（hostname命令显示的）</p>
<p>vi &#x2F;etc&#x2F;hosts</p>
<p>138.68.243.239 mail.example.com mail.example.com</p>
<h3 id="NTP"><a href="#NTP" class="headerlink" title="NTP"></a>NTP</h3><blockquote>
<p>Network Time Protocol（NTP）是用来使计算机时间同步化的一种协议，它可以使计算机对其服务器或时钟源（如石英钟，GPS等等)做同步化，它可以提供高精准度的时间校正（LAN上与标准间差小于1毫秒，WAN上几十毫秒），且可介由加密确认的方式来防止恶毒的协议攻击。</p>
</blockquote>
<p>yum install ntp</p>
<p>systemctl start ntpd</p>
<p>systemctl enable ntpd</p>
<h3 id="安装依赖包-wiki"><a href="#安装依赖包-wiki" class="headerlink" title="安装依赖包 wiki"></a>安装依赖包 <a href="https://wiki.zimbra.com/wiki/Zimbra_dependencies_per_Operating_System">wiki</a></h3><p>从Zimbra Collaboration 8.7开始，Zimbra依赖于自己的存储库打包系统，这意味着Zimbra安装脚本会自动处理操作系统的依赖关系。</p>
<h3 id="安装及使用"><a href="#安装及使用" class="headerlink" title="安装及使用"></a>安装及使用</h3><p>wget <a href="https://files.zimbra.com/downloads/8.7.5/_GA/zcs-8.7.5/_GA/_1764.RHEL7/_64.20170314032533.tgz">https://files.zimbra.com/downloads/8.7.5\_GA/zcs-8.7.5\_GA\_1764.RHEL7\_64.20170314032533.tgz</a></p>
<p>tar zxvf zcs–8.7.5_GA_1764.RHEL7_64.20170314032533.tgz</p>
<p>cd zcs–8.7.5_GA_1764.RHEL7_64.20170314032533</p>
<p># .&#x2F;install.sh</p>
<p>.&#x2F;install.sh —platform–override</p>
<p>安装出错可行一次：<code>/opt/zimbra/libexec/zmsetup.pl</code> 日志分析，不行就卸载重装了<code>./install.sh -u</code></p>
<p>安装过程就不一一列出来了，能y的设置y，跳到菜单的时候选7、选4设置管理员密码，r返回，a</p>
<p>查看占用空间：<code>du -sh /opt/zimbra/</code></p>
<p>切换到zimbra用户：<code>su - zimbra</code></p>
<p>查看运行状态：<code>zmcontrol status</code></p>
<p>重启服务：<code>zmcontrol restart</code></p>
<p>web管理界面：<a href="https://mail.example.com:7071/">https://mail.example.com:7071/</a></p>
<p>web用户界面：<a href="https://mail.example.com:7073/">https://mail.example.com:7073/</a></p>
<p><strong>添加新域名</strong> example.com</p>
<p><strong>简单的收发邮件</strong>：example.com 设置@的MX记录到mail.example.com</p>
<p>SPF,DKIM,DMARC <a href="https://wiki.zimbra.com/wiki/Best_Practices_on_Email_Protection:_SPF,_DKIM_and_DMARC">wiki</a> <a href="http://www.mail163.cn/anti-spam/">spam</a></p>
<h3 id="SPF"><a href="#SPF" class="headerlink" title="SPF"></a>SPF</h3><p>什么是SPF？ (Sender Policy Framework) 的缩写，一种以IP地址认证电子邮件发件人身份的技术，是非常高效的垃圾邮件解决方案。 接收邮件方会首先检查域名的SPF记录，来确定发件人的IP地址是否被包含在SPF记录里面，如果在，就认为是一封正确的邮件，否则会认为是一封伪造的邮件进行退回。</p>
<p>example.com 设置@的SPF和txt记录：v&#x3D;spf1 mx ~all（允许当前域名的mx记录对应的IP地址）</p>
<h3 id="DKIM"><a href="#DKIM" class="headerlink" title="DKIM"></a>DKIM</h3><p>Bug：</p>
<p>ZCS 8.7.x 已知问题 BUG zmdkimkeyutil 生成非有效的2048位DKIM</p>
<p>解决：&#x2F;opt&#x2F;zimbra&#x2F;libexec&#x2F;zmdkimkeyutil 修改所有2048关键字为1024</p>
<p>》升级DKIM签名：<code>/opt/zimbra/libexec/zmdkimkeyutil -u -d example.com</code></p>
<p>》更改DNS设置</p>
<p><strong>命令生成2048位DKIM</strong>：&#x2F;opt&#x2F;zimbra&#x2F;libexec&#x2F;zmdkimkeyutil -a -b 2048 -d example.com</p>
<p>DKIM是利用加密签名和验证的原理，发件人在发送邮件时候，将与域名相关的加密签名插入邮件，收件人收到邮件后就可以对签名进行验证，判断发件人地址的真实性。</p>
<ul>
<li>添加DKIM &#x2F;opt&#x2F;zimbra&#x2F;libexec&#x2F;zmdkimkeyutil -a -d example.com</li>
<li>升级DKIM &#x2F;opt&#x2F;zimbra&#x2F;libexec&#x2F;zmdkimkeyutil -u -d example.com</li>
<li>删除DKIM &#x2F;opt&#x2F;zimbra&#x2F;libexec&#x2F;zmdkimkeyutil -r -d example.com</li>
<li>查看DKIM &#x2F;opt&#x2F;zimbra&#x2F;libexec&#x2F;zmdkimkeyutil -q -d example.com</li>
</ul>
<p>生成1024位的DKIM 内容为</p>
<p>DKIM Data added to LDAP for domain example.com with selector E298BEBE–2D5A–11E7–9E70–F55E985B5BE7</p>
<p>Public signature to enter into DNS:</p>
<p>E298BEBE–2D5A–11E7–9E70–F55E985B5B17._domainkey IN TXT ( “v&#x3D;DKIM1; k&#x3D;rsa; “</p>
<p> “p&#x3D;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC5Lkk2XnUgA9LoHWYgDb1URxyTnab0WuHA9CKUFtLWrjV6S87bcpzoVa3</p>
<h3 id="DMARC"><a href="#DMARC" class="headerlink" title="DMARC"></a>DMARC</h3><p>[DMARC]协议的主要目的是识别并拦截钓鱼邮件</p>
<p>DNS记录 名称：_dmarc  值：v&#x3D;DMARC1; p&#x3D;none</p>
<h3 id="域名解析记录"><a href="#域名解析记录" class="headerlink" title="域名解析记录"></a>域名解析记录</h3><p>类型：txt</p>
<p>DNS名称：E298BEBE-2D5A-11E7-9E70-F55E985B5B17._domainkey</p>
<p>值：”v&#x3D;DKIM1; k&#x3D;rsa;p&#x3D;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC5Lkk2XnUgA9LoHWYgDb1URxyTnab0WuHA9CKUFtLWrjV6S87bcpzoVa3fGVc&#x2F;jChVfu5E4ZTif&#x2F;jNkBPeow7wnwajEpFo8G&#x2F;yR0e8aNwDghW8DYf9B21QPAtB9NqoNjoUSD1tDsTXor2tSqf8wormbVhN3Y9aWkAxMEUP594zUwIDAQAB”</p>
<h3 id="验证DKIM"><a href="#验证DKIM" class="headerlink" title="验证DKIM"></a>验证DKIM</h3><p><strong>验证公钥是否与私钥匹配</strong> 测试通过没有任何信息返回，否则返回record not found</p>
<p>&#x2F;opt&#x2F;zimbra&#x2F;common&#x2F;sbin&#x2F;opendkim-testkey -d example.com -s E298BEBE-2D5A-11E7-9E70-F55E985B5B17 -x &#x2F;opt&#x2F;zimbra&#x2F;conf&#x2F;opendkim.conf</p>
<h3 id="重新签发证书"><a href="#重新签发证书" class="headerlink" title="重新签发证书"></a>重新签发证书</h3><p>zimbra的证书有效期为365天，为了避免下次的麻烦，可以重新签发一个证书，有效期20年。</p>
<p>&#x2F;opt&#x2F;zimbra&#x2F;bin&#x2F;zmcertmgr createca –new</p>
<p>&#x2F;opt&#x2F;zimbra&#x2F;bin&#x2F;zmcertmgr deployca</p>
<p>&#x2F;opt&#x2F;zimbra&#x2F;bin&#x2F;zmcertmgr createcrt –new –days 7300</p>
<p>&#x2F;opt&#x2F;zimbra&#x2F;bin&#x2F;zmcertmgr deploycrt self</p>
<p>&#x2F;opt&#x2F;zimbra&#x2F;bin&#x2F;zmcertmgr viewdeployedcrt</p>
<h3 id="可以学习的内容"><a href="#可以学习的内容" class="headerlink" title="可以学习的内容"></a>可以学习的内容</h3><p>dnsmasq</p>
<p>named</p>
<h3 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h3><p><a href="https://intodns.com/one.one">https://intodns.com/one.one</a> DNS检查</p>
<p><a href="http://www.mail-tester.com/">http://www.mail-tester.com/</a> 邮件评分</p>
<p><a href="https://dmarcian.com/dmarc-inspector/mgtgxp.pw">https://dmarcian.com/dmarc-inspector/mgtgxp.pw</a> dmarc测试</p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.renfei.org/blog/introduction-to-spf.html">https://www.renfei.org/blog/introduction-to-spf.html</a></p>
<p><a href="http://170182.blog.51cto.com/160182/1272569">http://170182.blog.51cto.com/160182/1272569</a></p>
<p><a href="https://www.mawenbao.com/research/email-spf-and-exim4-dkim-dmarc-config.html">https://www.mawenbao.com/research/email-spf-and-exim4-dkim-dmarc-config.html</a></p>
<p><a href="http://imzhen.com/note/2015/08/09/20150809/">http://imzhen.com/note/2015/08/09/20150809/</a></p>
<blockquote>
<p><a href="http://blog.topspeedsnail.com/archives/5546">CentOS 7 安装配置Zimbra邮件服务器</a></p>
</blockquote>
<p><a href="https://www.chenxie.net/archives/1476.html">https://www.chenxie.net/archives/1476.html</a></p>
<p><a href="http://www.bkjia.com/Linux/1112319.html">http://www.bkjia.com/Linux/1112319.html</a></p>
<p><a href="https://bbotte.com/server-config/zimbra-configuration-mail-service-full-record/">https://bbotte.com/server-config/zimbra-configuration-mail-service-full-record/</a></p>
<blockquote>
<p><a href="http://www.huike007.cn/?p=463">Zimbra8 安装说明</a></p>
</blockquote>
<p><a href="http://blog.csdn.net/zzban/article/details/8640510">http://blog.csdn.net/zzban/article/details/8640510</a></p>
<p><a href="https://www.kenceng-solusindo.net/read/intalasi-zimbra-mail-server-ubuntu-16-04/">https://www.kenceng-solusindo.net/read/intalasi-zimbra-mail-server-ubuntu-16-04/</a></p>
<p><a href="http://record.blog.51cto.com/3300006/1206745">http://record.blog.51cto.com/3300006/1206745</a></p>
<p><a href="https://www.chenxie.net/archives/1476.html">https://www.chenxie.net/archives/1476.html</a></p>
<p><a href="http://www.linuxyw.com/linux/qitafuwu/20130605/540.html">http://www.linuxyw.com/linux/qitafuwu/20130605/540.html</a></p>
<p><a href="http://m.blog.chinaunix.net/uid-31075838-id-5698408.html">http://m.blog.chinaunix.net/uid-31075838-id-5698408.html</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Zimbra</tag>
      </tags>
  </entry>
  <entry>
    <title>收集了一些Linux下常用一键脚本</title>
    <url>/2018/01/30/%E6%94%B6%E9%9B%86%E4%BA%86%E4%B8%80%E4%BA%9Blinux%E4%B8%8B%E5%B8%B8%E7%94%A8%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>如果手里有多台VPS，经常需要部署环境等，每次去手动编译安装实在是太耗费时间了，所以收集了一些个人常用的Linux一键脚本，希望能帮助提高效率。（所有脚本均开源，排名要分先后，自己写的在前）</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/01/bash.png"></p>
<h3 id="LACY一键搭建Aria2实现离线下载"><a href="#LACY一键搭建Aria2实现离线下载" class="headerlink" title="LACY一键搭建Aria2实现离线下载"></a>LACY一键搭建Aria2实现离线下载</h3><p>Linux环境下一键安装Aria2 + Caddy + YAAW，可实现离线下载、文件管理、在线播放等功能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#Centos用户</span><br><span class="line">yum -y install wget unzip</span><br><span class="line">#如果是Debian or Ubuntu用户</span><br><span class="line">apt-get install -y wget unzip</span><br><span class="line">#下面的命令通用，直接复制</span><br><span class="line">wget https://github.com/helloxz/aria2/archive/master.zip</span><br><span class="line">unzip master.zip &amp;&amp; cd aria2-master &amp;&amp; chmod u+x *.sh &amp;&amp; ./install_aria2.sh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装说明：<a href="https://www.xiaoz.me/archives/9694">Linux一键安装Aria2 + YAAW实现离线下载</a> 帮助文档：<a href="http://doc.xiaoz.me/lacy/473927" title="LACY帮助文档">http://doc.xiaoz.me/lacy/473927</a> 源码：<a href="https://github.com/helloxz/aria2" title="https://github.com/helloxz/aria2">https://github.com/helloxz/aria2</a></p>
</blockquote>
<h3 id="CentOS-7一键安装Seafile搭建私有网盘"><a href="#CentOS-7一键安装Seafile搭建私有网盘" class="headerlink" title="CentOS 7一键安装Seafile搭建私有网盘"></a>CentOS 7一键安装Seafile搭建私有网盘</h3><p>Seafile 是一款开源企业云盘，使用Python开发，Seafile非常稳定、安全，搭建私有云的不二之选。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">yum -y install wget</span><br><span class="line">wget https://raw.githubusercontent.com/helloxz/seafile/master/install_seafile.sh</span><br><span class="line">chmod +x install_seafile.sh &amp;&amp; ./install_seafile.sh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装说明：<a href="https://www.xiaoz.me/archives/8480">CentOS 7一键安装Seafile搭建私有云存储</a> 源码：<a href="https://github.com/helloxz/seafile" title="https://github.com/helloxz/seafile">https://github.com/helloxz/seafile</a></p>
</blockquote>
<h3 id="CentOS一键安装Resilio-Sync脚本"><a href="#CentOS一键安装Resilio-Sync脚本" class="headerlink" title="CentOS一键安装Resilio Sync脚本"></a>CentOS一键安装Resilio Sync脚本</h3><p>Resilio Sync是一种依赖于BitTorrent协议的专用文件共享系统，原为BitTorrent Sync，可用于文件共享、同步等。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#安装必要的软件包</span><br><span class="line">yum -y install wget unzip</span><br><span class="line">#下载脚本</span><br><span class="line">wget https://github.com/helloxz/Resilio-Sync/archive/master.zip</span><br><span class="line">#解压并安装</span><br><span class="line">unzip master.zip &amp;&amp; cd Resilio-Sync-master &amp;&amp; chmod +x mysync.sh sync.sh &amp;&amp; ./sync.sh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装说明：<a href="https://www.xiaoz.me/archives/8219">CentOS一键安装Resilio Sync脚本</a> 源码：<a href="https://github.com/helloxz/Resilio-Sync">https://github.com/helloxz/Resilio-Sync</a></p>
</blockquote>
<h3 id="OneinStack"><a href="#OneinStack" class="headerlink" title="OneinStack"></a>OneinStack</h3><p>搭建网站环境用它就够了，一键安装Apache、Nginx、Mysql、Tomcat…等，比如流行的LNMP环境。注意：该脚本不支持WEB面板，若对Linux不是很熟悉的朋友建议使用宝塔&#x2F;AMH等替代。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">yum -y install wget screen curl python #for CentOS/Redhat</span><br><span class="line">wget http://mirrors.linuxeye.com/oneinstack-full.tar.gz</span><br><span class="line">tar xzf oneinstack-full.tar.gz</span><br><span class="line">cd oneinstack</span><br><span class="line">screen -S oneinstack</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>官网：<a href="https://oneinstack.com/" title="https://oneinstack.com/">https://oneinstack.com/</a></p>
</blockquote>
<h3 id="酸酸-Python版一键安装脚本"><a href="#酸酸-Python版一键安装脚本" class="headerlink" title="酸酸 Python版一键安装脚本"></a>酸酸 Python版一键安装脚本</h3><p>秋水逸冰大神的脚本，至于他能干嘛，不可言喻，你懂的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">wget --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class="line">chmod +x shadowsocks.sh</span><br><span class="line">./shadowsocks.sh 2&gt;&amp;1  tee shadowsocks.log</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原文地址：<a href="https://teddysun.com/444.html">https://teddysun.com/444.html</a></p>
</blockquote>
<h3 id="一键升级内核并开启Google-BBR"><a href="#一键升级内核并开启Google-BBR" class="headerlink" title="一键升级内核并开启Google BBR"></a>一键升级内核并开启Google BBR</h3><p>Google 开源了的 TCP BBR 拥塞控制算法，有效提高TCP传输速度，搭配Shadowsocks使用效果更佳，你的邻居把出口带宽占满了，你不想点办法还能上网？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原文地址：<a href="https://teddysun.com/342.html" title="https://teddysun.com/342.html">https://teddysun.com/342.html</a></p>
</blockquote>
<h3 id="一键测试脚本bench-sh"><a href="#一键测试脚本bench-sh" class="headerlink" title="一键测试脚本bench.sh"></a>一键测试脚本bench.sh</h3><p>这个依然是秋水逸冰的作品，他的脚本都非常实用。<code>bench.sh</code>可以方便的查看CPU&#x2F;内存等信息，还可以对VPS磁盘I&#x2F;O，下载速度等进行测试在，做VPS评测必备。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#方法一</span><br><span class="line">wget -qO- bench.sh  bash</span><br><span class="line">#方法二</span><br><span class="line">curl -Lso- bench.sh  bash</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一键脚本适合对Linux不太熟悉或希望提高效率的朋友，如果您是打算学习Linux可以尝试手动编译安装，这样可以更清楚的熟悉运行原理，然后自己写成一键脚本造福人类。当然优秀的脚本还有很多，以上仅收集了一些xiaoz常用的脚本，如果您有不错的脚本欢迎在下面留言推荐。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Linux脚本</tag>
        <tag>shell脚本</tag>
        <tag>一键脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>改造Win10电源管理提升SSD固态硬盘性能</title>
    <url>/2020/04/21/%E6%94%B9%E9%80%A0win10%E7%94%B5%E6%BA%90%E7%AE%A1%E7%90%86%E6%8F%90%E5%8D%87ssd%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E6%80%A7%E8%83%BD/</url>
    <content><![CDATA[<p>SSD固态硬盘的磁盘性能虽然很高，但是如果它经常处于节能休眠模式，那么性能肯定会大打折扣的。并且对于固态硬盘这样的闪存设备来说，耗电量并不高，所以没有必要为了节能而限制它的性能，有些得不偿失。下面MS酋长就来分享一下从Windows10电源管理着手来阻止固态硬盘进入休眠节省状态，从而提升磁盘性能的技巧。</p>
<p>PS: 鉴于目前SSD存在SATA、M.2(NVMe)两种接口，在电源管理上这两者是不同的，所以下面MS酋长分类进行介绍。</p>
<h1 id="适用于SATA-SSD"><a href="#适用于SATA-SSD" class="headerlink" title="适用于SATA SSD"></a><strong>适用于SATA SSD</strong></h1><p><strong>一、为电源管理添加节能模式控制选项</strong></p>
<p>右键点击Win10开始按钮，在弹出的菜单中选择“Windows PowerShell(管理员)”，打开“管理员: Windows PowerShell”窗口，输入并回车运行以下命令：</p>
<blockquote>
<p>powercfg -attributes 0012ee47-9041-4b5d-9b77-535fba8b1442 0b2d69d7-a2a1-449c-9680-f91c70521c60 -ATTRIB_HIDE</p>
</blockquote>
<p>然后打开“高级电源设置”窗口。方法是：</p>
<p>依然进入“Windows设置 - 系统 - 电源和睡眠”设置界面，点击底部的“其他电源设置”。如图：</p>
<p><img src="/2020/04/d10a5fa245ea40f8aa36cdeafd3e8a74.jpg" alt="改造Win10电源管理提升SSD固态硬盘性能"></p>
<p>这时会打开“控制面板\硬件和声音\电源选项”窗口。如图：</p>
<p><img src="/2020/04/aa33df34ee2c4c8ab48bcd35eac85639.jpg" alt="改造Win10电源管理提升SSD固态硬盘性能"></p>
<p>点击当前电源计划右侧的“更改计划设置”打开“编辑计划设置”窗口。如图：</p>
<p><img src="/2020/04/19a1157b3bc5422094c0085b7a3b6296.jpg" alt="改造Win10电源管理提升SSD固态硬盘性能"></p>
<p>点击底部的“更改电源高级设置”即可打开“电源选项 - 高级设置”窗口。如图：</p>
<p><img src="/2020/04/2e587c80a9084f2ebafdcddaed7f61ac.jpg" alt="改造Win10电源管理提升SSD固态硬盘性能"></p>
<p>展开“硬盘”设置项，你就可以看到刚刚添加的“AHCI Link Power Management - HIPM&#x2F;DIPM”设置项了。</p>
<p>其下拉列表中几个选项的含义如下：</p>
<ul>
<li>HIPM - 主机控制</li>
<li>DIPM - 设备控制</li>
<li>HIPM + DIPM - 混合控制</li>
<li>Lowest - 最低功耗模式</li>
<li>Active - 关闭节能模式</li>
</ul>
<p>很明显，我们要保持SSD最佳性能，只需选择 Active 完全关闭节能模式即可。</p>
<p><strong>二、为电源管理添加低功耗模式自适应选项</strong></p>
<p>同样以管理员身份运行 Windows PowerShell ，输入并回车运行以下命令：</p>
<blockquote>
<p>powercfg -attributes 0012ee47-9041-4b5d-9b77-535fba8b1442 dab60367-53fe-4fbc-825e-521d069d2456 -ATTRIB_HIDE</p>
</blockquote>
<p>然后打开“高级电源设置”窗口，你就可以看到新增加的“AHCI Link Power Management - Adaptive”选项。如图：</p>
<p><img src="/2020/04/b10c46d586da4ef0acdcb2b90ec2ce39.jpg" alt="改造Win10电源管理提升SSD固态硬盘性能"></p>
<p>这里可以设置固态硬盘空闲后进入休眠状态的等待时间，设置的短一些可以让硬盘有更多机会休眠，降低功耗和发热量；设置的长一些则可以让硬盘减少休眠，更多地处于工作状态，节省唤醒时间，从而提升一定的性能。</p>
<h1 id="适用于M-2-NVMe-SSD"><a href="#适用于M-2-NVMe-SSD" class="headerlink" title="适用于M.2(NVMe) SSD"></a><strong>适用于M.2(NVMe) SSD</strong></h1><p>对于越来越普及的M.2(NVMe) SSD，我们也可以在电源管理中添加类似于上面 Adaptive 的 Primary NVMe Idle Timeout 设置项，同样可以控制固态硬盘进入节能模式的等待时间。添加方法如下：</p>
<p>以管理员身份运行 Windows PowerShell ，输入并回车运行以下命令：</p>
<blockquote>
<p>powercfg -attributes 0012ee47-9041-4b5d-9b77-535fba8b1442 d639518a-e56d-4345-8af2-b9f32fb26109 -ATTRIB_HIDE</p>
</blockquote>
<p>然后你就可以在“高级电源设置”窗口中看到新增加的“Primary NVMe Idle Timeout”设置项了。</p>
<p>同样如果你想让硬盘性能高一些，就把这个时间设置得长一些。</p>
<h1 id="适用于PCI-E-NVMe-SSD"><a href="#适用于PCI-E-NVMe-SSD" class="headerlink" title="适用于PCI-E NVMe SSD"></a><strong>适用于PCI-E NVMe SSD</strong></h1><p>另外还有一些基于PCI-E总线的NVMe SSD固态硬盘，这个我们可以按如下方法关闭节能模式保持硬盘性能：</p>
<p>在“高级电源设置”窗口中展开“PCI Express - 链接状态电源管理”。如图：</p>
<p><img src="/2020/04/d49d5f3845484039964ae42c1f6eb6cc.jpg" alt="改造Win10电源管理提升SSD固态硬盘性能"></p>
<p>把电源节省量设置为“关闭”，这样就可以避免固态硬盘进入节能模式从而保持硬盘性能。</p>
<p>不过需要注意的是，这一设置还会影响 PCI-E 显卡、USB 3.1 等其他PCI-E设备，所以电脑的总功耗和发热量会有所提高。</p>
]]></content>
      <categories>
        <category>Win</category>
      </categories>
      <tags>
        <tag>WIN10</tag>
        <tag>SSD</tag>
        <tag>电源</tag>
      </tags>
  </entry>
  <entry>
    <title>新手教程 Debian 10 如何升级官方buster-backports源5.10.X内核版本</title>
    <url>/2021/12/23/%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B-debian-10-%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7%E5%AE%98%E6%96%B9buster-backports%E6%BA%905-10-x%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<p>目前VPS商家提供的Debian 10系统基本上都是4.19.x.x的内核版本，站长本着用新不用旧的原则，在初次部署环境的时候，总是忍不住将系统内核版本升级到比较新的版本。</p>
<p>1、查看系统内核版本</p>
<p>uname -r</p>
<p>站长用于演示的这台Debian 10系统的VPS原始内核版本为：4.19.0-5-amd64</p>
<p>2、添加Debian官方 buster-backports 源</p>
<p>deb <a href="http://deb.debian.org/debian">http://deb.debian.org/debian</a> buster-backports main</p>
<p>编辑nano &#x2F;etc&#x2F;apt&#x2F;sources.list，站长用nano编辑演示，默认如下图所示(有些商家默认有buster-backports源的，则略过)：<img src="https://www.jarods.org/wp-content/uploads/2021/12/2021080602.jpg" alt="新手教程" title="新手教程"></p>
<p>将 buster-backports 源添加进去，然后按Ctrl+X退出；<img src="https://www.jarods.org/wp-content/uploads/2021/12/2021080603.jpg" alt="新手教程" title="新手教程"></p>
<p>这里会提示保存，输入Y并回车；<img src="https://www.jarods.org/wp-content/uploads/2021/12/2021080604.jpg" alt="新手教程" title="新手教程"></p>
<p>直接按回车确认将buster-backports源写入，<img src="https://www.jarods.org/wp-content/uploads/2021/12/2021080605.jpg" alt="新手教程" title="新手教程"></p>
<p>3、安装官方最新5.1x.x内核</p>
<p>先更新系统，命令如下：</p>
<p>apt update</p>
<p>安装最新内核</p>
<p>apt install -t buster-backports linux-image-cloud-amd64 linux-headers-cloud-amd64</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2021/12/2021080606.jpg" alt="新手教程" title="新手教程"></p>
<p>更新启动内核版本</p>
<p>update-grub</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2021/12/2021080607.jpg" alt="新手教程" title="新手教程"></p>
<p>重启系统</p>
<p>reboot</p>
<p>4、卸载旧内核版本 输入<code>uname -r</code>即可看到内核版本已经是<code>5.10.0-0.bpo.7-cloud-amd64</code>；输入以下命令查看当前系统已经安装的内核版本；</p>
<p>dpkg –list  grep linux-image</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2021/12/2021080608.jpg" alt="新手教程" title="新手教程"></p>
<p>使用<code>apt purge</code>命令卸载旧的内核版本(按实际卸载的内核版本修改命令)：</p>
<p>apt purge linux-image-4.19.0-5-amd64</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2021/12/2021080609.jpg" alt="新手教程" title="新手教程"></p>
<p>输入以下命令查看当前系统已经安装的内核头文件；</p>
<p>dpkg –list  grep linux-headers</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2021/12/2021080610.jpg" alt="新手教程" title="新手教程"></p>
<p>如果有4.19.x.x的内核头文件，也可以使用<code>apt purge</code>命令卸载，命令如下(按实际卸载的内核头文件版本修改命令)：</p>
<p>apt purge linux-headers-4.19.0-5-amd64</p>
<p>最后再动更新一下启动内核版本，可以看到，只剩下<code>5.10.0-0.bpo.7-cloud-amd64</code>了。</p>
<p>update-grub</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2021/12/2021080611.jpg" alt="新手教程" title="新手教程"></p>
<p>搞定！收工！……等等，好像还没完呢，查看下方这篇文章开启BBR才算真正搞定！</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Debian</tag>
      </tags>
  </entry>
  <entry>
    <title>教程：TCP BBR优化教程（转载）</title>
    <url>/2018/08/02/%E6%95%99%E7%A8%8B%EF%BC%9Atcp-bbr%E4%BC%98%E5%8C%96%E6%95%99%E7%A8%8B%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
    <content><![CDATA[<p>按：前些天本站分享了 BBR2 ，但是因为这玩意发包太猛，那怎么样调 BBR 的参数呢？之前  @EvanVane 大佬给我分享过一篇文章，本人实践中也很受用。如果你有一定的技术底气可以看看这篇文章，小白可以略过。另外也请不要伸手党，比如针对 C3 优化的 BBR 对 QN 就不一定适用（网络状况不同），今天调的参数下个月就不一定有用（因为其他人也会调，人家抢带宽后，我怎么样抢更多的带宽？那需要重新调参数。） <strong>这个技术目前看来也不可能出一键包</strong>，要是想享受，还是好好自学下网络基础吧。</p>
<p>原题： <a href="http://blog.csdn.net/dog250/article/details/54999332">深夜聊聊 Bufferbloat 以及 TCP BBR</a>  原作者： <a href="http://my.csdn.net/dog250">Bomb250</a></p>
<p>这篇文章的写作动机来源于知乎上的一个问题，有人问既然 Bufferbloat 是个问题，为什么路由器的缓存还要设计那么大。起初，我也是觉得缓存越大越好，这个就像人们拼命比拼谁的电脑内存大一样，因为在一般人眼里，内存越大就越快！然而对于网络而言，恰好相反，内存越大，越让人不想归家。 酒店舒适，但只是路过，没人会把家装修成酒店的样子，家才是越大越好。 路由器设计成携带大缓存的设备，这是一个错误！路由器不该有那么大的缓存，然而 TCP 大牛当年的一个“ AIMD 错误决定”让路由器的缓存越来越大，最终引发了 Bufferbloat ！事情还要从安迪 – 比尔定律说起。</p>
<h2 id="网络上的“安迪-–-比尔定律”"><a href="#网络上的“安迪-–-比尔定律”" class="headerlink" title="网络上的“安迪 – 比尔定律”"></a>网络上的“安迪 – 比尔定律”</h2><p>先解释一下安迪 – 比尔定律，即“比尔 . 盖茨拿走了安迪 . 格鲁夫所给的”。狭义的讲就是无论 Intel 的芯片快到多么牛逼的地步，微软的下一个 Windows 版本总是能把芯片的性能榨干，然而广义的讲，安迪 – 比尔定律连同摩尔定律一起事实上构成了信息产业的一台泵，典型的一个正反馈系统，这是决定互联网产业大爆发的本质原因，这个系统如下： <em><strong>摩尔定律 -&gt; 硬件性能提升 -&gt; 软件填补硬件提升的空间</strong></em></p>
<h2 id="我们可以理解为，摩尔定律和安迪-–-比尔定律驱动了信息革命的车轮不断滚动从而碾压一切！"><a href="#我们可以理解为，摩尔定律和安迪-–-比尔定律驱动了信息革命的车轮不断滚动从而碾压一切！" class="headerlink" title="我们可以理解为，摩尔定律和安迪 – 比尔定律驱动了信息革命的车轮不断滚动从而碾压一切！"></a>我们可以理解为，摩尔定律和安迪 – 比尔定律驱动了信息革命的车轮不断滚动从而碾压一切！</h2><p>可以把路由器的越来越大的 Buffer 以及 TCP 贪婪地占据这些路由器 Buffer 两者看作是另一个“安迪 – 比尔定律”。因为 BBR 之前的 TCP 拥塞算法都是盲目且贪婪的，路由器加大的 Buffer 总是能被 TCP 的 AI( 加性增窗 ) 过程快速榨干，反过来大缓存延迟了 TCP 的丢包，同时增加了丢包的成本，这要求路由器提供更多的缓存。 具体来讲就是，如果路由器 Buffer 过小，基于丢包的拥塞算法固有的全局同步现象将会使得带宽的利用率极低，所以必须增加 Buffer 来弥补。这就是一个正反馈循环，肇事者可以说是基于丢包的 TCP 算法，它驱动了路由器 Buffer 越来越大，当 Buffer 越来越大， TCP 又会瞬间用完，永远喂不饱，直到永远。 好在有摩尔定律和 TCP 的 MD( 乘性减窗 ) 过程二者从中协调，如果同时失去了二者， TCP 早晚会全局崩溃！ 我们假设硬件已经逼近了热密度的极限，摩尔定律失效了，此时不会再增加 Buffer 的大小了，会发生什么呢？ 只要有 TCP 的 MD 过程在，互联网就不会崩溃，所以说， TCP 的 AI 过程保障了其效率，而 MD 过程则保证了收敛。 Google 的新拥塞控制框架来了以后， MD 过程便不被保证了，任何人都可以写一个永不降窗的算法，如果把主动的 MD 过程看作道德的话，那么路由器的 AQM 就是法律了。这就是 TCP&#x2F;IP 的几乎全部内容了，我们可以看到，它极其复杂。 值得注意的是， TCP&#x2F;IP 的安迪 – 比尔定律展现的这种复杂性，其促进因素不是摩尔定律，而是“人们对带宽的高利用率的追求”，因此便有了以下的关系： <em><strong>提高带宽利用率 -&gt; 路由器加大 Buffer-&gt;TCP 的 AIMD 填补加大的 Buffer</strong></em> 其实，这完全是错觉， TCP&#x2F;IP 的框架不该这么复杂的。或许， AIMD 根本就不需要，事实上，是路由器不断加大的 Buffer 和 AIMD 一起纵容了坏事的频繁发生。这一点正如人们不断买新电脑，不断买新手机，然而过不了多久，你依然会发现不管再新的机器都卡的要死一样的道理，只不过，人们买的电脑也好，手机也好，它们的更新换代是摩尔定律驱动的，机器完全是个人所有的，你随时可以跟着摩尔定律的节奏更新换代，然而对于网络设备却不是这样。 网络设备，比如路由器，交换机之类，它们只是整个 TCP&#x2F;IP 系统的一个环节而已，机房里面的设备是不可能频繁更新换代的，摩尔定律几乎被它们所无视。虽然摩尔定律依旧影响着设备的实际制造和升级，但由于这种周期相对较长，也就是可以忽略的了。但这里面有一个不变的定论，那就是 TCP 几乎全部都是以 AIMD 原则来运作的， UDP 则是无限贪婪的。 TCP 的 AI 会造成主动丢包，这也是基于丢包的拥塞控制算法的核心，而 MD 会造成全局同步，这两点无疑造成了带宽利用率的低下，这是 TCP 的硬伤，不得不靠不断加大的路由器 Buffer 来弥补，至少是延迟了悲剧的发生，在延迟悲剧的这段时间内，路由器当然希望端系统可以意识到事情正在悄悄起变化并采取一些措施。 …… AIMD ，正如以太网的 CSMA&#x2F;CD 一样，并不完美，但是可用。现在的人们在千兆以太网出现之前，曾经推导出一个结论，那就是依靠 CSMA&#x2F;CD 是不可能达到千兆 bps 的，然而如今已经是万兆甚至 4 万兆了 … 如果说以太网的载波监听，冲突检测是不必要且可被替换的，那么 TCP 的 AIMD 也是不必要且可被替换的，二者简直太像了！</p>
<h2 id="Bufferbloat-问题"><a href="#Bufferbloat-问题" class="headerlink" title="Bufferbloat 问题"></a>Bufferbloat 问题</h2><p>我不想说 TCP 的 AI&#x2F;MD( 加性增和乘性减 ) 是错误的，我也不敢给出如此决绝的否定，然而，至少我想表达的是，在“安迪 – 比尔定律”的作用下， AI&#x2F;MD 是有问题的！什么问题呢？ Bufferbloat 问题！ 再次重申，路由器携带很大的 Buffer ，是错误的！路由器 Buffer 在够用前提下越小越好，没有 Buffer ，自然就不会 bloat ，本来无一物，何处惹尘埃？！但是不能没有 Buffer…Buffer 到底是用来干什么的？到底多少合适？ Buffer 其实就比较类似我们吃的食物，曾经，在物资贫乏的年代，大家都在追求要多吃，现在营养过剩了，则反过来了，要少吃，实际上，人体根本不需要太多的食物，够用即可，人体大部分的精力要用来做更有意义的事情。同样基于存储 &#x2F; 转发 TCP&#x2F;IP 网络上的路由器其根本任务不是做存储，而是做转发，存储只是在理论上不得已的一个手段。我来解释下是为什么。 路由器的入口和出口分别接收到达的数据包和转发数据包，一台路由器上往往有多个接口同时全双工地进行接收 &#x2F; 转发，数据包的到达频率是统计意义上的，符合泊松分布，然而数据包的发送则是固有的接口速率，这是分组交换网的核心根基！路由器扮演什么角色？它是一个典型的多服务台排队系统！所以路由器必须携带一个 Buffer 用来平滑泊松分布的包到达和固定速率的包发送之间的关系。 那么，设计多大的 Buffer 合适呢？按照排队理论的现成公式计算，够用即可！ 我们考虑极端一点的情况，如果我们把存储队列的 Buffer 设计成无穷大，从而转发延迟也将是无穷大 ( 因为排队延迟会趋向无穷大 ) ，会发生什么？无疑，这台路由器将会变成一个超级存储器，它将会拥有全世界所有的信息！ 爆炸！转发设备变成了存储设备！这就是 Bufferbloat 。注意， Bufferbloat 的恶劣影响并不是会造成丢包，而是会无端增加无辜连接的延迟。这里有个认识上的误区，这种认识在中国人的思维中特别明显。很多人会觉得 Bufferbloat 会造成“丢包反馈延迟增加”，其实丢不丢包是你自己的事，如果你通过 RTT 梯度检测到了 Bufferbloat ，你依旧继续猛发，结果被 AQM 给丢了，那完全是你自己全责，事实上，这个时候大家都应该全局 MD 才对。</p>
<h2 id="真正的危害在于，由于-Bufferbloat-造成了整个大-Buffer-被填充，所有的数据包都将等待一个固有的排队延迟，这会严重影响任意经过的实时类应用！千万别扯什么-QoS-，区分服务，综合服务，流量工程什么的，这些要真有用，-120-救护车就不会被堵在路上了，请注意，事在人为，事在人不为。"><a href="#真正的危害在于，由于-Bufferbloat-造成了整个大-Buffer-被填充，所有的数据包都将等待一个固有的排队延迟，这会严重影响任意经过的实时类应用！千万别扯什么-QoS-，区分服务，综合服务，流量工程什么的，这些要真有用，-120-救护车就不会被堵在路上了，请注意，事在人为，事在人不为。" class="headerlink" title="真正的危害在于，由于 Bufferbloat 造成了整个大 Buffer 被填充，所有的数据包都将等待一个固有的排队延迟，这会严重影响任意经过的实时类应用！千万别扯什么 QoS ，区分服务，综合服务，流量工程什么的，这些要真有用， 120 救护车就不会被堵在路上了，请注意，事在人为，事在人不为。"></a>真正的危害在于，由于 Bufferbloat 造成了整个大 Buffer 被填充，所有的数据包都将等待一个固有的排队延迟，这会严重影响任意经过的实时类应用！千万别扯什么 QoS ，区分服务，综合服务，流量工程什么的，这些要真有用， 120 救护车就不会被堵在路上了，请注意，事在人为，事在人不为。</h2><p>我最喜欢的其实不是 TCP&#x2F;IP 网络什么的，而是城市规划，道路规划以及机械设计 (2002 年我的专业就是机械工程 ) ，我只是在 2004 年的时候初识了路由器，交换机之类的东西，发现自己竟然可以不用挖地铲土浇筑建桥就可以完成一条自己想象中的道路，并且还有那么多的现实场景，这不禁可以让人随时进入禅境 … 实际上，关于城市规划，道路规划以及机械设计也有很多电脑上的模拟器，但问题是它们毕竟只是模拟，是不真实的，而路由器，交换机是真实的，它们就摆在那，登录设备打开 Monitor ，我看到的是真实的东西，这与模拟器有大不同。</p>
<h2 id="在后来的学习中，我发现路由器交换机之上有个-TCP-x2F-IP-，折腾起来一点也不比挖地铲土浇筑建桥来的轻松，但至少除了搬机器，上架，插线之外，没有什么体力活了，也还好。"><a href="#在后来的学习中，我发现路由器交换机之上有个-TCP-x2F-IP-，折腾起来一点也不比挖地铲土浇筑建桥来的轻松，但至少除了搬机器，上架，插线之外，没有什么体力活了，也还好。" class="headerlink" title="在后来的学习中，我发现路由器交换机之上有个 TCP&#x2F;IP ，折腾起来一点也不比挖地铲土浇筑建桥来的轻松，但至少除了搬机器，上架，插线之外，没有什么体力活了，也还好。"></a>在后来的学习中，我发现路由器交换机之上有个 TCP&#x2F;IP ，折腾起来一点也不比挖地铲土浇筑建桥来的轻松，但至少除了搬机器，上架，插线之外，没有什么体力活了，也还好。</h2><p>路由器 Buffer 是什么？以高架路为例，它相当于上匝道前面的位置：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/08/1496239786.png"></p>
<p>图中的汇入区就相当于路由器的 Buffer ，可以看出，如果汇入区过大的话，单位时间内就会有更多的车辆汇入主线，当这个量超过主线流量的时候，就会造成汇入区拥堵，同时大大降低主线的通行能力。这意味着，很多无辜的车辆被堵在了汇入区，主线上的车辆也会由于汇入去有大量车辆汇入而显示拥堵迹象，我给出给具体的例子吧，那就是上海南北高架广中路由南向北上匝道，那个汇入区太长了，足足 200 米 + ，结果造成那个位置几乎持续拥堵，不光广中路上匝道新上南北高架的车辆走不动，就连主路上的车辆也被拥堵，这是什么造成的？这是错觉造成的！广中路上匝道下面准备上高架的司机一看匝道是空的，唰唰全上去了，结果堵在汇入区了 … 如果广中路上匝道的汇入区修的短一些，那么拥堵只会体现在上匝道或者广中路路口，这种拥堵反馈到准备上高架的司机那里，结果就是，要么等，要么绕，至少会阻止他们上主线汇入区去添堵，伤害无辜的流量。 好了，该回到 TCP 了。路由器 Buffer 减小有什么好处呢？好处在于，即使有连接拼命去 AI 添堵，那么丢包会很快到来，并且很快反馈给发送方，于是发送方会执行 MD 以表示忏悔，整个过程中，实时流量不会受到丝毫影响。</p>
<h2 id="劣币驱良币"><a href="#劣币驱良币" class="headerlink" title="劣币驱良币"></a>劣币驱良币</h2><p>BBR 是什么我就不解释了，我写了很多文章。这些文章中没有提到的是， BBR 属于那种即便上匝道汇入区修的再长也不上去添堵的德国好司机。那么结果是什么？你以为这种行为会感动全中国吗？ 错了，这正是中国人所期许的，你谦让，我就流氓。你不去堵，我去堵。结果就是， BBR 即便不去主动添堵，也会被其它人堵在路上， BBR 只能说，这拥堵不是自己造成的，仅此而已。吃亏做好事又不被认可反被讹，这是我们这里常有的事， BBR 到了中国应该入乡随俗，你堵，我也堵！</p>
<h2 id="BBR-开始为网络添堵"><a href="#BBR-开始为网络添堵" class="headerlink" title="BBR 开始为网络添堵"></a>BBR 开始为网络添堵</h2><p>永远不要欺负老实人， BBR 开始做损人不利己的事了。在中国，所有的 TCP 拥塞控制算法都无法被公正评估，请注意，这个修改的意义在于， BBR 对于自身的性能没有任何提升，只是为了损人而已。我跑得慢，我踹你一脚把你整瘸了，你会更慢，这样我就第一了，竞速，竞速而已！ 那么，这件坏事如何来做呢？ 我的第一个版本不公开，事实证明它更有效，起码上了我的版本，别的就没的跑了，但问题是上两个我的版本，他俩双胞胎也会打架打得头破血流 … 本着和谐共存的原则，我从不教人学坏，所以我会删除并忘掉代码，再不提起。我这里给出稍微温和点的版本，兄弟俩打架的情况依然存在，但不严重，问题是，如何区别对方是否是自家人 … 难！ BBR 计算总的最大发送量的时候，不是按照 max-Bandwidth 和 min-RTT 的乘积计算的吗？我这里维护了一个最小 RTT 窗口内的 max-RTT ，只要在一个最小 RTT 窗口内的实际 RTT 不大于上一次的 max-RTT ，我就让 BBR 使用这个实际的 RTT 而不是什么最小的 RTT 。这里的原则在于， BBR 会尝试在排队不丢包的情况下也去主动排队，入乡随俗。 代码非常简单，先为 BBR 增加一个字段，即 max_rtt_us ，与 min_rtt_us 相对，然后修改 update RTT 和 calc CWND 的逻辑：</p>
<h4 id="1-修改-bbr-update-min-rtt"><a href="#1-修改-bbr-update-min-rtt" class="headerlink" title="1. 修改 bbr_update_min_rtt"></a>1. 修改 bbr_update_min_rtt</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* Track min RTT seen in the min_rtt_win_sec filter window: */  </span><br><span class="line">filter_expired = after(tcp_time_stamp,  </span><br><span class="line">                            bbr-&gt;min_rtt_stamp + bbr_min_rtt_win_sec * HZ);  </span><br><span class="line">if (rs-&gt;rtt_us &gt;= 0 &amp;&amp;  </span><br><span class="line">    (rs-&gt;rtt_us &lt;= bbr-&gt;min_rtt_us  filter_expired)) &#123;  </span><br><span class="line">        bbr-&gt;min_rtt_us = rs-&gt;rtt_us;  </span><br><span class="line">        bbr-&gt;min_rtt_stamp = tcp_time_stamp;  </span><br><span class="line">        bbr-&gt;rtt_us = rs-&gt;rtt_us;  </span><br><span class="line">        if (filter_expired)  </span><br><span class="line">            bbr-&gt;max_rtt_us = rs-&gt;rtt_us;  </span><br><span class="line">&#125;  </span><br><span class="line">bbr-&gt;rtt_us = bbr-&gt;min_rtt_us;  </span><br><span class="line">  </span><br><span class="line">if (!filter_expired &amp;&amp; rs-&gt;rtt_us &gt;= 0 &amp;&amp; rs-&gt;rtt_us &lt; bbr-&gt;max_rtt_us) &#123;  </span><br><span class="line">    bbr-&gt;rtt_us = rs-&gt;rtt_us;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-修改-bbr-target-cwnd"><a href="#2-修改-bbr-target-cwnd" class="headerlink" title="2. 修改 bbr_target_cwnd"></a>2. 修改 bbr_target_cwnd</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (inet_csk(sk)-&gt;icsk_ca_state != TCP_CA_Open)  </span><br><span class="line">    w = (u64)bw * bbr-&gt;min_rtt_us;  </span><br><span class="line">else  </span><br><span class="line">    w = (u64)bw * bbr-&gt;rtt_us;</span><br></pre></td></tr></table></figure>

<hr>
<p>最大 RTT 和最小 RTT 之差就是排队延迟，充分利用这个排队延迟去添堵是一件简单的好事，但是如何去对抗 AQM 则是一件非常复杂的事，因为你并不知道 AQM 的行为。以上的讨论均建立在尾部丢包的基础之上，然而现实情况则要面临复杂的 AQM ，在文章《 <a href="http://blog.csdn.net/dog250/article/details/54754784#t12">Linux Kernel 4.9 中 TCP BBR 算法的科普解释</a> 》的“君莫舞，君不见玉环飞燕皆尘土”以及“ BBR 的优势之 – 与 AQM 的关系”两节中，我有阐述 BBR 如何乐观地等待 CUBIC 之流被惩罚以及如何愉快地上位，然而在“广中路上匝道”情形中， CUBIC 并不会被惩罚， BBR 自然也就不会上位，那怎么办，只能添堵，至于 AQM 怎么处理，一视同仁吧。换句话说， BBR 在 CUBIC 以及任意所谓“ TCP 加速者”面前，不必客气，他们抽烟，你就放火。</p>
<h2 id="快递或者网络可靠吗"><a href="#快递或者网络可靠吗" class="headerlink" title="快递或者网络可靠吗"></a>快递或者网络可靠吗</h2><p>现在人们没了互联网就不能生活，这也是一种错觉。 其实互联网本身就是一种错觉，它是一种不得已而为之的错觉！ 去年 1 月我去深圳万象城 ( 之所以说万象城而不是人人乐，我是想说我买的东西有多么高大上，以至于我多么迫不及待地想拥有 ) 买东西，无货，咋办？店主说次日可取，他们从广州拿货。现在问题来了，去一趟广州难吗？为什么我自己不直接去广州买，还要深圳万象城去广州拿货后再卖给我？因为我没时间！如果我有大把的时间又那么喜欢那件物品，我肯定自己去广州了，顺带旅游，然而我缺的正是时间。 快递业务填补了人们的时间间隙。但是快递业务真的可靠吗？ 如果我自己去广州拿货，假设高铁不脱轨，汽车不翻车，自己不被人捅的情况下，一路上我愉快地去，拿到货后愉快地归来，一路上我亲自护送货品，我放心，我踏实。如果交由快递，我不知道快递车会不会翻车，会不会被人抢，里面会不会是假货 … 一切我都不确定，在送到我手里前，我只能祷告 ~ ！但好处在于，这段送货的时间，在我信任快递公司的前提下，我可以做别的工作，如果我不信任快递公司，我只能心急如焚。好在，现在的快递公司，特别是顺丰还算靠谱，你不需要心急如焚。</p>
<h2 id="但是网络，其可靠性完全是另一回事，幸亏人们用了-TCP-，不然就别玩了。字节的复制往往比丝帛的织造更加廉价，所以-TCP-有一个存储重发的机制，发送信息前先存储信息，一段时间没有收到回应，就重发被存储的信息，收到回应则将信息删除，如果发了一批丝绸到远方，一段时间没有反馈，然后再去织一批新的，那代价可就大了去了-…"><a href="#但是网络，其可靠性完全是另一回事，幸亏人们用了-TCP-，不然就别玩了。字节的复制往往比丝帛的织造更加廉价，所以-TCP-有一个存储重发的机制，发送信息前先存储信息，一段时间没有收到回应，就重发被存储的信息，收到回应则将信息删除，如果发了一批丝绸到远方，一段时间没有反馈，然后再去织一批新的，那代价可就大了去了-…" class="headerlink" title="但是网络，其可靠性完全是另一回事，幸亏人们用了 TCP ，不然就别玩了。字节的复制往往比丝帛的织造更加廉价，所以 TCP 有一个存储重发的机制，发送信息前先存储信息，一段时间没有收到回应，就重发被存储的信息，收到回应则将信息删除，如果发了一批丝绸到远方，一段时间没有反馈，然后再去织一批新的，那代价可就大了去了 …"></a>但是网络，其可靠性完全是另一回事，幸亏人们用了 TCP ，不然就别玩了。字节的复制往往比丝帛的织造更加廉价，所以 TCP 有一个存储重发的机制，发送信息前先存储信息，一段时间没有收到回应，就重发被存储的信息，收到回应则将信息删除，如果发了一批丝绸到远方，一段时间没有反馈，然后再去织一批新的，那代价可就大了去了 …</h2><p>我不亲自去广州而去委托快递公司，正是因为我没有时间，那么如果快递公司的快递过程“弥补”了我本应该节省的时间 ( 比如快递员懒惰 ) ，我还不如自己去拿货呢。 网络也一样，如果网络的延迟太高，那还不如用 U 盘拷贝信息，用汽车运输 U 盘，然后交付呢 … 网络和快递一样，就是图快，用专业的运输代替你自己的自取。然而，如果网络中有 Bufferbloat ，那么还不如去自取，甚至去用 U 盘拷贝。 Bufferbloat 让网络丧失了快速传输通道的名声。</p>
<h2 id="新的-Bloat-版本的-BBR-算法"><a href="#新的-Bloat-版本的-BBR-算法" class="headerlink" title="新的 Bloat 版本的 BBR 算法"></a>新的 Bloat 版本的 BBR 算法</h2><p>周日早晨，我登录到了温州老板提供的位于国外的 VPS 机器上，演绎了一个新版的 BBR 。也是添堵版的，在我的 WIFI 环境下碾压了标准的 BBR ，这就好像魔人布欧的分身一样，一个是好人的时候，另一个必须是恶棍。 非常简单：</p>
<h4 id="1-为-bbr-增加一个-minmax-类型的-max-rtt-字段"><a href="#1-为-bbr-增加一个-minmax-类型的-max-rtt-字段" class="headerlink" title="1. 为 bbr 增加一个 minmax 类型的 max_rtt 字段"></a>1. 为 bbr 增加一个 minmax 类型的 max_rtt 字段</h4><h4 id="2-修改-bbr-update-min-rtt-函数"><a href="#2-修改-bbr-update-min-rtt-函数" class="headerlink" title="2. 修改 bbr_update_min_rtt 函数"></a>2. 修改 bbr_update_min_rtt 函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filter_expired = after(tcp_time_stamp,  </span><br><span class="line">                            bbr-&gt;min_rtt_stamp + bbr_min_rtt_win_sec * HZ);  </span><br><span class="line">if (rs-&gt;rtt_us &gt;= 0 &amp;&amp;  </span><br><span class="line">        (rs-&gt;rtt_us &lt;= bbr-&gt;min_rtt_us  filter_expired)) &#123;  </span><br><span class="line">    bbr-&gt;min_rtt_us = rs-&gt;rtt_us;  </span><br><span class="line">    bbr-&gt;min_rtt_stamp = tcp_time_stamp;  </span><br><span class="line">    bbr-&gt;rtt_us = rs-&gt;rtt_us;  </span><br><span class="line">&#125;  </span><br><span class="line">bbr-&gt;rtt_us = rs-&gt;rtt_us;  </span><br><span class="line">rtt_prior = minmax_get(&amp;bbr-&gt;max_rtt);  </span><br><span class="line">// 迄今为止最大的RTT与当前RTT取其小！是不是拿最大RTT和最小RTT求个&quot;平均&quot;什么的更合理呢？  </span><br><span class="line">// 反正我是占点Buffer空间  </span><br><span class="line">bbr-&gt;rtt_us = min(bbr-&gt;rtt_us, rtt_prior);  </span><br><span class="line">  </span><br><span class="line">minmax_running_max(&amp;bbr-&gt;max_rtt, bbr_bw_rtts, bbr-&gt;rtt_cnt, rs-&gt;rtt_us);</span><br></pre></td></tr></table></figure>

<p>我祝愿所有的 TCP 连接早日崩溃，我祝愿互联网越来越拥堵，最终不可用。</p>
<h2 id="为什么-BBR-是合理的"><a href="#为什么-BBR-是合理的" class="headerlink" title="为什么 BBR 是合理的"></a>为什么 BBR 是合理的</h2><p>AIMD 是基于丢包的拥塞控制算法的根基，这必然会 Buffer bloat ，解决之道就是不采用基于丢包的算法，而采用基于时延的算法，但是 …. 但是只要有一个基于丢包的算法还跑在互联网上，那么所有基于时延的算法都会集体退让 … 这是基于时延算法弊端，既然它基于时延而不是丢包，那么它就是注定要吃亏的。正确的做法是什么？ BBR 无视丢包 ( 也并非绝对， BBR 在处理非 Open 状态时还是有措施的 ) ，无视时延 ( 也非绝对， BBR 只是无视了 RTT 的瞬时变化值 ) ，采用了实时采集并保留时间窗口的策略，这初看起来是吃亏的算法，与基于时延的算法无异，但是 BBR 拥有 Probe More 和 Drain Less 过程，这非常合理。</p>
<p>合理的并不意味着是可用的。我依然祝愿所有的 TCP 连接早日崩溃，我祝愿互联网越来越拥堵，最终变得不可用。我有一个梦想，每个人抡起铁锤去炼钢，少说多做，最好不说。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>BBR优化教程</tag>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>无需更改DNS，免费使用Cloudflare的DNS解析</title>
    <url>/2021/11/14/%E6%97%A0%E9%9C%80%E6%9B%B4%E6%94%B9dns%EF%BC%8C%E5%85%8D%E8%B4%B9%E4%BD%BF%E7%94%A8cloudflare%E7%9A%84dns%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p><a href="https://dns.cao.by/">https://dns.cao.by/</a></p>
<p><a href="https://su.vv1234.cn/">https://su.vv1234.cn/</a></p>
<p><a href="http://cdn.wangmou.com/">http://cdn.wangmou.com/</a></p>
<p><a href="https://cdn.imtqy.com/">https://cdn.imtqy.com/</a></p>
<p><a href="https://cf.moezx.cc/v2/">https://cf.moezx.cc/v2/</a></p>
<p><a href="https://cdn.wzfou.com/">https://cdn.wzfou.com/</a></p>
<p><a href="https://cdn.moeelf.com/">https://cdn.moeelf.com/</a></p>
<p><a href="http://dns.0902.org/">http://dns.0902.org/</a></p>
<p><a href="http://www.hadesdns.com/">http://www.hadesdns.com/</a></p>
<p><a href="http://cdn.xchdata.com/">http://cdn.xchdata.com/</a></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>DNS</tag>
        <tag>Cloudflare</tag>
        <tag>DDNS</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器端口转发-Haproxy安装及端口转发配置</title>
    <url>/2019/04/12/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91-haproxy%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://www.centos.bz/tag/haproxy/">haproxy</a>是一款功能强大、灵活好用反代软件，提供了高可用、负载均衡、后端服务器代理的功能，它在7层负载均衡方面的功能很强大(支持<a href="https://www.centos.bz/tag/cookie/">cookie</a> track, header <a href="https://www.centos.bz/tag/rewrite/">rewrite</a>等等)，支持双机热备，支持虚拟主机，拥有非常不错的服务器健康检查功能，当其代理的后端服务器出现故障， HAProxy会自动将该服务器摘除，故障恢复后再自动将该服务器加入;同时还提供直观的监控页面，可以清晰实时的监控服务集群的运行状况。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>1、安装haproxy</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install haproxy</span><br></pre></td></tr></table></figure>

<p>2、然后清空haproxy.cfg文件内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/haproxy/</span><br><span class="line">&gt; haproxy.cfg</span><br></pre></td></tr></table></figure>

<p>3、把下面的内容写入到haproxy.cfg文件中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">global</span><br><span class="line">ulimit-n  51200</span><br><span class="line">defaults</span><br><span class="line">log global</span><br><span class="line">mode    tcp</span><br><span class="line">option  dontlognull</span><br><span class="line">timeout connect 1000ms</span><br><span class="line">timeout client 150000ms</span><br><span class="line">timeout server 150000ms</span><br><span class="line">listen status</span><br><span class="line">bind 0.0.0.0:1080</span><br><span class="line">mode http</span><br><span class="line">log global</span><br><span class="line">stats refresh 30s</span><br><span class="line">stats uri /admin?stats</span><br><span class="line">stats realm Private lands</span><br><span class="line">stats auth admin:password</span><br><span class="line">stats hide-version</span><br><span class="line">frontend ssin</span><br><span class="line">bind *:1000-2000</span><br><span class="line">default_backend ssout</span><br><span class="line">backend ssout</span><br><span class="line">server server1 11.22.33.44 maxconn 204800</span><br></pre></td></tr></table></figure>

<p>说明：bind *:1000-2000这里指的是1000-2000端口，11.22.33.44为需要转发的服务器的IP。</p>
<p>4、启动haproxy服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service haproxy start</span><br></pre></td></tr></table></figure>

<p>最后别忘了在你的服务器里开放转发的端口。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Haproxy</tag>
        <tag>转发</tag>
      </tags>
  </entry>
  <entry>
    <title>本站上线KMS服务~一句命令激活windows/office</title>
    <url>/2018/12/24/%E6%9C%AC%E7%AB%99%E4%B8%8A%E7%BA%BFkms%E6%9C%8D%E5%8A%A1%E4%B8%80%E5%8F%A5%E5%91%BD%E4%BB%A4%E6%BF%80%E6%B4%BBwindows-office/</url>
    <content><![CDATA[<p>KMS 服务，用于在线激活 VOL 版本的 Windows 和 Office。 激活的前提是你的系统是批量授权版本，即 VL 版，一般企业版都是 VL 版。而 VL 版本的镜像一般内置 GVLK key，用于 KMS 激活。 下面列表里面含有的产品的 VL 版本或者能使用 key 进入 KMS 通道的产品，都支持使用 KMS 激活。</p>
<p>Office 2019 &amp; Office 2016：<a href="https://docs.microsoft.com/en-us/DeployOffice/vlactivation/gvlks">https://docs.microsoft.com/en-us/DeployOffice/vlactivation/gvlks</a> Office 2013：<a href="https://technet.microsoft.com/zh-cn/library/dn385360.aspx">https://technet.microsoft.com/zh-cn/library/dn385360.aspx</a> Office 2010：<a href="https://technet.microsoft.com/zh-cn/library/ee624355(v=office.14).aspx">https://technet.microsoft.com/zh-cn/library/ee624355(v=office.14).aspx</a> Windows：<a href="https://docs.microsoft.com/zh-cn/windows-server/get-started/kmsclientkeys">https://docs.microsoft.com/zh-cn/windows-server/get-started/kmsclientkeys</a></p>
<p>使用管理员权限运行 cmd 查看系统版本，命令如下：</p>
<p>wmic os get caption</p>
<p>使用管理员权限运行 cmd 安装从上面列表得到的 key，命令如下：</p>
<p>slmgr &#x2F;ipk xxxxx-xxxxx-xxxxx-xxxxx-xxxxx</p>
<p>使用管理员权限运行 cmd 将 KMS 服务器地址设置为你自己的 IP 或 域名，后面最好再加上端口号（:1688），命令如下：</p>
<p>slmgr &#x2F;skms kms.jarod.vip</p>
<p><strong>注意：</strong>本脚本所做的工作就是此步骤。当你的 KMS 服务出于启动状态，那么此处就可以设置为你自己的 KMS 服务器地址。 使用管理员权限运行 cmd 手动激活系统，命令如下：</p>
<p>slmgr &#x2F;ato</p>
<p>关于 Office 的激活，要求必须是 VOL 版本，否则无法激活。 找到你的 Office 安装目录，32 位默认一般为 C:\Program Files (x86)\Microsoft Office\Office16 64 位默认一般为 C:\Program Files\Microsoft Office\Office16 Office16 是 Office 2016，Office15 就是 Office 2013，Office14 就是 Office 2010。 打开以上所说的目录，应该有个 OSPP.VBS 文件。 使用管理员权限运行 cmd 进入 Office 目录，命令如下：</p>
<p>cd “C:\Program Files (x86)\Microsoft Office\Office16”</p>
<p>使用管理员权限运行 cmd 注册 KMS 服务器地址：</p>
<p>cscript ospp.vbs &#x2F;sethst:kms.jarod.vip</p>
<p>使用管理员权限运行 cmd 手动激活 Office，命令如下：</p>
<p>cscript ospp.vbs &#x2F;act</p>
<p><strong>注意：</strong> KMS 方式激活，其有效期只有 180 天。 每隔一段时间系统会自动向 KMS 服务器请求续期，请确保你自己的 KMS 服务正常运行。</p>
<h3 id="常见错误的对策"><a href="#常见错误的对策" class="headerlink" title="常见错误的对策"></a>常见错误的对策</h3><p>如果遇到在执行过程报错，请按以下步骤检查： 1，你的 KMS 服务器是否挂了？ 2，你的 KMS 服务是否正常开启？ 3，你的系统或 Office 是否为批量 VL 版本？ 4，你的系统或 Office 是否修改过 Key 或未安装 GVLK Key？ 5，你是否以管理员权限运行 cmd？ 6，你的网络连接是否正常？ 7，你的本地 DNS 解析是否正常？ 8，如果你排除了以上的对策，那请根据错误提示代码自行搜索原因。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>KMS</tag>
      </tags>
  </entry>
  <entry>
    <title>用alpine基于smartdns建立本地DNS服务器</title>
    <url>/2022/09/01/%E7%94%A8alpine%E5%9F%BA%E4%BA%8Esmartdns%E5%BB%BA%E7%AB%8B%E6%9C%AC%E5%9C%B0dns%E6%9C%8D%E5%8A%A1%E5%99%A8-2/</url>
    <content><![CDATA[<p>因为是虚拟机下使用，下载虚拟机专用的镜像</p>
<p><a href="https://alpinelinux.org/downloads/">https://alpinelinux.org/downloads/</a>    Virtual板块下载86_64镜像</p>
<p>当前 <a href="http://dl-cdn.alpinelinux.org/alpine/v3.12/releases/x86/_64/alpine-virt-3.12.1-x86/_64.iso">http://dl-cdn.alpinelinux.org/alpine/v3.12/releases/x86\_64/alpine-virt-3.12.1-x86\_64.iso</a></p>
<p>创建虚拟机 当前alpine内核是5.4，虚拟机创建及初始化过程略过</p>
<p>apk update &amp;&amp; apk upgrade &amp;&amp; apk add sudo nano</p>
<p>下载并安装smartdns  from <a href="https://github.com/pymumu/smartdns">https://github.com/pymumu/smartdns</a></p>
<p>wget <a href="https://github.com/pymumu/smartdns/releases/download/Release33/smartdns.1.2020.09.08/-2235.x86/_64/-linux/-all.tar.gz">https://github.com/pymumu/smartdns/releases/download/Release33/smartdns.1.2020.09.08\-2235.x86\_64\-linux\-all.tar.gz</a><br>tar xvf smartdns.1.2020.09.08-2235.x86_64-linux-all.tar.gz &amp;&amp; cd smartdns &amp;&amp; chmod +x .&#x2F;install &amp;&amp; mkdir mkdir &#x2F;etc&#x2F;default &amp;&amp; .&#x2F;install -i</p>
<p>rc-service smartdns stop</p>
<p>mv &#x2F;etc&#x2F;smartdns&#x2F;smartdns.conf &#x2F;etc&#x2F;smartdns&#x2F;smartdns.conf.bak<br>nano &#x2F;etc&#x2F;smartdns&#x2F;smartdns.conf<br>server-name smartdns<br>bind :53 bind-tcp :53 cache-size 1536 prefetch-domain yes<br>serve-expired yes<br>log-level info<br>server-tls 208.67.222.222:853<br>#server-https <a href="https://dns.twnic.tw/dns-query">https://dns.twnic.tw/dns-query</a><br>server-tls 45.32.55.94:853 server-https <a href="https://cloudflare/-dns.com/dns/-query">https://cloudflare\-dns.com/dns\-query</a><br>server-https <a href="https://neatdns.ustclug.org/resolve">https://neatdns.ustclug.org/resolve</a><br>server-https <a href="https://doh.dns.sb/dns/-query">https://doh.dns.sb/dns\-query</a><br>server-https <a href="https://public.dns.iij.jp/dns/-query">https://public.dns.iij.jp/dns\-query</a><br>server-https <a href="https://dns.rubyfish.cn/dns/-query">https://dns.rubyfish.cn/dns\-query</a><br>server-https <a href="https://dns.dns/-over/-https.com/dns/-query">https://dns.dns\-over\-https.com/dns\-query</a><br>server-https <a href="https://jp.tiar.app/dns/-query">https://jp.tiar.app/dns\-query</a><br>server-https <a href="https://i.233py.com/dns/-query">https://i.233py.com/dns\-query</a><br>server 223.5.5.5:53 server 114.114.114.114:53 conf-file &#x2F;tmp&#x2F;whitelist.conf<br>conf-file &#x2F;tmp&#x2F;blacklist.conf<br>ipset &#x2F;tracker.publicbt.com&#x2F;block<br>ipset &#x2F;tracker.publicbt.com&#x2F;b- address &#x2F;tracker.publicbt.com&#x2F;- address &#x2F;publicbt.com&#x2F;- address &#x2F;<a href="http://www.publicbt.com/-">www.publicbt.com/-</a> address &#x2F;*.publicbt.com&#x2F;-</p>
<p>取消DHCP DNS自动覆盖</p>
<p>nano &#x2F;usr&#x2F;share&#x2F;udhcpc&#x2F;default.script 用#注释RESOLV_CONF=“&#x2F;etc&#x2F;resolv.conf”</p>
<p>修改本地DNS为127.0.0.1</p>
<p>nano &#x2F;etc&#x2F;resolv.conf<br>nameserver 127.0.0.1</p>
<p>启动smartdns并测试</p>
<p>&#x2F;usr&#x2F;sbin&#x2F;smartdns 测试 nslookup -querytype=ptr smartdns</p>
<p>开机启动，默认的服务没法启动，未知</p>
<p>&#x2F;usr&#x2F;sbin&#x2F;smartdns</p>
<p>nano &#x2F;etc&#x2F;local.d&#x2F;init_nextcloud.start #!&#x2F;bin&#x2F;sh<br>&#x2F;usr&#x2F;sbin&#x2F;smartdns<br>chmod +x &#x2F;etc&#x2F;local.d&#x2F;init_nextcloud.start</p>
<p>rc-update add local</p>
<p>添加守护</p>
<p>apk add monit<br>mv &#x2F;etc&#x2F;monitrc &#x2F;etc&#x2F;monitrc.bak<br>nano &#x2F;etc&#x2F;monitrc set daemon 10   #10s循环监控<br>set logfile syslog<br>check process smartdns with pidfile &#x2F;var&#x2F;run&#x2F;smartdns.pid<br>start program = “&#x2F;usr&#x2F;sbin&#x2F;smartdns” with timeout 10 seconds<br>stop program = “&#x2F;usr&#x2F;bin&#x2F;killall smartdns” with timeout 10 seconds<br>chmod 0700 &#x2F;etc&#x2F;monitrc 测试守护配置 monit -t 启动 rc-service monit start<br>monit start all #忽略有个报错<br>添加启动 rc-update add monit</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>DNS</tag>
        <tag>alpine</tag>
        <tag>smartdns</tag>
      </tags>
  </entry>
  <entry>
    <title>杂七杂八的命令和脚本</title>
    <url>/2018/11/03/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E7%9A%84%E5%91%BD%E4%BB%A4%E5%92%8C%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>宝塔开心版</p>
<p>1、安装免费版宝塔面板（v5.9）</p>
<p>2、运行脚本（Centos）</p>
<p>1</p>
<p>2</p>
<p>wget <a href="https://raw.githubusercontent.com/zhouxudong666/-/master/install">https://raw.githubusercontent.com/zhouxudong666/-/master/install</a></p>
<p>sh install</p>
<p>Debian（我稍微改了一下）</p>
<p>1</p>
<p>2</p>
<p>wget —no–check–certificate <a href="https://raw.githubusercontent.com/lpl2002/-/master/install">https://raw.githubusercontent.com/lpl2002/-/master/install</a></p>
<p>bash install</p>
<h1 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法<a href="https://xpsss.com/wp-content/uploads/2018/09/panel.tar.gz">：</a></h1><h1 id="1-免费版升级专业版-2-删除原panel文件夹-3-下载我提供的panel文件夹压缩包-4-解压到-x2F-www-x2F-server-5-x2F-etc-x2F-init-d-x2F-bt-restart-执行这个重启面板-6-开心使用"><a href="#1-免费版升级专业版-2-删除原panel文件夹-3-下载我提供的panel文件夹压缩包-4-解压到-x2F-www-x2F-server-5-x2F-etc-x2F-init-d-x2F-bt-restart-执行这个重启面板-6-开心使用" class="headerlink" title="1.免费版升级专业版 2.删除原panel文件夹 3.下载我提供的panel文件夹压缩包 4.解压到&#x2F;www&#x2F;server 5.&#x2F;etc&#x2F;init.d&#x2F;bt restart 执行这个重启面板 6.开心使用"></a>1.免费版升级专业版 2.删除原panel文件夹 3.下载我提供的panel文件夹压缩包 4.解压到&#x2F;www&#x2F;server 5.&#x2F;etc&#x2F;init.d&#x2F;bt restart 执行这个重启面板 6.开心使用</h1>]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>申请CloudFlare Partner并搭建面板，使用CName接入CloudFlare</title>
    <url>/2018/10/03/%E7%94%B3%E8%AF%B7cloudflare-partner%E5%B9%B6%E6%90%AD%E5%BB%BA%E9%9D%A2%E6%9D%BF%EF%BC%8C%E4%BD%BF%E7%94%A8cname%E6%8E%A5%E5%85%A5cloudflare/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CloudFlare恐怕无人不知无人不晓了吧？大名鼎鼎的CDN服务商，拥有众多数据节点，CDN加速效果极其出色（当然说的是在国外，国内另算）。</p>
<p><code>CloudFlare</code>拥有免费套餐，对于咱们普通站长来说，免费套餐是绰绰有余的，当然，如果想自己指定亚洲节点，那就得升级套餐了，套餐费用可不便宜！</p>
<p><code>CloudFlare</code>无论是作为CDN，还是为了隐藏真实IP，其效果都是很不错的，不过要使用<code>CloudFlare</code>，您就得将自己的域名NS服务器修改为<code>CloudFlare</code>指定的NS服务器才可以，也就是说，要使用<code>CloudFlare</code>的免费套餐，就必须使用<code>CloudFlare</code>的免费NS服务！</p>
<p>而对于很多站长来说，可能并不希望自己的域名存放到<code>CloudFlare</code>的NS服务器上，毕竟它又不支持分线路解析不是？</p>
<p>那如果想要不使用<code>CloudFlare</code>的NS服务器的情况下，来使用<code>CloudFlare</code>的免费CDN呢？一般来说就得升级套餐，然后使用<code>CName</code>模式接入，不过价格咱们普通站长绝对承受不起。</p>
<p>除此之外，就是使用<code>CloudFlare</code>提供的<code>Partner</code>咯，也就是合作伙伴接口，这个接口提供了一个<code>API</code>，使用这个<code>API</code>就可以通过收费套餐才可以使用的<code>CName</code>模式接入<code>CloudFlare</code>，当我们通过<code>CName</code>接入<code>CloudFlare</code>后，剩下的自选亚洲节点什么的，就自己去解决吧，哈哈哈！</p>
<h2 id="CloudFlare-Partner申请"><a href="#CloudFlare-Partner申请" class="headerlink" title="CloudFlare Partner申请"></a>CloudFlare Partner申请</h2><p>要使用<code>Partner</code>，咱们必须要向<code>CloudFlare</code>申请，等待<code>CloudFlare</code>通过后才可以使用，不过这是对于像自建<code>Partner</code>的朋友来说，如果不想自建，而直接使用他人提供的，那就无需申请，只要拥有一个<code>CloudFlare</code>的账号即可，直接使用第三方提供的平台，请直接看本文最后部分。</p>
<p><code>Partner</code>的申请很简单，也很困难，说简单是填写的内容不多，说困难则是通过的几率！</p>
<p>首先打开<a href="https://www.cloudflare.com/partners/become-a-partner/%EF%BC%8C%E6%95%B4%E4%B8%AA%E7%94%B3%E8%AF%B7%E7%95%8C%E9%9D%A2%E7%9C%8B%E4%B8%8B%E5%9B%BE%EF%BC%9A">https://www.cloudflare.com/partners/become-a-partner/，整个申请界面看下图：</a></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/007hMXjlgy1fuxh8owsfdj30co0ho75o.jpg" alt="01.png" title="01.png"></p>
<p>这里有几点需要注意，否则不容易通过：</p>
<blockquote>
<ol>
<li>所有内容请使用英文！</li>
<li>公司类型最好选择<code>VPS</code>类。</li>
<li>网站打开后必须是与公司类型相关的。</li>
<li>联系邮箱请使用域名邮箱，且最好使用<code>admin@domain.com</code>格式。</li>
<li>申请理由最好说明<code>自己客户大多为中国客户，需要使用CF，但由于那啥啥啥原因，很多CF公司的NS服务器都被屏蔽了，所以需要申请Partner给客户使用</code>。</li>
<li>最好不要使用国内企业邮箱系统，这里是康康的教训，因为康康曾经提交过申请，而后一直没有任何回复，后来过了一段时间后再次提交申请，收到一封邮件说我已经申请通过了的，而且还说看了我账号一直没有使用，这才发现是国内企业邮箱收不到邮件所致。</li>
</ol>
</blockquote>
<p>提交申请后请耐心等待，通过后会有一封邮件要求你设置密码，点击链接后会打开一个界面，在其中输入要设置的登录密码。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/007hMXjlgy1fuxhegu7dsj30az0el0t2.jpg" alt="02.png" title="02.png"></p>
<p>设置完成后打开<a href="https://partners.cloudflare.com/login%E7%99%BB%E5%BD%95%E5%88%B0%60Partner%60%E7%B3%BB%E7%BB%9F%E4%B8%AD%EF%BC%8C%E5%B9%B6%E5%AE%8C%E5%96%84%E4%B8%80%E4%BA%9B%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E3%80%82">https://partners.cloudflare.com/login登录到`Partner`系统中，并完善一些个人信息。</a></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/007hMXjlgy1fuxhg084mlj30p50l00u5.jpg" alt="03.png" title="03.png"></p>
<p>一直持续下一步，最后生成一个<code>API Key</code>。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/007hMXjlgy1fuxhhhp13zj30r205uwed.jpg" alt="04.png" title="04.png"></p>
<p>这样咱们的<code>Partner</code>就算申请并配置完成了，接下来咱们将搭建一个<code>Partner</code>的接入面板。</p>
<h2 id="面板搭建"><a href="#面板搭建" class="headerlink" title="面板搭建"></a>面板搭建</h2><p><code>Partner</code>的接入使用的是<code>API</code>接入，可以使用命令行、<code>Python</code>以及各种方式进行接入，但最直观最方便的还是操作面板，毕竟可视化对于命令行来说占的优势不是一点两点的！</p>
<p>这里的面板搭建，选择使用<a href="https://github.com/ZE3kr/Cloudflare-CNAME-Setup">Cloudflare-CNAME-Setup</a>，作者为郭泽宇，因为曾经使用过这款面板，还挺不错的！</p>
<p><code>Cloudflare-CNAME-Setup</code>使用<code>PHP</code>开发，所以咱们需要配置<code>PHP</code>才能使用。</p>
<p>依然使用最喜爱的<code>FreeBSD</code>系统进行搭建，系统安装完成后直接执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pkg install openssl curl nginx php72 php72-opcache php72-mbstring php72-filter php72-session php72-openssl php72-curl php72-pecl-APCu php72-json php72-gettext</span><br></pre></td></tr></table></figure>

<p>接着配置目录并启动即可，具体的<code>FreeBSD</code>下配置<code>PHP</code>运行环境请看康康之前的文章，都是老三步：优化、安装、SSL</p>
<p> </p>
<p>环境搭建完成后，至<a href="https://github.com/ZE3kr/Cloudflare-CNAME-Setup">Cloudflare-CNAME-Setup</a>下载最新版本面板代码，并将<code>config.example.php</code>更名为<code>config.php</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">define(&#x27;HOST_KEY&#x27;, &#x27;Partner中生成的API Key&#x27;);</span><br><span class="line">define(&#x27;HOST_MAIL&#x27;, &#x27;通过审核的Partner邮箱，也就是申请时的邮箱&#x27;);</span><br></pre></td></tr></table></figure>

<p>最后打开网站，已经可以看到面板界面了！</p>
<h2 id="面板使用"><a href="#面板使用" class="headerlink" title="面板使用"></a>面板使用</h2><p><code>Cloudflare-CNAME-Setup</code>面板的使用很方便，并没有管理后台，只有客户界面。</p>
<p>如果您不想自己搭建，可以使用面板作者搭建的也行。 作者搭建的面板地址：<a href="https://cf.tlo.xyz/">https://cf.tlo.xyz</a></p>
<p>打开面板后，会显示一个登陆界面，要求输入<code>CloudFlare</code>账号密码进行登录。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/007hMXjlgy1fuxhsiuldoj30bn0azmxb.jpg" alt="05.png" title="05.png"></p>
<p>这是由于<code>Partner</code>的原因，必须使用<code>CloudFlare</code>的账号密码进行登录，不过放心，面板并没有保存账号信息。</p>
<p>咱们使用<code>CloudFlare</code>的账号密码登录进入面板（记住是<code>CloudFlare</code>的账号密码，不是<code>Partner</code>的账号密码），若存在域名的，会显示当前账号下的域名列表。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/007hMXjlgy1fuxhxfqghij30rl05xjrc.jpg" alt="06.png" title="06.png"></p>
<p>首先咱们将自己需要使用<code>CDN</code>的域名添加进去，这里注意，该域名必须在<code>CloudFlare</code>或<code>百度云加速</code>中不能存在，若存在请先删除，且必须添加顶级域（也就是没有www.的那个）。</p>
<p>添加完成后出现<code>NS</code>设置面板，这里有三种接入方式，一种为<code>NS</code>接入，也就是<code>CloudFlare</code>默认的接入方式，咱们肯定不用；第二种为<code>CName</code>接入，这是咱们需要使用的；第三种为<code>A</code>记录接入，不太推荐这种方式，因为其实<code>CloudFlare</code>是不允许使用<code>A</code>记录进行接入的！</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/007hMXjlgy1fuxi1ngbtmj30qr0biwek.jpg" alt="08.png" title="08.png"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/007hMXjlgy1fuxi1qs1pmj30jx0l2jrp.jpg" alt="09.png" title="09.png"></p>
<p>当然，无论使用什么方式接入，首先咱们需要在面板中添加咱们的解析指向，比如需要让<code>lovekk.org</code>这个顶级域名指向<code>123.123.123.123</code>这个IP地址，<code>www.lovekk.org</code>这个子域名指向<code>124.124.124.124</code>这个IP地址，那么设置如下（注意一定要开启<code>CDN</code>选项）：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/007hMXjlgy1fuxi5xmrnbj30py0jhmx8.jpg" alt="10.png" title="10.png"></p>
<p>添加完成后返回面板，可以看到解析添加记录，而且发现<code>CName</code>接入方式下已经出现了指向地址。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/007hMXjlgy1fuxi63mq46j30pt0dmglu.jpg" alt="11.png" title="11.png"></p>
<p>OK，面板的域名部分就完成了，接下来只需要回到域名的<code>NS</code>服务器中，将对应的域名<code>CName</code>指向给出的地址就完成了<code>CDN</code>的接入。</p>
<p>比如按照上面的图示，康康就需要到<code>lovekk.org</code>的<code>NS</code>服务器中，做如下解析记录：</p>
<p><code>lovekk.org</code>域名，清除所有的<code>@</code>前缀的<code>A</code>或<code>CName</code>记录，并添加一条<code>@</code>前缀的<code>CName</code>记录，指向<code>lovekk.org.cdn.cloudflare.net</code>。</p>
<p><code>www.lovekk.org</code>域名，清除所有的<code>www</code>前缀的<code>A</code>或<code>CName</code>记录，并添加一条<code>www</code>前缀的<code>CName</code>记录，指向<code>www.lovekk.org.cdn.cloudflare.net</code>。</p>
<p>接下来咱们等待解析记录生效即可。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Cloudflare</tag>
        <tag>CloudFlare Partner</tag>
        <tag>CName</tag>
      </tags>
  </entry>
  <entry>
    <title>用alpine基于smartdns建立本地DNS服务器</title>
    <url>/2021/11/26/%E7%94%A8alpine%E5%9F%BA%E4%BA%8Esmartdns%E5%BB%BA%E7%AB%8B%E6%9C%AC%E5%9C%B0dns%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>因为是虚拟机下使用，下载虚拟机专用的镜像</p>
<p><a href="https://alpinelinux.org/downloads/">https://alpinelinux.org/downloads/</a>    Virtual板块下载86_64镜像</p>
<p>当前 <a href="http://dl-cdn.alpinelinux.org/alpine/v3.12/releases/x86/_64/alpine-virt-3.12.1-x86/_64.iso">http://dl-cdn.alpinelinux.org/alpine/v3.12/releases/x86\_64/alpine-virt-3.12.1-x86\_64.iso</a></p>
<p>创建虚拟机 当前alpine内核是5.4，虚拟机创建及初始化过程略过</p>
<p>apk update &amp;&amp; apk upgrade &amp;&amp; apk add sudo nano</p>
<p>下载并安装smartdns  from <a href="https://github.com/pymumu/smartdns">https://github.com/pymumu/smartdns</a></p>
<p>wget <a href="https://github.com/pymumu/smartdns/releases/download/Release33/smartdns.1.2020.09.08-2235.x86/_64-linux-all.tar.gz">https://github.com/pymumu/smartdns/releases/download/Release33/smartdns.1.2020.09.08-2235.x86\_64-linux-all.tar.gz</a><br>tar xvf smartdns.1.2020.09.08-2235.x86_64-linux-all.tar.gz &amp;&amp; cd smartdns &amp;&amp; chmod +x .&#x2F;install &amp;&amp; mkdir mkdir &#x2F;etc&#x2F;default &amp;&amp; .&#x2F;install -i</p>
<p>rc-service smartdns stop</p>
<p>mv &#x2F;etc&#x2F;smartdns&#x2F;smartdns.conf &#x2F;etc&#x2F;smartdns&#x2F;smartdns.conf.bak<br>nano &#x2F;etc&#x2F;smartdns&#x2F;smartdns.conf<br>server-name smartdns<br>bind :53<br>bind-tcp :53<br>cache-size 1536<br>prefetch-domain yes<br>serve-expired yes<br>log-level info<br>server-tls 208.67.222.222:853<br>#server-https <a href="https://dns.twnic.tw/dns-query">https://dns.twnic.tw/dns-query</a><br>server-tls 45.32.55.94:853<br>server-https <a href="https://cloudflare-dns.com/dns-query">https://cloudflare-dns.com/dns-query</a><br>server-https <a href="https://neatdns.ustclug.org/resolve">https://neatdns.ustclug.org/resolve</a><br>server-https <a href="https://doh.dns.sb/dns-query">https://doh.dns.sb/dns-query</a><br>server-https <a href="https://public.dns.iij.jp/dns-query">https://public.dns.iij.jp/dns-query</a><br>server-https <a href="https://dns.rubyfish.cn/dns-query">https://dns.rubyfish.cn/dns-query</a><br>server-https <a href="https://dns.dns-over-https.com/dns-query">https://dns.dns-over-https.com/dns-query</a><br>server-https <a href="https://jp.tiar.app/dns-query">https://jp.tiar.app/dns-query</a><br>server-https <a href="https://i.233py.com/dns-query">https://i.233py.com/dns-query</a><br>server 223.5.5.5:53<br>server 114.114.114.114:53<br>conf-file &#x2F;tmp&#x2F;whitelist.conf<br>conf-file &#x2F;tmp&#x2F;blacklist.conf<br>ipset &#x2F;tracker.publicbt.com&#x2F;block<br>ipset &#x2F;tracker.publicbt.com&#x2F;b-<br>address &#x2F;tracker.publicbt.com&#x2F;-<br>address &#x2F;publicbt.com&#x2F;-<br>address &#x2F;<a href="http://www.publicbt.com/-">www.publicbt.com/-</a><br>address &#x2F;*.publicbt.com&#x2F;-</p>
<p>取消DHCP DNS自动覆盖</p>
<p>nano &#x2F;usr&#x2F;share&#x2F;udhcpc&#x2F;default.script<br>用#注释RESOLV_CONF&#x3D;”&#x2F;etc&#x2F;resolv.conf”</p>
<p>修改本地DNS为127.0.0.1</p>
<p>nano &#x2F;etc&#x2F;resolv.conf<br>nameserver 127.0.0.1</p>
<p>启动smartdns并测试</p>
<p>&#x2F;usr&#x2F;sbin&#x2F;smartdns<br>测试<br>nslookup -querytype&#x3D;ptr smartdns</p>
<p>开机启动，默认的服务没法启动，未知</p>
<p>&#x2F;usr&#x2F;sbin&#x2F;smartdns</p>
<p>nano &#x2F;etc&#x2F;local.d&#x2F;init_nextcloud.start<br>#!&#x2F;bin&#x2F;sh<br>&#x2F;usr&#x2F;sbin&#x2F;smartdns<br>chmod +x &#x2F;etc&#x2F;local.d&#x2F;init_nextcloud.start</p>
<p>rc-update add local</p>
<p>添加守护</p>
<p>apk add monit<br>mv &#x2F;etc&#x2F;monitrc &#x2F;etc&#x2F;monitrc.bak<br>nano &#x2F;etc&#x2F;monitrc<br>set daemon  10   #10s循环监控<br>set logfile syslog<br>check process smartdns with pidfile &#x2F;var&#x2F;run&#x2F;smartdns.pid<br>start program &#x3D; “&#x2F;usr&#x2F;sbin&#x2F;smartdns” with timeout 10 seconds<br>stop program &#x3D; “&#x2F;usr&#x2F;bin&#x2F;killall smartdns” with timeout 10 seconds<br>chmod 0700 &#x2F;etc&#x2F;monitrc<br>测试守护配置<br>monit  -t<br>启动<br>rc-service monit start<br>monit start all<br>#忽略有个报错<br>添加启动<br>rc-update add monit</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>smartdns</tag>
      </tags>
  </entry>
  <entry>
    <title>短网址程序YOURLS安装配置与设置中文</title>
    <url>/2018/01/30/%E7%9F%AD%E7%BD%91%E5%9D%80%E7%A8%8B%E5%BA%8Fyourls%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%96%87/</url>
    <content><![CDATA[<p>YOURLS是一款使用PHP + Mysql开发的短链接程序，相比公共短网址好处是数据掌握在自己手中，可控性更高。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/01/secureurl_520.jpg"></p>
<h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h3><p>YOURLS免费开源，可以在<a href="https://github.com/YOURLS/YOURLS/releases" title="Releases · YOURLS/YOURLS">Releases · YOURLS&#x2F;YOURLS</a>下载最新版本，解压后放到站点根目录，并将<code>config-sample.php</code>更名为<code>config.php</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">mv user/config-sample.php user/config.php</span><br></pre></td></tr></table></figure>

<h3 id="2-配置MySQL数据库"><a href="#2-配置MySQL数据库" class="headerlink" title="2.配置MySQL数据库"></a>2.配置MySQL数据库</h3><p>需要先新建一个MySQL数据库，并设置好账号、密码（略过），然后修改<code>user/config.php</code>配置文件，填写正确的MySQL信息，配置信息如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#数据库用户名</span><br><span class="line">define( &#x27;YOURLS_DB_USER&#x27;, &#x27;yourls&#x27; );</span><br><span class="line"></span><br><span class="line">#数据库密码</span><br><span class="line">define( &#x27;YOURLS_DB_PASS&#x27;, &#x27;xxxxxxxx&#x27; );</span><br><span class="line"></span><br><span class="line">#数据库名</span><br><span class="line">define( &#x27;YOURLS_DB_NAME&#x27;, &#x27;yourls&#x27; );</span><br><span class="line"></span><br><span class="line">#数据库连接地址</span><br><span class="line">define( &#x27;YOURLS_DB_HOST&#x27;, &#x27;localhost&#x27; );</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-设置用户名密码"><a href="#3-设置用户名密码" class="headerlink" title="3.设置用户名密码"></a>3.设置用户名密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#修改配置文件</span><br><span class="line">vi user/config.php</span><br><span class="line">#设置用户名和密码，可设置多个用户</span><br><span class="line">$yourls_user_passwords = array(</span><br><span class="line">        &#x27;username&#x27; =&gt; &#x27;password&#x27;,</span><br><span class="line">        // &#x27;username2&#x27; =&gt; &#x27;password2&#x27;,</span><br><span class="line">        // You can have one or more &#x27;login&#x27;=&gt;&#x27;password&#x27; lines</span><br><span class="line">        );</span><br></pre></td></tr></table></figure>

<h3 id="4-其它设置"><a href="#4-其它设置" class="headerlink" title="4.其它设置"></a>4.其它设置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#设置站点域名</span><br><span class="line">define( &#x27;YOURLS_SITE&#x27;, &#x27;http://ozh.in&#x27; );</span><br><span class="line">#GMT时间偏移</span><br><span class="line">define( &#x27;YOURLS_HOURS_OFFSET&#x27;, &#x27;-5&#x27; );</span><br><span class="line">#是否私有</span><br><span class="line">define( &#x27;YOURLS_PRIVATE&#x27;, &#x27;true&#x27; );</span><br><span class="line">#设置cookie，可访问https://api.yourls.org/services/cookiekey/1.0/生成</span><br><span class="line">define( &#x27;YOURLS_COOKIEKEY&#x27;, &#x27;qQ4KhL_pus@Zm7n#%:b^&#123;A[vhm&#x27; );</span><br><span class="line">#mysql连接方式</span><br><span class="line">define（&#x27;YOURLS_DB_DRIVER&#x27;，&#x27;mysqli&#x27;）;</span><br></pre></td></tr></table></figure>

<h3 id="5-设置伪静态"><a href="#5-设置伪静态" class="headerlink" title="5.设置伪静态"></a>5.设置伪静态</h3><p>YOURLS默认已经内置Apache <code>.htaccess</code>规则，如果是Apache服务器且开启了伪静态支持一般不用在设置，如果您使用的Nginx，请添加下面的规则，并重载Nginx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    try_files $uri $uri/ /yourls-loader.php?$args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-设置中文"><a href="#6-设置中文" class="headerlink" title="6.设置中文"></a>6.设置中文</h3><p>YOURLS默认是中文界面，不方便操作，看到有网友提供了汉化，访问<a href="https://github.com/guox/yourls-zh_CN/archive/master.zip" title="yourls-zh_CN">yourls-zh_CN</a>下载汉化包，并解压至<code>user/languages</code>目录，然后修改<code>user/config.php</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#语言包放到languages</span><br><span class="line">[root@aliyun-hz languages]# ll</span><br><span class="line">total 68</span><br><span class="line">-rw-r--r-- 1 www www   210 Apr 23  2017 index.html</span><br><span class="line">-rw-r--r-- 1 www www    51 Mar 24  2013 README.md</span><br><span class="line">-rw-r--r-- 1 www www 22123 Mar 24  2013 zh_CN.mo</span><br><span class="line">-rw-r--r-- 1 www www 32783 Mar 24  2013 zh_CN.po</span><br><span class="line">#修改配置文件启用中文</span><br><span class="line">vi user/config.php</span><br><span class="line">#启用中文</span><br><span class="line">define( &#x27;YOURLS_LANG&#x27;, &#x27;zh_CN&#x27; );</span><br></pre></td></tr></table></figure>

<h3 id="7-访问测试"><a href="#7-访问测试" class="headerlink" title="7.访问测试"></a>7.访问测试</h3><p>完成以上配置后访问<code>http://domain.com/admin</code>完成初安装，输入步骤3中设置的账号、密码进行登录。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/01/snipaste_20180110_144008.png"></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/01/snipaste_20180110_144322.png"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>YOURLS还可以对链接数据进行统计，包括访问量&#x2F;地区&#x2F;来源等，同时还提供API支持（参考官方文档），功能来说基本够用，但是界面确有点落后。</p>
<blockquote>
<p>Demo:<a href="https://bk.tn/laoxue" title="https://bk.tn/laoxue">https://bk.tn/laoxue</a> （访问这个地址会跳转到老薛主机） 官方地址：<a href="http://yourls.org/" title="http://yourls.org/">http://yourls.org/</a> 源码：<a href="https://github.com/YOURLS/YOURLS" title="https://github.com/YOURLS/YOURLS">https://github.com/YOURLS/YOURLS</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>YOURLS</tag>
        <tag>短网址</tag>
        <tag>短链接</tag>
      </tags>
  </entry>
  <entry>
    <title>简单为VPS或者服务器增加SWAP</title>
    <url>/2018/06/29/%E7%AE%80%E5%8D%95%E4%B8%BAvps%E6%88%96%E8%80%85%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A2%9E%E5%8A%A0swap/</url>
    <content><![CDATA[<p>本方法适用于除openvz虚拟之外的XEN和KVM，如果增加的swap空间是SSD的话那么效果就更加好了！ 1.进入目录</p>
<p>cd &#x2F;var&#x2F;</p>
<p>2.获取要增加的SWAP文件块(这里以1GB为例)</p>
<p>dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;swapfile bs&#x3D;1024 count&#x3D;1038336</p>
<p>3.创建SWAP文件</p>
<p>&#x2F;sbin&#x2F;mkswap swapfile</p>
<p>4.激活SWAP文件</p>
<p>&#x2F;sbin&#x2F;swapon swapfile</p>
<p>5.查看SWAP信息是否正确</p>
<p>&#x2F;sbin&#x2F;swapon –s</p>
<p>6.添加到fstab文件中让系统引导时自动启动</p>
<p>echo “&#x2F;var&#x2F;swapfile swap swap defaults 0 0” &gt;&gt;&#x2F;etc&#x2F;fstab</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>SWAP</tag>
      </tags>
  </entry>
  <entry>
    <title>简单几步把debian 9升级到debian 10</title>
    <url>/2019/11/15/%E7%AE%80%E5%8D%95%E5%87%A0%E6%AD%A5%E6%8A%8Adebian-9%E5%8D%87%E7%BA%A7%E5%88%B0debian-10/</url>
    <content><![CDATA[<h4 id="更新："><a href="#更新：" class="headerlink" title="更新："></a><strong>更新</strong>：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get upgrade</span><br></pre></td></tr></table></figure>

<h4 id="备份一份："><a href="#备份一份：" class="headerlink" title="备份一份："></a><strong>备份一份</strong>：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /etc/apt/sources.list /etc/apt/sources.list.orig</span><br></pre></td></tr></table></figure>

<h4 id="将-x2F-etc-x2F-apt-x2F-sources-list里所有“stretch”替换为“buster”："><a href="#将-x2F-etc-x2F-apt-x2F-sources-list里所有“stretch”替换为“buster”：" class="headerlink" title="将&#x2F;etc&#x2F;apt&#x2F;sources.list里所有“stretch”替换为“buster”："></a><strong>将&#x2F;etc&#x2F;apt&#x2F;sources.list里所有“stretch”替换为“buster”</strong>：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/stretch/buster/g&#x27; /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<h4 id="再更新一下"><a href="#再更新一下" class="headerlink" title="再更新一下"></a><strong>再更新一下</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get upgrade</span><br></pre></td></tr></table></figure>

<h4 id="执行升级命令"><a href="#执行升级命令" class="headerlink" title="执行升级命令"></a><strong>执行升级命令</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get dist-upgrade</span><br></pre></td></tr></table></figure>

<h4 id="提示完成后重启"><a href="#提示完成后重启" class="headerlink" title="提示完成后重启"></a><strong>提示完成后重启</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>

<h4 id="查看下当前debian版本"><a href="#查看下当前debian版本" class="headerlink" title="查看下当前debian版本"></a><strong>查看下当前debian版本</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Debian</tag>
      </tags>
  </entry>
  <entry>
    <title>简单三步给网站申请安装letsencrypt免费SSL证书-acme.sh自动续期</title>
    <url>/2018/10/20/%E7%AE%80%E5%8D%95%E4%B8%89%E6%AD%A5%E7%BB%99%E7%BD%91%E7%AB%99%E7%94%B3%E8%AF%B7%E5%AE%89%E8%A3%85letsencrypt%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6-acme-sh%E8%87%AA%E5%8A%A8%E7%BB%AD%E6%9C%9F/</url>
    <content><![CDATA[<p>昨天晚上花了一个小时的时间把挖站否VPS监控SSL证书由原来的TrustAsia即赛门铁克(Symantec)个人DV SSL证书换成了letsencrypt免费SSL证书，原因是Chrome 70开始将开始不再信任 Symantec证书了，自己正在用的Chromium浏览器已经不能再打开Symantec证书的网站了。</p>
<p>赛门铁克(Symantec)个人DV SSL证书是在腾讯云申请的，实际上国内的阿里云、七牛云、又拍云等都提供了免费一年赛门铁克(Symantec)个人DV SSL证书。<strong>自己犯了错，干脆把之前的SSL产品趁“打烊”之前清仓大处理了？</strong>这也怪不得赛门铁克(Symantec)在国内搞了这么多的<strong>免费推广</strong>。</p>
<p>本篇文章就来分享一下利用<strong>acme.sh</strong>来一键申请和安装letsencrypt免费SSL证书，基本上可以适合各大VPS主机服务器，而且acme.sh可以自动更新SSL证书，再也不用担心SSL证书会过期的问题的。从我的个人使用经验来看，官方推荐的Certbot还是不如<strong>acme.sh</strong>好用一些。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/15396999612187d2e20ad1b.jpg"></p>
<p>更多的VPS主机及SSL证书还可以看看：</p>
<ol>
<li>免费SSL证书收集整理汇总-免费给网站添加Https安全加密访问</li>
<li>CN2 GIA VPS主机收集整理汇总-电信,联通,移动三网CN2 GIA线路VPS主机</li>
<li>启用HSTS并加入HSTS Preload List让网站Https访问更加安全-附删除HSTS方法</li>
</ol>
<p><strong>一、第一步：一键安装acme.sh</strong></p>
<p>网站：</p>
<ol>
<li><a href="https://letsencrypt.org/">https://letsencrypt.org/</a></li>
<li><a href="https://github.com/Neilpang/acme.sh">https://github.com/Neilpang/acme.sh</a></li>
</ol>
<p>使用以下可以一键安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl https://get.acme.sh  sh</span><br></pre></td></tr></table></figure>

<p>或者:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -O - https://get.acme.sh  sh</span><br></pre></td></tr></table></figure>

<p>使用喜欢Git命令也可以用以下命令安装:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Neilpang/acme.sh.git</span><br><span class="line">cd ./acme.sh</span><br><span class="line">./acme.sh --install</span><br></pre></td></tr></table></figure>

<p>脚本主要做了以下事情:</p>
<blockquote>
<p>1.生成复制了acme.sh 到你的($HOME): ~&#x2F;.acme.sh&#x2F;目录下 ，后面所有的证书都会在这个目录生成.</p>
<p>2.Create alias for: acme.sh&#x3D;~&#x2F;.acme.sh&#x2F;acme.sh. 注意：<strong>安装完成后你需要关闭再打开终端才可以让alias 生效。</strong></p>
<p>3.增加了一个定时任务，用于SSL证书更新.</p>
</blockquote>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/1539699961197b8ffc25e88.gif"></p>
<p>你可以使用Crontab -l来查看当前的定时任务：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/1539699961258598e4684a7.gif"></p>
<p>同时你也可以使用SFTP来查看acme.sh 文件夹。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/153969996126143bb7e5bbc.gif"></p>
<p><strong>二、第二步：一键签发SSL证书</strong></p>
<p>2.1 单个域名SSL</p>
<p>注意：-w后面是域名的根目录，请根据实际修改.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --issue -d wzfou.com -w /home/wwwroot/wzfou.com</span><br><span class="line">#默认签发的是RSA，如果你想签发ECC证书，请使用以下命令</span><br><span class="line">acme.sh --issue -d wzfou.com -w /home/wwwroot/wzfou.com --keylength ec-256 </span><br></pre></td></tr></table></figure>

<p>或者:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --issue -d wzfou.com -w /home/wzfou/public_html</span><br><span class="line">#默认签发的是RSA，如果你想签发ECC证书，请使用以下命令</span><br><span class="line">acme.sh --issue -d wzfou.com -w /home/wzfou/public_html --keylength ec-256</span><br></pre></td></tr></table></figure>

<p>或者:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --issue -d wzfou.com -w /var/www/html</span><br><span class="line">#默认签发的是RSA，如果你想签发ECC证书，请使用以下命令</span><br><span class="line">acme.sh --issue -d wzfou.com -w /var/www/html --keylength ec-256</span><br></pre></td></tr></table></figure>

<p>2.2 多个域名SSL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --issue -d wzfou.com -d www.wzfou.com -d cp.wzfou.com -w /home/wwwroot/wzfou.com</span><br><span class="line">#默认签发的是RSA，如果你想签发ECC证书，请使用以下命令</span><br><span class="line">acme.sh --issue -d wzfou.com -d www.wzfou.com -d cp.wzfou.com -w /home/wwwroot/wzfou.com --keylength ec-256 </span><br></pre></td></tr></table></figure>

<p>2.3 泛域名SSL</p>
<p>注意：泛域名SSL证书签发要用到DNS验证的方式，参考2.4部分。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --issue --dns dns_dp -d wzfou.com -d *.wzfou.com</span><br><span class="line">#默认签发的是RSA，如果你想签发ECC证书，请使用以下命令</span><br><span class="line">acme.sh --issue --dns dns_dp -d wzfou.com -d *.wzfou.com --keylength ec-256</span><br><span class="line">#可选长度有：</span><br><span class="line"> ec-256 (prime256v1, “ECDSA P-256”)</span><br><span class="line"> ec-384 (secp384r1, “ECDSA P-384”)</span><br></pre></td></tr></table></figure>

<p>2.4 无法验证域名？</p>
<p>上面通过指定网站根目录的验证域名的方法有时会失效，也有朋友VPS上没有安装Web环境，无法使用80端口。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/15396999612225e64847789.gif"></p>
<p>这里acme.sh 提供了一个添加DNS API自动验证域名的方式，首先到你的域名DNS处获得API，这里我以NS1 DNS域名解析来作为演示，首先到官网后台获得API（<strong>其它的DNS，如DNSPOD、Cloudxns、阿里云DNS等使用API的方法见本文第四部分</strong>）。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/1539699961184b536dc483c.gif"></p>
<p>然后是导入NS1.com API</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export NS1_Key=&quot;fdmlfxxxxxxxfk&quot;</span><br></pre></td></tr></table></figure>

<p>现在就可以开始签发SSL证书了:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --issue --dns dns_nsone -d wzfou.com -d www.wzfou.com</span><br><span class="line">#或者签发ECC证书</span><br><span class="line">acme.sh --issue --dns dns_nsone -d wzfou.com -d www.wzfou.com --keylength ec-256</span><br></pre></td></tr></table></figure>

<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/1539699961531adf860a02c.gif"></p>
<p>使用DNS API验证域名的方式有一个好处就是不需要WEB访问就可以签发SSL证书，acme.sh 会在你的DNS域名解析处添加一个TXT记录，验证成功后会自动删除该TXT记录。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/1539699961534906ab4cb21.gif"></p>
<p><strong>三、第三步：安装letsencrypt SSL证书</strong></p>
<p>这一步部分其实可以根据各自的实际来执行了，为了让acme.sh 可以自动更新续期SSL证书，建议使用以下操作方法来执行，这样acme.sh 每次更新完了SSL证书后都自动按照你第一次安装SSL证书的方法执行一遍同步SSL证书的命令。</p>
<p><strong>Apache</strong> 服务器安装letsencrypt SSL证书如下：:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --install-cert -d wzfou.com \</span><br><span class="line">--cert-file /path/to/certfile/in/apache/cert.pem \</span><br><span class="line">--key-file /path/to/keyfile/in/apache/key.pem \</span><br><span class="line">--fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem \</span><br><span class="line">--reloadcmd &quot;service apache2 force-reload&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Nginx</strong> 服务器安装letsencrypt SSL证书e:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --install-cert -d wzfou.com \</span><br><span class="line">--key-file /path/to/keyfile/in/nginx/key.pem \</span><br><span class="line">--fullchain-file /path/to/fullchain/nginx/cert.pem \</span><br><span class="line">--reloadcmd &quot;service nginx force-reload&quot;</span><br></pre></td></tr></table></figure>

<p>实际操作中，大家根据需要调整好证书和密钥的路径，由于我使用的ECC证书，并且重启Apache2的命令无效，所以我用的以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --install-cert -d ping.wzfou.com --ecc \</span><br><span class="line">--cert-file /etc/pki/tls/certs/ping.wzfou.com.cer \</span><br><span class="line">--key-file /etc/pki/tls/certs/ping.wzfou.com.key \</span><br><span class="line">--fullchain-file /etc/pki/tls/certs/fullchain.cer \</span><br><span class="line">--reloadcmd &quot;/etc/init.d/httpd force-reload&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/1539699961547719746a31b.gif"></p>
<p>执行命令后，我们就可以在路径中看到已经复制过来的证书还有Key等文件了，下次acme.sh 执行更新SSL证书时也会同样执行上述的命令。否则，需要自己手动复制粘贴证书。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/15396999616206e31fe7f6a.gif"></p>
<p>最后记得到Apache或者Nginx的配置中调整好证书和Key的路径，重启Apache或者Nginx就算完成了。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/1539699961579ab93c65bee.gif"></p>
<p>如果你发现letsencrypt SSL证书不能定时更新，你也可以自己手动强制更新:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --renew -d example.com --force</span><br></pre></td></tr></table></figure>

<p>如果是ECC cert，使用以下命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --renew -d example.com --force --ecc</span><br></pre></td></tr></table></figure>

<p>目前wzfou.com用的就是letsencrypt SSL证书。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/1539699961561d925775d3d.gif"></p>
<p><strong>四、附录：各大DNS API获取与签发SSL</strong></p>
<p><strong>说明</strong>：</p>
<ol>
<li>附录参考自：<a href="https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md">https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md</a></li>
<li>DNS解析服务汇总：<a href="https://wzfou.com/mianfei-dns/">https://wzfou.com/mianfei-dns/</a></li>
<li>签发泛域名SSL时请把命令部分：-d <a href="http://www.example.com/">www.example.com</a> 改成 ：-d *.example.com</li>
</ol>
<p><strong>4.1 CloudFlare DNS API</strong></p>
<p>First you need to login to your CloudFlare account to get your API key.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export CF_Key=&quot;sdfsdfsdfljlbjkljlkjsdfoiwje&quot;</span><br><span class="line">export CF_Email=&quot;xxxx@sss.com&quot;</span><br></pre></td></tr></table></figure>

<p>Ok, let’s issue a cert now:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --issue --dns dns_cf -d example.com -d www.example.com</span><br></pre></td></tr></table></figure>

<p>The CF_Key and CF_Email will be saved in ~&#x2F;.acme.sh&#x2F;account.conf and will be reused when needed.</p>
<p><strong>4.2 DNSPod DNS API</strong></p>
<p>First you need to login to your DNSPod account to get your API Key and ID.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export DP_Id=&quot;1234&quot;</span><br><span class="line">export DP_Key=&quot;sADDsdasdgdsf&quot;</span><br></pre></td></tr></table></figure>

<p>Ok, let’s issue a cert now:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --issue --dns dns_dp -d example.com -d www.example.com</span><br></pre></td></tr></table></figure>

<p>The DP_Id and DP_Key will be saved in ~&#x2F;.acme.sh&#x2F;account.conf and will be reused when needed.</p>
<p><strong>4.3 CloudXNS DNS API</strong></p>
<p>First you need to login to your CloudXNS account to get your API Key and Secret.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export CX_Key=&quot;1234&quot;</span><br><span class="line">export CX_Secret=&quot;sADDsdasdgdsf&quot;</span><br></pre></td></tr></table></figure>

<p>Ok, let’s issue a cert now:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --issue --dns dns_cx -d example.com -d www.example.com</span><br></pre></td></tr></table></figure>

<p>The CX_Key and CX_Secret will be saved in ~&#x2F;.acme.sh&#x2F;account.conf and will be reused when needed.</p>
<p><strong>4.4 阿里云Aliyun DNS API</strong></p>
<p>First you need to login to your 阿里云 Aliyun account to get your API key. <a href="https://ak-console.aliyun.com/#/accesskey">https://ak-console.aliyun.com/#/accesskey</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export Ali_Key=&quot;sdfsdfsdfljlbjkljlkjsdfoiwje&quot;</span><br><span class="line">export Ali_Secret=&quot;jlsdflanljkljlfdsaklkjflsa&quot;</span><br></pre></td></tr></table></figure>

<p>Ok, let’s issue a cert now:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --issue --dns dns_ali -d example.com -d www.example.com</span><br></pre></td></tr></table></figure>

<p>The Ali_Key and Ali_Secret will be saved in ~&#x2F;.acme.sh&#x2F;account.conf and will be reused when needed.</p>
<p><strong>4.5 GoDaddy DNS API</strong></p>
<p>First you need to login to your GoDaddy account to get your API Key and Secret. <a href="https://developer.godaddy.com/keys/">https://developer.godaddy.com/keys/</a></p>
<p>Please create a Production key, instead of a Test key.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export GD_Key=&quot;sdfsdfsdfljlbjkljlkjsdfoiwje&quot;</span><br><span class="line">export GD_Secret=&quot;asdfsdafdsfdsfdsfdsfdsafd&quot;</span><br></pre></td></tr></table></figure>

<p>Ok, let’s issue a cert now:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --issue --dns dns_gd -d example.com -d www.example.com</span><br></pre></td></tr></table></figure>

<p>The GD_Key and GD_Secret will be saved in ~&#x2F;.acme.sh&#x2F;account.conf and will be reused when needed.</p>
<p><strong>4.6 PowerDNS DNS API</strong></p>
<p>First you need to login to your PowerDNS account to enable the API and set your API-Token in the configuration. <a href="https://doc.powerdns.com/md/httpapi/README/">https://doc.powerdns.com/md/httpapi/README/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PDNS_Url=&quot;http://ns.example.com:8081&quot;</span><br><span class="line">export PDNS_ServerId=&quot;localhost&quot;</span><br><span class="line">export PDNS_Token=&quot;0123456789ABCDEF&quot;</span><br><span class="line">export PDNS_Ttl=60</span><br></pre></td></tr></table></figure>

<p>Ok, let’s issue a cert now:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --issue --dns dns_pdns -d example.com -d www.example.com</span><br></pre></td></tr></table></figure>

<p>The PDNS_Url, PDNS_ServerId, PDNS_Token and PDNS_Ttl will be saved in ~&#x2F;.acme.sh&#x2F;account.confand will be reused when needed.</p>
<p><strong>4.7 Amazon Route53 DNS API</strong></p>
<p>方法见：<a href="https://github.com/Neilpang/acme.sh/wiki/How-to-use-Amazon-Route53-API">https://github.com/Neilpang/acme.sh/wiki/How-to-use-Amazon-Route53-API</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export AWS_ACCESS_KEY_ID=XXXXXXXXXX</span><br><span class="line">export AWS_SECRET_ACCESS_KEY=XXXXXXXXXXXXXXX</span><br></pre></td></tr></table></figure>

<p>To issue a cert:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --issue --dns dns_aws -d example.com -d www.example.com</span><br></pre></td></tr></table></figure>

<p>The AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY will be saved in ~&#x2F;.acme.sh&#x2F;account.conf and will be reused when needed.</p>
<p><strong>4.8 Linode DNS API</strong></p>
<p>First you need to login to your Linode account to get your API Key. <a href="https://manager.linode.com/profile/api">https://manager.linode.com/profile/api</a></p>
<p>Then add an API key with label <em>ACME</em> and copy the new key.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export LINODE_API_KEY=&quot;...&quot;</span><br></pre></td></tr></table></figure>

<p>Due to the reload time of any changes in the DNS records, we have to use the dnssleep option to wait at least 15 minutes for the changes to take effect.</p>
<p>Ok, let’s issue a cert now:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --issue --dns dns_linode --dnssleep 900 -d example.com -d www.example.com</span><br></pre></td></tr></table></figure>

<p>The LINODE_API_KEY will be saved in ~&#x2F;.acme.sh&#x2F;account.conf and will be reused when needed.</p>
<p><strong>4.9 DigitalOcean DNS API (native)</strong></p>
<p>You need to obtain a read and write capable API key from your DigitalOcean account. See: <a href="https://www.digitalocean.com/help/api/">https://www.digitalocean.com/help/api/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export DO_API_KEY=&quot;75310dc4ca779ac39a19f6355db573b49ce92ae126553ebd61ac3a3ae34834cc&quot;</span><br></pre></td></tr></table></figure>

<p>Ok, let’s issue a cert now:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --issue --dns dns_dgon -d example.com -d www.example.com</span><br></pre></td></tr></table></figure>

<p><strong>4.10 Namesilo DNS API</strong></p>
<p>You’ll need to generate an API key at <a href="https://www.namesilo.com/account/_api.php">https://www.namesilo.com/account\_api.php</a> Optionally you may restrict the access to an IP range there.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export Namesilo_Key=&quot;xxxxxxxxxxxxxxxxxxxxxxxx&quot;</span><br></pre></td></tr></table></figure>

<p>And now you can issue certs with:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --issue --dns dns_namesilo --dnssleep 900 -d example.com -d www.example.com</span><br></pre></td></tr></table></figure>

<p><strong>4.11 使用自定义API</strong></p>
<p>If your API is not supported yet, you can write your own DNS API.</p>
<p>Let’s assume you want to name it ‘myapi’:</p>
<ol>
<li>Create a bash script named ~&#x2F;.acme.sh&#x2F;dns_myapi.sh,</li>
<li>In the script you must have a function named dns_myapi_add() which will be called by acme.sh to add the DNS records.</li>
<li>Then you can use your API to issue cert like this:</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --issue --dns dns_myapi -d example.com -d www.example.com</span><br></pre></td></tr></table></figure>

<p><strong>五、总结</strong></p>
<p>letsencrypt免费SSL证书申请与安装过程还是挺简单的，只需要一个VPS主机，不管有没有安装Web环境都可以签发SSL证书，个人觉得DNS验证方式是最方便的。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/10/15396999618600251bd9718.jpg"></p>
<p>没有VPS主机的同学该如何使用letsencrypt免费SSL证书呢？<strong>方法一：</strong>手动在线申请，三个在线免费SSL证书申请地址; <strong>方法二：</strong>直接用Cpanel、DirectAdmin面板自带的SSL申请。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>SSL</tag>
        <tag>Letsencrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>精简Debian/Ubuntu系统环境，最小化安装debian/ubunutu系统</title>
    <url>/2018/06/29/%E7%B2%BE%E7%AE%80debian-ubuntu%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%EF%BC%8C%E6%9C%80%E5%B0%8F%E5%8C%96%E5%AE%89%E8%A3%85debian-ubunutu%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>简单来说我们要把debian系统环境里面一些不需要的东西清除掉的话只需要经过4步就可以做到了：</p>
<p>升级系统更新到最新版，这个总是有必要的： apt-get update&amp;&amp;apt-get upgrade</p>
<p>删除一些不需要的软件： apt-get -y purge apache2-* bind9-* xinetd samba-* nscd-* portmap sendmail-* sasl2-bin</p>
<p>删除一些不需要的组件： apt-get -y purge lynx memtester unixodbc python-* odbcinst-* sudo tcpdump ttf-*</p>
<p>清理垃圾： apt-get autoremove &amp;&amp; apt-get clean</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Debian</tag>
        <tag>精简</tag>
      </tags>
  </entry>
  <entry>
    <title>给ProxmoxVE (PVE)的网络模型添加E1000e网卡，让你的DSM支持最新版本</title>
    <url>/2019/12/03/%E7%BB%99proxmoxve-pve%E7%9A%84%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E6%B7%BB%E5%8A%A0e1000e%E7%BD%91%E5%8D%A1%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84dsm%E6%94%AF%E6%8C%81%E6%9C%80%E6%96%B0%E7%89%88/</url>
    <content><![CDATA[<p>前面介绍过一个PVE下给群晖添加E1000e网卡的教程：《<a href="https://wp.gxnas.com/4651.html">在ProxmoxVE (PVE)系统下给群晖添加E1000e网卡，让它支持DSM最新版本</a>》，但是这个方法仅对某个虚拟机而已。今天介绍另外一种方法，把E1000e网卡添加到PVE系统里面，这样在新增虚拟机的时候，就可以直接选择。</p>
<p>本教程在PVE6.09下测试通过，其他的PVE版本请自行测试。<strong>需要注意的是：修改有风险，修改前请自觉做好文件备份！</strong></p>
<p>具体操作如下：</p>
<p>一、电脑打开WinSCP，以root用户登录PVE，找到 &#x2F;usr&#x2F;share&#x2F;perl5&#x2F;PVE 目录下的 QemuServer.pm 文件，用Notepad++编辑，大约在837行找到这行内容：</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/9dd3201fa8bd7b8a43cecf9c5d689740.jpg"></p>
<p>把原内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my $nic_model_list = [&#x27;rtl8139&#x27;, &#x27;ne2k_pci&#x27;, &#x27;e1000&#x27;, &#x27;pcnet&#x27;, &#x27;virtio&#x27;,&#x27;ne2k_isa&#x27;, &#x27;i82551&#x27;, &#x27;i82557b&#x27;, &#x27;i82559er&#x27;, &#x27;vmxnet3&#x27;,&#x27;e1000-82540em&#x27;, &#x27;e1000-82544gc&#x27;, &#x27;e1000-82545em&#x27;];</span><br></pre></td></tr></table></figure>

<p>改成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my $nic_model_list = [&#x27;rtl8139&#x27;, &#x27;ne2k_pci&#x27;, &#x27;e1000&#x27;, &#x27;e1000e&#x27;, &#x27;pcnet&#x27;, &#x27;virtio&#x27;,&#x27;ne2k_isa&#x27;, &#x27;i82551&#x27;, &#x27;i82557b&#x27;, &#x27;i82559er&#x27;, &#x27;vmxnet3&#x27;,&#x27;e1000-82540em&#x27;, &#x27;e1000-82544gc&#x27;, &#x27;e1000-82545em&#x27;];</span><br></pre></td></tr></table></figure>

<p>确认一下修改无误后保存退出；</p>
<p>二、找到 &#x2F;usr&#x2F;share&#x2F;pve-manager&#x2F;js 目录下的 pvemanagerlib.js 文件，用Notepad++编辑，大约在1813行找到这行内容：</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/2a82dec58be96e1e19742df1c1b23ad6.jpg"></p>
<p>把原内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ((match_res = p.match(/^(ne2k_pcie1000e1000-82540eme1000-82544gce1000-82545emvmxnet3rtl8139pcnetvirtione2k_isai82551i82557bi82559er)(=([0-9a-f]&#123;2&#125;(:[0-9a-f]&#123;2&#125;)&#123;5&#125;))?$/i)) !== null) &#123;</span><br></pre></td></tr></table></figure>

<p>改成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ((match_res = p.match(/^(ne2k_pcie1000e1000ee1000-82540eme1000-82544gce1000-82545emvmxnet3rtl8139pcnetvirtione2k_isai82551i82557bi82559er)(=([0-9a-f]&#123;2&#125;(:[0-9a-f]&#123;2&#125;)&#123;5&#125;))?$/i)) !== null) &#123;</span><br></pre></td></tr></table></figure>

<p>确认一下修改无误后保存退出；</p>
<p>三、在当前文件向下拉，大约在4555行处找到这些内容：</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/cd1cb85438cba09d84c79d39ffb0b28d.jpg"></p>
<p>把原内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;e1000&#x27;, &#x27;Intel E1000&#x27;],</span><br><span class="line">[&#x27;virtio&#x27;, &#x27;VirtIO (&#x27; + gettext(&#x27;paravirtualized&#x27;) + &#x27;)&#x27;],</span><br><span class="line">[&#x27;rtl8139&#x27;, &#x27;Realtek RTL8139&#x27;],</span><br><span class="line">[&#x27;vmxnet3&#x27;, &#x27;VMware vmxnet3&#x27;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>改成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;e1000&#x27;, &#x27;Intel E1000&#x27;],</span><br><span class="line">[&#x27;e1000e&#x27;, &#x27;Intel E1000e&#x27;],</span><br><span class="line">[&#x27;virtio&#x27;, &#x27;VirtIO (&#x27; + gettext(&#x27;paravirtualized&#x27;) + &#x27;)&#x27;],</span><br><span class="line">[&#x27;rtl8139&#x27;, &#x27;Realtek RTL8139&#x27;],</span><br><span class="line">[&#x27;vmxnet3&#x27;, &#x27;VMware vmxnet3&#x27;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>确认一下修改无误后保存退出；</p>
<p>四、关掉WinSCP，回到PVE管理界面，关掉所有的虚拟主机，重启PVE；</p>
<p>五、宿主机重启完成以后重新登录PVE，这时我们去新建一个PVE的虚拟机，配置到网络模型的时候，就会发现比之前多出“E1000e”这个网卡，能不能好好的把DSM升级到最新版本就看大家了。</p>
<p><img src="http://www.jarods.org/wp-content/uploads/2019/12/a76cc1a461ebfc3d51b29d615944fd66.jpg"></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>E1000e</tag>
        <tag>ProxmoxVE</tag>
      </tags>
  </entry>
  <entry>
    <title>网评不好的商家或产品汇总【2018年3月24日更新】</title>
    <url>/2018/03/25/%E7%BD%91%E8%AF%84%E4%B8%8D%E5%A5%BD%E7%9A%84%E5%95%86%E5%AE%B6%E6%88%96%E4%BA%A7%E5%93%81%E6%B1%87%E6%80%BB%E3%80%902018%E5%B9%B43%E6%9C%8824%E6%97%A5%E6%9B%B4%E6%96%B0%E3%80%91/</url>
    <content><![CDATA[<p>买主机，总会碰到垃圾商家，要么服务态度差，要么产品烂还不退款，要么产品极差。以下是搜罗的自己体验不好和网上评价的商家。 同时参考：<a href="https://zhujiwiki.com/12255.html">已跑路商家汇总 [长期更新]</a></p>
<p><strong>1、Hosticated、x3host、TweNtion</strong> a、这三个应该是一家，VPS宣称不限流量，但流量限制严重。 b、退款时各种推脱。 c、paypal争议后，就忽悠你取消争议，给你退款，但一直墨迹不退款。 <em>对这样的商家，Paypal争议，没有得到退款，坚决不能取消争议！！！</em></p>
<p><strong>2、Hostodo的OpenVZ VPS</strong> a、Hostodo的KVM VPS还能用，OpenVZ VPS超售的一塌糊涂，安装个系统都会莫名其妙宕机。 b、服务还不错，tk回复快。</p>
<p><strong>3、BudgetNode</strong> 官网写的3天退款保证，但各种理由推脱，去paypal争议，直接删除账号。</p>
<p><strong>4、TragicServers的OpenVZ VPS</strong> a、TragicServers的KVM VPS很不错，稳定且国内速度好，我一直在用，但OpenVZ VPS超售太多。 b、服务挺不错，回复及时。</p>
<p><strong>5、noez.de</strong> 需要德国电话验证，但需充值后购买，退款还需要5欧费用。 谨慎购买！！</p>
<p><strong>6、KrakenServers</strong> 买的达拉斯1G KVM，结果最少有半个月VPS后台账号被删。 发退款不回。 paypal争议后，才积极联系，说可以换到洛杉矶节点。 这种商家，建站的话需要慎重。</p>
<p><strong>7、Ethernetserver</strong> 褒贬不一，使用虚拟主机优惠码买的，极容易出问题。 要正规使用，建议原价购买或者vps的优惠购买。</p>
<p><strong>8、AlphaRacks</strong> OVZ VPS超售严重，本想kvm能好些，结果一样。 不建议使用。</p>
<p><strong>9、Golden-Hosts</strong> 擅自更改套餐，服务器极不稳定，带宽稍微占时间长点就停止服务。 不建议使用。</p>
<p><strong>10、treudler</strong> 快1个月了，vps无法使用，发了tk，隔了4天才有回复，之后又没有消息。 不建议使用。 最近更新，是他的系统问题，现在基本所有系统都已适用了。稳定性不错。 跑路了!</p>
<p><strong>11、LetBox</strong> a，负面评价较多，安心建站不建议使用！ b，年付的VPS，在第七个月被删了，差评！</p>
<p><strong>12、HybridVM</strong> 服务器上架后和购买时配置不同，更换后就长时间不上架（超过10天），不建议使用。</p>
<p><strong>13、ServerHand</strong> 无耻之极！ 详情：<a href="https://www.lowendtalk.com/discussion/132637/serverhand-exits-the-lowendmarket/p1">https://www.lowendtalk.com/discussion/132637/serverhand-exits-the-lowendmarket/p1</a></p>
<p><strong>14、My Server Planet Ltd</strong> 见过最硬的盘，国内速度差!</p>
<p><strong>15、UniWeb Hosting</strong> 纯粹的骗子，各种忽悠不要用Paypal，或者忽悠取消Paypal争议。</p>
<p><strong>16、LiteUnit</strong> 据群友反映，更换域名后不承认之前的产品是他们的，各种推脱。</p>
<p>不断添加中。。。欢迎大家留言反馈其他商家的服务。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title>编译Nginx支持TLS1.3</title>
    <url>/2019/10/20/%E7%BC%96%E8%AF%91nginx%E6%94%AF%E6%8C%81tls1-3/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>TLS1.2 发布于 2008 年 8 月，至今正好有 10 年，随着互联网安全越来越受到重视，新协议 TLS1.3 呼之欲出。值得一提的是，从第一份草案编写至今，已经有几年时间了，截止这篇文章编写，已经是第 28 份草案。在最近的 Chrome 版本更新中也逐步对 TLS1.3 进行支持，Chrome 65 开始默认开启 draft 23、Chrome 68 开始支持 draft 28</p>
<blockquote>
<p>更新：TLS 1.3 标准已于 2018 年 8 月正式发布为 <a href="https://tools.ietf.org/html/rfc8446">RFC 8446</a> ，距 TLS1.2 发布正好 10 周年</p>
</blockquote>
<p>TLS1.3 对于 TLS1.2 有重大改写，既提高了安全性又提高了速度，以至于有争议称，应该把它叫做 TLS2.0</p>
<p>关于 TLS1.3 的科普可以看下面的页面</p>
<p><a href="https://wiki.openssl.org/index.php/TLS1.3">https://wiki.openssl.org/index.php/TLS1.3</a> <a href="https://zhuanlan.zhihu.com/p/28850798">https://zhuanlan.zhihu.com/p/28850798</a></p>
<p>之前我也写过 Nginx 的 https 的配置 <a href="https://zhih.me/nginx-http2-https/">https://zhih.me/nginx-http2-https/</a> ，当时是使用 TLS1.2 的</p>
<p>碰巧前几天发现 <code>.ooo</code> 可以免费用 1 年，就撸了一个 <code>onmp.ooo</code> 来做为我 onmp 项目的页面，把它搭在 4 刀年付的 virmach 上，顺便测试 TLS1.3</p>
<h2 id="一键安装"><a href="#一键安装" class="headerlink" title="一键安装"></a>一键安装</h2><p>最近更新支持防火墙功能，详情可以看 <a href="https://zhih.me/ngx-lua-waf/">https://zhih.me/ngx-lua-waf/</a></p>
<p>sh -c “$(curl -kfsSl <a href="https://raw.githubusercontent.com/xzhih/nginx-compile/master/install.sh)&quot;">https://raw.githubusercontent.com/xzhih/nginx-compile/master/install.sh)&quot;</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我这里用的系统是 Debian 8</p>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>apt-get install git gcc make build-essential -y</p>
<h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><p>我们把源码全都放在一个地方，方便使用，创建 nginx 的运行用户 www-data</p>
<p>rm -rf &#x2F;usr&#x2F;src&#x2F;<br>mkdir -p &#x2F;usr&#x2F;src&#x2F;<br>mkdir -p &#x2F;var&#x2F;log&#x2F;nginx&#x2F;<br>useradd -s &#x2F;sbin&#x2F;nologin -M www-data</p>
<p><strong>克隆 OpenSSL</strong></p>
<p>这里用的是 1.1.1 稳定版的源码</p>
<p>cd &#x2F;usr&#x2F;src<br>wget <a href="https://github.com/openssl/openssl/archive/OpenSSL/_1/_1/_1.tar.gz">https://github.com/openssl/openssl/archive/OpenSSL\_1\_1\_1.tar.gz</a><br>tar xzvf OpenSSL_1_1_1.tar.gz<br>mv openssl-OpenSSL_1_1_1 openssl</p>
<p><strong>下载 Nginx 的源码</strong></p>
<p>cd &#x2F;usr&#x2F;src&#x2F;<br>wget <a href="https://nginx.org/download/nginx-1.15.6.tar.gz">https://nginx.org/download/nginx-1.15.6.tar.gz</a><br>tar zxf .&#x2F;nginx-1.15.6.tar.gz<br>mv nginx-1.15.6 nginx</p>
<p><strong>克隆 zlib</strong></p>
<p>开启 gzip 要用到 zlib 库，这里使用的是 Cloudflare 优化的版本，比原版具有更高的压缩性能</p>
<p>cd &#x2F;usr&#x2F;src&#x2F;<br>git clone <a href="https://github.com/cloudflare/zlib.git">https://github.com/cloudflare/zlib.git</a> zlib<br>cd zlib<br>make -f Makefile.in distclean</p>
<p><strong>克隆 Brotli</strong></p>
<p>就像 gzip 一样，Brotli 也是一种压缩算法，它是由谷歌开发的一个更适合文本压缩的算法，因为它使用了字典，所以有更好的压缩比。</p>
<p>现在主流浏览器都已经支持 Brotli 了，而且也能与 gzip 共存，如果浏览器支持 Brotli 就会优先使用，所以可以放心兼容性，可以在这里看到支持的数据 <a href="https://caniuse.com/#search=Brotli">https://caniuse.com/#search=Brotli</a></p>
<p>cd &#x2F;usr&#x2F;src&#x2F;<br>git clone –recursive <a href="https://github.com/google/ngx/_brotli.git">https://github.com/google/ngx\_brotli.git</a></p>
<p>我给 nginx 默认配置的 Brotli 压缩等级为 6 级，这对于动态内容比较友好，如果你是像我现在这个博客一样是静态化的，那么建议开启 11 级压缩，这样可以获得最好的体验</p>
<p><strong>下载 PCRE</strong></p>
<p>nginx rewrite 模块需要 pcre 库</p>
<p>cd &#x2F;usr&#x2F;src&#x2F;<br>wget <a href="https://ftp.pcre.org/pub/pcre/pcre-8.42.tar.gz">https://ftp.pcre.org/pub/pcre/pcre-8.42.tar.gz</a><br>tar zxf .&#x2F;pcre-8.42.tar.gz</p>
<h3 id="给-OpenSSL-打补丁"><a href="#给-OpenSSL-打补丁" class="headerlink" title="给 OpenSSL 打补丁"></a>给 OpenSSL 打补丁</h3><p>补丁来自：<a href="https://github.com/hakasenyang/openssl-patch">https://github.com/hakasenyang/openssl-patch</a></p>
<p>此补丁的目的是让 OpenSSL 支持 TLS1.3 的 23,26,28 草案，以及 Final 版标准</p>
<p>cd &#x2F;usr&#x2F;src&#x2F;<br>git clone <a href="https://github.com/hakasenyang/openssl-patch.git">https://github.com/hakasenyang/openssl-patch.git</a><br>cd &#x2F;usr&#x2F;src&#x2F;openssl<br>patch -p1 &lt; ..&#x2F;openssl-patch&#x2F;openssl-equal-1.1.1_ciphers.patch<br>patch -p1 &lt; ..&#x2F;openssl-patch&#x2F;openssl-1.1.1-chacha_draft.patch</p>
<h3 id="给-Nginx-打补丁"><a href="#给-Nginx-打补丁" class="headerlink" title="给 Nginx 打补丁"></a>给 Nginx 打补丁</h3><p>补丁来自：<a href="https://github.com/kn007/patch">https://github.com/kn007/patch</a></p>
<p>nginx 补丁</p>
<ul>
<li>添加SPDY支持。</li>
<li>添加HTTP2 HPACK编码支持。</li>
<li>添加动态TLS记录支持。</li>
</ul>
<p>nginx_auto_using_PRIORITIZE_CHACHA 补丁</p>
<ul>
<li>支持时使用 SSL_OP_PRIORITIZE_CHACHA</li>
</ul>
<p>cd &#x2F;usr&#x2F;src&#x2F;<br>git clone <a href="https://github.com/kn007/patch.git">https://github.com/kn007/patch.git</a> nginx-patch<br>cd &#x2F;usr&#x2F;src&#x2F;nginx<br>patch -p1 &lt; ..&#x2F;nginx-patch&#x2F;nginx.patch<br>patch -p1 &lt; ..&#x2F;nginx-patch&#x2F;nginx_auto_using_PRIORITIZE_CHACHA.patch</p>
<h3 id="使用-jemalloc-作为内存管理"><a href="#使用-jemalloc-作为内存管理" class="headerlink" title="使用 jemalloc 作为内存管理"></a>使用 jemalloc 作为内存管理</h3><p>cd &#x2F;usr&#x2F;src&#x2F;<br>wget <a href="https://github.com/jemalloc/jemalloc/releases/download/5.1.0/jemalloc-5.1.0.tar.bz2">https://github.com/jemalloc/jemalloc/releases/download/5.1.0/jemalloc-5.1.0.tar.bz2</a><br>tar xjvf jemalloc-5.1.0.tar.bz2<br>cd jemalloc-5.1.0<br>.&#x2F;configure<br>make &amp;&amp; make install<br>echo ‘&#x2F;usr&#x2F;local&#x2F;lib’ &gt;&gt; &#x2F;etc&#x2F;ld.so.conf.d&#x2F;local.conf<br>ldconfig</p>
<h3 id="其他编译配置"><a href="#其他编译配置" class="headerlink" title="其他编译配置"></a>其他编译配置</h3><p>Nginx 默认会以 debug 模式编译，我们需要注释掉 <code>/usr/src/nginx/auto/cc/gcc</code> 中 <code>CFLAGS=&quot;$CFLAGS -g&quot;</code> 这行，这样可以减少生成文件的大小</p>
<p>sed -i ‘s@CFLAGS&#x3D;”$CFLAGS -g”@#CFLAGS&#x3D;”$CFLAGS -g”@’ &#x2F;usr&#x2F;src&#x2F;nginx&#x2F;auto&#x2F;cc&#x2F;gcc</p>
<h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><p>cd &#x2F;usr&#x2F;src&#x2F;nginx<br>.&#x2F;configure \<br>--user&#x3D;www-data –group&#x3D;www-data \<br>--prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx \<br>--sbin-path&#x3D;&#x2F;usr&#x2F;sbin&#x2F;nginx \<br>--with-compat –with-file-aio –with-threads \<br>--with-http_v2_module –with-http_v2_hpack_enc \<br>--with-http_spdy_module –with-http_realip_module \<br>--with-http_flv_module –with-http_mp4_module \<br>--with-openssl&#x3D;..&#x2F;openssl –with-http_ssl_module \<br>--with-pcre&#x3D;..&#x2F;pcre-8.42 –with-pcre-jit \<br>--with-zlib&#x3D;..&#x2F;zlib –with-http_gzip_static_module \<br>--add-module&#x3D;..&#x2F;ngx_brotli \<br>--with-ld-opt&#x3D;-ljemalloc</p>
<p>make<br>make install</p>
<p>Nginx 的可执行文件安装在 <code>/usr/sbin/nginx</code> ，Nginx 配置在 <code>/usr/local/nginx/conf/</code> 里</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Nginx 已经安装上了，现在我们来配置网站，让它跑起来</p>
<h3 id="Nginx-全局配置"><a href="#Nginx-全局配置" class="headerlink" title="Nginx 全局配置"></a>Nginx 全局配置</h3><p>把以下内容覆盖填入 <code>/usr/local/nginx/conf/nginx.conf</code></p>
<p>user www-data;<br>pid &#x2F;var&#x2F;run&#x2F;nginx.pid;<br>worker_processes auto;<br>worker_rlimit_nofile 65535;</p>
<p>events {<br> use epoll;<br> multi_accept on;<br> worker_connections 65535;<br>}</p>
<p>http {<br> charset utf-8;<br> sendfile on;<br> aio threads;<br> directio 512k;<br> tcp_nopush on;<br> tcp_nodelay on;<br> server_tokens off;<br> log_not_found off;<br> types_hash_max_size 2048;<br> client_max_body_size 16M;</p>
<p> # MIME<br> include mime.types;<br> default_type application&#x2F;octet-stream;</p>
<p> # Logging<br> access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log;<br> error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log warn;</p>
<p> # Gzip<br> gzip on;<br> gzip_vary on;<br> gzip_proxied any;<br> gzip_comp_level 6;<br> gzip_types text&#x2F;plain text&#x2F;css text&#x2F;xml application&#x2F;json application&#x2F;javascript application&#x2F;xml+rss application&#x2F;atom+xml image&#x2F;svg+xml;<br> gzip_disable “MSIE [1-6]\.(?!.*SV1)”;</p>
<p> # Brotli<br> brotli on;<br> brotli_comp_level 6;<br> brotli_static on;<br> brotli_types text&#x2F;plain text&#x2F;css text&#x2F;xml application&#x2F;json application&#x2F;javascript application&#x2F;xml+rss application&#x2F;atom+xml image&#x2F;svg+xml;</p>
<p> include vhost&#x2F;*.conf;<br>}</p>
<h3 id="Nginx-站点配置"><a href="#Nginx-站点配置" class="headerlink" title="Nginx 站点配置"></a>Nginx 站点配置</h3><p>我们已经在全局配置里设置了包含 <code>/usr/local/nginx/conf/vhost/</code> 目录下的 conf 文件</p>
<p>mkdir -p &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;vhost&#x2F;</p>
<p>然后在 <code>/usr/local/nginx/conf/vhost/</code> 里创建站点配置，比如我的是 <code>onmp.ooo.conf</code></p>
<p>server {<br> listen 80;<br> server_name onmp.ooo;<br> root &#x2F;wwwroot&#x2F;onmp.ooo;<br> location &#x2F; {<br> index  index.html;<br> }<br>}</p>
<p>这样 HTTP 的站点配置就弄好了，不过还站点还没页面，我们把 Nginx 的欢迎也面给放进去</p>
<p>mkdir -p &#x2F;wwwroot<br>cp -r &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html &#x2F;wwwroot&#x2F;onmp.ooo</p>
<p># 配置站点目录权限<br>chown -R www-data:www-data &#x2F;wwwroot&#x2F;<br>find &#x2F;wwwroot&#x2F; -type d -exec chmod 755 {} \;<br>find &#x2F;wwwroot&#x2F; -type f -exec chmod 644 {} \;</p>
<h3 id="service-配置"><a href="#service-配置" class="headerlink" title="service 配置"></a>service 配置</h3><p>service 命令用于对系统服务进行管理，比如启动（start）、停止（stop）、重启（restart）、查看状态（status）等，我们是编译安装的，所以要手动创建服务文件。</p>
<p>mkdir -p &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;</p>
<p>编辑 <code>/usr/lib/systemd/system/nginx.service</code> 写入以下内容</p>
<p>[Unit]<br>Description=nginx - high performance web server<br>After=network.target</p>
<p>[Service]<br>Type=forking<br>PIDFile=&#x2F;var&#x2F;run&#x2F;nginx.pid<br>ExecStartPost=&#x2F;bin&#x2F;sleep 0.1<br>ExecStartPre=&#x2F;usr&#x2F;sbin&#x2F;nginx -t -c &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf<br>ExecStart=&#x2F;usr&#x2F;sbin&#x2F;nginx -c &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf<br>ExecReload=&#x2F;usr&#x2F;sbin&#x2F;nginx -s reload<br>ExecStop=&#x2F;usr&#x2F;sbin&#x2F;nginx -s stop</p>
<p>[Install]<br>WantedBy=multi-user.target</p>
<p>启动服务</p>
<p>systemctl daemon-reload #重载<br>systemctl enable nginx #开机启动<br>systemctl start nginx #运行</p>
<p>我们现在可以用 <code>service</code> 或 <code>systemctl</code> 管理 nginx 了</p>
<p>启动 Nginx 后 HTTP 页面就正常了，打开 onmp.ooo 就能看到 Welcome to nginx!</p>
<h3 id="签发证书"><a href="#签发证书" class="headerlink" title="签发证书"></a>签发证书</h3><p>配置 HTTPS 首先要有证书，我这里是使用 <a href="https://github.com/Neilpang/acme.sh">acme.sh</a> 自动颁发 Let’s Encrypt 的证书</p>
<p>具体使用教程看我的另一篇教程 <a href="https://zhih.me/acme-sh-guide/">使用acme.sh获取免费SSL证书</a></p>
<p>当然，你要是已经有了 SSL 证书，直接看下面配置文件里证书存放的目录，直接放到里面去就行，其他操作一样的</p>
<h3 id="HTTPS-站点配置"><a href="#HTTPS-站点配置" class="headerlink" title="HTTPS 站点配置"></a>HTTPS 站点配置</h3><p>因为我给 OpenSSL 打的是 equal-1.1.1_ciphers 补丁，所以 ssl_ciphers 配置文件如下，如果你打的是别的补丁，则需要查看 <a href="https://github.com/hakasenyang/openssl-patch">https://github.com/hakasenyang/openssl-patch</a> 给的配置</p>
<p>server {<br> listen 80;<br> server_name onmp.ooo;<br> return 301 <a href="https://onmp.ooo$request/_uri">https://onmp.ooo$request\_uri</a>;<br>}</p>
<p>server {<br> listen 443 ssl http2;<br> server_name onmp.ooo;<br> root &#x2F;wwwroot&#x2F;onmp.ooo;</p>
<p> # SSL<br> ssl_certificate         &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;ssl&#x2F;onmp.ooo.cer;<br> ssl_certificate_key     &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;ssl&#x2F;onmp.ooo.key;</p>
<p> ssl_protocols TLSv1.2 TLSv1.3;<br> ssl_ciphers ‘[TLS13+AESGCM+AES128TLS13+AESGCM+AES256TLS13+CHACHA20]:[EECDH+ECDSA+AESGCM+AES128EECDH+ECDSA+CHACHA20]:EECDH+ECDSA+AESGCM+AES256:EECDH+ECDSA+AES128+SHA:EECDH+ECDSA+AES256+SHA:[EECDH+aRSA+AESGCM+AES128EECDH+aRSA+CHACHA20]:EECDH+aRSA+AESGCM+AES256:EECDH+aRSA+AES128+SHA:EECDH+aRSA+AES256+SHA:RSA+AES128+SHA:RSA+AES256+SHA:RSA+3DES’;<br> ssl_ecdh_curve X25519:P-256:P-384;<br> ssl_prefer_server_ciphers on;</p>
<p> ssl_session_cache shared:SSL:50m;<br> ssl_session_timeout 1d;<br> ssl_session_tickets on;</p>
<p> # OCSP Stapling<br> ssl_stapling on;<br> ssl_stapling_verify on;<br> resolver 119.29.29.29 8.8.8.8 valid&#x3D;300s;<br> resolver_timeout 10s;</p>
<p> # Security headers<br> add_header X-Frame-Options “SAMEORIGIN” always;<br> add_header X-XSS-Protection “1; mode&#x3D;block” always;<br> add_header X-Content-Type-Options “nosniff” always;<br> add_header Referrer-Policy “no-referrer-when-downgrade” always;<br> add_header Strict-Transport-Security “max-age&#x3D;31536000; includeSubDomains; preload” always;</p>
<p> location &#x2F; {<br> index  index.html;<br> http2_push &#x2F;style.css;<br> }</p>
<p> location ~ .*\.(gifjpgjpegpngbmpswfico)$ {<br> expires 30d;<br> }</p>
<p> location ~ .*\.(jscss)?$ {<br> expires 15d;<br> }<br>}</p>
<p>以上就是完整的站点配置文件，覆盖 <code>/usr/local/nginx/conf/vhost/onmp.ooo.conf</code> 后，使用 <code>service nginx reload</code> 重载 Nginx 再打开站点就能看到 HTTPS 的页面了</p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>在 Chrome 65 或更新的版本中，打开开发者工具的 Security 菜单，就能在里面看到 站点是否以 TLS1.3 连接</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/10/chrome.jpg" alt="chrome"></p>
<p>或者可以到 SSL Server Test：<a href="https://www.ssllabs.com/ssltest/index.html">https://www.ssllabs.com/ssltest/index.html</a> 进行测试</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2019/10/ssllabs.jpg" alt="ssllabs"></p>
<p>我只开启了 TLSv1.2 TLSv1.3 的支持，如果需要，你可以自己增加其他协议的支持</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>人们的生活已经离不开网络，所以网络安全在现在和未来都至关重要，曾经很多站长都以 HTTPS 影响站点速度为由，又或者说 SSL 证书昂贵，拒绝配 HTTPS，而随着技术的迭代升级，配置 HTTPS+HTTPS2 能提高网站速度，而 SSL 不仅可以免费获取，还可以使用命令自动获取自动更新，在我看来已经没有理由不配置 HTTPS 了，所以希望各位站长，都赶紧上车吧</p>
<blockquote>
<p>本文章发表于底噪博客 <a href="https://zhih.me/">https://zhih.me</a> , 转载请注明</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>TLS1.3</tag>
      </tags>
  </entry>
  <entry>
    <title>老牌云计算托管服务商 OVZH.COM 美国CN2 GIA VPS</title>
    <url>/2020/04/22/%E8%80%81%E7%89%8C%E4%BA%91%E8%AE%A1%E7%AE%97%E6%89%98%E7%AE%A1%E6%9C%8D%E5%8A%A1%E5%95%86-ovzh-com-%E7%BE%8E%E5%9B%BDcn2-gia-vps/</url>
    <content><![CDATA[<p><img src="/2020/04/OVZH.COM-B.png"></p>
<p>老牌稳定商家推荐；OVZH.COM是一家专业的云计算托管服务商，自2017年以来，OVZH.COM为个人开发者和中小型企业客户提供了高质量稳定的专用服务器。以及其他各种托管和运维技术服务。并且专注于服务我们的客户，为每个客户提供了个性化一流的服务，我们与竞争对手的不同之处仅在于我们专注于为客户提供卓越的技术支持和企业级的托管服务。通过这几年的经验积累我们不仅可以在硬件和产品上提供最高质量的服务，而且还可以提供世界一流的24&#x2F;7技术和客户支持。在OVZH.COM上，我们在发布新产品之前，我们所有的专用服务器都经过我们专业的技术人员严格测试才会上架我们的官网，在这里我们有最优质的价格和企业级的托管硬件，如有疑问或问题，请通过电话或邮件联系我们。OVZH.COM的专家团队竭诚为您带来满意的服务！</p>
<p>OVZH-VDS-CN2-GIA云产品</p>
<p>CN2 GIA线路是中国电信推出的高速线路，分为双三网CN2 GIA和单程CN2 GIA单程是指国内访问国外为高速线路，回程走的普通线路。双程三网cn2 GIA是去程与回程都是走的 高速线路，所以在这里我们OVZH.COM采用的是双程三网CN2 GIA也就是全程CN2 GIA高端线路。</p>
<p><a href="https://i.ovzh.com/cart.php?gid=1">https://i.ovzh.com/cart.php?gid=1</a></p>
<p>Cloud CN2 GIA 基础</p>
<p>¥50.00 CNY&#x2F;mo</p>
<p>¥1.00 初装费</p>
<p>IPV4 1</p>
<p>CPU 1个物理核心</p>
<p>内存 768MB</p>
<p>突发内存 128MB</p>
<p>SSD硬盘 15GB</p>
<p>列阵 RAID10</p>
<p>系统 Linux</p>
<p>线路 CN2-GIA三网直连</p>
<p>带宽 100Mbps</p>
<p>宽带流量 500GB</p>
<p>设备 戴尔企业级硬件</p>
<p>由OVZH.COM云服务商提供支持®</p>
<p>严禁违反中美法律的内容</p>
<p>99.95％的正常运行时间SLA</p>
<p>Cloud CN2 GIA 标准</p>
<p>¥80.00 CNY&#x2F;mo</p>
<p>¥1.00 初装费</p>
<p>IPV4 1</p>
<p>CPU 1个物理核心</p>
<p>内存 1332MB</p>
<p>突发内存 256MB</p>
<p>SSD硬盘 25GB</p>
<p>列阵 RAID10</p>
<p>系统 Linux</p>
<p>线路 CN2-GIA三网直连</p>
<p>带宽 100Mbps</p>
<p>宽带流量 1TB</p>
<p>设备 戴尔企业级硬件</p>
<p>由OVZH.COM云服务商提供支持®</p>
<p>严禁违反中美法律的内容</p>
<p>99.95％的正常运行时间SLA</p>
<p>OVZH-A-VDS-SERVERS 百分比 30% 优惠</p>
<p>OVZH-B-VDS-SERVERS 百分比 35% 优惠</p>
<p>OVZH-C-VDS-SERVERS 百分比 40% 优惠</p>
<p>OVZH-D-VDS-SERVERS 百分比 45% 优惠</p>
<p>OVZH-E-VDS-SERVERS 百分比 48% 优惠</p>
<p>OVZH-F-VDS-SERVERS 百分比 50% 优惠</p>
<p>服务器采用国际主流的 Linux+Apache+Mysql+PHP 架构. 完美支持 WordPress、Discuz、Joomla、Drupal、PHPwind、MediaWiki、phpBB、PHPcms、shopex、ecshop、帝国CMS、ZenCart、Typecho 等各种由 PHP+Mysql 构成的程序</p>
<p>OVZH-Hosting 云主机产品</p>
<p><a href="https://i.ovzh.com/cart.php?gid=4">https://i.ovzh.com/cart.php?gid=4</a></p>
<p>OVZH-HOST1-ovzhcom  百分比 50% 优惠</p>
<p>OVZH-HOST2-ovzhcom  百分比 55% 优惠</p>
<p>基础</p>
<p>¥6.00 CNY&#x2F;mo</p>
<p>¥1.00 初装费</p>
<p>IPV4 1</p>
<p>网站 2</p>
<p>DDOS防御 80GB</p>
<p>SSD硬盘 1000MB</p>
<p>流量 1TB</p>
<p>提供 数据安全</p>
<p>提供 自动备份</p>
<p>提供 定时任务</p>
<p>提供 DDOS保护</p>
<p>提供 一键SSL开启</p>
<p>PHP5.6-7.4版本自由切换</p>
<p>OVZH-Hosting 分销云主机产品</p>
<p><a href="https://i.ovzh.com/cart.php?gid=8">https://i.ovzh.com/cart.php?gid=8</a></p>
<p>OVZH-HOST3-ovzhcom  百分比 60% 优惠</p>
<p>OVZH-HOST4-ovzhcom  百分比 66% 优惠</p>
<p>基础</p>
<p>¥10.00 CNY&#x2F;mo</p>
<p>¥1.00 初装费</p>
<p>磁盘空间 10GB Raid10 SSD</p>
<p>每月流量 300GB</p>
<p>客户数量 5个独立客户</p>
<p>CPU 2核</p>
<p>内存 2GB</p>
<p>IPv4地址 1枚</p>
<p>超额销售 允许</p>
<p>云备份 支持</p>
<p>提供 数据安全</p>
<p>提供 定时任务</p>
<p>提供 定时采集</p>
<p>提供 DDOS保护</p>
<p>提供 一键SSL开启</p>
<p>提供 Cloudflare Pro</p>
<p>PHP5.6-7.4版本自由切换</p>
]]></content>
      <categories>
        <category>VPS</category>
      </categories>
      <tags>
        <tag>Cloudflare</tag>
        <tag>VPS</tag>
        <tag>Cloud</tag>
        <tag>OVZH</tag>
        <tag>美国</tag>
      </tags>
  </entry>
  <entry>
    <title>网站优化加速-开启TLSV1.3和Brotli压缩-Oneinstack,LNMP,宝塔面板</title>
    <url>/2020/04/30/%E7%BD%91%E7%AB%99%E4%BC%98%E5%8C%96%E5%8A%A0%E9%80%9F-%E5%BC%80%E5%90%AFtlsv1-3%E5%92%8Cbrotli%E5%8E%8B%E7%BC%A9-oneinstacklnmp%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/</url>
    <content><![CDATA[<p>本篇文章再来分享一下网站优化加速方法：开启TLSV1.3和Brotli压缩。相对于TLSV1.2，TLSV1.3主要是减少握手延迟，提高跨协议攻击的难度，使互联网更快，更多安全。Brotli是由谷歌开发的压缩算法，与其他压缩算法相比，它有着更高的压缩效率。</p>
<p>一般来说我们的VPS主机已经默认开启了GZIP压缩了，而Brotli与GZIP可以同时共存，当<strong>同时开启两种压缩算法时，Brotli 压缩等级优先级高于 Gzip。</strong>实际上，最新版的宝塔BT面板、Oneinstack和LNMP都已经默认可以开启TLSV1.3，各大面板使用：<a href="https://wzfou.com/vps-mianban/">服务器控制面板榜单</a>。</p>
<p><img src="/2020/04/one-tls_01.jpg" alt="网站优化加速-开启TLSV1.3和Brotli压缩-Oneinstack和LNMP,宝塔面板"></p>
<p>更多的关于网站服务器优化与加速，这里有：</p>
<ol>
<li><a href="https://wzfou.com/vps-jiasu/">VPS主机加速方法 – 一键安装加速模块 从“软件”上提升VPS主机速度</a></li>
<li><a href="https://wzfou.com/cloudflare-railgun/">Cloudflare Partner接入管理Cloudflare CDN-启用Railgun动态加速</a></li>
<li><a href="https://wzfou.com/nginx-cdn/">自建CDN加速-Nginx反向绑定,缓存加速,自动更新缓存和获取真实IP</a></li>
</ol>
<blockquote>
<p><strong>PS：2019年9月29日更新，</strong>由于Google主导开发的服务器优化神器ngx_pagespeed，集成了图片延迟加载、自适应webp、JS和CSS优化、图片优化等一整套优化工具：<a href="https://wzfou.com/ngx-pagespeed/">PageSpeed服务器优化神器-Nginx部署ngx_pagespeed模块和加速效果体验</a>。</p>
</blockquote>
<h2 id="一、开启TLSV1-3"><a href="#一、开启TLSV1-3" class="headerlink" title="一、开启TLSV1.3"></a>一、开启TLSV1.3</h2><h3 id="1-1-Oneinstack-TLSV1-3"><a href="#1-1-Oneinstack-TLSV1-3" class="headerlink" title="1.1  Oneinstack TLSV1.3"></a>1.1  Oneinstack TLSV1.3</h3><p><strong>PS：2019年1月17日更新，</strong>最新版的Oneinstack已经默认开启TLSV1.3了，所以如果你是全新安装的Oneinstack，安装完成后就启用了TLSV1.3了。</p>
<p>Oneinstack面板的安装与使用参考：<a href="https://wzfou.com/oneinstack/">OneinStack一键安装脚本</a>。如果你是全新安装Oneinstack，则可以按照教程先将Oneinstack一键包下载到本地，不要执行安装。而是选择oneinstack目录，编辑version.txt，把openssl_version版本号改到1.1.1以上。</p>
<p><img src="/2020/04/oneinstack-tls13_01.gif" alt="开启TLSV1.3修改版本"></p>
<p>然后开始安装即可。如果你已经是Oneinstack的老用户了，方法类似，先升级一下Oneinstack，修改version.txt的openssl_version版本号，执行Oneinstack自带的升级脚本，升级一下Nginx。然后就可以看到openssl已经升级了。</p>
<p><img src="/2020/04/oneinstack-tls13_02.gif" alt="开启TLSV1.3升级Nginx成功"></p>
<p>最后就是修改你的网站Nginx配置文件了，在ssl_protocols 后面添加TLSv1.3，在ssl_ciphers添加数个加密套件，重启Nginx完成。以下是我的Nginx的TLSv1.3配置，ssl_ciphers 的TLSv1.3部分是新增加的。</p>
<p>ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</p>
<p>ssl_ciphers TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5;</p>
<p>现在打开Chrome就可以看到wzfou.com已经成功使用了TLSv1.3。（PS：现在浏览器更新的速度很快，除IE，Chrome和Firefox新版对于TLSv1.3都已经支持了）</p>
<p><img src="/2020/04/oneinstack-tls13_07.gif" alt="开启TLSV1.3效果"></p>
<h3 id="1-2-LNMP-TLSV1-3"><a href="#1-2-LNMP-TLSV1-3" class="headerlink" title="1.2  LNMP TLSV1.3"></a>1.2  LNMP TLSV1.3</h3><p>LNMP面板参考：<a href="https://wzfou.com/lnmp-1-4/">Linux VPS建站工具</a>，目前LNMP 1.6版本已经默认支持TLSv1.3（<a href="https://wzfou.com/lnmp-1-6/">LNMP 1.6安装与使用-自动开启TLS 1.3</a>），你只需要按照上面的操作调整一下你的网站Nginx配置就可以开启TLSv1.3。如果你用的是LNMP 1.5的话，可以使用升级命令：<code>upgrade1.x-1.6.sh</code> 升级一下管理脚本。</p>
<p><img src="/2020/04/one-tls_00.jpg" alt="开启TLSV1.3升级脚本"></p>
<p>然后使用1.6的升级脚本升级一下nginx就可以了。如果你不想让LNMP 1.5升级到LNMP 1.6，则打开 \lnmp1.5\include\version.sh 文件，将 <code>Openssl_Ver=&#39;openssl-1.0.2o&#39;</code> 修改为：<code>Openssl_Ver=&#39;openssl-1.1.1a&#39;</code>。</p>
<p><img src="/2020/04/oneinstack-tls13_08.gif" alt="开启TLSV1.3修改Nginx的配置"></p>
<p>然后修改 \lnmp1.5\lnmp.conf 文件，将 <code>Nginx_Modules_Options=&#39;&#39;</code> 改为：<code>Nginx_Modules_Options=&#39;--with-openssl-opt=enable-weak-ssl-ciphers&#39;</code>（注：enable-weak-ssl-ciphers 作用是让 OpenSSL 继续支持 3DES 等不安全 Cipher Suite，如果你打算继续支持 IE8，才需要加上这个选项；若不需要支持 XP IE8 访问可忽略此处修改）</p>
<p><img src="/2020/04/oneinstack-tls13_09.gif" alt="开启TLSV1.3修改升级脚本"></p>
<p>进入 lnmp1.5 目录，执行命令：</p>
<p>.&#x2F;upgrade.sh nginx</p>
<p>然后输入需要升级的 nginx 版本号，如目前最新的 1.15.7。nginx 最新版本号可从官网获取：<a href="http://nginx.org.静待编译完成.执行/">http://nginx.org。静待编译完成。执行</a> nginx -V 可查询详细配置信息：</p>
<p>Checking …<br>Program will display Nginx Version……<br>nginx version: nginx&#x2F;1.15.7<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; upgrade nginx completed &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>nginx version: nginx&#x2F;1.15.7<br>built by gcc 4.8.5 20150623 (Red Hat 4.8.5-28) (GCC)<br>built with OpenSSL 1.1.1a  20 Nov 2018<br>TLS SNI support enabled<br>configure arguments: –user&#x3D;www –group&#x3D;www –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx –with-http_stub_status_module –with-http_ssl_module –with-http_v2_module –with-http_gzip_static_module –with-http_sub_module –with-stream –with-stream_ssl_module –with-openssl&#x3D;&#x2F;root&#x2F;lnmp1.5&#x2F;src&#x2F;openssl-1.1.1a –with-openssl-opt&#x3D;enable-weak-ssl-ciphers</p>
<p>修改主机配置文件，加入TLSv1.3配置，如下（和上面的Oneinstack是一样的）。文件修改完，重启一下 nginx，然后就可以去浏览器访问验证一下。</p>
<p>ssl_protocols 加入 TLSv1.3 支持，如：ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</p>
<p>#ssl_ciphers 参考配置：</p>
<p>ssl_ciphers TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD;</p>
<h3 id="1-3-宝塔BT面板-TLSV1-3"><a href="#1-3-宝塔BT面板-TLSV1-3" class="headerlink" title="1.3  宝塔BT面板 TLSV1.3"></a>1.3  宝塔BT面板 TLSV1.3</h3><p>新版的宝塔BT面板，已经支持nginx1.15了，直接在“软件管理”页面切换nginx1.15即可。</p>
<p><img src="/2020/04/oneinstack-tls13_10.gif" alt="开启TLSV1.3切换版本"></p>
<p>然后在网站的配置文件加上TLSv1.3相关配置就可以了。</p>
<p>ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;<br>#ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;<br>ssl_ciphers TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5;</p>
<p><img src="/2020/04/oneinstack-tls13_11.gif" alt="开启TLSV1.3宝塔面板中修改"></p>
<h2 id="二、服务器SSL优化"><a href="#二、服务器SSL优化" class="headerlink" title="二、服务器SSL优化"></a>二、服务器SSL优化</h2><p>SSL优化：</p>
<ol>
<li>效果演示：<a href="https://www.ssllabs.com/ssltest/analyze.html?d=wzfou.com">https://www.ssllabs.com/ssltest/analyze.html?d=wzfou.com</a></li>
</ol>
<p>如下图：</p>
<p><img src="/2020/04/oneinstack-tls13_12.gif" alt="开启TLSV1.3优化效果"></p>
<p>优化的方法除了本文讲到的开启TLSV1.3，优化的经验（主要是SSL双证书、HSTS）也在以下两篇文章中有分享过：</p>
<blockquote>
<p>1.<a href="https://wzfou.com/hsts-preload/">启用HSTS并加入HSTS Preload List让网站Https访问更加安全-附删除HSTS方法</a></p>
<p>2.<a href="https://wzfou.com/https-ssl/">八个HTTPS和SSL优化使用心得-减少等待时间和降低Https性能损耗</a></p>
</blockquote>
<h2 id="三、开启Brotli压缩"><a href="#三、开启Brotli压缩" class="headerlink" title="三、开启Brotli压缩"></a>三、开启Brotli压缩</h2><p>项目：</p>
<ol>
<li><a href="https://github.com/google/ngx/_brotli">https://github.com/google/ngx\_brotli</a></li>
</ol>
<h3 id="3-1-Oneinstack-Brotli"><a href="#3-1-Oneinstack-Brotli" class="headerlink" title="3.1  Oneinstack Brotli"></a>3.1  Oneinstack Brotli</h3><p>Oneinstack 开启 Brotli需要先进行编译，最简单的方法就是利用Oneinstack自带的升级脚本，将Brotli编译到Nginx，方法如下：</p>
<p>cd oneinstack&#x2F;src<br>git clone <a href="https://github.com/google/ngx/_brotli.git">https://github.com/google/ngx\_brotli.git</a><br>cd ngx_brotli<br>git submodule update –init<br>#修改options.conf<br>nginx_modules_options中新增–add-module&#x3D;..&#x2F;ngx_brotli<br>.&#x2F;upgrade.sh web nginx</p>
<p>#20190118更新，新版Oneinstack需要到oneinstack\include目录，找到upgrade_web.sh，修改：<br> .&#x2F;configure ${nginx_configure_args}<br>#新增：<br> .&#x2F;configure ${nginx_configure_args} –add-module&#x3D;..&#x2F;ngx_brotli<br>#最后（执行升级，选择Nginx）：<br>~&#x2F;oneinstack&#x2F;upgrade.sh</p>
<p>#修改&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</p>
<pre><code>brotli             on;
brotli\_comp\_level  6;
brotli\_types       text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;
</code></pre>
<p>或者直接手动编译Brotli到Nginx，该方法与wzfou.com之前分享的<a href="https://wzfou.com/nginx-fastcgi-cache/#Nginx_ngx_cache_purge">Oneinstack编译ngx_cache_purge模块</a>是一样的：</p>
<p>cd oneinstack&#x2F;src<br>git clone <a href="https://github.com/google/ngx/_brotli.git">https://github.com/google/ngx\_brotli.git</a><br>cd ngx_brotli<br>git submodule update –init</p>
<p>#以下几个安装包都是Oneinstack自带的，不同的版本可能会不同，请根据情况下载到&#x2F;root&#x2F;oneinstack&#x2F;src&#x2F;并解压<br>tar xzf nginx-1.14.2.tar.gz<br>tar xzf pcre-8.42.tar.gz<br>tar xzf openssl-1.1.1a.tar.gz<br>cd &#x2F;root&#x2F;oneinstack&#x2F;src&#x2F;nginx-1.14.2<br>nginx -V #查看nginx编译参数，最后加上–add-module&#x3D;..&#x2F;ngx_brotli</p>
<p>.&#x2F;configure –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx –user&#x3D;www –group&#x3D;www –with-http_stub_status_module –with-http_v2_module –with-http_ssl_module –with-http_gzip_static_module –with-http_realip_module –with-http_flv_module –with-http_mp4_module –with-openssl&#x3D;..&#x2F;openssl-1.1.1a –with-pcre&#x3D;..&#x2F;pcre-8.42 –with-pcre-jit –with-ld-opt&#x3D;-ljemalloc –add-module&#x3D;..&#x2F;ngx_cache_purge-2.3 –add-module&#x3D;..&#x2F;ngx_brotli</p>
<p>make  #编译<br>mv &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx{,_`date +%F`}  #备份nginx<br>cp objs&#x2F;nginx &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin<br>nginx -V</p>
<p>Nginx Brotli编译成功。</p>
<p><img src="/2020/04/oneinstack-tls13_04.gif" alt="开启TLSV1.3升级编译"></p>
<p>打开你的网站的Nginx配置文件，添加以下代码：</p>
<p>#修改&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</p>
<pre><code>brotli             on;
brotli\_comp\_level  6;
brotli\_types       text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;
</code></pre>
<p>如下图：</p>
<p><img src="/2020/04/oneinstack-tls13_05.gif" alt="开启TLSV1.3添加代码支持"></p>
<p>重启Nginx，刷新网页，利用Chrome审查元素，就可以看到网页显示“br”字样，表示使用了Brotli压缩。</p>
<p><img src="/2020/04/oneinstack-tls13_06.gif" alt="Brotli压缩成功启用"></p>
<h3 id="3-2-LNMP-Brotli"><a href="#3-2-LNMP-Brotli" class="headerlink" title="3.2  LNMP Brotli"></a>3.2  LNMP Brotli</h3><p>在LNMP上编译Brotli类似于上面的Oneinstack，首先也是将Brotli下载到本地，然后编辑一下配置，重新编译一下Nginx即可。命令如下：</p>
<p>#下载<br>cd lnmp1.5&#x2F;src<br>git clone <a href="https://github.com/google/ngx/_brotli.git">https://github.com/google/ngx\_brotli.git</a><br>cd ngx_brotli<br>git submodule update –init<br>#编辑配置，请根据你自己的路径调整<br>vi &#x2F;root&#x2F;lnmp1.5&#x2F;lnmp.conf<br>#添加<br>Nginx_Modules_Options&#x3D;’–add-module&#x3D;&#x2F;wzfou&#x2F;lnmp1.5&#x2F;ngx_brotli’<br>#最后，重新重新编译或者升级Nginx<br>cd &#x2F;root&#x2F;lnmp1.5<br>.&#x2F;upgrade.sh nginx</p>
<p>编辑配置文件如下：</p>
<p><img src="/2020/04/oneinstack-tls13_15.gif" alt="LNMP启用Brotli压缩"></p>
<p>最后，还是修改你的网站配置加入Brotli代码。</p>
<p>brotli             on;<br>brotli_comp_level  6;<br>brotli_types       text&#x2F;plain text&#x2F;css application&#x2F;json application&#x2F;x-javascript text&#x2F;xml application&#x2F;xml application&#x2F;xml+rss text&#x2F;javascript application&#x2F;javascript image&#x2F;svg+xml;</p>
<h3 id="3-3-宝塔面板-Brotli"><a href="#3-3-宝塔面板-Brotli" class="headerlink" title="3.3  宝塔面板 Brotli"></a>3.3  宝塔面板 Brotli</h3><p>宝塔面板编译 Brotli也一样，利用宝塔自带的脚本：www&#x2F;server&#x2F;panel&#x2F;install&#x2F;nginx.sh对Nginx重新编译和升级，代码如下：</p>
<p>#安装libbrotli<br>cd &#x2F;www&#x2F;server<br>git clone <a href="https://github.com/bagder/libbrotli">https://github.com/bagder/libbrotli</a><br>cd libbrotli<br>.&#x2F;autogen.sh<br>.&#x2F;configure<br>make &amp;&amp; make install</p>
<p>#下载ngx_brotli模块及其依赖：<br>cd &#x2F;www&#x2F;server<br>git clone <a href="https://github.com/google/ngx/_brotli">https://github.com/google/ngx\_brotli</a><br>cd ngx_brotli &amp;&amp; git submodule update –init</p>
<p>#获取Nginx Arguments<br>nginx -V</p>
<p>#编辑配置<br>vi &#x2F;www&#x2F;server&#x2F;panel&#x2F;install&#x2F;nginx.sh</p>
<p>#在你需要安装的Nginx版本下增加：–add-module&#x3D;&#x2F;www&#x2F;server&#x2F;ngx_brotli</p>
<p>  if [ “${nginx_version}” &#x3D;&#x3D; “1.12.2” ]  [ “${nginx_version}” &#x3D;&#x3D; “1.14.2” ];then<br>    .&#x2F;configure –user&#x3D;www –group&#x3D;www –prefix&#x3D;${Setup_Path} –with-openssl&#x3D;${Update_Path}&#x2F;src&#x2F;openssl –add-module&#x3D;${Update_Path}&#x2F;src&#x2F;ngx_devel_kit –add-module&#x3D;${Update_Path}&#x2F;src&#x2F;lua_nginx_module –add-module&#x3D;${Update_Path}&#x2F;src&#x2F;ngx_cache_purge –add-module&#x3D;${Update_Path}&#x2F;src&#x2F;nginx-sticky-module –with-http_stub_status_module –with-http_ssl_module –with-http_image_filter_module –with-http_v2_module –with-http_gzip_static_module –with-http_gunzip_module –with-stream –with-stream_ssl_module –with-ipv6 –with-http_sub_module –with-http_flv_module –with-http_addition_module –with-http_realip_module –with-http_mp4_module –with-ld-opt&#x3D;”-Wl,-E” –with-pcre&#x3D;pcre-${pcre_version} ${jemallocLD} –add-module&#x3D;&#x2F;www&#x2F;server&#x2F;ngx_brotli<br>  elif [ “${nginxVersion}” &#x3D;&#x3D; “1.15.6” ]; then<br>    .&#x2F;configure –user&#x3D;www –group&#x3D;www –prefix&#x3D;${Setup_Path} –with-openssl&#x3D;${Setup_Path}&#x2F;src&#x2F;openssl –add-module&#x3D;${Setup_Path}&#x2F;src&#x2F;ngx_devel_kit –add-module&#x3D;${Setup_Path}&#x2F;src&#x2F;lua_nginx_module –add-module&#x3D;${Setup_Path}&#x2F;src&#x2F;ngx_cache_purge –add-module&#x3D;${Setup_Path}&#x2F;src&#x2F;nginx-sticky-module –with-http_stub_status_module –with-http_ssl_module –with-http_v2_module –with-http_image_filter_module –with-http_gzip_static_module –with-http_gunzip_module –with-stream –with-stream_ssl_module –with-ipv6 –with-http_sub_module –with-http_flv_module –with-http_addition_module –with-http_realip_module –with-http_mp4_module –with-ld-opt&#x3D;”-Wl,-E” –with-openssl-opt&#x3D;”enable-tls1_3 enable-weak-ssl-ciphers” ${jemallocLD} –add-module&#x3D;&#x2F;www&#x2F;server&#x2F;ngx_brotli<br>  elif [ “$nginx_version” &#x3D;&#x3D; “openresty” ]; then<br>    .&#x2F;configure –user&#x3D;www –group&#x3D;www –prefix&#x3D;${Setup_Path} –with-openssl&#x3D;${Update_Path}&#x2F;src&#x2F;openssl –with-pcre&#x3D;pcre-${pcre_version} –add-module&#x3D;${Update_Path}&#x2F;src&#x2F;ngx_cache_purge –add-module&#x3D;${Update_Path}&#x2F;src&#x2F;nginx-sticky-module –with-luajit –with-http_stub_status_module –with-http_ssl_module –with-http_image_filter_module –with-http_v2_module –with-http_gzip_static_module –with-http_gunzip_module –with-stream –with-stream_ssl_module –with-ipv6 –with-http_sub_module –with-http_flv_module –with-http_addition_module –with-http_realip_module –with-http_mp4_module –with-ld-opt&#x3D;”-Wl,-E” ${jemallocLD}<br>  elif [ “${nginxVersion}” &#x3D; “-Tengine2.2.3” ]; then<br>    .&#x2F;configure –user&#x3D;www –group&#x3D;www –prefix&#x3D;${Setup_Path} –with-openssl&#x3D;${Update_Path}&#x2F;src&#x2F;openssl –add-module&#x3D;${Update_Path}&#x2F;src&#x2F;ngx_devel_kit –add-module&#x3D;${Update_Path}&#x2F;src&#x2F;lua_nginx_module –add-module&#x3D;${Update_Path}&#x2F;src&#x2F;ngx_cache_purge –add-module&#x3D;${Update_Path}&#x2F;src&#x2F;nginx-sticky-module –with-http_stub_status_module –with-http_ssl_module –with-http_image_filter_module –with-http_v2_module –with-http_gzip_static_module –with-http_gunzip_module –with-ipv6 –with-http_sub_module –with-http_flv_module –with-http_addition_module –with-http_realip_module –with-http_mp4_module –with-ld-opt&#x3D;”-Wl,-E” –without-http_upstream_session_sticky_module –with-pcre&#x3D;pcre-${pcre_version} –add-module&#x3D;&#x2F;www&#x2F;server&#x2F;ngx_brotli</p>
<p>#最后，重新编译Nginx（请根据自己的需要来选择）<br>sh &#x2F;www&#x2F;server&#x2F;panel&#x2F;install&#x2F;nginx.sh install 1.14</p>
<p>最后，在你的网站的Nginx配置中加入Brotli代码即可。</p>
<p>brotli             on;<br>brotli_comp_level  6;<br>brotli_types       text&#x2F;plain text&#x2F;css application&#x2F;json application&#x2F;x-javascript text&#x2F;xml application&#x2F;xml application&#x2F;xml+rss text&#x2F;javascript application&#x2F;javascript image&#x2F;svg+xml;</p>
<p>关于Brotli一些参数的说明，你可以根据自己的需要来调整：</p>
<p>  brotli on;              #启用<br>  brotli_comp_level 6;    #压缩等级，默认 6，太高的压缩水平可能需要更多的 CPU<br>  brotli_buffers 16 8k;   #请求缓冲区的数量和大小<br>  brotli_min_length 20;   #指定压缩数据的最小长度，只有大于或等于最小长度才会对其压缩。这里指定 20 字节<br>  brotli_types *;         #指定允许进行压缩类型</p>
<h1 id="brotli-types-text-x2F-plain-application-x2F-javascript-application-x2F-x-javascript-text-x2F-javascript-text-x2F-css-application-x2F-xml-text-x2F-html-application-x2F-json-image-x2F-svg-application-x2F-font-woff-application-x2F-vnd-ms-fontobject-application-x2F-vnd-apple-mpegurl-image-x2F-x-icon-image-x2F-jpeg-image-x2F-gif-image-x2F-png-image-x2F-bmp"><a href="#brotli-types-text-x2F-plain-application-x2F-javascript-application-x2F-x-javascript-text-x2F-javascript-text-x2F-css-application-x2F-xml-text-x2F-html-application-x2F-json-image-x2F-svg-application-x2F-font-woff-application-x2F-vnd-ms-fontobject-application-x2F-vnd-apple-mpegurl-image-x2F-x-icon-image-x2F-jpeg-image-x2F-gif-image-x2F-png-image-x2F-bmp" class="headerlink" title="brotli_types text&#x2F;plain application&#x2F;javascript application&#x2F;x-javascript text&#x2F;javascript text&#x2F;css application&#x2F;xml text&#x2F;html application&#x2F;json image&#x2F;svg application&#x2F;font-woff application&#x2F;vnd.ms-fontobject application&#x2F;vnd.apple.mpegurl image&#x2F;x-icon image&#x2F;jpeg image&#x2F;gif image&#x2F;png image&#x2F;bmp;"></a>brotli_types text&#x2F;plain application&#x2F;javascript application&#x2F;x-javascript text&#x2F;javascript text&#x2F;css application&#x2F;xml text&#x2F;html application&#x2F;json image&#x2F;svg application&#x2F;font-woff application&#x2F;vnd.ms-fontobject application&#x2F;vnd.apple.mpegurl image&#x2F;x-icon image&#x2F;jpeg image&#x2F;gif image&#x2F;png image&#x2F;bmp;</h1><p>  brotli_static always;   #是否允许查找预处理好的、以 .br 结尾的压缩文件，可选值为 on、off、always<br>  brotli_window 512k;     #窗口值，默认值为 512k</p>
<h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p><strong>要不要用TLSV1.3？</strong>总得来看，TLSV1.3是未来的趋势，有人担心浏览器不支持，其实除了IE，最新版的Chrome和Firefox都是支持TLSV1.3的，各大浏览器支持TLSV1.3情况见：<a href="https://caniuse.com/#feat=tls1-3">https://caniuse.com/#feat=tls1-3</a></p>
<p><img src="/2020/04/oneinstack-tls13_13.gif" alt="各大浏览器支持TLSV1.3情况"></p>
<p><strong>要不要用Brotli？</strong>理论上讲Brotli压缩比比GZIP要高不少，所以对于网页打开速度也是有一定作用的，不过想要秒开的感觉，还是先从硬件上提升一下速度吧，这里是各大浏览器支持Brotli的情况：<a href="https://caniuse.com/#feat=brotli">https://caniuse.com/#feat=brotli</a></p>
<p><img src="/2020/04/oneinstack-tls13_14.gif" alt="各大浏览器支持Brotli的情况"></p>
<p><strong>有没有有一键自动开启TLSV1.3和Brotli？</strong>有，如果你用的是<a href="https://wzfou.com/cloudflare-cdn/">CloudFlare免费CDN加速</a>，CF已经为所有的网站自动开启TLSv1.3和Brotli，加速效果可以见我的演示站：losv.wzfou.net。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>LNMP</tag>
        <tag>SSL</tag>
        <tag>LNMPA</tag>
        <tag>LNMT</tag>
        <tag>OneinStack</tag>
        <tag>Brotli</tag>
        <tag>TLSV1.3</tag>
      </tags>
  </entry>
  <entry>
    <title>自建 DNS 解析利器：PowerDNS+PowerDNS-Webinterface</title>
    <url>/2020/04/14/%E8%87%AA%E5%BB%BA-dns-%E8%A7%A3%E6%9E%90%E5%88%A9%E5%99%A8%EF%BC%9Apowerdnspowerdns-webinterface/</url>
    <content><![CDATA[<p><strong>介绍</strong>： PowerDNS 支持的一些特性： EDNS Client Subnet、DNSSEC、GEODNS、IPv6 等 同时 PowerDNS 支持超多的解析记录种类： A、AAAA、AFSDB、ALIAS（ANAME）、CAA、CERT、CDNSKEY、CDS、CNAME、DNSKEY、DNAME、DS、HINFO、KEY、LOC、MX、NAPTR、NS、NSEC、NSEC3、NSEC3PARAM、OPENPGPKEY、PTR、RP、RRSIG、SOA、SPF、SSHFP、SRV、TKEY、TSIG、TLSA、TXT、URI 等 至于 Web 前端，PowerDNS 官方推荐的是自家的 PowerAdmin，然后我比对了一下，都是万年不更新，但是 PowerAdmin UI 保持上世纪末期的风格，PowerDNS-Webinterface 好很多，同样水准下，当然是选择了更好看的后者啊。</p>
<p><strong>工具</strong>： PowerDNS：<a href="https://www.powerdns.com/">https://www.powerdns.com</a> PowerDNS-Webinterface：<a href="https://github.com/Spacefish/powerdns-webinterface">https://github.com/Spacefish/powerdns-webinterface</a> 其它前端 PowerAdmin：<a href="http://www.poweradmin.org/">http://www.poweradmin.org</a></p>
<p><strong>参考</strong>： <a href="http://arstech.net/install-powerdns-and-powerdns-webinterface-on-centos/">http://arstech.net/install-powerdns-and-powerdns-webinterface-on-centos/</a> <strong>拓展</strong>： <a href="https://guozeyu.com/2016/08/self-host-dns/">https://guozeyu.com/2016/08/self-host-dns/</a></p>
<p><strong>环境</strong>：</p>
<blockquote>
<p>Centos6 x64 PHP 5.6 Apache MariaDB 10+</p>
</blockquote>
<p>本文章一切都是在为实现 rDNS 反向解析功能前提下进行的，并没有测试其它功能，不保证文章所述可以完全保证其它功能的使用。</p>
<h2 id="PowerDNS-部分"><a href="#PowerDNS-部分" class="headerlink" title="PowerDNS 部分"></a>PowerDNS 部分</h2><p>安装 PowerDNS Mysql 版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y epel</span><br><span class="line">yum install -y pdns pdns-backend-mysql</span><br></pre></td></tr></table></figure>

<p>修改配置文件 &#x2F;etc&#x2F;pdns&#x2F;pdns.conf 我贴的是改好的，你只需要改配置文件底部的 Mysql 信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setuid=pdns</span><br><span class="line">setgid=pdns</span><br><span class="line">launch=bind</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Autogenerated configuration file template</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">add-superfluous-nsec3-for-old-bind    Add superfluous NSEC3 record to positive wildcard response</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># add-superfluous-nsec3-for-old-bind=no</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">allow-axfr-ips    Allow zonetransfers only to these subnets</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># allow-axfr-ips=0.0.0.0/0,::/0</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">allow-recursion    List of subnets that are allowed to recurse</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">allow-recursion=0.0.0.0/0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">any-to-tcp    Answer ANY queries with tc=1, shunting to TCP</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># any-to-tcp=no</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cache-ttl    Seconds to store packets <span class="keyword">in</span> the PacketCache</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># cache-ttl=20</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">chroot</span>    If <span class="built_in">set</span>, <span class="built_in">chroot</span> to this directory <span class="keyword">for</span> more security</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># chroot=</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">config-dir    Location of configuration directory (pdns.conf)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># config-dir=/usr/local/etc</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">config-name    Name of this virtual configuration - will rename the binary image</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># config-name=</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">control-console    Debugging switch - don’t use</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># control-console=no</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">daemon    Operate as a daemon</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># daemon=no</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">default-ksk-algorithms    Default KSK algorithms</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># default-ksk-algorithms=rsasha256</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">default-ksk-size    Default KSK size (0 means default)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># default-ksk-size=0</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">default-soa-mail    mail address to insert <span class="keyword">in</span> the SOA record <span class="keyword">if</span> none <span class="built_in">set</span> <span class="keyword">in</span> the backend</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># default-soa-mail=</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">default-soa-name    name to insert <span class="keyword">in</span> the SOA record <span class="keyword">if</span> none <span class="built_in">set</span> <span class="keyword">in</span> the backend</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># default-soa-name=a.misconfigured.powerdns.server</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">default-ttl    Seconds a result is valid <span class="keyword">if</span> not <span class="built_in">set</span> otherwise</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># default-ttl=3600</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">default-zsk-algorithms    Default ZSK algorithms</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># default-zsk-algorithms=rsasha256</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">default-zsk-size    Default KSK size (0 means default)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># default-zsk-size=0</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">direct-dnskey    Fetch DNSKEY RRs from backend during DNSKEY synthesis</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># direct-dnskey=no</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">disable-axfr    Disable zonetransfers but <span class="keyword">do</span> allow TCP queries</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># disable-axfr=no</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">disable-tcp    Do not listen to TCP queries</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># disable-tcp=no</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">distributor-threads    Default number of Distributor (backend) threads to start</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># distributor-threads=3</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">do-ipv6-additional-processing    Do AAAA additional processing</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># do-ipv6-additional-processing=yes</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">edns-subnet-option-number    EDNS option number to use</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># edns-subnet-option-number=20730</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">edns-subnet-processing    If we should act on EDNS Subnet options</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># edns-subnet-processing=no</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">entropy-source    If <span class="built_in">set</span>, <span class="built_in">read</span> entropy from this file</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># entropy-source=/dev/urandom</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">experimental-json-interface    If the webserver should serve JSON data</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># experimental-json-interface=no</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">experimental-logfile    Filename of the <span class="built_in">log</span> file <span class="keyword">for</span> JSON parser</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># experimental-logfile=/var/log/pdns.log</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fancy-records    Process URL and MBOXFW records</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># fancy-records=no</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">guardian    Run within a guardian process</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># guardian=no</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">include-dir    Include .conf files from this directory</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># include-dir=</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">launch    Which backends to launch and order to query them <span class="keyword">in</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># launch=</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">load-modules    Load this module - supply absolute or relative path</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># load-modules=</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">local-address    Local IP addresses to <span class="built_in">which</span> we <span class="built_in">bind</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">local-address=0.0.0.0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">local-ipv6    Local IP address to <span class="built_in">which</span> we <span class="built_in">bind</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># local-ipv6=</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">local-port    The port on <span class="built_in">which</span> we listen</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">local-port=53</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">log-dns-details    If PDNS should <span class="built_in">log</span> DNS non-erroneous details</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># log-dns-details=</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">log-dns-queries    If PDNS should <span class="built_in">log</span> all incoming DNS queries</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># log-dns-queries=no</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">log-failed-updates    If PDNS should <span class="built_in">log</span> failed update requests</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># log-failed-updates=</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">logging-facility    Log under a specific facility</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># logging-facility=</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">loglevel    Amount of logging. Higher is more. Do not <span class="built_in">set</span> below 3</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># loglevel=4</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">lua-prequery-script    Lua script with prequery handler</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># lua-prequery-script=</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">master    Act as a master</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># master=no</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-cache-entries    Maximum number of cache entries</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># max-cache-entries=1000000</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-ent-entries    Maximum number of empty non-terminals <span class="keyword">in</span> a zone</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># max-ent-entries=100000</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-nsec3-iterations    Limit the number of NSEC3 <span class="built_in">hash</span> iterations</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># max-nsec3-iterations=500</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-queue-length    Maximum queuelength before considering situation lost</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># max-queue-length=5000</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-tcp-connections    Maximum number of TCP connections</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># max-tcp-connections=10</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">module-dir    Default directory <span class="keyword">for</span> modules</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># module-dir=/usr/local/lib</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">negquery-cache-ttl    Seconds to store negative query results <span class="keyword">in</span> the QueryCache</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># negquery-cache-ttl=60</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">no-shuffle    Set this to prevent random shuffling of answers - <span class="keyword">for</span> regression testing</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># no-shuffle=off</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">out-of-zone-additional-processing    Do out of zone additional processing</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># out-of-zone-additional-processing=yes</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">overload-queue-length    Maximum queuelength moving to packetcache only</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># overload-queue-length=0</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pipebackend-abi-version    Version of the pipe backend ABI</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># pipebackend-abi-version=1</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prevent-self-notification    Don’t send notifications to what we think is ourself</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># prevent-self-notification=yes</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">query-cache-ttl    Seconds to store query results <span class="keyword">in</span> the QueryCache</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># query-cache-ttl=20</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">query-local-address    Source IP address <span class="keyword">for</span> sending queries</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># query-local-address=0.0.0.0</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">query-local-address6    Source IPv6 address <span class="keyword">for</span> sending queries</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># query-local-address6=::</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">query-logging    Hint backends that queries should be logged</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># query-logging=no</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">queue-limit    Maximum number of milliseconds to queue a query</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># queue-limit=1500</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">receiver-threads    Default number of receiver threads to start</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># receiver-threads=1</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">recursive-cache-ttl    Seconds to store packets <span class="keyword">for</span> recursive queries <span class="keyword">in</span> the PacketCache</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># recursive-cache-ttl=10</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">recursor    If recursion is desired, IP address of a recursing nameserver</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># recursor=no</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">retrieval-threads    Number of AXFR-retrieval threads <span class="keyword">for</span> slave operation</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># retrieval-threads=2</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">security-poll-suffix    Domain name from <span class="built_in">which</span> to query security update notifications</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># security-poll-suffix=secpoll.powerdns.com.</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">send-root-referral    Send out old-fashioned root-referral instead of ServFail <span class="keyword">in</span> <span class="keyword">case</span> of no authority</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># send-root-referral=no</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">server-id    Returned when queried <span class="keyword">for</span> ’server.id’ TXT or NSID, defaults to hostname</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># server-id=</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">setgid    If <span class="built_in">set</span>, change group <span class="built_in">id</span> to this gid <span class="keyword">for</span> more security</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># setgid=</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">setuid    If <span class="built_in">set</span>, change user <span class="built_in">id</span> to this uid <span class="keyword">for</span> more security</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># setuid=</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">signing-threads    Default number of signer threads to start</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># signing-threads=3</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">slave    Act as a slave</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># slave=no</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">slave-cycle-interval    Reschedule failed SOA serial checks once every .. seconds</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># slave-cycle-interval=60</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">slave-renotify    If we should send out notifications <span class="keyword">for</span> slaved updates</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># slave-renotify=no</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">smtpredirector    Our smtpredir MX host</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># smtpredirector=a.misconfigured.powerdns.smtp.server</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">soa-expire-default    Default SOA expire</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># soa-expire-default=604800</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">soa-minimum-ttl    Default SOA minimum ttl</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># soa-minimum-ttl=3600</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">soa-refresh-default    Default SOA refresh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># soa-refresh-default=10800</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">soa-retry-default    Default SOA retry</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># soa-retry-default=3600</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">soa-serial-offset    Make sure that no SOA serial is less than this number</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># soa-serial-offset=0</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">socket-dir    Where the controlsocket will live</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># socket-dir=/var/run</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tcp-control-address    If <span class="built_in">set</span>, PowerDNS can be controlled over TCP on this address</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># tcp-control-address=</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tcp-control-port    If <span class="built_in">set</span>, PowerDNS can be controlled over TCP on this address</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># tcp-control-port=53000</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tcp-control-range    If <span class="built_in">set</span>, remote control of PowerDNS is possible over these networks only</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># tcp-control-range=127.0.0.0/8, 10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, ::1/128, fe80::/10</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tcp-control-secret    If <span class="built_in">set</span>, PowerDNS can be controlled over TCP after passing this secret</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># tcp-control-secret=</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">traceback-handler    Enable the traceback handler (Linux only)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># traceback-handler=yes</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">trusted-notification-proxy    IP address of incoming notification proxy</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># trusted-notification-proxy=</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">urlredirector    Where we send hosts to that need to be url redirected</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># urlredirector=127.0.0.1</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">version-string    PowerDNS version <span class="keyword">in</span> packets - full, anonymous, powerdns or custom</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># version-string=full</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webserver    Start a webserver <span class="keyword">for</span> monitoring</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># webserver=no</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webserver-address    IP Address of webserver to listen on</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># webserver-address=127.0.0.1</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webserver-password    Password required <span class="keyword">for</span> accessing the webserver</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># webserver-password=</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webserver-port    Port of webserver to listen on</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># webserver-port=8081</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webserver-print-arguments    If the webserver should <span class="built_in">print</span> arguments</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># webserver-print-arguments=no</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">wildcard-url    Process URL and MBOXFW records</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># wildcard-url=no</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">xfr-max-received-mbytes    Maximum number of megabytes received from an incoming AXFR</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># xfr-max-received-mbytes=100</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接着我们登录 mysql，创建一个名为 powerdns 的用户以及数据库，并导入以下数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CREATE TABLE domains ( id                    INT AUTO_INCREMENT,</span><br><span class="line"> name                  VARCHAR(255) NOT NULL,</span><br><span class="line"> master                VARCHAR(128) DEFAULT NULL,</span><br><span class="line"> last_check            INT DEFAULT NULL,</span><br><span class="line"> type                  VARCHAR(6) NOT NULL,</span><br><span class="line"> notified_serial       INT DEFAULT NULL,</span><br><span class="line"> account               VARCHAR(40) DEFAULT NULL,</span><br><span class="line"> PRIMARY KEY (id)</span><br><span class="line"> ) Engine=InnoDB;</span><br><span class="line">CREATE UNIQUE INDEX name_index ON domains(name);</span><br><span class="line">CREATE TABLE records (</span><br><span class="line"> id                    INT AUTO_INCREMENT,</span><br><span class="line"> domain_id             INT DEFAULT NULL,</span><br><span class="line"> name                  VARCHAR(255) DEFAULT NULL,</span><br><span class="line"> type                  VARCHAR(10) DEFAULT NULL,</span><br><span class="line"> content               VARCHAR(64000) DEFAULT NULL,</span><br><span class="line"> ttl                   INT DEFAULT NULL,</span><br><span class="line"> prio                  INT DEFAULT NULL,</span><br><span class="line"> change_date           INT DEFAULT NULL,</span><br><span class="line"> disabled              TINYINT(1) DEFAULT 0,</span><br><span class="line"> ordername             VARCHAR(255) BINARY DEFAULT NULL,</span><br><span class="line"> auth                  TINYINT(1) DEFAULT 1,</span><br><span class="line"> PRIMARY KEY (id)</span><br><span class="line"> ) Engine=InnoDB;</span><br><span class="line">CREATE INDEX nametype_index ON records(name,type);</span><br><span class="line"> CREATE INDEX domain_id ON records(domain_id);</span><br><span class="line"> CREATE INDEX recordorder ON records (domain_id, ordername);</span><br><span class="line">CREATE TABLE supermasters (</span><br><span class="line"> ip                    VARCHAR(64) NOT NULL,</span><br><span class="line"> nameserver            VARCHAR(255) NOT NULL,</span><br><span class="line"> account               VARCHAR(40) NOT NULL,</span><br><span class="line"> PRIMARY KEY (ip, nameserver)</span><br><span class="line"> ) Engine=InnoDB;</span><br><span class="line">CREATE TABLE comments (</span><br><span class="line"> id                    INT AUTO_INCREMENT,</span><br><span class="line"> domain_id             INT NOT NULL,</span><br><span class="line"> name                  VARCHAR(255) NOT NULL,</span><br><span class="line"> type                  VARCHAR(10) NOT NULL,</span><br><span class="line"> modified_at           INT NOT NULL,</span><br><span class="line"> account               VARCHAR(40) NOT NULL,</span><br><span class="line"> comment               VARCHAR(64000) NOT NULL,</span><br><span class="line"> PRIMARY KEY (id)</span><br><span class="line"> ) Engine=InnoDB;</span><br><span class="line">CREATE INDEX comments_domain_id_idx ON comments (domain_id);</span><br><span class="line"> CREATE INDEX comments_name_type_idx ON comments (name, type);</span><br><span class="line"> CREATE INDEX comments_order_idx ON comments (domain_id, modified_at);</span><br><span class="line">CREATE TABLE domainmetadata (</span><br><span class="line"> id                    INT AUTO_INCREMENT,</span><br><span class="line"> domain_id             INT NOT NULL,</span><br><span class="line"> kind                  VARCHAR(32),</span><br><span class="line"> content               TEXT,</span><br><span class="line"> PRIMARY KEY (id)</span><br><span class="line"> ) Engine=InnoDB;</span><br><span class="line">CREATE INDEX domainmetadata_idx ON domainmetadata (domain_id, kind);</span><br><span class="line">CREATE TABLE cryptokeys (</span><br><span class="line"> id                    INT AUTO_INCREMENT,</span><br><span class="line"> domain_id             INT NOT NULL,</span><br><span class="line"> flags                 INT NOT NULL,</span><br><span class="line"> active                BOOL,</span><br><span class="line"> content               TEXT,</span><br><span class="line"> PRIMARY KEY(id)</span><br><span class="line"> ) Engine=InnoDB;</span><br><span class="line">CREATE INDEX domainidindex ON cryptokeys(domain_id);</span><br><span class="line">CREATE TABLE tsigkeys (</span><br><span class="line"> id                    INT AUTO_INCREMENT,</span><br><span class="line"> name                  VARCHAR(255),</span><br><span class="line"> algorithm             VARCHAR(50),</span><br><span class="line"> secret                VARCHAR(255),</span><br><span class="line"> PRIMARY KEY (id)</span><br><span class="line"> ) Engine=InnoDB;</span><br><span class="line">CREATE UNIQUE INDEX namealgoindex ON tsigkeys(name, algorithm);</span><br></pre></td></tr></table></figure>

<p>下载 PowerDNS-Webinterface，导入文件夹内包含的 install.sql 文件，在进行前端数据库导入的时候，可能会出现 1 个 mysql 报错，忽略掉，不影响本文章功能实现的使用 到这里，PowerDNS 部署部分完成，我们使用下面的命令设置开机自启，以及立即启动 PowerDNS</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig —levels 235 pdns on</span><br><span class="line">/etc/init.d/pdns start</span><br></pre></td></tr></table></figure>

<p>可以顺便验证下 PowerDNS 服务是否正常启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -an  grep 53</span><br><span class="line">cat /var/log/messages //如果没有启动 检查日志</span><br></pre></td></tr></table></figure>

<h2 id="PowerDNS-Webinterface-部分"><a href="#PowerDNS-Webinterface-部分" class="headerlink" title="PowerDNS-Webinterface 部分"></a>PowerDNS-Webinterface 部分</h2><p>进入搭建好的 Web 环境根目录，导入 PowerDNS-Webinterface 中 &#x2F; web 内的所有内容，并修改 \ configs\db.php 中的 mysql 信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>删除安全文件，并设置 templates_c 文件夹权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf web\tmp\templates_c\DELETEME</span><br><span class="line">chmod 777 \web\tmp\templates_c\</span><br></pre></td></tr></table></figure>

<p>这时候访问你搭建好的 PowerDNS-Webinterface，账号密码 admin&#x2F;admin，登录后马上更改默认密码 <img src="/2020/04/1546371747866829.png"></p>
<h2 id="设置-PTR-解析部分"><a href="#设置-PTR-解析部分" class="headerlink" title="设置 PTR 解析部分"></a>设置 PTR 解析部分</h2><p>切换至 Domains 菜单，添加你需要设置 rDNS 的 IP 段在解析记录中添加下面的内容 <img src="/2020/04/1546371749758562.png"></p>
<h1 id="图中-ID-801-803-是示例-PTR-记录-这时可以使用-nslookup-来看效果-大功告成。-转自：https-ccav-me-self-built-dns-parsing-tool-powerdns-powerdnswebinterface-html"><a href="#图中-ID-801-803-是示例-PTR-记录-这时可以使用-nslookup-来看效果-大功告成。-转自：https-ccav-me-self-built-dns-parsing-tool-powerdns-powerdnswebinterface-html" class="headerlink" title="图中 ID 801-803 是示例 PTR 记录 这时可以使用 nslookup 来看效果  大功告成。 转自：https://ccav.me/self-built-dns-parsing-tool-powerdns-powerdnswebinterface.html"></a>图中 ID 801-803 是示例 PTR 记录 这时可以使用 nslookup 来看效果 <img src="/2020/04/1546371751787979.png"> 大功告成。 转自：<a href="https://ccav.me/self-built-dns-parsing-tool-powerdns-powerdnswebinterface.html">https://ccav.me/self-built-dns-parsing-tool-powerdns-powerdnswebinterface.html</a></h1>]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>PowerDNS</tag>
        <tag>PowerDNS-Webinterface</tag>
      </tags>
  </entry>
  <entry>
    <title>#菜鸟教程#最简单设置支持HTML的Web服务器</title>
    <url>/2017/11/06/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B%E6%9C%80%E7%AE%80%E5%8D%95%E8%AE%BE%E7%BD%AE%E6%94%AF%E6%8C%81html%E7%9A%84web%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p><img src="https://www.jarods.org/wp-content/uploads/2017/11/vmvps-lamp.jpg" alt="LAMP教程">尽管现在网络上流行着各种各样的一键安装包，但是对于新手朋友来讲，似乎并不利于学习和掌握其中的乐趣，而微魔接触到的很多教程又片面的强调全面，让人阅读起来晦涩难懂。微魔今天准备给大家带来一个极其初级的教程，旨在能够帮助新手朋友能够更快的上手。今天的主题是，最简单的方法设置一个支持html的web服务器。服务器软件微魔选用了轻量级且对于静态页面支持给力的Nginx（当然你也可以选择Apache），本文因为只涉及到了HTML静态页面，因此不需要MySQL等数据库以及PHP等脚本的支持。</p>
<h3 id="【菜鸟教程】最简单设置支持HTML的Web服务器"><a href="#【菜鸟教程】最简单设置支持HTML的Web服务器" class="headerlink" title="【菜鸟教程】最简单设置支持HTML的Web服务器"></a>【菜鸟教程】最简单设置支持HTML的Web服务器</h3><p>本文假设你安装的Debian（我测试使用的Debian7，不过Debian 6也同样适用）</p>
<p>0.更新系统</p>
<p>apt-get update<br>apt-get upgrade</p>
<p>1.安装Nginx</p>
<p>apt-get install nginx</p>
<p>2.启动nginx</p>
<p>service nginx start</p>
<p>或</p>
<p>&#x2F;etc&#x2F;init.d&#x2F;nginx start</p>
<p>3.配置Nginx</p>
<p>创建相关目录</p>
<p>mkdir -p &#x2F;home&#x2F;www&#x2F;vmvps.com&#x2F;public_html<br>mkdir -p &#x2F;home&#x2F;www&#x2F;vmvps.com&#x2F;logs<br>chown -R www-data:www-data &#x2F;home&#x2F;www&#x2F;vmvps.com</p>
<p>用vi在&#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;下新建文件vmvps.com文件，内容如下，</p>
<p>server {<br>    listen   80;<br>    server_name <a href="http://www.vmvps.com/">www.vmvps.com</a> vmvps.com;<br>    access_log &#x2F;home&#x2F;www&#x2F;vmvps.com&#x2F;logs&#x2F;access.log;<br>    error_log &#x2F;home&#x2F;www&#x2F;vmvps.com&#x2F;logs&#x2F;error.log;</p>
<pre><code>location / &#123;
    root   /home/www/vmvps.com/public\_html;
    index  index.html index.htm;
&#125;
</code></pre>
<p>}</p>
<p>以上的文件说明：1.我的域名是vmvps.com；2.Web页面的目录在&#x2F;home&#x2F;www&#x2F;vmvps.com&#x2F;public_html；3.日志目录位于 &#x2F;home&#x2F;www&#x2F;vmvps.com&#x2F;logs&#x2F;。以上几个部分都可以自己修改，如果你想更酷地加入ipv6的支持（前提是你得VPS已经设置了ipv6地址），你还可以在listen 80下加一句listen [::]:80 ipv6only&#x3D;on default_server;</p>
<p>接下来，我们运行如下命令，让配置文件生效，并重启nginx</p>
<p>ln -s &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;vmvps.com &#x2F;etc&#x2F;nginx&#x2F;sites-enabled</p>
<p>&#x2F;etc&#x2F;init.d&#x2F;nginx restart</p>
<p>如果我们要暂停这个虚拟机，只需要运行</p>
<p>rm &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;vmvps.com<br>&#x2F;etc&#x2F;init.d&#x2F;nginx restart</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>让pre标签的代码块自动换行</title>
    <url>/2021/07/11/%E8%AE%A9pre%E6%A0%87%E7%AD%BE%E7%9A%84%E4%BB%A3%E7%A0%81%E5%9D%97%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C/</url>
    <content><![CDATA[<p><code>&lt;pre&gt;</code> 元素可定义预格式化的文本。被包围在 pre 元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。</p>
<p><code>&lt;pre&gt;</code> 标签的一个常见应用就是用来显示源码。</p>
<p>而经常遇到的问题是：如果一句代码很长的情况，结果会造成页面撑开或者代码超出边界，非常难受。</p>
<p>用 <code>overflow:hidden</code> 那么会将原来的代码隐藏掉导致显示不全</p>
<p>而如果用 <code>overflow:auto</code> 则经常出现两个滚动条（右部和底部），阅读不方便还不美观。</p>
<p>如图：</p>
<p><img src="/2021/07/pre-r-b.png"></p>
<p>今天折腾了一个好久，才搞出解决 <code>&lt;pre&gt;</code> 的代码块自动换行的办法：</p>
<p>先尝试我们经常会使用的强制换行：<code>word-wrap: break-word;</code></p>
<p>好像很完美，谨慎的我换着浏览器看了下，结果发现：IE，OP，Chrome，Safari都可以，Firefox就悲剧了。</p>
<p>纳尼，这是什么情况，同样是现代浏览器，FF竟然这么不争气。</p>
<p>仔细查了一下关于换行的css，原来还有 <code>white-space</code> ，丢到浏览器里试一试，填几个 <a href="http://www.w3school.com.cn/cssref/pr_text_white-space.asp">参数</a> 看看效果</p>
<p>加上了 <code>white-space:pre-wrap;</code> 发现Firefox可以神奇的换行了，大功告成！、</p>
<p>最后代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pre &#123;</span><br><span class="line">    white-space: pre-wrap;</span><br><span class="line">    word-wrap: break-word;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="/2021/07/pre-r.png"></p>
<p>这样就没有了底部的那个左右滚动条了，看代码的时候就可以心无旁骛的乡下滚动啦</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>代码</tag>
        <tag>自动换行</tag>
      </tags>
  </entry>
  <entry>
    <title>解决ONEINSTACK PING超时问题-LINUX防火墙规则修改与恢复</title>
    <url>/2020/04/30/%E8%A7%A3%E5%86%B3oneinstack-ping%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98-linux%E9%98%B2%E7%81%AB%E5%A2%99%E8%A7%84%E5%88%99%E4%BF%AE%E6%94%B9%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
    <content><![CDATA[<p>Oneinstack的防火墙规则对ping进行了限制，导致有时用站长工具测试时出现大量ping超时的问题，这种情况有时候不利于我们分析线路问题。</p>
<p><strong>步骤1：备份</strong></p>
<p>iptables-save &gt; &#x2F;etc&#x2F;iptables.up.rules.bak</p>
<p><strong>步骤2：删除规则</strong></p>
<p>vim &#x2F;etc&#x2F;iptables.up.rules</p>
<p>手动删除即可。</p>
<p><strong>步骤3：导入新规则</strong></p>
<p>iptables-restore &lt; &#x2F;etc&#x2F;iptables.up.rules</p>
<p>最后，重启VPS就可以生效了。</p>
<p>找不到<code>iptables.up.rules，可以用命令：whereis iptables，不同的服务器保存的rules名称可能会不一样。</code></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>CentOS</tag>
        <tag>Debian</tag>
        <tag>Linux</tag>
        <tag>iptables</tag>
        <tag>OneinStack</tag>
        <tag>Ping</tag>
      </tags>
  </entry>
  <entry>
    <title>自建DNS服务,实现双DNS服务器主从复制、子域授权、转发、智能解析等效果</title>
    <url>/2020/04/30/%E8%87%AA%E5%BB%BAdns%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E5%8F%8Cdns%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E3%80%81%E5%AD%90%E5%9F%9F%E6%8E%88%E6%9D%83%E3%80%81%E8%BD%AC/</url>
    <content><![CDATA[<p>测试环境：</p>
<p>硬件：一台主DNS服务器 一台从DNS服务器，一台子域DNS服务器  (一个有更改NS解析地址权限的二级域名) 系统：Centos 6.5 x86_64 BIND版本：9.9.5 下面是两台服务器的网络情况</p>
<p><code>[root@LookBack223 ~]``# ifconfig awk -F&#39;[ :]+&#39; &#39;/inet addr/&#123;print$4&#125;&#39; grep -vE &quot;^127.&quot;</code></p>
<p><code>92.222.219.223</code> <code>#DNS主服务器</code></p>
<p><code>=============================================================================</code></p>
<p><code>[root@LookBack226 ~]``# ifconfig awk -F&#39;[ :]+&#39; &#39;/inet addr/&#123;print$4&#125;&#39; grep -vE &quot;^127.&quot;</code></p>
<p><code>92.222.219.226</code> <code>#DNS从服务器</code></p>
<p><code>=============================================================================</code></p>
<p><code>[root@LookBack37 ~]``# ifconfig awk -F&#39;[ :]+&#39; &#39;/inet addr/&#123;print$4&#125;&#39; grep -vE &quot;^127.&quot;</code></p>
<p><code>37.59.108.37</code> <code>#DNS子域服务器</code></p>
<p> </p>
<hr>
<h1 id="一、安装bind-由于现在的bind大版本有9和10，这里用9版本来测试。"><a href="#一、安装bind-由于现在的bind大版本有9和10，这里用9版本来测试。" class="headerlink" title="一、安装bind(由于现在的bind大版本有9和10，这里用9版本来测试。)"></a><strong>一、安装bind(由于现在的bind大版本有9和10，这里用9版本来测试。)</strong></h1><p><a href="https://www.dwhd.org/20150519_164840.html#down-file" title="下载链接">bind-9.9.5.tar.gz下载</a></p>
<p>（官方下载地址：<a href="http://www.isc.org/downloads/%EF%BC%89">http://www.isc.org/downloads/）</a></p>
<p><code>[root@LookBack223 ~]``# groupadd -g 153 -r named</code></p>
<p><code>[root@LookBack223 ~]``# useradd -g named -r -u 153 named</code></p>
<p><code>#在系统上创建一个GID为153 组名为named的系统组</code></p>
<p><code>#在系统上穿件一个UID为153 所在组为named 系统用户</code></p>
<p><code>[root@LookBack223 ~]``# yum groupinstall &quot;Development tools&quot; &quot;Server Platform Development&quot; -y</code></p>
<p><code>#安装开发库包，不然下面是编译不了的(自己安装make等程序也是可以的，这里只是为了取巧。)</code></p>
<p><code>[root@LookBack223 ~]``# wget -4c [http://www.05hd.com/wp-content/uploads/2014/08/bind-9.9.5.tar.gz](http://www.05hd.com/wp-content/uploads/2014/08/bind-9.9.5.tar.gz)</code></p>
<p><code>[root@LookBack223 ~]``# tar xf bind-9.9.5.tar.gz</code></p>
<p><code>[root@LookBack223 ~]``# cd bind-9.9.5</code></p>
<p><code>[root@LookBack223 bind-9.9.5]``# ./configure --prefix=/usr/local/bind995 --sysconfdir=/etc/named --disable-chroot --enable-threads --enable-ipv6</code></p>
<p><code>#指定bind安装到/usr/local/bind995目录下，指定配置文件在/etc/bind995目录下，关闭chroot功能，开启threads和ipv6功能，其他用默认，这里的编译选项请根据各自的实际需求来选择。</code></p>
<p><code>#如果能看到类似下面的信息且没有报错那么就可以继续往下走</code></p>
<p><code>========================================================================</code></p>
<p><code>Configuration summary:</code></p>
<p><code>------------------------------------------------------------------------</code></p>
<p><code>Optional features enabled:</code></p>
<p> <code>Multiprocessing support (--``enable``-threads)</code></p>
<p> <code>GSS-API (--with-gssapi)</code></p>
<p> <code>Print backtrace on crash (--``enable``-backtrace)</code></p>
<p> <code>Use symbol table</code> <code>for</code> <code>backtrace, named only (--``enable``-symtable)</code></p>
<p> <code>Dynamically loadable zone (DLZ) drivers:</code></p>
<p> <code>None</code></p>
<p><code>Features disabled or unavailable on this platform:</code></p>
<p> <code>Response Rate Limiting (--``enable``-rrl)</code></p>
<p> <code>PKCS``#11/Cryptoki support (--with-pkcs11)</code></p>
<p> <code>New statistics (--``enable``-newstats)</code></p>
<p> <code>Allow</code> <code>&#39;fixed&#39;</code> <code>rrset-order (--``enable``-fixed-rrset)</code></p>
<p> <code>Automated Testing Framework (--with-atf)</code></p>
<p> <code>GOST algorithm support (--with-gost)</code></p>
<p> <code>Python tools (--with-python)</code></p>
<p> <code>XML statistics (--with-libxml2)</code></p>
<p><code>========================================================================</code></p>
<p><code>#开始编译</code></p>
<p><code>[root@localhost bind-9.9.5]``# make -j $(awk &#39;/processor/&#123;i++&#125;&#125;END&#123;print i&#125;&#39; /proc/cpuinfo) &amp;&amp; make install</code></p>
<p> </p>
<p><code>[root@LookBack223 ~]``# dig -v</code></p>
<p><code>DiG 9.8.2rc1-RedHat-9.8.2-0.17.rc1.el6_4.6</code></p>
<p><code>[root@LookBack223 ~]``# /usr/local/bind995/bin/dig -v</code></p>
<p><code>DiG 9.9.5</code></p>
<p><code>#系统上的虽然之前没有安装bind服务端但是客户端是有装的比如bind自带的dig程序，所以这里我们需要设置系统环境变量</code></p>
<p><code>[root@LookBack223 ~]``# echo &quot;export PATH=/usr/local/bind/bin:/usr/local/bind/sbin:$PATH&quot; &gt; /etc/profile.d/bind.sh</code></p>
<p><code>[root@LookBack223 ~]``# ln -sv /usr/local/bind995 /usr/local/bind</code></p>
<p><code>[root@LookBack223 ~]``# . /etc/profile.d/bind.sh</code></p>
<p><code>[root@LookBack223 ~]``# echo $PATH</code></p>
<p><code>/usr/lib64/qt-3``.3``/bin``:``/usr/local/bind/bin``:``/usr/local/bind/sbin``:``/usr/local/sbin``:``/usr/local/bin``:``/sbin``:``/bin``:``/usr/sbin``:``/usr/bin``:``/root/bin</code></p>
<p><code>[root@LookBack223 ~]``# dig -v</code></p>
<p><code>DiG 9.9.5</code></p>
<p><code>#这时候就OK了</code></p>
<p><code>[root@LookBack223 ~]``# sed -i &quot;$(awk &#39;$1==&quot;MANPATH&quot;&#123;n=NR&#125;END&#123;print n&#125;&#39; /etc/man.config)a MANPATHt/usr/local/bind/share/man&quot; /etc/man.config</code></p>
<p><code>#导出帮助手册,是系统可以直接man named命令</code></p>
<p><code>如果有如下提示</code></p>
<p><code>awk``: 命令行:1: 致命错误: 无法以读模式打开文件“``/etc/man``.config”(没有那个文件或目录)</code></p>
<p><code>sed``：无法读取</code> <code>/etc/man``.config：没有那个文件或目录</code></p>
<p><code>那就需要安装``man</code></p>
<p><code>[root@LookBack223 ~]``# yum install man -y</code></p>
<hr>
<h1 id="二、开始配置基础的配置文件"><a href="#二、开始配置基础的配置文件" class="headerlink" title="二、开始配置基础的配置文件"></a><strong>二、开始配置基础的配置文件</strong></h1><p><code>[root@LookBack223 ~]``# cat &gt; /etc/named/named.conf &lt;&lt; EOF</code></p>
<p><code>options &#123;</code></p>
<p> <code>directory</code> <code>&quot;/var/named&quot;``;</code></p>
<p> <code>//``定义工作目录</code></p>
<p> <code>recursion</code> <code>yes``;</code></p>
<p> <code>//``允许递归</code></p>
<p><code>&#125;;</code></p>
<p><code>zone</code> <code>&quot;.&quot;</code> <code>IN  &#123;</code></p>
<p> <code>type</code> <code>hint;</code></p>
<p> <code>file</code> <code>&quot;named.ca&quot;``;</code></p>
<p><code>&#125;;</code></p>
<p><code>zone</code> <code>&quot;localhost&quot;</code> <code>IN  &#123;</code></p>
<p> <code>type</code> <code>master;</code></p>
<p> <code>//``定义为主DNS  master</code></p>
<p> <code>file</code> <code>&quot;localhost.zone&quot;``;</code></p>
<p> <code>allow-update &#123; none; &#125;;</code></p>
<p> <code>//``不允许任何人更新</code></p>
<p><code>&#125;;</code></p>
<p><code>zone</code> <code>&quot;0.0.127.in-addr.arpa&quot;</code>  <code>IN  &#123;</code></p>
<p><code>//``把127.0.0反向解析</code></p>
<p> <code>type</code> <code>master;</code></p>
<p> <code>file</code> <code>&quot;127.0.0.zone&quot;``;</code></p>
<p> <code>allow-update &#123; none; &#125;;</code></p>
<p><code>&#125;;</code></p>
<p><code>EOF</code></p>
<p><code>[root@LookBack223 ~]``# chown root:named /etc/named/named.conf</code></p>
<p><code>[root@LookBack223 ~]``# chmod 640 /etc/named/named.conf</code></p>
<p><code>[root@LookBack223 ~]``# mkdir -p /var/named/slaves</code></p>
<p><code>[root@LookBack223 ~]``# chown root:named /var/named/</code></p>
<p><code>[root@LookBack223 ~]``# chown named:named /var/named/slaves/</code></p>
<p><code>[root@LookBack223 ~]``# chmod 750 /var/named/</code></p>
<p><code>[root@LookBack223 ~]``# chmod 770 /var/named/slaves/</code></p>
<p><code>#制作相关配置文件和设置文件对应的权限</code></p>
<p><img src="/2020/04/bind%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A315.png" alt="自建DNS服务,实现双DNS服务器主从复制、子域授权、转发、智能解析等效果"></p>
<hr>
<h2 id="下面开始来配置实现正向解析"><a href="#下面开始来配置实现正向解析" class="headerlink" title="下面开始来配置实现正向解析"></a><strong>下面开始来配置实现正向解析</strong></h2><p><code>[root@LookBack223 named]``# for i in $(grep &#39;file&#39; /etc/named/named.conf awk -F&#39;&quot;&#39; &#39;&#123;print$2&#125;&#39;); do touch /var/named/$i;chgrp named /var/named/$i;chmod 640 /var/named/$i;done</code></p>
<p><code>[root@LookBack223 named]``# pwd</code></p>
<p><code>/var/named</code></p>
<p><code>[root@LookBack223 named]``# tree</code></p>
<p><code>.</code></p>
<p><code>├── 127.0.0.zone</code></p>
<p><code>├── localhost.zone</code></p>
<p><code>├── named.ca</code></p>
<p><code>└── slaves</code></p>
<p><code>1 directory, 3 files</code></p>
<p><code>#到这里 几个基础的文件就都创建好了，现在需要不足文件里面的配置信息</code></p>
<p><code>[root@LookBack223 named]``# dig -t NS . @a.root-servers.net. &gt; /var/named/named.ca</code></p>
<p><code>#获取13台根服务器的配置文件,我们上面已经配置了将跟解析放在/var/named/named.cd,所以我么直接用dig命令将结果重定向过去就好了</code></p>
<p> </p>
<p><code>####下面是3个文件的配置内容####</code></p>
<p><code>[root@LookBack223 named]``# cat named.ca</code></p>
<p><code>; &gt; DiG 9.9.5 &gt; -t NS . @a.root-servers.net.</code></p>
<p><code>;; global options: +cmd</code></p>
<p><code>;; Got answer:</code></p>
<p><code>;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR,</code> <code>id``: 18948</code></p>
<p><code>;; flags: qr aa rd; QUERY: 1, ANSWER: 13, AUTHORITY: 0, ADDITIONAL: 25</code></p>
<p><code>;; WARNING: recursion requested but not available</code></p>
<p><code>;; OPT PSEUDOSECTION:</code></p>
<p><code>; EDNS: version: 0, flags:; udp: 4096</code></p>
<p><code>;; QUESTION SECTION:</code></p>
<p><code>;.              IN  NS</code></p>
<p><code>;; ANSWER SECTION:</code></p>
<p><code>.           518400  IN  NS  b.root-servers.net.</code></p>
<p><code>.           518400  IN  NS  h.root-servers.net.</code></p>
<p><code>.           518400  IN  NS  i.root-servers.net.</code></p>
<p><code>.           518400  IN  NS  l.root-servers.net.</code></p>
<p><code>.           518400  IN  NS  f.root-servers.net.</code></p>
<p><code>.           518400  IN  NS  g.root-servers.net.</code></p>
<p><code>.           518400  IN  NS  d.root-servers.net.</code></p>
<p><code>.           518400  IN  NS  j.root-servers.net.</code></p>
<p><code>.           518400  IN  NS  a.root-servers.net.</code></p>
<p><code>.           518400  IN  NS  k.root-servers.net.</code></p>
<p><code>.           518400  IN  NS  m.root-servers.net.</code></p>
<p><code>.           518400  IN  NS  c.root-servers.net.</code></p>
<p><code>.           518400  IN  NS  e.root-servers.net.</code></p>
<p><code>;; ADDITIONAL SECTION:</code></p>
<p><code>b.root-servers.net. 3600000 IN  A   192.228.79.201</code></p>
<p><code>b.root-servers.net. 3600000 IN  AAAA    2001:500:84::b</code></p>
<p><code>h.root-servers.net. 3600000 IN  A   128.63.2.53</code></p>
<p><code>h.root-servers.net. 3600000 IN  AAAA    2001:500:1::803f:235</code></p>
<p><code>i.root-servers.net. 3600000 IN  A   192.36.148.17</code></p>
<p><code>i.root-servers.net. 3600000 IN  AAAA    2001:7fe::53</code></p>
<p><code>l.root-servers.net. 3600000 IN  A   199.7.83.42</code></p>
<p><code>l.root-servers.net. 3600000 IN  AAAA    2001:500:3::42</code></p>
<p><code>f.root-servers.net. 3600000 IN  A   192.5.5.241</code></p>
<p><code>f.root-servers.net. 3600000 IN  AAAA    2001:500:2f::f</code></p>
<p><code>g.root-servers.net. 3600000 IN  A   192.112.36.4</code></p>
<p><code>d.root-servers.net. 3600000 IN  A   199.7.91.13</code></p>
<p><code>d.root-servers.net. 3600000 IN  AAAA    2001:500:2d::d</code></p>
<p><code>j.root-servers.net. 3600000 IN  A   192.58.128.30</code></p>
<p><code>j.root-servers.net. 3600000 IN  AAAA    2001:503:c27::2:30</code></p>
<p><code>a.root-servers.net. 3600000 IN  A   198.41.0.4</code></p>
<p><code>a.root-servers.net. 3600000 IN  AAAA    2001:503:ba3e::2:30</code></p>
<p><code>k.root-servers.net. 3600000 IN  A   193.0.14.129</code></p>
<p><code>k.root-servers.net. 3600000 IN  AAAA    2001:7fd::1</code></p>
<p><code>m.root-servers.net. 3600000 IN  A   202.12.27.33</code></p>
<p><code>m.root-servers.net. 3600000 IN  AAAA    2001:dc3::35</code></p>
<p><code>c.root-servers.net. 3600000 IN  A   192.33.4.12</code></p>
<p><code>c.root-servers.net. 3600000 IN  AAAA    2001:500:2::c</code></p>
<p><code>e.root-servers.net. 3600000 IN  A   192.203.230.10</code></p>
<p><code>;; Query</code> <code>time``: 65 msec</code></p>
<p><code>;; SERVER: 198.41.0.4``#53(198.41.0.4)</code></p>
<p><code>;; WHEN: Wed Aug 06 05:22:48 UTC 2014</code></p>
<p><code>;; MSG SIZE  rcvd: 755</code></p>
<p><code>[root@LookBack223 named]``# cat localhost.zone</code></p>
<p><code>$TTL 86400</code></p>
<p><code>@   IN  SOA localhost.  admin.05hd.org. (</code></p>
<p> <code>2014080601</code></p>
<p> <code>3H</code></p>
<p> <code>15M</code></p>
<p> <code>7D</code></p>
<p> <code>1D )</code></p>
<p> <code>IN  NS  localhost.</code></p>
<p> <code>IN  A   172.0.0.1</code></p>
<p><code>[root@LookBack223 named]``# cat 127.0.0.zone</code></p>
<p><code>$TTL 86400</code></p>
<p><code>@   IN  SOA localhost.  admin.05hd.org. (</code></p>
<p> <code>2014080601</code></p>
<p> <code>3H</code></p>
<p> <code>15M</code></p>
<p> <code>7D</code></p>
<p> <code>1D )</code></p>
<p> <code>IN  NS  localhost.</code></p>
<p><code>1   IN  PTR localhost.</code></p>
<p> </p>
<p><code>[root@LookBack223 named]``# chgrp named 127.0.0.zone localhost.zone named.ca</code></p>
<p><code>[root@LookBack223 named]``# chmod 640 127.0.0.zone localhost.zone named.ca</code></p>
<p><code>[root@LookBack223 named]``# ll</code></p>
<p><code>total 16</code></p>
<p><code>-rw-r----- 1 root  named  128 Aug  6 06:24 127.0.0.zone</code></p>
<p><code>-rw-r----- 1 root  named  124 Aug  6 06:23 localhost.zone</code></p>
<p><code>-rw-r----- 1 root  named 2177 Aug  6 06:11 named.ca</code></p>
<p><code>drwxrwx--- 2 named named 4096 Aug  6 05:04 slaves</code></p>
<p><code>#修改3个文件的属主属组和权限</code></p>
<p> </p>
<p><code>[root@LookBack223 named]``# named-checkconf</code></p>
<p><code>[root@LookBack223 named]``# named-checkconf /etc/named/named.conf</code></p>
<p><code>[root@LookBack223 named]``# named-checkzone &quot;localhost&quot; /var/named/localhost.zone</code></p>
<p><code>zone localhost``/IN``: loaded serial 2014080601</code></p>
<p><code>OK</code></p>
<p><code>[root@LookBack223 named]``# named-checkzone &quot;0.0.127.in-addr.arpa&quot; /var/named/127.0.0.zone</code></p>
<p><code>zone 0.0.127.``in``-addr.arpa``/IN``: loaded serial 2014080601</code></p>
<p><code>OK</code></p>
<p><code>##检测配置文件如下图</code></p>
<p><img src="/2020/04/bind%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A335.png" alt="自建DNS服务,实现双DNS服务器主从复制、子域授权、转发、智能解析等效果"></p>
<p>到了这里我们就可以启动服务来测试了，但是这里的bind是我们编译安装的，编译安装是没有启动脚本的，下面制作启动脚本 将下面的内容保存为**&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;named (注意下面的高亮的两行中的bind安装目录，我这里安装在&#x2F;usr&#x2F;local&#x2F;bind995就用这，其安装在其他目录请根据情况做修改)**</p>
<p><code>[root@LookBack223 named]``# wget -c4 [http://www.05hd.com/named.sh](http://www.05hd.com/named.sh) -O /etc/rc.d/init.d/named</code></p>
<p><code>##可以用上面的命令下载启动脚本 也可以用下面的源码自建 更可以自己手写启动脚本</code></p>
<p><code>#!/bin/bash</code></p>
<p><code>#</code></p>
<p><code># description: named daemon</code></p>
<p><code># chkconfig: - 25 80</code></p>
<p><code>#</code></p>
<p><code>pidFile=``/usr/local/bind995/var/run/named``.pid</code></p>
<p><code>lockFile=``/var/lock/subsys/named</code></p>
<p><code>confFile=``/etc/named/named``.conf</code></p>
<p><code>[ -r</code> <code>/etc/rc``.d``/init``.d``/functions</code> <code>] &amp;&amp; .</code> <code>/etc/rc``.d``/init``.d``/functions</code></p>
<p><code>start() &#123;</code></p>
<p><code>if</code> <code>[ -e $lockFile ];</code> <code>then</code></p>
<p><code>echo</code> <code>&quot;named is already running...&quot;</code></p>
<p><code>exit</code> <code>0</code></p>
<p><code>fi</code></p>
<p><code>echo</code> <code>-n</code> <code>&quot;Starting named:&quot;</code></p>
<p><code>daemon --pidfile</code> <code>&quot;$pidFile&quot;</code> <code>/usr/local/bind995/sbin/named</code> <code>-u named -c</code> <code>&quot;$confFile&quot;</code></p>
<p><code>RETVAL=$?</code></p>
<p><code>echo</code></p>
<p><code>if</code> <code>[ $RETVAL -``eq</code> <code>0 ];</code> <code>then</code></p>
<p><code>touch</code> <code>$lockFile</code></p>
<p><code>return</code> <code>$RETVAL</code></p>
<p><code>else</code></p>
<p><code>rm</code> <code>-f $lockFile $pidFile</code></p>
<p><code>return</code> <code>1</code></p>
<p><code>fi</code></p>
<p><code>&#125;</code></p>
<p><code>stop() &#123;</code></p>
<p><code>if</code> <code>[ ! -e $lockFile ];</code> <code>then</code></p>
<p><code>echo</code> <code>&quot;named is stopped.&quot;</code></p>
<p><code># exit 0</code></p>
<p><code>fi</code></p>
<p><code>echo</code> <code>-n</code> <code>&quot;Stopping named:&quot;</code></p>
<p><code>killproc named</code></p>
<p><code>RETVAL=$?</code></p>
<p><code>echo</code></p>
<p><code>if</code> <code>[ $RETVAL -``eq</code> <code>0 ];``then</code></p>
<p><code>rm</code> <code>-f $lockFile $pidFile</code></p>
<p><code>return</code> <code>0</code></p>
<p><code>else</code></p>
<p><code>echo</code> <code>&quot;Cannot stop named.&quot;</code></p>
<p><code>failure</code></p>
<p><code>return</code> <code>1</code></p>
<p><code>fi</code></p>
<p><code>&#125;</code></p>
<p><code>restart() &#123;</code></p>
<p><code>stop</code></p>
<p><code>sleep</code> <code>2</code></p>
<p><code>start</code></p>
<p><code>&#125;</code></p>
<p><code>reload() &#123;</code></p>
<p><code>echo</code> <code>-n</code> <code>&quot;Reloading named: &quot;</code></p>
<p><code>killproc named -HUP</code></p>
<p><code>#killall -HUP named</code></p>
<p><code>RETVAL=$?</code></p>
<p><code>echo</code></p>
<p><code>return</code> <code>$RETVAL</code></p>
<p><code>&#125;</code></p>
<p><code>status() &#123;</code></p>
<p><code>if</code> <code>pidof named &amp;&gt;</code> <code>/dev/null``;</code> <code>then</code></p>
<p><code>echo</code> <code>-n</code> <code>&quot;named is running...&quot;</code></p>
<p><code>success</code></p>
<p><code>echo</code></p>
<p><code>else</code></p>
<p><code>echo</code> <code>-n</code> <code>&quot;named is stopped...&quot;</code></p>
<p><code>success</code></p>
<p><code>echo</code></p>
<p><code>fi</code></p>
<p><code>&#125;</code></p>
<p><code>usage() &#123;</code></p>
<p><code>echo</code> <code>&quot;Usage: named &#123;startstoprestartstatusreload&#125;&quot;</code></p>
<p><code>&#125;</code></p>
<p><code>case</code> <code>$1</code> <code>in</code></p>
<p><code>start)</code></p>
<p><code>start ;;</code></p>
<p><code>stop)</code></p>
<p><code>stop ;;</code></p>
<p><code>restart)</code></p>
<p><code>restart ;;</code></p>
<p><code>status)</code></p>
<p><code>status ;;</code></p>
<p><code>reload)</code></p>
<p><code>reload ;;</code></p>
<p><code>*)</code></p>
<p><code>usage</code></p>
<p><code>exit</code> <code>4</code></p>
<p><code>;;</code></p>
<p><code>esac</code></p>
<p><code>&lt;a href=``&quot;[http://www.dwhd.org/wp-content/uploads/2015/05/bind](http://www.dwhd.org/wp-content/uploads/2015/05/bind)使用详解45.png&quot;``&gt;&lt;img class=``&quot;attachment-medium&quot;</code> <code>src=``&quot;[http://www.dwhd.org/wp-content/uploads/2015/05/bind](http://www.dwhd.org/wp-content/uploads/2015/05/bind)使用详解45.png&quot;</code> <code>alt=``&quot;bind使用详解45&quot;</code>  <code>/&gt;&lt;``/a``&gt;</code></p>
<p> </p>
<p><code>[root@LookBack223 named]``# chmod +x /etc/rc.d/init.d/named</code></p>
<p><code>[root@LookBack223 named]``# chkconfig --add named</code></p>
<p><code>[root@LookBack223 named]``# chkconfig named on</code></p>
<p><code>[root@LookBack223 named]``# chkconfig --list named</code></p>
<p><code>named           0:off   1:off   2:on    3:on    4:on    5:on    6:off</code></p>
<p><strong>下面来测试启动脚本的正常与否 开始来启动named服务</strong></p>
<p><code>[root@LookBack223 named]``# service named start</code></p>
<p><code>Starting named:                                            [  OK  ]</code></p>
<p><code>[root@LookBack223 named]``# service named restart</code></p>
<p><code>Stopping named:                                            [  OK  ]</code></p>
<p><code>Starting named:                                            [  OK  ]</code></p>
<p><code>[root@LookBack223 named]``# service named stop</code></p>
<p><code>Stopping named:                                            [  OK  ]</code></p>
<p><code>[root@LookBack223 named]``# service named start</code></p>
<p><code>Starting named:                                            [  OK  ]</code></p>
<p><code>[root@LookBack223 named]``# service named status</code></p>
<p><code>named is running...                                        [  OK  ]</code></p>
<p><strong>来看下服务器启动情况和端口监听正常不</strong></p>
<p><img src="/2020/04/bind%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3815.png" alt="自建DNS服务,实现双DNS服务器主从复制、子域授权、转发、智能解析等效果"></p>
<p><strong>下面两图可以看出 服务器上的dns服务器已经OK了。</strong></p>
<p><img src="/2020/04/bind%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A365.png" alt="自建DNS服务,实现双DNS服务器主从复制、子域授权、转发、智能解析等效果"></p>
<p><img src="/2020/04/bind%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A372.png" alt="自建DNS服务,实现双DNS服务器主从复制、子域授权、转发、智能解析等效果"></p>
<hr>
<h1 id="三、现在来开始做域名正反向解析了"><a href="#三、现在来开始做域名正反向解析了" class="headerlink" title="三、现在来开始做域名正反向解析了"></a><strong>三、现在来开始做域名正反向解析了</strong></h1><p>先来看看用于测试域名的为zeaxion.com</p>
<h2 id="1、正向域解析配置"><a href="#1、正向域解析配置" class="headerlink" title="1、正向域解析配置"></a><strong>1、正向域解析配置</strong></h2><p>在&#x2F;etc&#x2F;named&#x2F;named.conf配置文件里面追加下面的内容</p>
<p><code>zone</code> <code>&quot;zeaxion.com&quot;</code>   <code>IN  &#123;</code></p>
<p> <code>type</code> <code>master;</code></p>
<p> <code>file</code> <code>&quot;zeaxion.com.zone&quot;``;</code></p>
<p><code>&#125;;</code></p>
<p>如下图： <img src="/2020/04/bind%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3121-283x300-1.png" alt="自建DNS服务,实现双DNS服务器主从复制、子域授权、转发、智能解析等效果"></p>
<p>创建&#x2F;var&#x2F;named&#x2F;zeaxion.com.zone文件并写好配置内容</p>
<p><code>[root@LookBack223 named]``# touch /var/named/zeaxion.com.zone</code></p>
<p><code>[root@LookBack223 named]``# chgrp named /var/named/zeaxion.com.zone</code></p>
<p><code>[root@LookBack223 named]``# chmod 640 /var/named/zeaxion.com.zone</code></p>
<p><code>[root@LookBack223 named]``# cat zeaxion.com.zone</code></p>
<p><code>$TTL 600</code></p>
<p><code>@   IN  SOA ns.zeaxion.com. admin.zeaxion.com. (</code></p>
<p><code>;\ 上面的admin.zeaxion.com.其实邮箱地址，在这里邮箱地址不能使用@所以要使用.</code></p>
<p> <code>2014080601</code></p>
<p> <code>1H</code></p>
<p> <code>10M</code></p>
<p> <code>7D</code></p>
<p> <code>2H )</code></p>
<p> <code>IN  NS      ns.zeaxion.com.</code></p>
<p> <code>IN  MX  10  mxdomain.qq.com.</code></p>
<p><code>ns.zeaxion.com. IN  A   106.186.17.185</code></p>
<p><code>www.zeaxion.com.    IN  A   106.186.17.185</code></p>
<p><code>manage.zeaxion.com. IN  A   106.186.17.185</code></p>
<p>如下图 <img src="https://www.jarods.org/wp-content/uploads/2020/04/bind%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3101.png" alt="自建DNS服务,实现双DNS服务器主从复制、子域授权、转发、智能解析等效果"> 然后检测下配置文件可有写法格式错误 <img src="/2020/04/bind%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A391.png" alt="自建DNS服务,实现双DNS服务器主从复制、子域授权、转发、智能解析等效果"></p>
<p>到了这里我们需要去域名注册商处将域名的ns设置成ns.zeaxion.com和ns2.zeaxion.com，设置好了之后我们来看看在互联网上这个域名的DNS解析是否OK了</p>
<p><code>[root@LookBack226 ~]``# ifconfig awk -F&#39;[ :]+&#39; &#39;/inet addr/&#123;print$4&#125;&#39; grep -vE &quot;^127.&quot;</code></p>
<p><code>92.222.219.226</code></p>
<p><code>[root@LookBack226 ~]``# dig +trace -t A www.zeaxion.com</code></p>
<p><code>; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.23.rc1.el6_5.1 &lt;&lt;&gt;&gt; +trace -t A www.zeaxion.com</code></p>
<p><code>;; global options: +cmd</code></p>
<p><code>.           509310  IN  NS  e.root-servers.net.</code></p>
<p><code>.           509310  IN  NS  a.root-servers.net.</code></p>
<p><code>.           509310  IN  NS  l.root-servers.net.</code></p>
<p><code>.           509310  IN  NS  d.root-servers.net.</code></p>
<p><code>.           509310  IN  NS  b.root-servers.net.</code></p>
<p><code>.           509310  IN  NS  m.root-servers.net.</code></p>
<p><code>.           509310  IN  NS  h.root-servers.net.</code></p>
<p><code>.           509310  IN  NS  f.root-servers.net.</code></p>
<p><code>.           509310  IN  NS  g.root-servers.net.</code></p>
<p><code>.           509310  IN  NS  j.root-servers.net.</code></p>
<p><code>.           509310  IN  NS  c.root-servers.net.</code></p>
<p><code>.           509310  IN  NS  k.root-servers.net.</code></p>
<p><code>.           509310  IN  NS  i.root-servers.net.</code></p>
<p><code>;; Received 228 bytes from 127.0.0.1``#53(127.0.0.1) in 2151 ms</code></p>
<p><code>com.            172800  IN  NS  a.gtld-servers.net.</code></p>
<p><code>com.            172800  IN  NS  b.gtld-servers.net.</code></p>
<p><code>com.            172800  IN  NS  c.gtld-servers.net.</code></p>
<p><code>com.            172800  IN  NS  d.gtld-servers.net.</code></p>
<p><code>com.            172800  IN  NS  e.gtld-servers.net.</code></p>
<p><code>com.            172800  IN  NS  f.gtld-servers.net.</code></p>
<p><code>com.            172800  IN  NS  g.gtld-servers.net.</code></p>
<p><code>com.            172800  IN  NS  h.gtld-servers.net.</code></p>
<p><code>com.            172800  IN  NS  i.gtld-servers.net.</code></p>
<p><code>com.            172800  IN  NS  j.gtld-servers.net.</code></p>
<p><code>com.            172800  IN  NS  k.gtld-servers.net.</code></p>
<p><code>com.            172800  IN  NS  l.gtld-servers.net.</code></p>
<p><code>com.            172800  IN  NS  m.gtld-servers.net.</code></p>
<p><code>;; Received 493 bytes from 198.41.0.4``#53(198.41.0.4) in 1180 ms</code></p>
<p><code>zeaxion.com.        172800  IN  NS  ns.zeaxion.com.</code></p>
<p><code>zeaxion.com.        172800  IN  NS  ns2.zeaxion.com.</code></p>
<p><code>;; Received 100 bytes from 2001:503:a83e::2:30``#53(2001:503:a83e::2:30) in 23 ms</code></p>
<p><code>www.zeaxion.com.    600 IN  A   106.186.17.185</code></p>
<p><code>zeaxion.com.        600 IN  NS  ns.zeaxion.com.</code></p>
<p><code>zeaxion.com.        600 IN  NS  ns2.zeaxion.com.</code></p>
<p><code>;; Received 116 bytes from 92.222.219.223``#53(92.222.219.223) in 0 ms</code></p>
<p>以上可以看出现在我们的基本的域名DNS解析已经搞定了。</p>
<h2 id="2、反向域解析配置"><a href="#2、反向域解析配置" class="headerlink" title="2、反向域解析配置"></a><strong>2、反向域解析配置</strong></h2><p>在&#x2F;etc&#x2F;named&#x2F;named.conf文件中加入</p>
<p><code>[root@LookBack223 named]``# zone  &quot;219.222.92.in-addr.arpa&quot;   &#123;</code></p>
<p> <code>type</code> <code>master;</code></p>
<p> <code>file</code> <code>&quot;92.222.219.zone&quot;``;</code></p>
<p><code>&#125;;</code></p>
<p>创建一个&#x2F;var&#x2F;named&#x2F;92.222.219.zone的文件，注意文件的属主数组权限,也可以用下面的命令自动生成&#x2F;etc&#x2F;named&#x2F;named.conf配置内容需要的文件了，</p>
<p><code>[root@LookBack223 named]``# for i in $(grep &#39;file&#39; /etc/named/named.conf awk -F&#39;&quot;&#39; &#39;&#123;print$2&#125;&#39;); do touch /var/named/$i;chgrp named /var/named/$i;chmod 640 /var/named/$i;done</code></p>
<p>来看下&#x2F;var&#x2F;named&#x2F;92.222.219.zone文件怎么做反接配置的 <img src="/2020/04/bind%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3131.png" alt="自建DNS服务,实现双DNS服务器主从复制、子域授权、转发、智能解析等效果"></p>
<p><code>[root@LookBack223 named]``# cat !$</code></p>
<p><code>cat</code> <code>92.222.219.zone</code></p>
<p><code>$TTL 600</code></p>
<p><code>@   IN  SOA ns.zeaxion.com. admin.zeaxion.com. (</code></p>
<p> <code>2014080601</code></p>
<p> <code>1H</code></p>
<p> <code>10M</code></p>
<p> <code>7D</code></p>
<p> <code>2H )</code></p>
<p> <code>IN  NS      ns.zeaxion.com.</code></p>
<p> <code>IN  NS      ns2.zeaxion.com.</code></p>
<p><code>219 IN  PTR     ns.zeaxion.com.</code></p>
<p><code>226 IN  PTR     ns2.zeaxion.com.</code></p>
<p><code>;106.186.17.185 IN  PTR zeaxion.com.</code></p>
<p><code>;106.186.17.185 IN  PTR www.zeaxion.com.</code></p>
<p><code>;106.186.17.185 IN  PTR manage.zeaxion.com.</code></p>
<p><code>####最后的3行不能用。。。请注意。。</code></p>
<p>接着来检测下配置文件，如果没有错误就让named重新载入下配置文件 <img src="/2020/04/bind%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3141.png" alt="自建DNS服务,实现双DNS服务器主从复制、子域授权、转发、智能解析等效果"></p>
<p><code>[root@LookBack223 named]``# named-checkconf</code></p>
<p><code>[root@LookBack223 named]``# named-checkzone &quot;219.222.92.in-addr.arpa&quot; 92.222.219.zone</code></p>
<p><code>zone 219.222.92.``in``-addr.arpa``/IN``: loaded serial 2014080601</code></p>
<p><code>OK</code></p>
<p><code>[root@LookBack223 named]``# service named reload</code></p>
<p><code>Reloading named:                                           [  OK  ]</code></p>
<p><code>[root@LookBack223 named]``#</code></p>
<p><img src="/2020/04/bind%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3151.png" alt="自建DNS服务,实现双DNS服务器主从复制、子域授权、转发、智能解析等效果"></p>
<p><code>[root@LookBack226 ~]``# ifconfig awk -F&#39;[ :]+&#39; &#39;/inet addr/&#123;print$4&#125;&#39; grep -vE &quot;^127.&quot;</code></p>
<p><code>92.222.219.226</code></p>
<p><code>[root@LookBack226 ~]``# dig -x 92.222.219.223 @92.222.219.223</code></p>
<p><code>; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.23.rc1.el6_5.1 &lt;&lt;&gt;&gt; -x 92.222.219.223 @92.222.219.223</code></p>
<p><code>;; global options: +cmd</code></p>
<p><code>;; Got answer:</code></p>
<p><code>;; -&gt;&gt;HEADER&lt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.23.rc1.el6_5.1 &lt;&lt;&gt;&gt; -t AXFR 219.222.92.``in``-addr.arpa @92.222.219.223</code></p>
<p><code>;; global options: +cmd</code></p>
<p><code>219.222.92.``in``-addr.arpa. 600    IN  SOA ns.zeaxion.com. admin.zeaxion.com. 2014080601 3600 600 604800 7200</code></p>
<p><code>219.222.92.``in``-addr.arpa. 600    IN  NS  ns.zeaxion.com.</code></p>
<p><code>219.222.92.``in``-addr.arpa. 600    IN  NS  ns2.zeaxion.com.</code></p>
<p><code>223.219.222.92.``in``-addr.arpa. 600 IN PTR ns.zeaxion.com.</code></p>
<p><code>226.219.222.92.``in``-addr.arpa. 600 IN PTR ns2.zeaxion.com.</code></p>
<p><code>219.222.92.``in``-addr.arpa. 600    IN  SOA ns.zeaxion.com. admin.zeaxion.com. 2014080601 3600 600 604800 7200</code></p>
<p><code>;; Query</code> <code>time``: 1 msec</code></p>
<p><code>;; SERVER: 92.222.219.223``#53(92.222.219.223)</code></p>
<p><code>;; WHEN: Wed Aug  6 15:26:04 2014</code></p>
<p><code>;; XFR size: 6 records (messages 1, bytes 201)</code></p>
<p>到此 反向解析也配置好了。</p>
<hr>
<h1 id="四、配置多DNS主从复制"><a href="#四、配置多DNS主从复制" class="headerlink" title="四、配置多DNS主从复制"></a><strong>四、配置多DNS主从复制</strong></h1><p>做主从复制的时候需要注意的几点的事情 (1)、从服务器的bind版本必须大于等于主服务器的bind版本。因为程序都是采取向下兼容的规则。如果从服务器版本低于主服务器那么很可能因为程序功能的改变导致失败 所以这里我们还是采取编译安装从服务器这样就可以保证主从服务器的bind都为同一版本。因为之前已经编译了一次 这里就不详说从服务器的编译安装过程了。直接使用下面的命令就可以了。 (2)、<strong>主从服务器的时间需要相对一致</strong>，所以我们这里给主从服务器都做NTP在线时间同步。<a href="http://www.pool.ntp.org/en/">http://www.pool.ntp.org/en/</a></p>
<p><code>[root@LookBack226 ~]```# echo &quot;*/3 * * * * </code>which ntpdate&#96; fr.pool.ntp.org &amp;&gt; &#x2F;dev&#x2F;null” &#x2F;var&#x2F;spool&#x2F;cron&#x2F;root&#96;&#96;</p>
<p><code>[root@LookBack226 ~]``# ntpdate fr.pool.ntp.org</code></p>
<p> <code>6 Aug 15:58:38 ntpdate[21702]: Can&#39;t adjust the</code> <code>time</code> <code>of day: Operation not permitted</code></p>
<p><code>我这里由于2台测试机都是openvz的虚拟机，被机房设置不能修改时间，因为虚拟机需要和母机做同步时间，那么我这里的时间问题就无需操心了。</code></p>
<p><strong>安装完毕之后还是需要重新启动下shell 或者服务器。因为系统的环境变量有改变。</strong></p>
<p><code>[root@LookBack226 ~]``# groupadd -g 153 -r named</code></p>
<p><code>[root@LookBack226 ~]``# useradd -g named -r -u 153 named</code></p>
<p><code>[root@LookBack226 ~]``# yum groupinstall &quot;Development tools&quot; &quot;Server Platform Development&quot; -y</code></p>
<p><code>[root@LookBack226 ~]``# wget -4c [http://www.05hd.com/wp-content/uploads/2014/08/bind-9.9.5.tar.gz](http://www.05hd.com/wp-content/uploads/2014/08/bind-9.9.5.tar.gz)</code></p>
<p><code>[root@LookBack226 ~]``# tar xf bind-9.9.5.tar.gz</code></p>
<p><code>[root@LookBack226 ~]``# cd bind-9.9.5</code></p>
<p><code>[root@LookBack226 bind-9.9.5]``# ./configure --prefix=/usr/local/bind995 --sysconfdir=/etc/named --disable-chroot --enable-threads --enable-ipv6</code></p>
<p><code>[root@LookBack226 bind-9.9.5]``# make &amp;&amp; make install</code></p>
<p><code>[root@LookBack226 ~]``# echo &quot;export PATH=/usr/local/bind995/bin:/usr/local/bind995/sbin:$PATH&quot; &gt; /etc/profile.d/bind995.sh</code></p>
<p><code>[root@LookBack226 ~]``# sed -i &quot;$(cat /etc/man.config grep -nE &#39;^MANPATH[[:space:]]+&#39; tail -1 awk -F: &#39;&#123;print$1&#125;&#39;)a MANPATHt/usr/local/bind995/share/man&quot; /etc/man.config</code></p>
<p><code>[root@LookBack226 ~]``# wget -c4 [http://www.05hd.com/named.sh](http://www.05hd.com/named.sh) -O /etc/rc.d/init.d/named</code></p>
<p><code>[root@LookBack226 ~]``# chmod +x /etc/rc.d/init.d/named</code></p>
<p><code>[root@LookBack226 ~]``# chkconfig --add named</code></p>
<p><code>[root@LookBack226 ~]``# chkconfig named on</code></p>
<p><code>[root@LookBack226 ~]``# chown root:named /etc/named/named.conf</code></p>
<p><code>[root@LookBack226 ~]``# chmod 640 /etc/named/named.conf</code></p>
<p><code>[root@LookBack226 ~]``# mkdir -p /var/named/slaves</code></p>
<p><code>[root@LookBack226 ~]``# chown root:named /var/named/</code></p>
<p><code>[root@LookBack226 ~]``# chown named:named /var/named/slaves/</code></p>
<p><code>[root@LookBack226 ~]``# chmod 750 /var/named/</code></p>
<p><code>[root@LookBack226 ~]``# chmod 770 /var/named/slaves/</code></p>
<p><code>#上面的步骤做好了 新建个shell进程进服务器或者直接重启下服务器</code></p>
<p><img src="/2020/04/bind%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A316.png" alt="自建DNS服务,实现双DNS服务器主从复制、子域授权、转发、智能解析等效果"> 上图可以看出 bind已经编译安装好了 系统环境变量也做OK了</p>
<p>首先来配置从服务器</p>
<p><code>[root@LookBack226 ~]``# cat /etc/named/named.conf</code></p>
<p><code>options &#123;</code></p>
<p><code>listen-on port 53 &#123; 127.0.0.1; 92.222.219.226; &#125;;``//``这里记得要换成从服务器的IPV4地址哦</code></p>
<p><code>listen-on-v6 port 53 &#123; 2001:41d0:52:300::10f8; &#125;;``//``这里记得要换成从服务器的IPV6地址哦</code></p>
<p><code>directory</code> <code>&quot;/var/named&quot;``;</code></p>
<p><code>//``定义工作目录</code></p>
<p><code>recursion</code> <code>yes``;</code></p>
<p><code>//``允许递归</code></p>
<p><code>&#125;;</code></p>
<p><code>zone</code> <code>&quot;.&quot;</code> <code>IN &#123;</code></p>
<p><code>type</code> <code>hint;</code></p>
<p><code>file</code> <code>&quot;named.ca&quot;``;</code></p>
<p><code>&#125;;</code></p>
<p><code>zone</code> <code>&quot;localhost&quot;</code> <code>IN &#123;</code></p>
<p><code>type</code> <code>master;</code></p>
<p><code>//``设施为主 master</code></p>
<p><code>file</code> <code>&quot;localhost.zone&quot;``;</code></p>
<p><code>allow-update &#123; none; &#125;;</code></p>
<p><code>//``不允许任何人更新</code></p>
<p><code>&#125;;</code></p>
<p><code>zone</code> <code>&quot;0.0.127.in-addr.arpa&quot;</code> <code>IN &#123;</code></p>
<p><code>//``把127.0.0反向解析</code></p>
<p><code>type</code> <code>master;</code></p>
<p><code>file</code> <code>&quot;127.0.0.zone&quot;``;</code></p>
<p><code>allow-update &#123; none; &#125;;</code></p>
<p><code>&#125;;</code></p>
<p><code>zone</code> <code>&quot;zeaxion.com&quot;</code> <code>IN &#123;</code></p>
<p><code>type</code> <code>slave;</code> <code>//``设置为从服务器</code></p>
<p><code>file</code> <code>&quot;slaves/zeaxion.com.zone&quot;``;</code> <code>//``设置从服务器配置文件存放路径</code></p>
<p><code>masters &#123; 92.222.219.223; &#125;;</code> <code>//``配置主DNS服务器的IP地址</code></p>
<p><code>&#125;;</code></p>
<p><code>zone</code> <code>&quot;219.222.92.in-addr.arpa&quot;</code> <code>&#123;</code></p>
<p><code>type</code> <code>slave;</code></p>
<p><code>file</code> <code>&quot;slaves/92.222.219.zone&quot;``;</code></p>
<p><code>masters &#123; 92.222.219.223; &#125;;</code></p>
<p><code>&#125;;</code></p>
<p><code>配置好了主配置文件后 ，和上面一样创建一个bind的启动脚本，然后启动服务。</code></p>
<p><code>来看看从服务器上的端口监听状态</code></p>
<p><code>&lt;a href=``&quot;[http://www.dwhd.org/wp-content/uploads/2015/05/bind](http://www.dwhd.org/wp-content/uploads/2015/05/bind)使用详解17.png&quot;``&gt;&lt;img class=``&quot;attachment-medium&quot;</code> <code>src=``&quot;[http://www.dwhd.org/wp-content/uploads/2015/05/bind](http://www.dwhd.org/wp-content/uploads/2015/05/bind)使用详解17.png&quot;</code> <code>alt=``&quot;bind使用详解17&quot;</code>  <code>/&gt;&lt;``/a``&gt;</code></p>
<p><code>然后来看看从服务器上的文件是否同步成功。。</code></p>
<p><code>&lt;a href=``&quot;[http://www.dwhd.org/wp-content/uploads/2015/05/bind](http://www.dwhd.org/wp-content/uploads/2015/05/bind)使用详解18.png&quot;``&gt;&lt;img class=``&quot;attachment-medium&quot;</code> <code>src=``&quot;[http://www.dwhd.org/wp-content/uploads/2015/05/bind](http://www.dwhd.org/wp-content/uploads/2015/05/bind)使用详解18.png&quot;</code> <code>alt=``&quot;bind使用详解18&quot;</code>  <code>/&gt;&lt;``/a``&gt;</code></p>
<p><code>来做下测试</code></p>
<p> </p>
<p><code>[root@LookBack226 ~]``# ifconfig awk -F&#39;[ :]+&#39; &#39;/inet addr/&#123;print$4&#125;&#39; grep -vE &quot;^127.&quot;</code></p>
<p><code>92.222.219.226</code></p>
<p><code>[root@LookBack226 ~]``# dig -x 92.222.219.223 @92.222.219.226</code></p>
<p><code>; &lt;&lt;&gt;&gt; DiG 9.9.5 &lt;&lt;&gt;&gt; -x 92.222.219.223 @92.222.219.226</code></p>
<p><code>;; global options: +cmd</code></p>
<p><code>;; Got answer:</code></p>
<p><code>;; -&gt;&gt;HEADER&lt;&gt; DiG 9.9.5 &lt;&lt;&gt;&gt; -x 92.222.219.226 @92.222.219.223</code></p>
<p><code>;; global options: +cmd</code></p>
<p><code>;; Got answer:</code></p>
<p><code>;; -&gt;&gt;HEADER&lt;&gt; DiG 9.9.5 &lt;&lt;&gt;&gt; -t AXFR 219.222.92.``in``-addr.arpa @92.222.219.226</code></p>
<p><code>;; global options: +cmd</code></p>
<p><code>219.222.92.``in``-addr.arpa. 600    IN  SOA ns.zeaxion.com. admin.zeaxion.com. 2014080601 3600 600 604800 7200</code></p>
<p><code>219.222.92.``in``-addr.arpa. 600    IN  NS  ns.zeaxion.com.</code></p>
<p><code>219.222.92.``in``-addr.arpa. 600    IN  NS  ns2.zeaxion.com.</code></p>
<p><code>223.219.222.92.``in``-addr.arpa. 600 IN PTR ns.zeaxion.com.</code></p>
<p><code>226.219.222.92.``in``-addr.arpa. 600 IN PTR ns2.zeaxion.com.</code></p>
<p><code>219.222.92.``in``-addr.arpa. 600    IN  SOA ns.zeaxion.com. admin.zeaxion.com. 2014080601 3600 600 604800 7200</code></p>
<p><code>;; Query</code> <code>time``: 0 msec</code></p>
<p><code>;; SERVER: 92.222.219.226``#53(92.222.219.226)</code></p>
<p><code>;; WHEN: Sat Aug 09 06:30:19 CEST 2014</code></p>
<p><code>;; XFR size: 6 records (messages 1, bytes 201)</code></p>
<p><code>[root@LookBack226 ~]``# dig -t A www.zeaxion.com @92.222.219.223</code></p>
<p><code>; &lt;&lt;&gt;&gt; DiG 9.9.5 &lt;&lt;&gt;&gt; -t A www.zeaxion.com @92.222.219.223</code></p>
<p><code>;; global options: +cmd</code></p>
<p><code>;; Got answer:</code></p>
<p><code>;; -&gt;&gt;HEADER&lt;&gt; DiG 9.9.5 &lt;&lt;&gt;&gt; -t A www.zeaxion.com @92.222.219.226</code></p>
<p><code>;; global options: +cmd</code></p>
<p><code>;; Got answer:</code></p>
<p><code>;; -&gt;&gt;HEADER&lt;</code></p>
<p><img src="/2020/04/bind%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A320.png" alt="自建DNS服务,实现双DNS服务器主从复制、子域授权、转发、智能解析等效果"></p>
<p><img src="/2020/04/bind%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A319.png" alt="自建DNS服务,实现双DNS服务器主从复制、子域授权、转发、智能解析等效果"></p>
<p><img src="/2020/04/bind%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A321.png" alt="自建DNS服务,实现双DNS服务器主从复制、子域授权、转发、智能解析等效果"></p>
<p><img src="/2020/04/bind%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A322.png" alt="自建DNS服务,实现双DNS服务器主从复制、子域授权、转发、智能解析等效果"> 可以看出从服务器已经同步OK了。好了 到了这里 主从同步就做好了</p>
<hr>
<h1 id="五、DNS正向子域授权的配置"><a href="#五、DNS正向子域授权的配置" class="headerlink" title="五、DNS正向子域授权的配置"></a><strong>五、DNS正向子域授权的配置</strong></h1><p><img src="/2020/04/bind%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A323.png" alt="自建DNS服务,实现双DNS服务器主从复制、子域授权、转发、智能解析等效果"></p>
<p>其实DNS的子域授权只需要在父域的区域解析库中添加“胶水记录”就OK</p>
<p>下面来说说怎么配置子域授权DNS吧</p>
<p><img src="/2020/04/bind%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A324.png" alt="自建DNS服务,实现双DNS服务器主从复制、子域授权、转发、智能解析等效果"></p>
<p>这里就不说子域授权的DNS服务器编译安装BIND和基础配置文件生成的过程了</p>
<p><code>[root@LookBack37 ~]``# groupadd -g 153 -r named</code></p>
<p><code>[root@LookBack37 ~]``# useradd -g named -r -u 153 named</code></p>
<p><code>[root@LookBack37 ~]``# yum groupinstall &quot;Development tools&quot; &quot;Server Platform Development&quot; -y</code></p>
<p><code>[root@LookBack37 ~]``# wget -4c [http://www.05hd.com/wp-content/uploads/2014/08/bind-9.9.5.tar.gz](http://www.05hd.com/wp-content/uploads/2014/08/bind-9.9.5.tar.gz)</code></p>
<p><code>[root@LookBack37 ~]``# tar xf bind-9.9.5.tar.gz</code></p>
<p><code>[root@LookBack37 ~]``# cd bind-9.9.5</code></p>
<p><code>[root@LookBack37 bind-9.9.5]``# ./configure --prefix=/usr/local/bind995 --sysconfdir=/etc/named --disable-chroot --enable-threads --enable-ipv6</code></p>
<p><code>[root@LookBack37 bind-9.9.5]``# make &amp;&amp; make install</code></p>
<p><code>[root@LookBack37 ~]``# echo &quot;export PATH=/usr/local/bind995/bin:/usr/local/bind995/sbin:$PATH&quot; &gt; /etc/profile.d/bind995.sh</code></p>
<p><code>[root@LookBack37 ~]``# sed -i &quot;$(cat /etc/man.config grep -nE &#39;^MANPATH[[:space:]]+&#39; tail -1 awk -F: &#39;&#123;print$1&#125;&#39;)a MANPATHt/usr/local/bind995/share/man&quot; /etc/man.config</code></p>
<p><code>[root@LookBack37 ~]``# wget -c4 [http://www.05hd.com/named.sh](http://www.05hd.com/named.sh) -O /etc/rc.d/init.d/named</code></p>
<p><code>[root@LookBack37 ~]``# chmod +x /etc/rc.d/init.d/named</code></p>
<p><code>[root@LookBack37 ~]``# chkconfig --add named</code></p>
<p><code>[root@LookBack37 ~]``# chkconfig named on</code></p>
<p><code>[root@LookBack37 ~]``# chown root:named /etc/named/named.conf</code></p>
<p><code>[root@LookBack37 ~]``# chmod 640 /etc/named/named.conf</code></p>
<p><code>[root@LookBack37 ~]``# mkdir -p /var/named/slaves</code></p>
<p><code>[root@LookBack37 ~]``# chown root:named /var/named/</code></p>
<p><code>[root@LookBack37 ~]``# chown named:named /var/named/slaves/</code></p>
<p><code>[root@LookBack37 ~]``# chmod 750 /var/named/</code></p>
<p><code>[root@LookBack37 ~]``# chmod 770 /var/named/slaves/</code></p>
<p><code>#上面的步骤做好了 新建个shell进程进服务器或者直接重启下服务器</code></p>
<p>下面来配置主DNS服务器上的&#x2F;var&#x2F;named&#x2F;zeaxion.com.zone文件</p>
<p><code>[root@LookBack1 named]``# pwd</code></p>
<p><code>/var/named</code></p>
<p><code>[root@LookBack1 named]``# cat zeaxion.com.zone</code></p>
<p><code>$TTL 600</code></p>
<p><code>@   IN  SOA ns.zeaxion.com. admin.zeaxion.com. (</code></p>
<p><code>;;上面的admin.zeaxion.com.其实邮箱地址，在这里邮箱地址不能使用@所以要使用.</code></p>
<p> <code>2014080711</code></p>
<p> <code>1H</code></p>
<p> <code>10M</code></p>
<p> <code>7D</code></p>
<p> <code>2H )</code></p>
<p> <code>IN  NS      ns.zeaxion.com.</code></p>
<p> <code>IN  NS      ns2.zeaxion.com.</code></p>
<p> <code>IN  MX  10  mxdomain.qq.com.</code></p>
<p><code>ns.zeaxion.com. IN  A           92.222.219.223</code></p>
<p><code>ns2.zeaxion.com. IN  A          92.222.219.226</code></p>
<p><code>www.zeaxion.com.    IN  A   106.186.17.185</code></p>
<p><code>web.zeaxion.com.    IN  A   106.186.17.185</code></p>
<p><code>manage.zeaxion.com. IN  A   106.186.17.185</code></p>
<p><code>ops.zeaxion.com.        IN      NS      ns.ops.zeaxion.com</code></p>
<p><code>nsops.zeaxion.com.    IN        A       37.59.108.37</code></p>
<p>配置好了来重启下服务</p>
<p><code>[root@LookBack1 named]``# /etc/init.d/named restart</code></p>
<p><code>Stopping named:                                            [  OK  ]</code></p>
<p><code>Starting named:                                            [  OK  ]</code></p>
<p>然后来看看效果</p>
<p><code>[root@LookBack1 named]``# dig -t NS ops.zeaxion.com @92.222.219.223</code></p>
<p><code>; &lt;&lt;&gt;&gt; DiG 9.9.5 &lt;&lt;&gt;&gt; -t NS ops.zeaxion.com @92.222.219.223</code></p>
<p><code>;; global options: +cmd</code></p>
<p><code>;; Got answer:</code></p>
<p><code>;; -&gt;&gt;HEADER&lt;</code></p>
<p>是不是这时候主DNS服务器就不能解析ops.zeaxion.com的域了 但是看看下面会发现我们的FQDN是有信息的</p>
<p><code>[root@LookBack1 named]``# dig -t AXFR zeaxion.com @92.222.219.226</code></p>
<p><code>; &lt;&lt;&gt;&gt; DiG 9.9.5 &lt;&lt;&gt;&gt; -t AXFR zeaxion.com @92.222.219.226</code></p>
<p><code>;; global options: +cmd</code></p>
<p><code>zeaxion.com.            600     IN      SOA     ns.zeaxion.com. admin.zeaxion.com. 2014080713 3600 600 604800 7200</code></p>
<p><code>zeaxion.com.            600     IN      MX      10 mxdomain.qq.com.</code></p>
<p><code>zeaxion.com.            600     IN      NS      ns.zeaxion.com.</code></p>
<p><code>zeaxion.com.            600     IN      NS      ns2.zeaxion.com.</code></p>
<p><code>manage.zeaxion.com.     600     IN      A       106.186.17.185</code></p>
<p><code>ns.zeaxion.com.         600     IN      A       92.222.219.223</code></p>
<p><code>ns2.zeaxion.com.        600     IN      A       92.222.219.226</code></p>
<p><code>ops.zeaxion.com.        600     IN      NS      ns.ops.zeaxion.com.</code></p>
<p><code>ns.ops.zeaxion.com.     600     IN      A       37.59.108.37</code></p>
<p><code>web.zeaxion.com.        600     IN      A       106.186.17.185</code></p>
<p><code>www.zeaxion.com.        600     IN      A       106.186.17.185</code></p>
<p><code>zeaxion.com.            600     IN      SOA     ns.zeaxion.com. admin.zeaxion.com. 2014080713 3600 600 604800 7200</code></p>
<p><code>;; Query</code> <code>time``: 0 msec</code></p>
<p><code>;; SERVER: 92.222.219.226``#53(92.222.219.226)</code></p>
<p><code>;; WHEN: Sat Aug 09 11:26:22 CEST 2014</code></p>
<p><code>;; XFR size: 12 records (messages 1, bytes 302)</code></p>
<p>这时候我们就可以得出 虽然我们在主DNS服务器上都建立了解析 但是这时候的ops.zeaxion.com的子域主DNS服务器是不负责解析了</p>
<p><strong>下面来配置子域的&#x2F;etc&#x2F;named&#x2F;named.conf文件</strong></p>
<p><code>[root@LookBack37 ~]``# vi /etc/named/named.conf</code></p>
<p><code>[root@LookBack37 ~]``# cat !$</code></p>
<p><code>cat</code> <code>/etc/named/named``.conf</code></p>
<p><code>options &#123;</code></p>
<p> <code>listen-on port 53 &#123; 127.0.0.1; 37.59.108.37; &#125;;</code></p>
<p> <code>listen-on-v6 port 53 &#123; 2001:41d0:51:1::d1c; &#125;;</code></p>
<p> <code>directory</code> <code>&quot;/var/named&quot;``;</code></p>
<p> <code>//``定义工作目录</code></p>
<p> <code>recursion</code> <code>yes``;</code></p>
<p> <code>//``允许递归</code></p>
<p><code>&#125;;</code></p>
<p><code>zone</code> <code>&quot;.&quot;</code>     <code>IN      &#123;</code></p>
<p> <code>type</code> <code>hint;</code></p>
<p> <code>file</code> <code>&quot;named.ca&quot;``;</code></p>
<p><code>&#125;;</code></p>
<p><code>zone</code> <code>&quot;localhost&quot;</code>     <code>IN      &#123;</code></p>
<p> <code>type</code> <code>master;</code></p>
<p> <code>//``设施为主  master</code></p>
<p> <code>file</code> <code>&quot;localhost.zone&quot;``;</code></p>
<p> <code>allow-update &#123; none; &#125;;</code></p>
<p> <code>//``不允许任何人更新</code></p>
<p><code>&#125;;</code></p>
<p><code>zone</code> <code>&quot;0.0.127.in-addr.arpa&quot;</code>  <code>IN      &#123;</code></p>
<p><code>//``把127.0.0反向解析</code></p>
<p> <code>type</code> <code>master;</code></p>
<p> <code>file</code> <code>&quot;127.0.0.zone&quot;``;</code></p>
<p> <code>allow-update &#123; none; &#125;;</code></p>
<p><code>&#125;;</code></p>
<p><code>zone</code> <code>&quot;ops.zeaxion.com&quot;</code>   <code>IN      &#123;</code></p>
<p> <code>type</code> <code>master;</code></p>
<p> <code>file</code> <code>&quot;ops.zeaxion.com.zone&quot;``;</code></p>
<p> <code>//allow-update</code> <code>&#123; 127.0.0.1; &#125;;</code></p>
<p><code>&#125;;</code></p>
<p>再去&#x2F;var&#x2F;named&#x2F;下创建需要的文件</p>
<p><code>[root@LookBack37 ~]``# for i in $(grep &#39;file&#39; /etc/named/named.conf awk -F&#39;&quot;&#39; &#39;&#123;print$2&#125;&#39;); do touch /var/named/$i;chgrp named /var/named/$i;chmod 640 /var/named/$i;done</code></p>
<p><code>[root@LookBack37 ~]``# cd /var/named/</code></p>
<p><code>[root@LookBack37 named]``# ls -l</code></p>
<p><code>total 8</code></p>
<p><code>-rw-r----- 1 root  named    0 Aug  9 11:43 127.0.0.zone</code></p>
<p><code>drwxrwx--- 2 named named 4096 Jan 20  2014 data</code></p>
<p><code>drwxrwx--- 2 named named 4096 Aug  9 09:02 dynamic</code></p>
<p><code>-rw-r----- 1 root  named    0 Aug  9 11:43 localhost.zone</code></p>
<p><code>-rw-r----- 1 root  named    0 Aug  9 11:43 named.ca</code></p>
<p><code>-rw-r----- 1 root  named    0 Aug  9 11:43 ops.zeaxion.com.zone</code></p>
<p><code>##我这里就直接用命令批量创建好了文件  等下去补充文件内容</code></p>
<p><code>##127.0.0.zone  localhost.zone  named.ca  这3个文件和主从DNS服务器上文件内容是一样的</code></p>
<p><strong>下面是 127.0.0.zone localhost.zone named.ca 3个文件的内容</strong></p>
<p><code>[root@LookBack223 named]``# cat 127.0.0.zone</code></p>
<p><code>$TTL 86400</code></p>
<p><code>@       IN      SOA     localhost.      admin.05hd.org. (</code></p>
<p> <code>2014080601</code></p>
<p> <code>3H</code></p>
<p> <code>15M</code></p>
<p> <code>7D</code></p>
<p> <code>1D )</code></p>
<p> <code>IN      NS      localhost.</code></p>
<p><code>1       IN      PTR     localhost.</code></p>
<p><code>[root@LookBack223 named]``# cat localhost.zone</code></p>
<p><code>$TTL 86400</code></p>
<p><code>@       IN      SOA     localhost.      admin.05hd.org. (</code></p>
<p> <code>2014080601</code></p>
<p> <code>3H</code></p>
<p> <code>15M</code></p>
<p> <code>7D</code></p>
<p> <code>1D )</code></p>
<p> <code>IN      NS      localhost.</code></p>
<p> <code>IN      A       127.0.0.1</code></p>
<p><code>[root@LookBack223 named]``# cat named.ca</code></p>
<p><code>; &lt;&lt;&gt;&gt; DiG 9.9.5 &lt;&lt;&gt;&gt; -t NS . @a.root-servers.net.</code></p>
<p><code>;; global options: +cmd</code></p>
<p><code>;; Got answer:</code></p>
<p><code>;; -&gt;&gt;HEADER&lt;</code></p>
<p><strong>下面来开始配置&#x2F;var&#x2F;named&#x2F;ops.zeaxion.com.zone的配置文件</strong></p>
<p><code>[root@LookBack37 named]``# cat ops.zeaxion.com.zone</code></p>
<p><code>$TTL 600</code></p>
<p><code>$ORIGIN ops.zeaxion.com.</code></p>
<p><code>@   IN  SOA ns.ops.zeaxion.com. admin.ops.zeaxion.com. (</code></p>
<p> <code>2014080701 ;版本号</code></p>
<p> <code>1H ;刷新时长</code></p>
<p> <code>5M ;每5分钟做一次重试</code></p>
<p> <code>3D ;过期时间</code></p>
<p> <code>3H );否定回答时间)</code></p>
<p> <code>IN NS ns ;这里ns后面不用写全了  因为第二行做了ORIGIN</code></p>
<p> <code>IN  MX  10  mail</code></p>
<p><code>ns  IN  A   37.59.108.37</code></p>
<p><code>mail    IN  A   106.186.17.185</code></p>
<p><code>www IN  A   106.186.17.185</code></p>
<p><code>ftp</code> <code>IN  A   106.186.17.185</code></p>
<p><img src="/2020/04/bind%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A325.png" alt="自建DNS服务,实现双DNS服务器主从复制、子域授权、转发、智能解析等效果"></p>
<p><strong>下面来启动子域服务器上DNS服务</strong></p>
<p><code>[root@LookBack37 named]``# service named start</code></p>
<p><code>Starting named:                                            [  OK  ]</code></p>
<p><strong>来测试下子域配置</strong></p>
<p><code>[root@LookBack37 named]``# dig -t A www.ops.zeaxion.com @37.59.108.37</code></p>
<p><code>; &lt;&lt;&gt;&gt; DiG 9.9.5 &lt;&lt;&gt;&gt; -t A www.ops.zeaxion.com @37.59.108.37</code></p>
<p><code>;; global options: +cmd</code></p>
<p><code>;; Got answer:</code></p>
<p><code>;; -&gt;&gt;HEADER&lt;&gt; DiG 9.9.5 &lt;&lt;&gt;&gt; -t A www.ops.zeaxion.com @92.222.219.223</code></p>
<p><code>;; global options: +cmd</code></p>
<p><code>;; Got answer:</code></p>
<p><code>;; -&gt;&gt;HEADER&lt;</code></p>
<p> </p>
<p><code>[root@LookBack223 named]``# dig -t A www.ops.zeaxion.com</code></p>
<p><code>; &lt;&lt;&gt;&gt; DiG 9.9.5 &lt;&lt;&gt;&gt; -t A www.ops.zeaxion.com</code></p>
<p><code>;; global options: +cmd</code></p>
<p><code>;; Got answer:</code></p>
<p><code>;; -&gt;&gt;HEADER&lt;</code></p>
<p><strong>通过上面可以看出 不论是通过子域服务器查询还是通过父域查询 都可以了，也就是说到了这里 我们的子域服务器也OK了</strong></p>
<hr>
<h1 id="六、配置转发"><a href="#六、配置转发" class="headerlink" title="六、配置转发"></a><strong>六、配置转发</strong></h1><p>转发器顾名思义就是转发不是本机DNS所解析的服务至指定的服务器，这时候本机就是一个转发器了。 <strong>下面来看看第一种配置,转发器</strong></p>
<p><code>[root@LookBack37 named]``# pwd</code></p>
<p><code>/etc/named</code></p>
<p><code>[root@LookBack37 named]``# cat named.conf</code></p>
<p><code>options &#123;</code></p>
<p><code>listen-on port 53 &#123; 127.0.0.1; 37.59.108.37; &#125;;</code></p>
<p><code>listen-on-v6 port 53 &#123; 2001:41d0:51:1::d1c; &#125;;</code></p>
<p><code>directory</code> <code>&quot;/var/named&quot;``;</code></p>
<p><code>//``定义工作目录</code></p>
<p><code>recursion</code> <code>yes``;</code></p>
<p><code>//``允许递归</code></p>
<p><code>//forward</code> <code>only;</code></p>
<p><code>forward first;``//only</code> <code>是先递归给指定服务器，如果没有答案那么结果就是没答案，first 是先递归查询 要是没答案就自己再找一圈</code></p>
<p><code>forwarders &#123; 8.8.8.8; &#125;;``//``转发到哪个服务器上</code></p>
<p><code>&#125;;</code></p>
<p><strong>下面来看看第二种配置,转发区域(只对指定的区域做转发，其他的任然是去根上查询)</strong></p>
<p><code>#看zone  &quot;zeaxion.com&quot;   IN段中的配置，这里做了只转发zeaxion.com域的配置</code></p>
<p><code>[root@LookBack37 named]``# pwd</code></p>
<p><code>/etc/named</code></p>
<p><code>[root@LookBack37 named]``# cat named.conf</code></p>
<p><code>options &#123;</code></p>
<p> <code>listen-on port 53 &#123; 127.0.0.1; 37.59.108.37; &#125;;</code></p>
<p> <code>listen-on-v6 port 53 &#123; 2001:41d0:51:1::d1c; &#125;;</code></p>
<p> <code>directory</code> <code>&quot;/var/named&quot;``;</code></p>
<p> <code>//``定义工作目录</code></p>
<p> <code>recursion</code> <code>yes``;</code></p>
<p> <code>//``允许递归</code></p>
<p> <code>//forward</code> <code>only;</code></p>
<p> <code>forward first;</code></p>
<p> <code>forwarders &#123; 8.8.8.8; &#125;;</code></p>
<p><code>&#125;;</code></p>
<p><code>zone</code> <code>&quot;.&quot;</code>     <code>IN      &#123;</code></p>
<p> <code>type</code> <code>hint;</code></p>
<p> <code>file</code> <code>&quot;named.ca&quot;``;</code></p>
<p><code>&#125;;</code></p>
<p><code>zone</code> <code>&quot;localhost&quot;</code>     <code>IN      &#123;</code></p>
<p> <code>type</code> <code>master;</code></p>
<p> <code>//``设施为主  master</code></p>
<p> <code>file</code> <code>&quot;localhost.zone&quot;``;</code></p>
<p> <code>allow-update &#123; none; &#125;;</code></p>
<p> <code>//``不允许任何人更新</code></p>
<p><code>&#125;;</code></p>
<p><code>zone</code> <code>&quot;0.0.127.in-addr.arpa&quot;</code>  <code>IN      &#123;</code></p>
<p><code>//``把127.0.0反向解析</code></p>
<p> <code>type</code> <code>master;</code></p>
<p> <code>file</code> <code>&quot;127.0.0.zone&quot;``;</code></p>
<p> <code>allow-update &#123; none; &#125;;</code></p>
<p><code>&#125;;</code></p>
<p><code>zone</code> <code>&quot;ops.zeaxion.com&quot;</code>   <code>IN      &#123;</code></p>
<p> <code>type</code> <code>master;</code></p>
<p> <code>file</code> <code>&quot;ops.zeaxion.com.zone&quot;``;</code></p>
<p> <code>//allow-update</code> <code>&#123; 127.0.0.1; &#125;;</code></p>
<p><code>&#125;;</code></p>
<p><code>zone</code> <code>&quot;zeaxion.com&quot;</code>   <code>IN      &#123;</code></p>
<p> <code>type</code> <code>forward;</code></p>
<p> <code>forward only;</code></p>
<p> <code>forwarders &#123; 92.222.219.223; 92.222.219.226; &#125;;</code></p>
<p><code>&#125;;</code></p>
<p>下面来看看效果</p>
<p><code>[root@LookBack37 named]``# dig -t A www.zeaxion.com @37.59.108.37</code></p>
<p><code>; &lt;&lt;&gt;&gt; DiG 9.9.5 &lt;&lt;&gt;&gt; -t A www.zeaxion.com @37.59.108.37</code></p>
<p><code>;; global options: +cmd</code></p>
<p><code>;; Got answer:</code></p>
<p><code>;; -&gt;&gt;HEADER&lt;</code></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>DNS</tag>
        <tag>BIND</tag>
      </tags>
  </entry>
  <entry>
    <title>超级一键</title>
    <url>/2018/10/10/%E8%B6%85%E7%BA%A7%E4%B8%80%E9%94%AE/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>超级暴力版魔改BBR一键脚本 for Debian</title>
    <url>/2018/05/02/%E8%B6%85%E7%BA%A7%E6%9A%B4%E5%8A%9B%E7%89%88%E9%AD%94%E6%94%B9bbr%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC-for-debian/</url>
    <content><![CDATA[<p><strong>说明：</strong>超级暴力版魔改<code>BBR</code>安装方法刚说过了，参考：<a href="https://www.moerats.com/archives/522/">Debian&#x2F;Ubuntu开启超级暴力版魔改BBR教程</a>，不过是手动的，有点麻烦，这里就分享下南琴浪大佬的一键脚本，只适用<code>Debian</code>系统，<code>Ubuntu</code>系统可以查看教程手动安装。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>Github地址：</strong><a href="https://github.com/nanqinlang/tcp_nanqinlang-test">https://github.com/nanqinlang/tcp_nanqinlang-test</a></p>
<p><code>Debian 7</code>、<code>8</code>、<code>9</code>系统都可以，使用命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/nanqinlang/tcp_nanqinlang-test/master/tcp_nanqinlang-test.sh</span><br><span class="line">bash tcp_nanqinlang-test.sh</span><br></pre></td></tr></table></figure>

<p>使用脚本后会出现如下选项： <img src="https://www.jarods.org/wp-content/uploads/2018/05/super_bbr.png" alt="请输入图片描述" title="请输入图片描述"> 先选择<code>1</code>更换内核，然后<code>reboot</code>重启后，再使用<code>bash tcp_nanqinlang-test.sh</code>进行第<code>2</code>步开启超级暴力<code>BBR</code>模式。</p>
<p>如果在删除内核环节出现这样一张图 <img src="https://www.jarods.org/wp-content/uploads/2018/05/qianyingbbr2.png" alt="请输入图片描述" title="请输入图片描述"> 注意选择<code>NO</code>，然后根据提示操作。</p>
<p>有问题请咨询大佬，南琴浪博客：<a href="https://sometimesnaive.org/">https://sometimesnaive.org/</a>。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Debian</tag>
        <tag>超级暴力版魔改，BBR</tag>
      </tags>
  </entry>
  <entry>
    <title>部署Poste邮件服务器</title>
    <url>/2018/11/21/%E9%83%A8%E7%BD%B2poste%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>今天我们要给大家介绍一款非常有趣的邮件服务器程序，Poste. 作为邮件服务器领域的新秀，Poste近年来得到了持续的关注。它具有非常高的稳定性，并提供非常出众的管理面板，能够轻易实现邮件收发、多域名控制、邮箱容量控制、邮件杀毒、邮件过滤以及Webmail等基础功能。同时，Poste还提供了投递统计分析、客户端自动适配、一键安装SSL、邮件转发、邮件别名、Catch-All等相当有用的功能。另外，Poste邮件服务器基于Docker搭建，其过程非常简单，不像Zimbra之类的邮件服务器需要比较复杂的运行和维护能力。</p>
<p>下面我就来介绍一下如何安装与配置Poste邮件服务器。本文作者为香菇肥牛，文章链接为<a href="https://qing.su/article/139.html">https://qing.su/article/139.html</a> 转载需经过本人同意且需注明原文链接，谢谢。</p>
<h2 id="1-系统环境配置"><a href="#1-系统环境配置" class="headerlink" title="1, 系统环境配置"></a>1, 系统环境配置</h2><p>首先我们介绍一下服务器的运行环境。由于基于Docker, 因此大部分Linux发行版均可以运行Poste. 运行的Poste占用内存在800 MB左右，因此建议选择一个内存1 GB或者以上的VPS进行搭建。Poste仅支持64位操作系统。</p>
<p>在安装任何邮件服务器之前，我们需要配置好hostname. 本文我们以mx.qing.su为例，当您在SSH中执行hostname命令时，应当看到mx的回显；当您在SSH中执行hostname -f命令时，应当看到mx.qing.su的回显。若您未配置好hostname, 请不要继续。</p>
<p>开始安装之前，建议您先设置好一部分DNS. 我们需要设置这样的几条记录 (请用您自己的域名替代下文中的qing.su)：</p>
<ol>
<li><em>qing.su.</em> <strong>A</strong> <em>Any_IP</em></li>
<li><em>mx.qing.su.</em> <strong>A</strong> <em>88.88.88.88</em></li>
<li><em>qing.su.</em> <strong>MX</strong> <em>mx.qing.su.</em> <strong>10</strong></li>
<li><em>mail.qing.su.</em> <strong>CNAME</strong> <em>mx.qing.su.</em></li>
<li><em>smtp.qing.su.</em> <strong>CNAME</strong> <em>mx.qing.su.</em></li>
<li><em>imap.qing.su.</em> <strong>CNAME</strong> <em>mx.qing.su.</em></li>
<li><em>qing.su.</em> <strong>IN TXT</strong> “v&#x3D;spf1 mx ~all”</li>
<li><em>_dmarc.qing.su.</em> <strong>IN TXT</strong> “v&#x3D;DMARC1; p&#x3D;none; rua&#x3D;mailto:<a href="mailto:&#100;&#x6d;&#x61;&#114;&#x63;&#x2d;&#114;&#x65;&#x70;&#x6f;&#x72;&#x74;&#x73;&#x40;&#x71;&#105;&#x6e;&#x67;&#46;&#x73;&#x75;">&#100;&#x6d;&#x61;&#114;&#x63;&#x2d;&#114;&#x65;&#x70;&#x6f;&#x72;&#x74;&#x73;&#x40;&#x71;&#105;&#x6e;&#x67;&#46;&#x73;&#x75;</a>”</li>
<li><em>88.88.88.88</em> <strong>PTR</strong> <em>mx.qing.su</em></li>
</ol>
<p>其中，4, 5, 6, 8项为可选，第九项为域名PTR, 需要您在自己的服务器提供商处设定。</p>
<h2 id="2-安装Poste"><a href="#2-安装Poste" class="headerlink" title="2, 安装Poste"></a>2, 安装Poste</h2><p>配置好以上的DNS, 我们就可以开始安装Poste了。之前说过，Poste全部程序均基于Docker, 因此我们需要先安装Docker. 以Ubuntu 16.04 LTS 64 bit为例，执行下面的命令安装Docker.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install \</span><br><span class="line">apt-transport-https \</span><br><span class="line">ca-certificates \</span><br><span class="line">curl \</span><br><span class="line">software-properties-common</span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span><br><span class="line">$(lsb_release -cs) \</span><br><span class="line">stable&quot;</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install docker-ce</span><br></pre></td></tr></table></figure>

<p> </p>
<p>安装好Docker后，执行下面的命令安装Poste.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 25:25 \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-p 110:110 \</span><br><span class="line">-p 143:143 \</span><br><span class="line">-p 443:443 \</span><br><span class="line">-p 587:587 \</span><br><span class="line">-p 993:993 \</span><br><span class="line">-p 995:995 \</span><br><span class="line">-v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">-v /srv/poste/data:/data \</span><br><span class="line">--name &quot;PosteServ&quot; \</span><br><span class="line">-h &quot;mx.qing.su&quot; \</span><br><span class="line">-t analogic/poste.io</span><br></pre></td></tr></table></figure>

<p> </p>
<p>如果没有报错，Poste应该已经安装完毕并开始运行了。整个过程仅需2-3分钟。</p>
<h2 id="3-配置Poste"><a href="#3-配置Poste" class="headerlink" title="3, 配置Poste"></a>3, 配置Poste</h2><p>安装好Poste之后，我们就可以登录mx.example.com来配置Poste了。初次登录，会提示设置服务器名和管理员邮箱与密码，如下图。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/11/1-w-2-1024x471.png"></p>
<p>设置完毕后，即可看到美观大气的后台管理界面。用过MailChannels等邮件平台的朋友想必会对顶部的投递统计非常熟悉。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/11/1.5-w-1024x457.png"></p>
<p>刚安装好Poste的时候，SSL还没有配置，我们可以使用Poste内置的Let’s Encrypt一键签发证书。点击左侧System settings — TLS certificate, 然后点击绿色的**<em>issue free letsencrypt.org certificate</em>**, 输入我们的域名，即可签发并自动安装证书，非常方便。您也可以手动申请并安装证书。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/11/2.2-w-1024x830.png"></p>
<p>证书签发完毕后关闭浏览器并重新登录，即可看到生效的SSL.</p>
<p>Poste支持无限数量的域名和邮箱。我们点击左侧的Virtual Domains即可添加域名，如下图。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/11/3.0-w-1024x546.png"></p>
<p>点击左侧Email accounts即可添加无限数量的邮箱。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/11/4-w-1024x776.png"></p>
<p>我们还可以设置DKIM签名。点击Virtual domains, 并选择您需要设置的域名，然后在DKIM key一栏中可以点击create new key, 将生成的记录填写到对应域名的DNS中即可。</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2018/11/5-w-1024x427.png"></p>
<p>还有很多其他的功能，这里就不作过多的介绍了，欢迎大家自己去尝试探索。总之，Poste是一个小而精的邮件服务器，其功能丰富，收发信可靠，非常适合个人、团体以及企业使用。如果您在安装与使用的过程中遇到了问题，欢迎在本文下面留言，我将尽力解答。</p>
<p>本文作者为香菇肥牛，本文链接为<a href="https://qing.su/article/139.html">https://qing.su/article/139.html</a>, 转载需经过本人同意且需注明原文链接，谢谢。</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Poste</tag>
        <tag>邮件</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Powershell和软件安装Chocolatey</title>
    <url>/2021/05/11/%E9%80%9A%E8%BF%87powershell%E5%92%8C%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85chocolatey/</url>
    <content><![CDATA[<p>我使用Chocolatey（chocolatey.org）作为我的软件安装源，并想知道在后期安装过程中是否可以运行Powershell脚本来安装Chocolatey（以及可能需要的软件）。通常，您在Powershell中运行以下命令以安装Chocolatey</p>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://chocolatey.org/install.ps1&#x27;))</span><br></pre></td></tr></table></figure>

<p>之后，您可以通过Powershell使用以下命令安装软件：</p>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">choco install adobereader</span><br></pre></td></tr></table></figure>

<p>例如。</p>
<p>您甚至可以自动确认每个安装（也称为静默安装）</p>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">choco feature enable -n allowGlobalConfirmation</span><br></pre></td></tr></table></figure>

<p>在安装过程中跳过“是否要运行该脚本？（[Y] es &#x2F; [A] ll-对所有人&#x2F;是[N] o &#x2F; [P] rint]是]”）。</p>
<p>因此，我的想法是包括三个脚本：</p>
<p>1）安装Chocolatey 2）允许自动确认每次安装 3）包括我需要</p>
<p>的所有软件的安装命令到目前为止，我遇到的问题是： 1）我不知道如何编写powershell脚本（我可以简单地将上面的代码放在文件中，然后将其保存为powershell脚本吗？） 2）Chocolatey需要在管理Shell中运行才能工作。在安装后是否可以通过某种方式进行？</p>
<p>也许您可以指出正确的方向来完成这项工作。</p>
]]></content>
      <categories>
        <category>Win</category>
      </categories>
  </entry>
  <entry>
    <title>#远程桌面版# 一键安装支持VNC的桌面版Linux</title>
    <url>/2017/11/06/%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E7%89%88-%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E6%94%AF%E6%8C%81vnc%E7%9A%84%E6%A1%8C%E9%9D%A2%E7%89%88linux/</url>
    <content><![CDATA[<p>之前微魔给大家介绍了手动安装VNC和可视化桌面的教程（<a href="https://www.vmvps.com/tag/vnc" title="VNC @ 微魔部落，便宜VPS">任意门</a>），但是，一些新人朋友似乎并不满足~而微魔有时候也会感慨，要是不用自己一步一步输入命令多好…于是乎，微魔在网络上就搜到了一段Linux指令，可以快速的完成VNC和可视化桌面的安装，文中命令适用于ubuntu 12.04，Debian7和CentOS 6，大家针对版本使用吧。</p>
<p>注：本文代码来源于VPS服务商GinerNet（<a href="https://www.vmvps.com/tag/ginernet" title="GinerNet @ 微魔部落，便宜VPS">查看促销</a>），代码所有权归属原作者所有。</p>
<p>Ubuntu 12.04 32&amp;64位</p>
<p>apt-get update -y;apt-get upgrade -y;apt-get install nano -y;apt-get install gnome-core firefox flashplugin-installer -y;apt-get install vnc4server -y; vncserver; vncserver -kill :1; cd ~; wget <a href="https://ginernet.com/downloads/vnc-ubuntu-12.txt">https://ginernet.com/downloads/vnc-ubuntu-12.txt</a> -O .vnc&#x2F;xstartup; mkdir -p &#x2F;etc&#x2F;vncserver; echo ‘VNCSERVERS&#x3D;”1:root”‘ &gt;&gt; &#x2F;etc&#x2F;vncserver&#x2F;vncservers.conf; echo ‘VNCSERVERARGS[1]&#x3D;”-geometry 1000x700”‘ &gt;&gt; &#x2F;etc&#x2F;vncserver&#x2F;vncservers.conf; cd &#x2F;etc&#x2F;init.d&#x2F;; wget <a href="https://ginernet.com/downloads/vnc-init-ubuntu-12.txt">https://ginernet.com/downloads/vnc-init-ubuntu-12.txt</a> -O vncserver; chmod 755 vncserver; update-rc.d vncserver defaults 99; reboot;</p>
<p>Debian 7 32&amp;64位</p>
<p>apt-get update -y;apt-get upgrade -y;apt-get install nano -y;apt-get install gnome-core flashplugin-nonfree -y;apt-get install vnc4server -y; vncserver; vncserver -kill :1; cd ~; wget <a href="https://ginernet.com/downloads/vnc-debian-7.txt">https://ginernet.com/downloads/vnc-debian-7.txt</a> -O .vnc&#x2F;xstartup; mkdir -p &#x2F;etc&#x2F;vncserver; echo ‘VNCSERVERS&#x3D;”1:root”‘ &gt;&gt; &#x2F;etc&#x2F;vncserver&#x2F;vncservers.conf; echo ‘VNCSERVERARGS[1]&#x3D;”-geometry 1000x700”‘ &gt;&gt; &#x2F;etc&#x2F;vncserver&#x2F;vncservers.conf; cd &#x2F;etc&#x2F;init.d&#x2F;; wget <a href="https://ginernet.com/downloads/vnc-init-ubuntu-12.txt">https://ginernet.com/downloads/vnc-init-ubuntu-12.txt</a> -O vncserver; chmod 755 vncserver; update-rc.d vncserver defaults 99; reboot;</p>
<p>CentOS 6 64位系统（不支持32位）</p>
<p>yum install nano -y; yum update -y; yum upgrade -y; yum install tigervnc-server -y; yum groupinstall “Desktop” -y; yum install firefox -y; rpm -ivh <a href="http://linuxdownload.adobe.com/adobe-release/adobe-release-x86/_64-1.0-1.noarch.rpm">http://linuxdownload.adobe.com/adobe-release/adobe-release-x86\_64-1.0-1.noarch.rpm</a>; rpm –import &#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-adobe-linux; yum install flash-plugin nspluginwrapper alsa-plugins-pulseaudio libcurl -y; echo ‘echo “nameserver 8.8.8.8” &gt;&gt; &#x2F;etc&#x2F;resolv.conf; ‘ &gt;&gt; &#x2F;etc&#x2F;rc.local; echo ‘VNCSERVERS&#x3D;”1:root”‘ &gt;&gt; &#x2F;etc&#x2F;sysconfig&#x2F;vncservers; echo ‘VNCSERVERARGS[1]&#x3D;”-geometry 1000x700”‘ &gt;&gt; &#x2F;etc&#x2F;sysconfig&#x2F;vncservers; vncpasswd; chkconfig vncserver on –level 345; reboot;</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>VNC</tag>
      </tags>
  </entry>
  <entry>
    <title>锐速破解版linux一键自动安装包（5月28日更新）</title>
    <url>/2017/07/09/%E9%94%90%E9%80%9F%E7%A0%B4%E8%A7%A3%E7%89%88linux%E4%B8%80%E9%94%AE%E8%87%AA%E5%8A%A8%E5%AE%89%E8%A3%85%E5%8C%85%EF%BC%885%E6%9C%8828%E6%97%A5%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>本文由<a href="https://www.91yun.org/archives/author/91yun"><strong>@91yun</strong></a>发布</p>
</blockquote>
<p>破解版锐速 linux 一键自动安装包在本贴持续更新，大家可以加收藏夹，以后有更新都会在这个文章同步。</p>
<p>本破解锐速是是无限带宽版的，破解版锐速的一些代码将逐步开源在 <a href="https://github.com/91yun/serverspeeder">github 这里</a> 。也欢迎大家订阅我的 Twitter, 实时获得最新信息 .<a href="https://twitter.com/91yun_org">91yun 的 Twitter</a></p>
<p>锐速破解版自动安装过程中有什么问题都可以到 <a href="http://bbs.91yun.org/">91yun 论坛</a> 讨论，我尽量解答。（ 91yun 的官方 TG 群：<a href="https://telegram.me/im91yun">https://telegram.me/im91yun</a> ）</p>
<h1 id="破解版锐速最新更新"><a href="#破解版锐速最新更新" class="headerlink" title="破解版锐速最新更新"></a>破解版锐速最新更新</h1><p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;2017 年 5 月 28 日更新 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; ：</p>
<ol>
<li>改了下锐速的安装文件，有问题的欢迎及时反馈。</li>
<li>已经装过的如果没有断流问题无需重装。</li>
</ol>
<p>另外：重要的事情说三遍！！！</p>
<p><strong>锐速不支持 Openvz ！！！锐速不支持 Openvz ！！！锐速不支持 Openvz ！！！</strong></p>
<h1 id="你可能需要："><a href="#你可能需要：" class="headerlink" title="你可能需要："></a>你可能需要：</h1><ul>
<li>openvz 可以通过 UML 的方式安装 BBR+SSR 了，具体可以看《 <a href="https://bbs.91yun.org/discussion/65/openvz%E7%9A%84uml-bbr-ssr%E4%B8%80%E9%94%AE%E5%8C%85-%E6%B5%8B%E8%AF%95-64m%E5%B0%8F%E5%86%85%E5%AD%98%E8%BF%90%E8%A1%8C-3%E6%9C%8816%E6%97%A5%E6%9B%B4%E6%96%B0#latest">openvz 的 UML+BBR+SSR 一键包（测试）， 64M 小内存运行</a> 》</li>
<li>如果你的内核不对，是 Centos 的话请食用《 <a href="https://www.91yun.org/archives/795">教程： CentOS 更换内核，提供锐速可用的内核下载</a> 》。 debian 和 ubuntu 我不熟，暂时还没一键包，请自行百度 google 。。</li>
<li>如果你嫌麻烦，只是想找个好用的 SS ，嫌麻烦又不想花太多钱，租用我的自用精选线路。。。 <a href="https://www.ss100.pw/">想租 SS 的进</a></li>
<li>如果你想知道一些服务器是否适合你，请食用 <a href="https://www.91yun.org/?s=%E8%AF%84%E6%B5%8B">各种评测报告</a> 。我每天都会把我尝试的一些 vps 评测报告发出来，大家可以收藏好本站，及时关注。</li>
</ul>
<p> </p>
<h1 id="锐速破解版安装方法："><a href="#锐速破解版安装方法：" class="headerlink" title="锐速破解版安装方法："></a>锐速破解版安装方法：</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://github.com/91yun/serverspeeder/raw/master/serverspeeder.sh &amp;&amp; bash serverspeeder.sh</span><br></pre></td></tr></table></figure>

<h1 id="锐速破解版卸载方法："><a href="#锐速破解版卸载方法：" class="headerlink" title="锐速破解版卸载方法："></a>锐速破解版卸载方法：</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chattr -i /serverspeeder/etc/apx* &amp;&amp; /serverspeeder/bin/serverSpeeder.sh uninstall -f</span><br></pre></td></tr></table></figure>

<h1 id="锐速破解版功能："><a href="#锐速破解版功能：" class="headerlink" title="锐速破解版功能："></a>锐速破解版功能：</h1><p>如果内核完全匹配就会自动下载安装。 如果没有完全匹配的内核，会在界面提示可选内核，可以手动选个最接近的尝试 自动下载授权文件 自动修改配置文件 已 chattr +i &#x2F;serverspeeder&#x2F;etc&#x2F;apx* 禁止修改配置文件，可以不用加 hosts 了 目前只支持 CentOS ， ubuntu 和 debian 。如果有其他系统支持，可以到 <a href="https://www.91yun.org/serverspeeder91yun">https://www.91yun.org/serverspeeder91yun</a> 手动下载其他系统的安装包</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/07/QQ%E5%9B%BE%E7%89%8720160302161200-2.png" alt="QQ图片20160302161200"></p>
<p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;2017 年 3 月 17 日更新 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; ：</p>
<ol>
<li>之前安装了很多依赖库，基本都精简了，已经不主动安装任何依赖库了。</li>
<li>所有提示改成了英文， putty 应该也能正常显示了</li>
<li>把安装包和支持库列表都放到 github ，并把二进制文件移到了洛杉矶服务器，国内下载应该也会比较快了</li>
<li>配置文件增加了流入加速的开启</li>
<li>配置文件增加了默认带宽到 G 口</li>
<li>手动选内核的安装已经恢复，可以查目前支持的 <a href="https://www.91yun.org/serverspeeder91yun">完整内核列表</a></li>
</ol>
<p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;2016 年 8 月 7 日更新 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; ：</p>
<ul>
<li>新增了以下支持的内核，欢迎大家测试，有问题及时反馈：<ul>
<li>CentOS-6.8 ： 2.6.32-642.el7.x86_64</li>
<li>CentOS-7.2 ： 3.10.0-327.el7.x86_64</li>
<li>CentOS ： 4.4.0-x86_64-linode63</li>
<li>Ubuntu_14.04 ： 4.2.0-35-generic</li>
<li>Debian_8 ： 3.16.0-4-amd64</li>
</ul>
</li>
</ul>
<p> </p>
<p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;2016 年 6 月 5 日更新 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; ：</p>
<ul>
<li>把一直被吐槽的 release_lsb 的安装代码改了下。。</li>
<li>增加了网卡非 eth0 的错误提示。本破解已经确认无法支持网卡名称非 eth0 的网卡。请自行修改《 <a href="https://www.91yun.org/archives/1217">CentOS 更换网卡名称</a> 》</li>
<li>改了下锐速的安装脚本<ul>
<li><p>安装过程中原来有要手动输入加速网卡，上下行带宽等都取消了，采用默认的方式安装。如果有需要修改的朋友请安装完后直接修改锐速的配置文件：</p>
<blockquote>
<p>vi &#x2F;serverspeeder&#x2F;etc&#x2F;config</p>
</blockquote>
</li>
<li><p>把原来配置文件默认 accppp 的默认改为 0 了。避免没有安装 ppp 服务的机子安装过程中报错。</p>
</li>
<li><p>修复了 centos7 安装的时候可能不会自动随机启动的问题</p>
</li>
<li><p>已知问题： debian 无法随机自动启动，请自行手动把“ &#x2F;serverspeeder&#x2F;bin&#x2F;serverSpeeder.sh start ”加入 rc.local 启动</p>
</li>
</ul>
</li>
</ul>
<p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;2016 年 3 月 24 日更新 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; ：</p>
<ul>
<li><p>换了种更简单的方式取 mac 地址。如果以前能取到，现在取不到请告知我，谢谢。</p>
</li>
<li><p>可以自己填 mac 地址了。使用方法： bash serverspeeder-all.sh mac 地址   就是运行命令后面跟上 mac 地址的参数。比如 :</p>
<blockquote>
<p>bash serverspeeder-all.sh 52:54:00:D3:0F:6C</p>
</blockquote>
</li>
</ul>
<p>另外：重要的事情说三遍！！！</p>
<p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;2016 年 3 月 16 日更新 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<ul>
<li>修改了内核匹配机制，在不跨大版本的全部内核里面匹配，提高匹配成功率（比如如果你装的是 Centos6.7 ，但是内核和一个 Centos6.4 一样，就会安装 6.4 的内核）。同样内核的情况下，大部分情况是可以通用的。（如果有问题可以联系我再验证）</li>
<li>关于内核不匹配的问题，可以看《 <a href="https://www.91yun.org/archives/795">教程： CentOS 更换内核，提供锐速可用的内核下载</a> 》</li>
<li>添加了自动启动项。（因为发现有些系统重启不会自动启动）</li>
<li>PS ：发现有用户如果网卡的名称不是 eth0 的话安装不了，如果有这种情况，请联系我，我需要类似的情况作些测试。谢谢。</li>
</ul>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>锐速</tag>
      </tags>
  </entry>
  <entry>
    <title>首页</title>
    <url>/2021/05/24/%E9%A6%96%E9%A1%B5/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>魔改版BBR一键脚本 For Debian8/Ubuntu16+</title>
    <url>/2017/07/14/%E9%AD%94%E6%94%B9%E7%89%88bbr%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC-for-debian8ubuntu16/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>BBR相信大家都不陌生，是谷歌开发的一个存在于Linux内核中的拥塞算法。为了优化国内与服务器之间的网络质量，loc的大佬专门魔改改进了下这个BBR，成为了新的BBR魔改版。我也就乘机水一篇文章好了<del>在Debian 8 和Ubuntu16 + 系统上一键部署<a href="https://www.zhujiboke.com/tag/%e9%ad%94%e6%94%b9%e7%89%88bbr">魔改版BBR</a>，自动换内核成 4.10.15 ，自动安装Headers。用户只需要将系统安装成 Debian 8 或者 Ubuntu 16 即可，剩下的交给脚本来吧。据说效果比原版BBR和锐速都要好哦</del></p>
<p>Github地址:<a href="https://github.com/FunctionClub/YankeeBBR">https://github.com/FunctionClub/YankeeBBR</a></p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/07/2017070602231760.png" alt="魔改版BBR一键脚本 For Debian8/Ubuntu16+" title="魔改版BBR一键脚本 For Debian8/Ubuntu16+"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>魔改BBR原帖：<a href="http://www.hostloc.com/thread-372277-1-2.html">http://www.hostloc.com/thread-372277-1-2.html</a></p>
<p>萌新教程: <a href="http://www.hostloc.com/thread-372335-1-1.html">http://www.hostloc.com/thread-372335-1-1.html</a></p>
<p>脚本技术： <a href="https://doub.io/wlzy-16/">https://doub.io/wlzy-16/</a></p>
<h2 id="部分商家的VPS可能会遇到换内核之后无法启动系统的情况，所以请运行脚本前一定要备份好重要数据！！"><a href="#部分商家的VPS可能会遇到换内核之后无法启动系统的情况，所以请运行脚本前一定要备份好重要数据！！" class="headerlink" title="部分商家的VPS可能会遇到换内核之后无法启动系统的情况，所以请运行脚本前一定要备份好重要数据！！"></a><strong>部分商家的VPS可能会遇到换内核之后无法启动系统的情况，所以请运行脚本前一定要备份好重要数据！！</strong></h2><h2 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/YankeeBBR/master/bbr.sh &amp;&amp; bash bbr.sh install</span><br></pre></td></tr></table></figure>

<p>安装过程中如果出现这张图片，请选择NO 来删除其他内核：</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/07/201707060225187.png" alt="魔改版BBR一键脚本 For Debian8/Ubuntu16+" title="魔改版BBR一键脚本 For Debian8/Ubuntu16+"></p>
<p>然后根据提示重启系统。 重启完成后，运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash bbr.sh start</span><br></pre></td></tr></table></figure>

<p>即可启动<a href="https://www.zhujiboke.com/tag/%e9%ad%94%e6%94%b9%e7%89%88bbr">魔改版BBR</a>。</p>
<h2 id="查看魔改BBR状态"><a href="#查看魔改BBR状态" class="headerlink" title="查看魔改BBR状态"></a>查看魔改BBR状态</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure>

<p>如果看到有 tsunami 就表示开启成功！</p>
<p><img src="https://www.jarods.org/wp-content/uploads/2017/07/2017070602263391.png" alt="魔改版BBR一键脚本 For Debian8/Ubuntu16+" title="魔改版BBR一键脚本 For Debian8/Ubuntu16+"></p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Debian</tag>
        <tag>BBR</tag>
      </tags>
  </entry>
  <entry>
    <title>魔改 BBR 一键脚本 for Debian &amp; CentOS</title>
    <url>/2018/11/03/%E9%AD%94%E6%94%B9-bbr-%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC-for-debian-centos/</url>
    <content><![CDATA[<p>魔改 BBR 一键脚本，包含 Debian &amp;&amp; CentOS 两个版本。</p>
<p>此文所述版本，仅适用于 <code>KVM</code> 的 Debian 7+ (32&#x2F;64 bit) 或 CentOS 6+ (64 bit)。</p>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>这个是 <code>新手简装</code> 版本，只需 <code>运行脚本第一项+重启+运行脚本第二项</code>。一般用户只需使用此版本，并建议使用该版本。此版本不需要编译的过程，直接安装 v4.10.2 内核。</p>
<p># Debian 7+<br># fool<br>wget <a href="https://github.com/tcp-nanqinlang/general/releases/download/3.4.2.1/tcp/_nanqinlang-fool-1.3.0.sh">https://github.com/tcp-nanqinlang/general/releases/download/3.4.2.1/tcp\_nanqinlang-fool-1.3.0.sh</a><br>bash tcp_nanqinlang-fool-1.3.0.sh</p>
<p>这个是 <code>进阶</code> 版本。提供自定义内核版本功能，只建议有<code>用户自己指定安装的内核的版本</code>需求的用户使用，例如你想安装 v4.12.10 版本的内核，就需要使用这个版本。目前此版本脚本提供 linux kernel <code>v4.9.3 ~ v4.14.32</code> 支持。</p>
<p># Debian 7+<br># pro<br>wget <a href="https://github.com/tcp-nanqinlang/general/releases/download/3.4.2.1/tcp/_nanqinlang-pro-3.4.2.1.sh">https://github.com/tcp-nanqinlang/general/releases/download/3.4.2.1/tcp\_nanqinlang-pro-3.4.2.1.sh</a><br>bash tcp_nanqinlang-pro-3.4.2.1.sh</p>
<p>这个是 <code>CentOS</code> 平台的版本，仍未确定为正式版，请勿在重要环境使用。</p>
<p># CentOS 6&#x2F;7<br># only 64 bit<br>wget <a href="https://raw.githubusercontent.com/tcp-nanqinlang/general/master/General/CentOS/bash/tcp/_nanqinlang-1.3.2.sh">https://raw.githubusercontent.com/tcp-nanqinlang/general/master/General/CentOS/bash/tcp\_nanqinlang-1.3.2.sh</a><br>bash tcp_nanqinlang-1.3.2.sh</p>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a><a href="https://github.com/tcp-nanqinlang/wiki/wiki/general#%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E"></a>使用说明</h2><p>出现四个选项供以选择：</p>
<h3 id="安装内核"><a href="#安装内核" class="headerlink" title="安装内核"></a><a href="https://github.com/tcp-nanqinlang/wiki/wiki/general#%E5%AE%89%E8%A3%85%E5%86%85%E6%A0%B8"></a>安装内核</h3><p><code>必须使用此命令安装内核并重启！</code></p>
<p>安装内核时，请注意区别：</p>
<ul>
<li>Debian</li>
<li>下载内核安装包至 &#x2F;home&#x2F;tcp_nanqinlang，脚本第二项运行完成后移除该文件夹</li>
<li>系统中只会留下新安装的内核，原有的所有内核都会被移除</li>
<li>对于 pro 版本，安装的内核版本由你指定，若不确定应输入哪个版本号，直接回车即可，会安装 v4.10.10 版本内核</li>
<li>指定安装内核版本为 v4.13.x 时，会使用新版本内核适配的源码</li>
<li>本魔改项目暂不支持 v4.14 及以上版本内核</li>
<li>此命令执行完毕后，请根据脚本内提示确认内核是否已安装完毕</li>
<li>CentOS：套路和上面 Debian 的大致相当，主要在于以下区别：</li>
<li>不会询问安装版本号，直接安装内核版本 v4.12.10</li>
<li>内核安装完成后，系统中会装有 <code>linux-ml-4.12.10</code> <code>linux-ml-devel-4.12.10</code> <code>linux-ml-headers-4.12.10</code> 三个内核</li>
<li>内核安装完成后，系统中依旧会留有旧版本的 linux-x.xx.xx-ml 内核，这些残留的内核，会在执行第二个选项 “安装并启用算法” 后被移除</li>
</ul>
<p>确认内核更换完成后，<code>重启你的 vps</code>。</p>
<p>重启开机后，<code>再次运行该脚本，选择第二项: 安装并开启算法</code>。</p>
<h3 id="开启算法"><a href="#开启算法" class="headerlink" title="开启算法"></a><a href="https://github.com/tcp-nanqinlang/wiki/wiki/general#%E5%BC%80%E5%90%AF%E7%AE%97%E6%B3%95"></a>开启算法</h3><p>用于编译并启用魔改 BBR 算法。</p>
<h3 id="检查运行状态"><a href="#检查运行状态" class="headerlink" title="检查运行状态"></a><a href="https://github.com/tcp-nanqinlang/wiki/wiki/general#%E6%A3%80%E6%9F%A5%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81"></a>检查运行状态</h3><p>用于检查 tcp_nanqinlang 是否已被 加载 (installed) 和 启用 (running)。</p>
<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a><a href="https://github.com/tcp-nanqinlang/wiki/wiki/general#%E5%8D%B8%E8%BD%BD"></a>卸载</h3><p>不会删除已安装的内核，仅移除 sysctl.conf 中的相关设置项。然后重启机器后，魔改 BBR 才会停止运作</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>BBR</tag>
        <tag>BBR魔改版</tag>
      </tags>
  </entry>
  <entry>
    <title>魔改BBR一键脚本合集</title>
    <url>/2018/10/07/%E9%AD%94%E6%94%B9bbr%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<p><strong>第一部分：OPENVZ平台</strong></p>
<p>一、OpenVZ 平台 Google BBR（魔改） 一键安装脚本</p>
<p>来源：<a href="https://blog.kuoruan.com/116.html"><strong>扩软</strong></a></p>
<p>安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/kuoruan/shell-scripts/master/ovz-bbr/ovz-bbr-installer.sh</span><br><span class="line">chmod +x ovz-bbr-installer.sh</span><br><span class="line">./ovz-bbr-installer.sh</span><br></pre></td></tr></table></figure>

<p>卸载：.&#x2F;ovz-bbr-installer.sh uninstall</p>
<p>修改端口配置：vi &#x2F;usr&#x2F;local&#x2F;haproxy-lkl&#x2F;etc&#x2F;port-rules 。在文件里添加需要加速的端口，每行一条，可以配置单个端口或者端口范围，以 # 开头的行将被忽略。 例如：8800 或者 8800-8810 配置完成之后，只需要重启 haproxy-lkl 即可。使用 systemctl 或者 service 命令来启动、停止和重启 HAporxy-lkl：</p>
<p>systemctl {startstoprestart} haproxy-lkl</p>
<p>或</p>
<p>service haproxy-lkl {startstoprestart}</p>
<p><strong>二、OpenVZ平台魔改BBR一键脚本之Rinetd方式</strong></p>
<p>来源：<a href="https://sometimesnaive.org/article/54">南琴浪</a>  <a href="https://github.com/nanqinlang-tcp/tcp_nanqinlang/tree/master/Rinetd/bash">GITHUB项目地址</a></p>
<p>优点：Rinetd就是另外一种lkl bbr，好处是不需要开启TUN&#x2F;TAP，对于后台没有或者找不到这个模块的，刚好可以用一下。</p>
<p><strong>缺点：不支持IP段加速，每个要加速的端口都需要单独配置。</strong></p>
<p>更新： 2018-03-24 新增 多网卡 适配</p>
<p><strong>Debian or Ubuntu</strong></p>
<p>单网卡（单 IP） 服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/nanqinlang-tcp/tcp_nanqinlang/master/Rinetd/bash/tcp_nanqinlang-rinetd-debian+ubuntu.sh</span><br><span class="line">bash tcp_nanqinlang-rinetd-debian+ubuntu.sh</span><br></pre></td></tr></table></figure>

<p>多网卡（多 IP） 服务器，会为所有网卡（所有 IP）提供加速：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/nanqinlang-tcp/tcp_nanqinlang/master/Rinetd/bash/tcp_nanqinlang-rinetd-debian+ubuntu-multiNIC.sh</span><br><span class="line">bash tcp_nanqinlang-rinetd-debian+ubuntu-multiNIC.sh</span><br></pre></td></tr></table></figure>

<p>CentOS 7</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 单网卡</span><br><span class="line">wget https://raw.githubusercontent.com/nanqinlang-tcp/tcp_nanqinlang/master/Rinetd/bash/tcp_nanqinlang-rinetd-centos.sh</span><br><span class="line">bash tcp_nanqinlang-rinetd-centos.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行脚本会出现下面几个选项：</p>
<p><strong>安装 rinetd-bbr</strong></p>
<p>此脚本会在&#x2F;home&#x2F;tcp_nanqinlang进行安装，所以安装完成后不要动这个文件夹了（除非你想修改端口）。安装过程中，会提示输入端口号。多个端口号用空格隔开。<strong>不支持端口段。</strong>安装完成后，会开启 rinetd-bbr。以后重启机器也会随开机自启。使用前请注意自己的 iptables 相关设置。</p>
<h3 id="检查-rinetd-bbr-运行状态"><a href="#检查-rinetd-bbr-运行状态" class="headerlink" title="检查 rinetd-bbr 运行状态"></a><strong>检查 rinetd-bbr 运行状态</strong></h3><p>此命令用于检查 rinetd-bbr 运行与否，可通过返回的提示判断。</p>
<h3 id="卸载-rinetd-bbr"><a href="#卸载-rinetd-bbr" class="headerlink" title="卸载 rinetd-bbr"></a><strong>卸载 rinetd-bbr</strong></h3><p>运行此命令会删除 &#x2F;home&#x2F;tcp_nanqinlang 、移除 rc.local 对应开机自启项和清空 iptables raw 表。属于完整卸载，不会有残留。且卸载后无需重启。</p>
<p><strong>三、OpenVZ 魔改 BBR - LKL 一键脚本</strong></p>
<p>来源：<a href="https://sometimesnaive.org/article/39">南琴浪</a> <a href="https://github.com/tcp-nanqinlang">GITHUB项目地址</a></p>
<p>优点：支持IP段加速</p>
<p>安装方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Debian 8+</span><br><span class="line"># 64 bit</span><br><span class="line"># ldd &gt; = 2.14</span><br><span class="line"># tun/tap enabled</span><br><span class="line">wget https://github.com/tcp-nanqinlang/lkl-haproxy/releases/download/1.1.1/tcp_nanqinlang-haproxy-debian.sh</span><br><span class="line">bash tcp_nanqinlang-haproxy-debian.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> </p>
<p>以下进行脚本使用说明：</p>
<h3 id="安装-LKL"><a href="#安装-LKL" class="headerlink" title="安装 LKL"></a>安装 LKL</h3><p>此命令用于安装 LKL。</p>
<p>在&#x2F;home&#x2F;tcp_nanqinlang进行安装，所以安装完成后不要动这个文件夹了（除非你想修改端口）。</p>
<p>安装过程中，会提示你选择</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单个端口</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">端口段</span><br></pre></td></tr></table></figure>

<p>输入，具体已在运行脚本的提示中有说明，这里不再赘述。</p>
<p>安装完成后，会开启 LKL。以后重启机器也会随开机自启。</p>
<p>以后若需要修改转发端口，请将&#x2F;home&#x2F;tcp_nanqinlang&#x2F;haproxy.cfg中的端口号和&#x2F;home&#x2F;tcp_nanqinlang&#x2F;redirect.sh中的端口号改为你想要的端口或端口段，修改完成后重启服务器。</p>
<p>使用前请注意自己的 iptables 相关设置。</p>
<h3 id="检查-LKL-运行状态"><a href="#检查-LKL-运行状态" class="headerlink" title="检查 LKL 运行状态"></a>检查 LKL 运行状态</h3><p>此命令用于检查 LKL 运行与否，可通过返回的提示判断。</p>
<h3 id="卸载-LKL"><a href="#卸载-LKL" class="headerlink" title="卸载 LKL"></a>卸载 LKL</h3><p>运行此命令会卸载 haproxy、删除 &#x2F;home&#x2F;tcp_nanqinlang、移除 rc.local 开机自启项。稍后请自行移除iptables相关规则。</p>
<p>该脚本项目最新的地址是：<a href="https://github.com/tcp-nanqinlang">https://github.com/tcp-nanqinlang</a></p>
<h2 id="第二部分：KVM平台、独服"><a href="#第二部分：KVM平台、独服" class="headerlink" title="第二部分：KVM平台、独服"></a><strong>第二部分：KVM平台、独服</strong></h2><p>一、BBR+BBR魔改+Lotsever(锐速)一键脚本 for Centos&#x2F;Debian&#x2F;Ubuntu</p>
<p>来源：<a href="https://www.94ish.net/1635.html">千影</a></p>
<p>支持系统 Centos 6+ &#x2F; Debian 7+ &#x2F; Ubuntu 14+ BBR魔改版不支持Debian 8</p>
<p>安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot;</span><br><span class="line">chmod +x tcp.sh</span><br><span class="line">./tcp.sh</span><br></pre></td></tr></table></figure>

<p><a href="https://maijiaoben.com/wp-content/uploads/2018/03/1.png"><img src="https://maijiaoben.com/wp-content/uploads/2018/03/1.png" alt="魔改BBR一键安装"></a></p>
<p>魔改BBR一键安装</p>
<p>说明：运行脚本后会出现上图的界面。安装魔改BBR先选择1安装对应内核，安装完毕后重启机器，然后再进入脚本目录重新执行脚本，选择4安装魔改BBR。</p>
<p>如果出现下图界面，需要选<strong>NO</strong>：</p>
<p><a href="https://maijiaoben.com/wp-content/uploads/2018/03/2.png"><img src="https://maijiaoben.com/wp-content/uploads/2018/03/2-1024x677.png" alt="此界面要选NO"></a></p>
<p>此界面要选NO</p>
]]></content>
      <categories>
        <category>Linux教程</category>
      </categories>
      <tags>
        <tag>BBR</tag>
        <tag>BBR魔改版</tag>
      </tags>
  </entry>
</search>
